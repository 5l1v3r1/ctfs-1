===========================================================================
 * ROP gadgets generated by ROPEME * 
===========================================================================
 + Binary info
---------------------------------------------------------------------------
hash: 50390b2ae8aaa73c47745040f54e602f
name: libc6_2.27-3ubuntu1_amd64.so
arch: x86_64
type: ELF
base address: 0x212d0
code size: 1542508
code offset: 0x212d0
gadget depth: 6
gadget count: 16893
---------------------------------------------------------------------------
 + Unique gadgets: (offset : instructions)
---------------------------------------------------------------------------
0x0000003f : ret
0x00008d8a : ret 5
0x000002bb : ret 0
0x00002e4a : ret 1
0x0001119a : ret 2
0x0002f342 : ret 3
0x00018108 : ret 4
0x0012d5b3 : ret 6
0x000015ca : ret 7
0x00018168 : ret 8
0x000dbaca : ret 9
0x0014b49d : jmp r9
0x0000cfb7 : jmp rsi
0x000877e9 : jmp r10
0x00112bed : jmp rbx
0x0001b495 : jmp rdx
0x00046faa : ret 0xb
0x0002f04d : ret 0xc
0x0014a46e : ret 0xf
0x00037706 : ret 0xd
0x0007cd8b : ret 0xe
0x00078b52 : jmp rcx
0x0000d4b6 : jmp rdi
0x00175811 : jmp rbp
0x0013bea3 : call r8
0x00000c01 : jmp rax
0x0000b6f3 : call rdx
0x00096f6a : ret 0x10
0x000018bd : call rbx
0x00001bc1 : call rsi
0x00030315 : ret 0x39
0x000f6e93 : jmp [r8]
0x000008c5 : call rax
0x0012cbaa : ret 0xe7
0x00046979 : ret 0x14
0x0003aa15 : ret 0x15
0x0003888f : ret 0x17
0x0005a894 : ret 0x13
0x0000dc07 : ret 0x18
0x0004f89e : ret 0x1d
0x000a88b8 : ret 0x1f
0x00015e92 : ret 0x1b
0x001367ba : ret 0x1c
0x000481c2 : ret 0x11
0x0000f6bb : ret 0x3b
0x0009feba : ret 0xf8
0x0003a22e : ret 0x38
0x000bf2cf : ret 0x30
0x000ad3db : ret 0x31
0x0005d90f : ret 0x36
0x0007d914 : ret 0x34
0x0006af0a : ret 0x35
0x0005f2b2 : ret 0xe8
0x00023134 : ret 0x3a
0x0009c8f9 : ret 0x32
0x0000c37a : call rcx
0x00132b1c : ret 0x29
0x0013d124 : ret 0x28
0x0001cf93 : ret 0xb8
0x00003fca : call rdi
0x00003fc9 : call r15
0x00001bc0 : call r14
0x00128d0d : call r10
0x00002246 : call r13
0x00004d67 : call r12
0x0004d9ec : ret 0x21
0x00053822 : ret 0x2e
0x000ed91d : ret 0x2d
0x000fd9ac : ret 0x2c
0x00004d68 : call rsp
0x00000856 : call rbp
0x00150b6e : ret 0x80
0x000e95d5 : jmp [rdi]
0x00027d1d : jmp [rcx]
0x0003ee87 : jmp [rsi]
0x00055bab : jmp [rbp]
0x000e9642 : jmp [rdx]
0x00020ff1 : jmp [rax]
0x000729bb : call [rcx]
0x0001f8ea : call [rbx]
0x00070088 : call [r13]
0x00063989 : call [rdx]
0x000700a5 : call [rbp]
0x0007de5b : int1 ; ret
0x000039fa : call [rax]
0x0000bab8 : call [rsi]
0x00136b8e : call [r10]
0x00033533 : leave ; ret
0x000e1bf0 : popfq ; ret
0x000026c2 : pop r12; ret
0x0000128d : neg eax; ret
0x000226f8 : pop rax; ret
0x00000083 : pop rbp; ret
0x0010f3e6 : pop rdx; ret
0x000026c3 : pop rsp; ret
0x0010f3e5 : pop r10; ret
0x00002b99 : pop r14; ret
0x0000b879 : pop rbx; ret
0x0001d83b : pop rcx; ret
0x00087038 : div ebx; ret
0x0000028f : pop rdi; ret
0x00002b9a : pop rsi; ret
0x00000775 : pop r13; ret
0x0000028e : pop r15; ret
0x000b16a5 : syscall ; ret
0x00082c6f : push rbp; ret
0x0013b345 : jmp [rax + 8]
0x000e1721 : jmp [rbp + 4]
0x0001cd1d : push rax; ret
0x000e14e5 : jmp [rdx + 4]
0x0001cfdf : push rsi; ret
0x0013e1e1 : jmp [rcx + 5]
0x000f1e75 : jmp [rsi + 3]
0x000d3b3b : push rcx; ret
0x000c3065 : push rdi; ret
0x0001ca2c : push rbx; ret
0x00003ba4 : push rsp; ret
0x000f94ed : jmp [rax - 1]
0x000e14d9 : jmp [rbx + 4]
0x000e14ed : jmp [rax + 4]
0x0008fe98 : add al, 7; ret
0x00064d45 : call [r13 + 8]
0x0002de40 : dec [rcx]; ret
0x0009a765 : int1 ; jmp rcx
0x001141ea : call [rbp - 1]
0x0006beb1 : mov dh, 2; ret
0x00065048 : call [rax + 8]
0x00064d46 : call [rbp + 8]
0x00113a62 : bswap eax; ret
0x0007cb4c : xor al, 0; ret
0x000e1811 : call [rbp + 4]
0x0005ab20 : add al, 1; ret
0x000e1479 : call [rcx + 4]
0x000e539e : dec [rdi]; ret
0x000f7b00 : inc [rax]; ret
0x00068f83 : mov dh, 0; ret
0x000afb28 : add eax, 2; ret
0x0007dbfb : add eax, 1; ret
0x00083b96 : add bh, dh; ret
0x000afb80 : mov rax, 3; ret
0x00071278 : add dh, dh; ret
0x000d9bed : jmp [rbx - 0xe]
0x001711f1 : jmp [rdx - 0xf]
0x00031273 : mov eax, 1; ret
0x000339c7 : mov eax, 2; ret
0x00001001 : jmp [rsi + 0xf]
0x000afb27 : add rax, 2; ret
0x0010fed1 : add cl, cl; ret
0x0003cbdd : jmp [rdi + rcx]
0x000afbc1 : mov eax, 7; ret
0x0001cb27 : add esp, 8; ret
0x000afba1 : mov eax, 5; ret
0x000a7832 : mov dh, dh; ret
0x0009f7b7 : xor al, ch; ret
0x000afbb1 : mov eax, 6; ret
0x00099f43 : sub rax, 1; ret
0x000cec13 : add eax, 8; ret
0x00171640 : jmp [r10 - 0xf]
0x000afb40 : add rax, 3; ret
0x0001cb26 : add rsp, 8; ret
0x000afb41 : add eax, 3; ret
0x00087193 : leave ; jmp rcx
0x0000ef3a : adc bl, dh; ret
0x000afb60 : mov rax, 1; ret
0x00003b37 : add al, ch; ret
0x0009cd76 : int1 ; call rbx
0x000f3778 : xor ax, ax; ret
0x00001980 : mov eax, 8; ret
0x000afb81 : mov eax, 3; ret
0x000afbb0 : mov rax, 6; ret
0x00128ea7 : int1 ; call r10
0x000afb91 : mov eax, 4; ret
0x0000063f : add bl, dh; ret
0x00090e88 : jmp [r14 + 0xf]
0x000afb30 : add rax, 1; ret
0x0001cd52 : sub cl, al; ret
0x0003192f : sub eax, 1; ret
0x0002c5e7 : sub al, ch; ret
0x00013e50 : xor cl, ch; ret
0x000afb70 : mov rax, 2; ret
0x0009bced : mov dh, bl; ret
0x000afba0 : mov rax, 5; ret
0x000aee4a : add bh, bh; ret
0x00062f7d : add dh, bl; ret
0x000ec332 : jmp [rax + 0xf]
0x000e3bc1 : adc cl, ch; ret
0x00008535 : add cl, ch; ret
0x000d071b : push rdi; ret 0
0x0015dcde : add bl, al; ret
0x00024967 : add ch, al; ret
0x000afb90 : mov rax, 4; ret
0x000afbc0 : mov rax, 7; ret
0x0004e50c : jmp [rbp + 0x31]
0x00046628 : jmp [rsi + 0x44]
0x00077719 : pop r15; jmp rax
0x00102678 : jmp [rdi + 0x6d]
0x00161c6c : sbb eax, -1; ret
0x00025faf : jmp [rbp + 0x49]
0x0003fcc2 : jmp [rsi + 0x75]
0x001716f3 : jmp [rdx + 0x71]
0x0000099d : jmp [rsi - 0x70]
0x0001daec : mov rax, -1; ret
0x00081a9b : call [rdi + rcx]
0x001716b1 : jmp [r10 - 0x2f]
0x0005fc9b : pop rsp; jmp rax
0x000295ae : call [rax + rax]
0x000bdf01 : jmp [rbx + 0x41]
0x00040028 : jmp [rdi + 0x75]
0x0006bbb6 : add al, bpl; ret
0x0007771a : pop rdi; jmp rax
0x00001ee5 : jmp [rsi + 0x2e]
0x0000b4a7 : jmp [rsi + 0x41]
0x0005f97f : pop rbp; jmp rax
0x00003b1d : jmp [rcx + 0x19]
0x001354d6 : pop rax; jmp rcx
0x0003e89d : jmp [rsi - 0x7f]
0x00087379 : jmp [rsi - 0x77]
0x000e391c : jmp [rax + 0x74]
0x000e65ed : jmp [rsi + 0x45]
0x0012aef5 : pop rbp; jmp rcx
0x00171592 : jmp [rdx + 0x51]
0x001690e2 : sub rax, r8; ret
0x00078b51 : pop rsi; jmp rcx
0x0000aa1a : leave ; call r15
0x0013c5fc : jmp [rax + 0x40]
0x001716ab : jmp [rdx - 0x2f]
0x001716f9 : jmp [r10 + 0x71]
0x0002e7e6 : add bl, sil; ret
0x000764a6 : pop rsi; jmp rax
0x0013c604 : jmp [rax + 0x48]
0x00161c6b : sbb rax, -1; ret
0x000e602a : jmp [rsi - 0x7d]
0x000e3942 : jmp [rax + 0x44]
0x0011991f : jmp [rsi + 0x3d]
0x000e4032 : jmp [rsi - 0x3f]
0x000992a1 : call [rdx + 0xf]
0x000d36c8 : jmp [rsi + 0x25]
0x0003a779 : call [rbx + 0xf]
0x0004293c : jmp [rsi - 0x7b]
0x0003fca6 : jmp [rdi + 0x74]
0x0012c782 : pop rbp; jmp rdx
0x0004db53 : jmp [rbp - 0x47]
0x000764a5 : pop r14; jmp rax
0x00078b50 : pop r14; jmp rcx
0x0005fc9a : pop r12; jmp rax
0x0006cc04 : pop rbx; jmp rax
0x00088b7c : sub eax, ecx; ret
0x000c67a1 : call [r14 + 0x30]
0x00062a7f : call [rdi + 0x18]
0x0005ff64 : call [rax + 0x58]
0x00022619 : sub eax, edx; ret
0x0010457c : adc ebx, esi; ret
0x00103223 : add [rax], 1; ret
0x00060bf6 : mov rax, rdi; ret
0x0009bcd2 : add al, 0x75; ret
0x0012e73e : call [r13 + 0x40]
0x00000c58 : add rax, [0]; ret
0x00135674 : pop rax; call rax
0x0006a39f : call [rbp + 0x70]
0x001005bc : pop rdi; call rax
0x00122669 : mov [rdx], 0; ret
0x0010b775 : call [rbp + 0x28]
0x000904f5 : xor rax, rax; ret
0x0006a096 : call [rax + 0x40]
0x00074cf5 : call [rdx + 0x35]
0x000632af : add al, 0x3a; ret
0x0005ff3a : call [r13 + 0x58]
0x0000b8b9 : call [rbx + 0x48]
0x000e1257 : call [r14 + 0x40]
0x0010d501 : call [rsi + 0x75]
0x000c6451 : call [rsi + 0x28]
0x00068ffd : call [rbx + 0x60]
0x001375e3 : call [rdx + 0x20]
0x0005fda9 : call [rbp + 0x48]
0x0009014a : add al, 0x37; ret
0x0006be74 : call [r13 + 0x70]
0x0003a261 : call [rdi + 0x38]
0x0001bf7b : mov rax, rcx; ret
0x00103c4f : add ebx, esi; ret
0x000f7dcd : call [rax + 0x2d]
0x000dc3c8 : xor al, 0x39; ret
0x0001d9de : int 0x90; jmp rdx
0x00037524 : mov eax, esi; ret
0x00140d7f : call [rbx - 0x75]
0x000f147e : add al, 0x89; ret
0x000623bf : call [rbp + 0x20]
0x0013134a : call [rax + 0x48]
0x0006d3cf : call [r15 + 0x20]
0x0003b9e3 : call [rax - 0x18]
0x000bde8f : call [rbx - 0x77]
0x00023128 : xor eax, ecx; ret
0x0008af4d : add eax, esi; ret
0x0005d752 : call [rax + 0x20]
0x0003a22d : pop rdi; ret 0x38
0x0014068e : call [rbx + 0x49]
0x0004790d : call [rdx + 0x14]
0x0005041c : jmp [rdi + rdi*2]
0x0005fad6 : call [r14 + 0x48]
0x0007d95d : sub dh, bh; ret 0
0x0012c90e : mov [r14], 0; ret
0x0012ca19 : call [rax + 0x30]
0x0012e73f : call [rbp + 0x40]
0x000f288b : add al, 0xf6; ret
0x000c7925 : call [rbx + 0x40]
0x00168e8c : sub rax, rsi; ret
0x0001bfa3 : call [rbx + 0x74]
0x00037b23 : call [rbp + 0x38]
0x0000f1e6 : mov bh, 0xc0; ret
0x0003a260 : call [r15 + 0x38]
0x0005fad7 : call [rsi + 0x48]
0x0004c370 : jmp [rdi + rax*8]
0x0003d434 : call [rsi + 0x38]
0x0012dda6 : call [r13 + 0x10]
0x0007fd87 : add eax, ebp; ret
0x0006d3d0 : call [rdi + 0x20]
0x0012d97e : add eax, edx; ret
0x000e4bf7 : call [rax + 0x49]
0x000ee88b : add al, 0xf3; ret
0x0000129e : mov eax, edi; ret
0x00127ec7 : mov al, 0xe8; ret
0x0008a729 : add eax, ecx; ret
0x0005ff3b : call [rbp + 0x58]
0x00062f93 : call [rax + 0x68]
0x0000bac1 : call [rbp + 0x53]
0x0012affe : call [rax + 0x28]
0x0011fd5d : mov eax, r8d; ret
0x00069774 : call [rdi + 0x40]
0x0008a728 : add rax, rcx; ret
0x000904e8 : sub rax, rdi; ret
0x00043a16 : add al, 0x39; ret
0x0009a872 : mov eax, eax; ret
0x000d2e30 : mov eax, 0xc; ret
0x000dc42c : sub al, 0x39; ret
0x00037e42 : call [rax + r9*8]
0x00005cfe : xor al, 0xf6; ret
0x000e1258 : call [rsi + 0x40]
0x00037523 : mov rax, rsi; ret
0x0000f588 : add al, 0xb8; ret
0x00064409 : call [r13 + 0x18]
0x0012c9a0 : mov [rsi], 8; ret
0x000d35ce : call [rbx - 0x41]
0x00121624 : adc al, 0x78; ret
0x0012b10b : call [rax + 0x10]
0x0003d433 : call [r14 + 0x38]
0x0002262d : sub rax, rdx; ret
0x000fb8dc : add ecx, ebx; ret
0x000c6450 : call [r14 + 0x28]
0x00071787 : call [rbx + 0x50]
0x00122668 : mov [r10], 0; ret
0x00168e8d : sub eax, esi; ret
0x00070c50 : call [rax + 0x31]
0x000ee4ac : add esi, ebx; ret
0x0006495f : call [r13 + 0x20]
0x0001e6ac : mov dh, 0xc0; ret
0x000c362b : xor al, 0xf3; ret
0x00000c59 : add eax, [0]; ret
0x00031989 : mov rax, rdx; ret
0x00038234 : call [rbx + 0x38]
0x0006bc7d : call [r14 + 0x78]
0x001133a8 : call [rbp + 0x10]
0x000404e4 : mov eax, r9d; ret
0x0000004d : call [rcx + 0x14]
0x000317b9 : adc eax, eax; ret
0x00062569 : call [rax + 0x18]
0x0008af4c : add rax, rsi; ret
0x0010a62a : call [rbx + 0x28]
0x00064156 : call [rsi + 0x70]
0x000388e5 : call [rax + 0x38]
0x0012d9ec : call [rbx + 0x10]
0x00037b22 : call [r13 + 0x38]
0x000c678d : call [r14 + 0x20]
0x0006bdde : call [r14 + 0x18]
0x00070e80 : call [rsi + 0x50]
0x0012c90f : mov [rsi], 0; ret
0x000d3476 : add sil, sil; ret
0x000438db : add al, 0x83; ret
0x0001cd1c : call [rax - 0x3d]
0x0010b774 : call [r13 + 0x28]
0x000cebd5 : add eax, eax; ret
0x0005fda8 : call [r13 + 0x48]
0x0012030d : mov rdx, rax; ret
0x0006bc7e : call [rsi + 0x78]
0x00064155 : call [r14 + 0x70]
0x00063e94 : call [rbp + 0x18]
0x0008252e : mov dh, 0x45; ret
0x00062a7e : call [r15 + 0x18]
0x0009024e : add al, 0x31; ret
0x00069773 : call [r15 + 0x40]
0x000d50bc : mov bl, 0xe9; ret
0x0012bcd8 : call [rbx + 0x18]
0x0010bfde : call [r10 + 0x28]
0x000dc257 : add ebp, eax; ret
0x000f6e91 : inc esi; jmp [r8]
0x000649a0 : call [r13 + 0x30]
0x000631b4 : call [rbp + 0x30]
0x000edbd4 : call [rbx + 0x4c]
0x0006a85c : call [rax + 0x78]
0x00143ec2 : call [rbx + 0x41]
0x0001bf7c : mov eax, ecx; ret
0x0011c54f : mov cl, 0x35; ret
0x0005d5aa : call [rbp + 0x60]
0x0012030e : mov edx, eax; ret
0x000d549b : add esi, esi; ret
0x00074ef5 : call [rax + 0x35]
0x0001ee71 : mov eax, edx; ret
0x00122692 : mov [rax], 0; ret
0x000871a4 : add eax, edi; ret
0x0004080b : call [rax + r8*8]
0x001690e3 : sub eax, eax; ret
0x000f5204 : sub esi, ebx; ret
0x0001e628 : xor eax, eax; ret
0x000062d5 : add bh, dh; ret 0
0x000d05bf : add bh, dh; ret 8
0x000871a3 : add rax, rdi; ret
0x000904e9 : sub eax, edi; ret
0x00082c6e : mov dh, 0x55; ret
0x0012cdd5 : jmp [rdx + rax*8]
0x0004840c : call [rax - 0x75]
0x000601d8 : call [rbp + 0x68]
0x0004449b : call [rdx + rax*8]
0x000662c4 : add esp, 0x80; ret
0x0002b5bc : add [rax], bh; ret
0x0000f1e5 : movzx eax, ax; ret
0x00037e43 : call [rax + rcx*8]
0x00068ef7 : add esp, 0x48; ret
0x0001e6ab : movzx eax, al; ret
0x0002eab1 : add esp, 0xd8; ret
0x00023089 : mov [rdi], r8; ret
0x00099622 : mov [rdi], ch; ret
0x0012dda9 : adc [rcx], bh; ret
0x000eec04 : add esp, 0x78; ret
0x000c53f2 : mov eax, 0xfa; ret
0x0009a2ab : mov [rdi], cl; ret
0x00141aec : mov eax, 0xca; ret
0x000c54f6 : mov eax, 0x40; ret
0x0001cc6a : movd mm0, eax; ret
0x0000f6ba : push rdx; ret 0x3b
0x0009a6df : mov [rdi], cx; ret
0x0011fef7 : mov [r9], rdi; ret
0x00103756 : sub [rcx], bh; ret
0x0004080c : call [rax + rax*8]
0x000ee9de : add rsp, 0x68; ret
0x000bfbae : add esp, 0x38; ret
0x000dc926 : sub r8b, r13b; ret
0x0001d891 : add rsp, 0x18; ret
0x0010330f : mov [rdx], ax; ret
0x0001d892 : add esp, 0x18; ret
0x0004449a : call [r10 + rax*8]
0x00079c20 : mov eax, 0x16; ret
0x00103bd8 : add esp, 0x40; ret
0x0002e30e : dec [rax + 1]; ret
0x000c1e3d : add [rdi], cl; ret
0x00177be4 : dec [rax + 9]; ret
0x0006ebbd : add [rcx], al; ret
0x000aa927 : add [rcx], bh; ret
0x0002eab0 : add rsp, 0xd8; ret
0x000eeaf9 : add rsp, 0x58; ret
0x0005ab80 : mov eax, 0x10; ret
0x000c53d2 : mov eax, 0x7f; ret
0x000ce40d : xchg eax, esi; ret
0x0001f22f : add rsp, 0xa8; ret
0x0006169e : mov [rcx], bh; ret
0x00068ef6 : add rsp, 0x48; ret
0x000662c3 : add rsp, 0x80; ret
0x0001cc69 : movd mm0, rax; ret
0x00127ec6 : mov r8b, 0xe8; ret
0x000bfbad : add rsp, 0x38; ret
0x0002598e : xchg eax, esp; ret
0x00079581 : sub rax, 0x10; ret
0x0007baf0 : xchg eax, ebx; ret
0x0004d7fd : xchg eax, edi; ret
0x000955d0 : mov [rdi], dh; ret
0x00066539 : mov eax, r10d; ret
0x0011ef06 : add eax, 0x10; ret
0x00000a5f : add esp, 0x98; ret
0x0015dd00 : mov [rcx], dx; ret
0x000000a6 : add [rax], al; ret
0x000962a2 : mov [rdi], dl; ret
0x000c657c : dec [rcx + 1]; ret
0x000ee9df : add esp, 0x68; ret
0x000eec03 : add rsp, 0x78; ret
0x00001938 : push rax; call rbx
0x000eeafa : add esp, 0x58; ret
0x000c08f8 : push rbx; ret 0x30
0x000aee49 : add dil, r15b; ret
0x00000a5e : add rsp, 0x98; ret
0x00079582 : sub eax, 0x10; ret
0x000955e3 : mov [rdi], dx; ret
0x0007c68a : movsx eax, dl; ret
0x00133a9a : xchg eax, edx; ret
0x00103bd7 : add rsp, 0x40; ret
0x00031fb8 : mov [rdi], r9; ret
0x0012266a : add al, [rax]; ret
0x0015dcf0 : mov [rcx], dl; ret
0x000c5410 : mov eax, 0x7e; ret
0x0009a2d9 : mov [rdi], si; ret
0x0003685d : add [rcx], ch; ret
0x0001cf52 : add rsp, 0x28; ret
0x0001f230 : add esp, 0xa8; ret
0x0001cf53 : add esp, 0x28; ret
0x00002e5f : xchg eax, ebp; ret
0x0000f3c7 : mov eax, 0x200; ret
0x00160054 : lea rax, [rdx]; ret
0x0001dabf : add rsp, 0x148; ret
0x0003378a : mov [rdi], rsi; ret
0x0007cb7f : add rsp, 8; jmp rax
0x0007d986 : add dil, sil; ret 0
0x00075d86 : mov [rax], edi; ret
0x000700a1 : neg rdi; call [r13]
0x0006169d : mov [rcx], dil; ret
0x000fd52e : add esp, 0x418; ret
0x0001dbde : add esp, 0x118; ret
0x0004812d : mov esi, 1; jmp rax
0x0001debc : push [rbx + 1]; ret
0x0011ef2e : mov [rsi], edi; ret
0x00160055 : lea eax, [rdx]; ret
0x0003020e : int1 ; pop rbx; ret
0x0012c980 : mov [rsi], 0xb; ret
0x0009a3f1 : adc [rbx], esp; ret
0x0006081c : mov eax, [rdx]; ret
0x00121870 : add [rcx], edi; ret
0x00048c4d : mov edi, 1; jmp rax
0x00086dc5 : mov [rdx], ecx; ret
0x000230a6 : mov [rsi], edx; ret
0x0003b13c : mov r8d, 1; jmp rax
0x0015dd01 : mov [rcx], edx; ret
0x0002308a : mov [rdi], eax; ret
0x000dfeda : mov [rdx], rdi; ret
0x001249c8 : mov rax, [rax]; ret
0x0001dac0 : add esp, 0x148; ret
0x00131cdb : adc [rdx], eax; ret
0x0003a519 : mov r9d, 1; jmp rax
0x0003a51a : mov ecx, 1; jmp rax
0x00096bd3 : lea eax, [rdi]; ret
0x0001ce96 : mov [rdi], ecx; ret
0x0014cf50 : push rdi; cld ; ret
0x000bee50 : mov eax, [rdi]; ret
0x0001cce4 : adc [rdi], ecx; ret
0x000fd52d : add rsp, 0x418; ret
0x00096bd2 : lea rax, [rdi]; ret
0x0011ef2d : mov [rsi], rdi; ret
0x00061527 : mov [rcx], eax; ret
0x0011f7c0 : mov eax, 0x101; ret
0x0001d01c : movd xmm0, eax; ret
0x0001cc68 : movq xmm0, rax; ret
0x0007cb80 : add esp, 8; jmp rax
0x0001dbdd : add rsp, 0x118; ret
0x0003378b : mov [rdi], esi; ret
0x0009a478 : adc [rbx], eax; ret
0x001249c9 : mov eax, [rax]; ret
0x00095656 : mov [rdi], rcx; ret
0x0011fef8 : mov [rcx], edi; ret
0x0014b49a : add r9, r11; jmp r9
0x000aa9ee : add [rcx], dil; ret
0x00086f1b : mov [rdi], rdx; ret
0x0014cdd8 : push rdi; clc ; ret
0x00075d85 : mov [rax], rdi; ret
0x000700a2 : neg edi; call [r13]
0x000dfedb : mov [rdx], edi; ret
0x00099acd : add [rax], r8b; ret
0x0000eed4 : mov [rax], rdx; ret
0x00086dc4 : mov [rdx], rcx; ret
0x0003b13d : mov eax, 1; jmp rax
0x0012c990 : mov [rsi], 0xa; ret
0x0000f66d : mov [rdx], eax; ret
0x0012c9b0 : mov [rsi], 0xc; ret
0x0000f66c : mov [rdx], rax; ret
0x0000eed5 : mov [rax], edx; ret
0x000009c5 : sbb [rax], eax; ret
0x0015dd60 : mov [rcx], rdx; ret
0x000fbf08 : mov esi, 2; jmp rax
0x0001d1d6 : mov [rdi], edx; ret
0x0011f7d8 : mov eax, 0x100; ret
0x00048c4c : mov r15d, 1; jmp rax
0x00087336 : add rdx, r8; jmp rdx
0x000877e7 : adc al, 0xa; jmp r10
0x001202f6 : movsxd rdx, esi; ret
0x0000cfb4 : add rsi, r8; jmp rsi
0x000c5400 : mov eax, 0x7d00; ret
0x000956c5 : movq [rdi], mm0; ret
0x000d32f3 : div [rdx - 0xa]; ret
0x000c5440 : mov eax, 0xfc17; ret
0x00152e75 : movq [rdi], mm1; ret
0x0000bab7 : push rbp; call [rsi]
0x00048c72 : mov r8, rcx; jmp rax
0x000fbeeb : mov esi, 1; call rbp
0x00168e34 : movsxd rax, ecx; ret
0x000c5432 : mov eax, 0xfffa; ret
0x00087191 : add rcx, r9; jmp rcx
0x000f7afd : mov [r8 - 1], 0; ret
0x0014b49b : add ecx, ebx; jmp r9
0x000af5f7 : push -0xfb872b8; ret
0x000fbc98 : mov [rax], 0x16; ret
0x00000c57 : add rax, fs:[0]; ret
0x000dac3b : add rdx, r10; jmp rdx
0x000afec9 : pop r12; pop r14; ret
0x0001cf0b : addps xmm0, xmm0; ret
0x000474ff : add rax, rcx; jmp rax
0x0006d6f3 : xor edx, edx; jmp rax
0x000fb38c : pop rdx; pop rbx; ret
0x0012d1b0 : xor eax, eax; jmp rcx
0x00010133 : add rax, r13; jmp rax
0x0001b493 : add edx, edi; jmp rdx
0x0001e58c : stosd [rdi], eax; ret
0x000ba324 : inc [rbp - 0x77]; ret
0x00087192 : add ecx, ecx; jmp rcx
0x00010134 : add eax, ebp; jmp rax
0x0003ab40 : add eax, esi; jmp rax
0x0003cc64 : push -0x16000014; ret
0x0010f3e4 : pop rdx; pop r10; ret
0x0007274e : dec [rcx - 0x7b]; ret
0x0010f409 : pop rdx; pop rsi; ret
0x0001b77c : add edi, edx; jmp rdi
0x0016ed12 : add ecx, ebx; jmp rcx
0x0016ed11 : add rcx, r11; jmp rcx
0x000258e5 : dec [rcx - 0x39]; ret
0x00000ed3 : pop rdi; pop rbp; ret
0x00001140 : add eax, edx; jmp rax
0x0017580e : add rbp, rax; jmp rbp
0x0014b5d5 : adc al, 0x13; jmp rdx
0x00021597 : pop r13; pop rbp; ret
0x00087266 : add edx, eax; jmp rdx
0x0000cfb5 : add esi, eax; jmp rsi
0x00000773 : pop r12; pop r13; ret
0x0000028c : pop r14; pop r15; ret
0x000afeca : pop rsp; pop r14; ret
0x0001e58b : stosq [rdi], rax; ret
0x001712f5 : mov [r9 - 2], cx; ret
0x0000d4b3 : add rdi, r11; jmp rdi
0x0001d1e0 : addss xmm0, xmm0; ret
0x00022340 : mov rdi, r9; call rdx
0x000f7afe : mov [rax - 1], 0; ret
0x000c1d0e : pop rsp; pop rbp; ret
0x000c8f54 : inc [rcx - 0x77]; ret
0x0005ca5d : pop r14; pop rbp; ret
0x0000ac4c : pop rbx; pop r12; ret
0x0001ccc7 : subsd xmm0, xmm1; ret
0x0003c0e7 : mov r11, rdx; jmp rax
0x00000774 : pop rsp; pop r13; ret
0x0006763f : dec [rax - 0x7f]; ret
0x0000cadc : dec [rax - 0x7d]; ret
0x0006beb0 : movzx eax, [rdx]; ret
0x00087265 : add rdx, rax; jmp rdx
0x000018ba : mov r9, r13; call rbx
0x000e29fa : pop rcx; pop rbx; ret
0x0000f08b : dec [rax - 0x77]; ret
0x00176460 : add rdx, r12; jmp rdx
0x0000113f : add rax, rdx; jmp rax
0x00000082 : pop rbx; pop rbp; ret
0x00046f25 : xor esi, esi; jmp rax
0x0017580f : add ebp, eax; jmp rbp
0x0005ca5e : pop rsi; pop rbp; ret
0x0003aaa1 : add rax, rdi; jmp rax
0x0004abc7 : dec [rcx - 0x7d]; ret
0x000c1d0d : pop r12; pop rbp; ret
0x000264a3 : dec [rax + 0x39]; ret
0x000e0737 : mov [rsi + 8], 0; ret
0x000dac3c : add edx, edx; jmp rdx
0x000025c4 : int3 ; cmp al, 0; ret
0x0003799f : dec [rax + 0x29]; ret
0x00047dfe : xor edi, edi; jmp rax
0x000f7a58 : mov [rdi + 8], 0; ret
0x000da209 : add edx, ebp; jmp rdx
0x00047500 : add eax, ecx; jmp rax
0x0003aaa2 : add eax, edi; jmp rax
0x000318f8 : pop rbp; pop rbx; ret
0x0013bea1 : xor eax, eax; call r8
0x000026c1 : pop rbp; pop r12; ret
0x00000ed2 : pop r15; pop rbp; ret
0x0009a764 : add ecx, esi; jmp rcx
0x0000d4b4 : add edi, ebx; jmp rdi
0x0001cf0a : addsd xmm0, xmm0; ret
0x0001b492 : add rdx, rdi; jmp rdx
0x00084583 : dec [rbp + 0x39]; ret
0x00002b97 : pop r13; pop r14; ret
0x0005aa4f : neg eax; pop rbx; ret
0x0000028d : pop rsi; pop r15; ret
0x000e55c9 : mov r8, rax; call r12
0x00176461 : add edx, esp; jmp rdx
0x0007a738 : mov rdi, r8; call rax
0x0009cd74 : mov r9, r14; call rbx
0x00086a2f : add cl, ch; stc ; ret
0x0001d034 : subss xmm0, xmm1; ret
0x00178387 : pop rbx; pop r14; ret
0x0001b77b : add rdi, r10; jmp rdi
0x0007b9a3 : mov rdi, r9; call rcx
0x000da208 : add rdx, rbp; jmp rdx
0x0005ab6e : mov [rdx + 4], 1; ret
0x0003c0e8 : mov ebx, edx; jmp rax
0x00047541 : dec [rcx - 0x77]; ret
0x00048c73 : mov eax, ecx; jmp rax
0x00021598 : pop rbp; pop rbp; ret
0x0002545b : dec [rax - 0x39]; ret
0x00068f82 : movzx eax, [rax]; ret
0x0005ab1e : add [rdx + 4], 1; ret
0x0007b8fe : xor al, 0; call [rax]
0x0003ab3f : add rax, rsi; jmp rax
0x0009a763 : add rcx, rsi; jmp rcx
0x00002b98 : pop rbp; pop r14; ret
0x0001ccc8 : subps xmm0, xmm1; ret
0x0013831e : mov fs:[rax], rdx; ret
0x00000bfd : add rsp, 0x28; jmp rax
0x000326be : adc [rax + 1], cl; ret
0x0006f426 : add eax, 0x35ab9d; ret
0x0010d51d : mov esi, edx; call rax
0x0001f8a7 : mov edx, esp; call rbp
0x00099676 : mov [rdi + 4], ch; ret
0x0014d04b : mov [rdi - 1], dl; ret
0x0015dd83 : mov [rcx + 8], dx; ret
0x000cc8f7 : sbb bh, [rax + 2]; ret
0x001712f6 : mov [r9 - 2], ecx; ret
0x0010e4ae : mov rdx, rbx; call rax
0x000ab112 : mov rsi, r13; call rbp
0x0001ee5d : adc eax, 0x3ab076; ret
0x0010ebe6 : mov rdx, r12; call rax
0x000337a9 : add bh, [rax + 1]; ret
0x0006f486 : add eax, 0x35ab8d; ret
0x0011bd04 : mov rdi, rbp; call r12
0x0001de9b : add bh, [rax - 1]; ret
0x001719c5 : mov [rsi - 2], cx; ret
0x0009965e : mov [rdi + 3], ch; ret
0x0013b1ff : mov edi, esp; call rdx
0x0009968c : mov [rdi + 5], ch; ret
0x000322ab : add [rax + 1], cl; ret
0x0001cd51 : movaps xmm0, xmm1; ret
0x0006f476 : add eax, 0x35ab95; ret
0x00134ba3 : add rdi, 0x68; jmp rcx
0x0011fb96 : mov [rdi + 1], dh; ret
0x00134ba4 : add edi, 0x68; jmp rcx
0x000e029e : int1 ; jmp [rsi + 0xf]
0x0000aa19 : xor ecx, ecx; call r15
0x0000f66b : mov fs:[rdx], rax; ret
0x00099636 : mov [rdi + 1], ch; ret
0x0001d049 : movss [rdi], xmm1; ret
0x0013ca60 : mov rdi, rbp; call rcx
0x0013b0f8 : mov rdi, r12; call r13
0x0012f972 : mov [rdi + 7], al; ret
0x00002504 : mov rdi, rbx; call r13
0x000c66fb : mov rdi, rbx; call r12
0x0005f12d : mov rdi, rbp; call rax
0x000996bc : mov [rdi + 7], ch; ret
0x0007bd56 : mov edi, esi; call rax
0x00000964 : mov rdi, r12; call rax
0x00079c83 : mov rdi, rax; call rcx
0x0007b9a4 : mov edi, ecx; call rcx
0x0013ca61 : mov edi, ebp; call rcx
0x0001ee31 : add eax, 0x3ab0a2; ret
0x001712e1 : mov [r9 - 4], ecx; ret
0x000e55ca : mov eax, eax; call r12
0x0014d49c : mov [rdi - 2], cx; ret
0x00022341 : mov edi, ecx; call rdx
0x000632bf : lea eax, [r8 - 1]; ret
0x0005f12e : mov edi, ebp; call rax
0x00099648 : mov [rdi + 2], ch; ret
0x000018bb : mov ecx, ebp; call rbx
0x0015dd32 : mov [rcx + 4], dl; ret
0x00002615 : mov rdi, rbx; call rbp
0x000b08e0 : mov esi, ebp; call rbx
0x000ab113 : mov esi, ebp; call rbp
0x001763bf : add [rcx + 9], cl; ret
0x000c66fc : mov edi, ebx; call r12
0x00001bbe : mov edi, ebx; call r14
0x00087216 : mov [rdi + 4], dx; ret
0x0013b1fe : mov rdi, rsp; call rdx
0x00099dff : add [rcx + 1], cl; ret
0x0007cb49 : add eax, 0x34fbca; ret
0x00128d0a : mov rcx, r13; call r10
0x0001f684 : mov esi, edi; call r14
0x0000aa18 : xor r9d, r9d; call r15
0x000996de : mov [rdi + 9], ch; ret
0x0007ba6c : mov rsi, rbp; call rax
0x00000bfe : add esp, 0x28; jmp rax
0x0007b58c : mov esi, esp; call rax
0x000e2cf3 : adc [rax - 1], bh; ret
0x0009969e : mov [rdi + 6], ch; ret
0x000338d5 : adc [rsp - 8], al; ret
0x0000b412 : mov rdi, r14; call rbx
0x0000b2bb : mov rdi, r13; call r12
0x000fccb3 : mov rdi, r13; call r14
0x00096329 : mov [rdi + 8], dl; ret
0x0006f5c0 : add eax, 0x35a9f3; ret
0x000235b2 : mov [rdi + 2], dx; ret
0x0000b2bc : mov edi, ebp; call r12
0x000fccb4 : mov edi, ebp; call r14
0x000bdae5 : xor edi, edi; call rax
0x00065990 : mov edi, esp; call rbx
0x000ab298 : mov edi, esp; call rbp
0x000009d2 : add eax, 0x193971; ret
0x001370ca : mov edi, eax; call rbp
0x0014d2b4 : mov [rdi - 2], dx; ret
0x000025d2 : add eax, 0x3ccc31; ret
0x0005bf92 : mov edi, ebx; call rax
0x000996c8 : mov [rdi + 8], ch; ret
0x000fbed7 : mov esp, edx; call rbp
0x0012afcc : mov rdi, rbp; call r14
0x0010ebe7 : mov edx, esp; call rax
0x0001cd50 : movapd xmm0, xmm1; ret
0x0010d53f : add [rax + 7], bh; ret
0x0001dc2d : add [rax - 1], bh; ret
0x00131c06 : add rdi, 0xc8; jmp rcx
0x0000aaf2 : add eax, 0x3c0c69; ret
0x0001cce2 : movsd [rdi], xmm1; ret
0x0013c895 : sub [rax + 1], bh; ret
0x0006f5a0 : add eax, 0x35aa0b; ret
0x0006f615 : add eax, 0x35d042; ret
0x0007affc : mov rdi, r13; call rax
0x0009cd75 : mov ecx, esi; call rbx
0x0013b0f9 : mov edi, esp; call r13
0x000ab297 : mov rdi, r12; call rbp
0x000025c2 : add eax, 0x3ccc51; ret
0x001712d0 : mov [r9 - 8], rcx; ret
0x001354d4 : add edi, 0x58; jmp rcx
0x0006598f : mov rdi, r12; call rbx
0x0007bcbc : mov rsi, r13; call rax
0x0001f8a6 : mov rdx, r12; call rbp
0x000871e0 : mov [rdi + 2], dl; ret
0x000fc417 : mov ebp, ebx; call rbp
0x0006eb22 : add eax, 0x35c869; ret
0x0006f416 : add eax, 0x35abb5; ret
0x0010e4af : mov edx, ebx; call rax
0x0000b6f1 : mov edi, esi; call rdx
0x0001f683 : mov rsi, r15; call r14
0x00033a35 : add [rax + 2], bh; ret
0x00064be2 : adc [r8 + 1], r9b; ret
0x0008234d : add [rbp + 1], al; ret
0x000bf5f0 : mov rax, r14; call rax
0x00128d0b : mov ecx, ebp; call r10
0x0012ce84 : mov rdi, rbp; call rdx
0x0012ce85 : mov edi, ebp; call rdx
0x0000b6f0 : mov rdi, r14; call rdx
0x000955f6 : mov [rdi + 2], dh; ret
0x00064883 : mov edi, edi; call rax
0x0007bd55 : mov rdi, rsi; call rax
0x0009cc21 : mov edi, ebp; call rbx
0x0001f7d7 : mov edi, ebp; call rbp
0x0009cc20 : mov rdi, rbp; call rbx
0x000f6bee : add eax, 0x2d6235; ret
0x00065c68 : mov edi, edi; call r12
0x0001f79b : mov rdi, r14; call rbp
0x0001f79c : mov edi, esi; call rbp
0x0000b413 : mov edi, esi; call rbx
0x0005dc9b : mov edi, 0xe0; jmp rax
0x00128ea5 : mov rcx, r14; call r10
0x000fc416 : mov r13, rbx; call rbp
0x0015dd73 : mov [rcx + 8], dl; ret
0x00175777 : add [rax + 9], cl; ret
0x0010d51c : mov rsi, rdx; call rax
0x000009c2 : add eax, 0x191b34; ret
0x00030f70 : push rax; pop rbx; ret
0x0005bf91 : mov rdi, rbx; call rax
0x00064882 : mov rdi, r15; call rax
0x00131c0b : add [rax], al; jmp rcx
0x0013280d : add edi, 0x10; jmp rcx
0x0014bacd : sub [rdi], esp; jmp r9
0x00001bbd : mov rdi, rbx; call r14
0x000320f3 : mov [rdi + 8], r9; ret
0x00002244 : mov edi, esi; call r13
0x001354d3 : add rdi, 0x58; jmp rcx
0x0003376c : add [rax + 1], bh; ret
0x0013280c : add rdi, 0x10; jmp rcx
0x0001da0f : add [rax], al; jmp rax
0x00002243 : mov rdi, r14; call r13
0x0003388f : adc [rsp - 4], al; ret
0x000f6a0e : add eax, 0x2d6415; ret
0x0009566a : mov [rdi + 8], dx; ret
0x00031fe9 : mov [rdi - 8], r9; ret
0x00065c67 : mov rdi, r15; call r12
0x00128ea6 : mov ecx, esi; call r10
0x0001ee21 : add eax, 0x3ab0b6; ret
0x000e4a80 : add al, 0x28; call r12
0x00087237 : mov [rdi + 6], dl; ret
0x0013bf03 : xor eax, eax; call rcx
0x0007a739 : mov edi, eax; call rax
0x0000ddf1 : adc eax, 0x3bdb17; ret
0x0007ba6d : mov esi, ebp; call rax
0x0013561e : adc [rax + 1], bh; ret
0x000b08df : mov rsi, rbp; call rbx
0x000339c6 : add bh, [rax + 2]; ret
0x00002616 : mov edi, ebx; call rbp
0x00079c84 : mov edi, eax; call rcx
0x00000965 : mov edi, esp; call rax
0x0007b58b : mov rsi, r12; call rax
0x00002505 : mov edi, ebx; call r13
0x00131c07 : add edi, 0xc8; jmp rcx
0x000871fe : mov [rdi + 4], dl; ret
0x000fc4b0 : mov esp, esi; call r15
0x0015dd42 : mov [rcx + 4], dx; ret
0x0006f5ff : add eax, 0x35a9d8; ret
0x0015dd13 : mov [rcx + 2], dl; ret
0x000bf5f1 : mov eax, esi; call rax
0x0001f7d6 : mov rdi, r13; call rbp
0x000fca22 : xor esi, esi; call rbp
0x001249c7 : mov rax, fs:[rax]; ret
0x000f7a47 : mov [rdi + 8], rsi; ret
0x0009a207 : movsb [rdi], [rsi]; ret
0x00108e8b : add [rdx], al; call rcx
0x000235b3 : mov [rdi + 2], edx; ret
0x00096cdd : add eax, 0xc478d48; ret
0x0000dc06 : xchg eax, esi; ret 0x18
0x0009569a : mov [rdi + 5], rdx; ret
0x001600ed : lea eax, [rdx + 8]; ret
0x000794f8 : lea eax, [rdx - 8]; ret
0x00131cc2 : adc [rdi + 8], eax; ret
0x00171729 : adc [rdi - 8], edi; ret
0x001719c6 : mov [rsi - 2], ecx; ret
0x000fbc97 : mov fs:[rax], 0x16; ret
0x000c3151 : add al, ch; cdq ; ret 4
0x0014cd98 : mov [rdi - 8], rcx; ret
0x00144ad5 : movsq [rdi], [rsi]; ret
0x0012c944 : adc [rsi + 8], eax; ret
0x00096c6a : lea eax, [rdi + 8]; ret
0x001719b9 : mov [rsi - 4], ecx; ret
0x00096bfa : lea eax, [rdi + 2]; ret
0x000af651 : lea eax, [rdi - 4]; ret
0x001600eb : add eax, 0x8428d48; ret
0x00095637 : mov [rdi + 3], edx; ret
0x0015ddb4 : mov [rcx + 5], edx; ret
0x0016007d : lea eax, [rdx + 2]; ret
0x001600da : lea rax, [rdx + 6]; ret
0x000965c0 : mov [rdi - 1], edx; ret
0x0005dcd7 : mov edi, 0xe0; call rax
0x0006ebba : adc eax, 0x10035da; ret
0x000956ba : mov [rdi + 7], rdx; ret
0x0012c8f1 : mov [rsi + 8], eax; ret
0x0016016d : add eax, 0xc428d48; ret
0x00160067 : lea eax, [rdx + 1]; ret
0x00096c2c : lea rax, [rdi + 5]; ret
0x00099df4 : lea eax, [rcx - 1]; ret
0x0015ddb3 : mov [rcx + 5], rdx; ret
0x00171b4b : adc [rsi + 7], rdx; ret
0x000d5471 : pop rdx; or bh, dh; ret
0x000956ab : mov [rdi + 6], edx; ret
0x0015ddc3 : mov [rcx + 6], rdx; ret
0x000956aa : mov [rdi + 6], rdx; ret
0x0011fd6e : mov [rdi + rdx], 0; ret
0x00096c2d : lea eax, [rdi + 5]; ret
0x000f4672 : mov [rdi + 8], esi; ret
0x00096c04 : lea rax, [rdi + 3]; ret
0x0011fb95 : mov [rdi + 1], sil; ret
0x00096be6 : lea rax, [rdi + 1]; ret
0x000fc663 : add [rcx + 9], ecx; ret
0x000008e0 : add [rax], al; call rax
0x001715c6 : adc [rcx + 7], rdi; ret
0x000af641 : lea eax, [rdi - 8]; ret
0x00096c18 : lea eax, [rdi + 4]; ret
0x00171225 : adc [rcx - 1], rdi; ret
0x0009624c : add [rax + rax], 0; ret
0x0016007c : lea rax, [rdx + 2]; ret
0x0014cdd6 : mov [rdi - 8], rdx; ret
0x00096c7e : lea rax, [rdi + 9]; ret
0x0014cf4f : mov [rdi - 4], edx; ret
0x00160095 : lea eax, [rdx + 3]; ret
0x00171728 : adc [rdi - 8], rdi; ret
0x000af640 : lea rax, [rdi - 8]; ret
0x000bf323 : xchg eax, ebp; ret 0x30
0x0002f643 : add esi, eax; jmp [rax]
0x000794f7 : lea rax, [rdx - 8]; ret
0x0013561d : adc [rax + 1], dil; ret
0x001712f7 : mov [rcx - 2], ecx; ret
0x0016010d : lea eax, [rdx + 9]; ret
0x0014cdd7 : mov [rdi - 8], edx; ret
0x0014d879 : mov [rdi - 4], ecx; ret
0x0012c8fe : mov [rsi + 8], rax; ret
0x00134cf6 : pop r8; mov eax, 1; ret
0x001600bc : lea rax, [rdx + 5]; ret
0x00096600 : mov [rdi - 1], rdx; ret
0x0014d2b5 : mov [rdi - 2], edx; ret
0x0009a7db : inc [rbx]; pop rbx; ret
0x00003ba3 : push rax; push rsp; ret
0x0015ddc4 : mov [rcx + 6], edx; ret
0x0015ddd3 : mov [rcx + 7], rdx; ret
0x001600ec : lea rax, [rdx + 8]; ret
0x00171226 : adc [rcx - 1], edi; ret
0x0015dd43 : mov [rcx + 4], edx; ret
0x000ee2ef : int1 ; jmp [rsi + 0x2e]
0x000af650 : lea rax, [rdi - 4]; ret
0x0001ee76 : add [rax - 1], dil; ret
0x00171aae : adc [rsi + 3], rdx; ret
0x00087217 : mov [rdi + 4], edx; ret
0x001600db : lea eax, [rdx + 6]; ret
0x0009566b : mov [rdi + 8], edx; ret
0x000320f4 : mov [rdi + 8], ecx; ret
0x000fe7ba : mov eax, [rax + 8]; ret
0x00160094 : lea rax, [rdx + 3]; ret
0x00171aaf : adc [rsi + 3], edx; ret
0x001600bd : lea eax, [rdx + 5]; ret
0x0017194d : adc [rsi - 1], rdx; ret
0x001712e2 : mov [rcx - 4], ecx; ret
0x0015ffe7 : lea eax, [rdx + 7]; ret
0x00096c57 : lea eax, [rdi + 7]; ret
0x00171262 : adc [rcx - 1], ebx; ret
0x0015dd84 : mov [rcx + 8], edx; ret
0x001532d3 : add eax, 0xf7f0ff3; ret
0x0006caa6 : mov [rdi + 8], rax; ret
0x000fe7b9 : mov rax, [rax + 8]; ret
0x000b0a28 : add [rax], al; call r13
0x00099df3 : lea rax, [rcx - 1]; ret
0x00096c05 : lea eax, [rdi + 3]; ret
0x00096be7 : lea eax, [rdi + 1]; ret
0x00096bf9 : lea rax, [rdi + 2]; ret
0x0010f900 : mov rax, fs:[0x10]; ret
0x00032012 : movsd [rdi], [rsi]; ret
0x00171b4c : adc [rsi + 7], edx; ret
0x001712d1 : mov [rcx - 8], ecx; ret
0x00096c17 : lea rax, [rdi + 4]; ret
0x001715c7 : adc [rcx + 7], edi; ret
0x000738dd : xor eax, 0xd8d4800; ret
0x0006caa7 : mov [rdi + 8], eax; ret
0x00096c4a : lea rax, [rdi + 6]; ret
0x001327ee : add [rax + 2], dil; ret
0x001600ab : lea eax, [rdx + 4]; ret
0x0014d49d : mov [rdi - 2], ecx; ret
0x000b0690 : add [rax], al; call rbx
0x000fbeee : add [rax], al; call rbp
0x001600aa : lea rax, [rdx + 4]; ret
0x00096c56 : lea rax, [rdi + 7]; ret
0x000cc910 : add [rax + 1], edi; ret
0x0015dde3 : mov [rcx + 8], rdx; ret
0x00096c4b : lea eax, [rdi + 6]; ret
0x00021c95 : add [rax], al; call rdx
0x0009569b : mov [rdi + 5], edx; ret
0x00097b2d : add eax, 0xd478d48; ret
0x00160066 : lea rax, [rdx + 1]; ret
0x000632c0 : lea eax, [rax - 1]; ret
0x0015dd52 : mov [rcx + 3], edx; ret
0x0016010c : lea rax, [rdx + 9]; ret
0x0015dd93 : mov [rcx + 7], edx; ret
0x00095679 : mov [rdi + 7], edx; ret
0x0017194e : adc [rsi - 1], edx; ret
0x00102dd4 : sub al, 0; pop rbx; ret
0x0004bfcc : add [rax + 1], ecx; ret
0x00131c46 : mov ebx, 0xc8; call rax
0x00096c69 : lea rax, [rdi + 8]; ret
0x000c845c : inc [rcx]; sete al; ret
0x00047dfd : xor r15d, r15d; jmp rax
0x00096c7f : lea eax, [rdi + 9]; ret
0x00171261 : adc [rcx - 1], rbx; ret
0x0009a6c4 : adc eax, 0xf880272; ret
0x000cc933 : sbb [rax + 1], edi; ret
0x0015ffe6 : lea rax, [rdx + 7]; ret
0x000c5a8f : dec [rax - 0x39]; ret 0
0x00031fea : mov [rdi - 8], ecx; ret
0x000fbed6 : mov r12d, edx; call rbp
0x00108d7a : xor r15d, r15d; call rax
0x0013bfd5 : mov edi, ebp; call [rax]
0x00030220 : add rax, 1; pop rbx; ret
0x00072ad8 : mov edi, esp; call [rax]
0x0011b9f0 : sub eax, [rax]; call r12
0x000b94e8 : add [rbp + 0xf], al; ret
0x0009a889 : int1 ; mov eax, eax; ret
0x0007b8e8 : mov [rbx], rdi; call rcx
0x0012d3d2 : mov edi, ebp; call [rbx]
0x000225d9 : mov [rbp], rdx; call rax
0x000bbbed : add [rcx + 0xf], al; ret
0x000e4bfa : mov ecx, [rsi]; call r12
0x0007b8e9 : mov [rbx], edi; call rcx
0x0009a834 : mov eax, 8; pop rbx; ret
0x00175e13 : add [rcx + 0xf], cl; ret
0x000fbf93 : mov rdi, [rbp]; call r12
0x0009c44a : mov edi, [rsp]; call rbp
0x00099760 : mov [rdi + 0xd], ch; ret
0x0012d775 : mov esi, esp; call [rax]
0x000047c2 : add [rax + 0xf], cl; ret
0x00099780 : mov [rdi + 0xe], ch; ret
0x0012d81c : mov edi, ebx; call [rax]
0x0009973e : mov [rdi + 0xc], ch; ret
0x0009971e : mov [rdi + 0xb], ch; ret
0x00099700 : mov [rdi + 0xa], ch; ret
0x000225da : mov [rbp], edx; call rax
0x0012d774 : mov rsi, rsp; call [rax]
0x00103eae : dec [rcx]; setbe al; ret
0x000fbf94 : mov edi, [rbp]; call r12
0x00072d64 : mov edi, edi; call [rax]
0x00173857 : int1 ; sub eax, edx; ret
0x0007b3d3 : mov cl, 0x35; call [rdx]
0x0010ed3e : int1 ; xor eax, eax; ret
0x00134cf7 : pop rax; mov eax, 1; ret
0x0011d1f1 : add [rcx - 0xa], al; ret
0x0004080a : int1 ; call [rax + r8*8]
0x0009ad7c : mov dh, [rcx - 0xd]; ret
0x00070086 : xor edi, edi; call [r13]
0x00136cb4 : mov edi, eax; call [r10]
0x0013bfd4 : mov rdi, rbp; call [rax]
0x000cc926 : pop rbx; mov eax, 1; ret
0x00000853 : mov rdx, [rax]; call rbp
0x00096681 : movq [rdi - 1], mm0; ret
0x00137521 : sbb al, 0x41; call [rdx]
0x000fcb6b : mov rdi, [r13]; call r12
0x0012d81b : mov rdi, rbx; call [rax]
0x00000854 : mov edx, [rax]; call rbp
0x000fbf6d : mov rdi, [rbx]; call r12
0x00072ad7 : mov rdi, r12; call [rax]
0x0009c449 : mov rdi, [r12]; call rbp
0x000e4bf9 : mov rcx, [r14]; call r12
0x00030221 : add eax, 1; pop rbx; ret
0x000d2e2f : add [rax + 0xc], bh; ret
0x00136b8d : adc al, 0x41; call [rdx]
0x00072d63 : mov rdi, r15; call [rax]
0x000fc4af : mov r12d, r14d; call r15
0x00171248 : pop rcx; jmp [rdx - 0xf]
0x00136cb3 : mov rdi, rax; call [r10]
0x0012d3d1 : mov rdi, rbp; call [rbx]
0x0008afe8 : add [rcx - 9], cl; ret 2
0x0008afc2 : add [rcx - 9], cl; ret 1
0x000997a0 : mov [rdi + 0xf], ch; ret
0x00072d7d : xor edi, edi; call [rax]
0x0011b6e6 : sub eax, [rax]; call rax
0x000e0327 : div edx; jmp [rsi + 0xf]
0x000fbf6e : mov edi, [rbx]; call r12
0x0002dd42 : xor eax, 0x349; call rax
0x00109658 : sbb [rax - 0x77], cl; ret
0x000cd011 : add [r8 - 0x7d], ecx; ret
0x000c652d : add [r9 - 0x77], rcx; ret
0x001271ef : add [rcx - 0x73], al; ret
0x0004691f : add [rcx + 0x63], cl; ret
0x00141aeb : add [rax + 0xca], bh; ret
0x00175da3 : add [rcx + 0x21], cl; ret
0x0001be9f : add [rax - 0x39], cl; ret
0x00090148 : lea rax, [rdi + rsi]; ret
0x000f3777 : push rsi; xor ax, ax; ret
0x000957d4 : mov [rdi + 0x18], cx; ret
0x00099954 : mov [rdi + 0x1d], ch; ret
0x0012c781 : pop rbx; pop rbp; jmp rdx
0x00096401 : mov [rdi + 0x14], dl; ret
0x0006f586 : adc [rbx + 0x5d], bl; ret
0x00086149 : add [rbp + 0x29], cl; ret
0x000419a5 : add [rcx + 0x29], cl; ret
0x00063988 : xchg eax, edx; call [rdx]
0x00025897 : add [rcx - 0x7d], cl; ret
0x000da5c1 : adc [r8 - 0x7d], r9b; ret
0x00096d1e : lea rax, [rdi + 0xe]; ret
0x0012f10d : add [rbp - 0x77], al; ret
0x00096cfe : lea rax, [rdi + 0xd]; ret
0x00044057 : adc [rax - 0x7d], cl; ret
0x000f4bf4 : mov [rdi + 0x16], ax; ret
0x0017456e : add [rbp + 0x29], al; ret
0x00096c9c : lea rax, [rdi + 0xa]; ret
0x00063c3f : add cl, [rax - 0x77]; ret
0x00096cde : lea rax, [rdi + 0xc]; ret
0x000bb84c : add [rcx + 0x29], al; ret
0x000956ec : mov [rdi + 0x10], cx; ret
0x00102fbb : add [rdx + rax*2], 1; ret
0x00061be0 : add [rax - 0x7f], cl; ret
0x000999da : mov [rdi + 0x21], ch; ret
0x000999b4 : mov [rdi + 0x20], ch; ret
0x000b0e47 : xor [rcx - 0x77], al; ret
0x000d6262 : xor [rax - 0x7d], cl; ret
0x000963ab : mov [rdi + 0x10], cl; ret
0x00090149 : lea eax, [rdi + rsi]; ret
0x0009574c : mov [rdi + 0xe], rcx; ret
0x00099938 : mov [rdi + 0x1c], ch; ret
0x00020975 : adc cl, [rcx - 0x7d]; ret
0x00078b4f : pop rbp; pop r14; jmp rcx
0x000997ba : mov [rdi + 0x10], ch; ret
0x000b027a : adc [rsp - 0x10], al; ret
0x0016014c : lea rax, [rdx + 0xb]; ret
0x00020651 : adc [rcx - 0x7d], cl; ret
0x00078b4e : pop r13; pop r14; jmp rcx
0x0016016f : lea eax, [rdx + 0xc]; ret
0x0000560e : add [rcx - 0x77], al; ret
0x000e3388 : add cl, [rbp - 0x77]; ret
0x000c0133 : sbb [rax - 0x7d], cl; ret
0x00002d53 : add [r8 - 0x7d], r9d; ret
0x0011bf63 : xor [rax - 0x77], cl; ret
0x00096cff : lea eax, [rdi + 0xd]; ret
0x001601ae : lea rax, [rdx + 0xe]; ret
0x000764a3 : pop r13; pop r14; jmp rax
0x000233c7 : sbb [rbx + 0x5d], bl; ret
0x00141d0b : sub [rax], al; call [rax]
0x0016018f : lea eax, [rdx + 0xd]; ret
0x00099892 : mov [rdi + 0x17], ch; ret
0x000956d8 : mov [rdi + 0x10], dh; ret
0x0008fe97 : lea eax, [rdi + rax]; ret
0x00099810 : mov [rdi + 0x13], ch; ret
0x001601af : lea eax, [rdx + 0xe]; ret
0x000d3b39 : add ch, al; push rcx; ret
0x0016012c : lea rax, [rdx + 0xa]; ret
0x0006f561 : sbb [rax + 0x39], cl; ret
0x000c3063 : add al, ch; push rdi; ret
0x00099a2a : mov [rdi + 0x40], ch; ret
0x00099918 : mov [rdi + 0x1b], ch; ret
0x001782fe : sbb [rcx + 0x21], cl; ret
0x0009024d : lea eax, [rcx + rsi]; ret
0x001787d1 : add [rax - 0x7b], cl; ret
0x000736aa : add [rax - 0x17], dl; ret
0x00003f3f : add [rax - 0x77], cl; ret
0x0016016e : lea rax, [rdx + 0xc]; ret
0x0009024c : lea rax, [rcx + rsi]; ret
0x000d28ea : adc [rcx + 0x39], al; ret
0x0009576c : mov [rdi + 0xf], rcx; ret
0x000af630 : lea rax, [rdi - 0xc]; ret
0x000cc9cf : add al, [rbp - 0x77]; ret
0x000c540f : add [rax + 0x7e], bh; ret
0x0010d9fc : add cl, [rax - 0x7d]; ret
0x000d3320 : add [rcx - 0x7d], al; ret
0x0016018e : lea rax, [rdx + 0xd]; ret
0x00099830 : mov [rdi + 0x14], ch; ret
0x0003205e : mov [rdi - 0x10], r9; ret
0x00077718 : pop rsi; pop r15; jmp rax
0x000997d0 : mov [rdi + 0x11], ch; ret
0x000ce9e8 : add [rbp + 0x63], cl; ret
0x0016012d : lea eax, [rdx + 0xa]; ret
0x00099974 : mov [rdi + 0x1e], ch; ret
0x0009065f : add [rcx + 0x39], cl; ret
0x001784ef : adc [rcx - 0x77], cl; ret
0x000998d8 : mov [rdi + 0x19], ch; ret
0x00134c37 : push rsp; mov eax, 1; ret
0x0005f97e : pop rbx; pop rbp; jmp rax
0x000082cf : add [rax + 0x39], cl; ret
0x00134c36 : push r12; mov eax, 1; ret
0x0009570b : mov [rdi + 0xf], ecx; ret
0x0012aef4 : pop rbx; pop rbp; jmp rcx
0x00020e4a : add [r8 - 0x7d], r9b; ret
0x0010fb2f : add [rbp - 0x77], cl; ret
0x0005ab7f : add [rax + 0x10], bh; ret
0x00077717 : pop r14; pop r15; jmp rax
0x000e2875 : push rbx; and cl, ch; ret
0x00079c1f : add [rax + 0x16], bh; ret
0x00099994 : mov [rdi + 0x1f], ch; ret
0x000c862a : add ecx, [r8 - 0x7d]; ret
0x000e0753 : mov [rsi + 0x10], r8; ret
0x00096d1f : lea eax, [rdi + 0xe]; ret
0x0016003f : lea eax, [rdx + 0xf]; ret
0x000632ae : lea eax, [rdx + rdi]; ret
0x0002676b : sbb [rcx - 0x77], cl; ret
0x00007468 : sbb [rcx - 0x77], al; ret
0x0003326d : adc [rax + 0x39], cl; ret
0x00096cbd : lea eax, [rdi + 0xb]; ret
0x0003216e : mov [rdi + 0x10], r9; ret
0x0000826e : add cl, [rax + 0x39]; ret
0x00096d38 : lea rax, [rdi + 0xf]; ret
0x000af631 : lea eax, [rdi - 0xc]; ret
0x000e9905 : adc [rax - 0x77], cl; ret
0x0000c807 : add [rax + 0x63], cl; ret
0x0009572e : mov [rdi + 0x14], dh; ret
0x00000cb7 : add [rax - 0x7d], cl; ret
0x0006f4d7 : adc [rcx - 0x7d], al; ret
0x000f94eb : add al, ch; jmp [rax - 1]
0x00087735 : adc cl, [rax + 0x29]; ret
0x000e7965 : sbb cl, [rax - 0x7d]; ret
0x0005fc99 : pop rbp; pop r12; jmp rax
0x0010b777 : sub [rax - 0x77], cl; ret
0x0008fe96 : lea rax, [rdi + rax]; ret
0x0004418a : add [rax + 0x29], cl; ret
0x00096cbc : lea rax, [rdi + 0xb]; ret
0x0009574d : mov [rdi + 0xe], ecx; ret
0x000f829d : adc cl, [rax - 0x7d]; ret
0x0011ee02 : mov eax, 3; syscall ; ret
0x001413c3 : adc [rax - 0x39], cl; ret
0x00099872 : mov [rdi + 0x16], ch; ret
0x000ee06a : add [rcx + 0xf], ecx; ret
0x0002d9e7 : sub [rbx + 0x5d], bl; ret
0x00096cdf : lea eax, [rdi + 0xc]; ret
0x000998fa : mov [rdi + 0x1a], ch; ret
0x00096d39 : lea eax, [rdi + 0xf]; ret
0x0010f41e : add al, [rcx + 0x39]; ret
0x0016014d : lea eax, [rdx + 0xb]; ret
0x0001e18d : add [rbx + 0x5d], bl; ret
0x00096c9d : lea eax, [rdi + 0xa]; ret
0x000b8d22 : add [r8 - 0x7d], rcx; ret
0x0009ba9a : sub [rbp + 0x63], dh; ret
0x0006398f : xchg eax, ebp; call [rdx]
0x00004f3a : add cl, [rcx - 0x7d]; ret
0x00012b2b : sub [rax - 0x7d], cl; ret
0x00099856 : mov [rdi + 0x15], ch; ret
0x00030efa : add [rcx - 0x77], cl; ret
0x000c0132 : sbb [r8 - 0x7d], r9b; ret
0x00096483 : mov [rdi + 0x18], cl; ret
0x000764a4 : pop rbp; pop r14; jmp rax
0x00171872 : pop rcx; jmp [rdx - 0x2f]
0x000997f2 : mov [rdi + 0x12], ch; ret
0x00096585 : mov [rdi + 0x20], cl; ret
0x0016003e : lea rax, [rdx + 0xf]; ret
0x0009bac0 : xor [rbp + 0x3d], dh; ret
0x000998b2 : mov [rdi + 0x18], ch; ret
0x000957b0 : mov [rdi + 0x18], dh; ret
0x000bb055 : add ecx, [rax - 0x7d]; ret
0x0001bfc6 : xor eax, eax; pop rbx; ret
0x0001e5e4 : adc [rdi + 0x70], eax; ret
0x0006eb41 : mov eax, [rdi + 0x68]; ret
0x00096e86 : lea rax, [rdi + 0x1a]; ret
0x0007417c : mov rax, rsi; pop rbx; ret
0x00096d4b : lea rax, [rdi + 0x10]; ret
0x0009a871 : pop rbx; mov eax, eax; ret
0x000801f9 : xchg [rbx + 0x5d], bl; ret
0x00096d4c : lea eax, [rdi + 0x10]; ret
0x00136c11 : int 0xfd; jmp [rsi - 0x70]
0x00096ec2 : lea rax, [rdi + 0x1c]; ret
0x00096e68 : lea rax, [rdi + 0x19]; ret
0x0001cba0 : not eax; and eax, edx; ret
0x00079511 : lea eax, [rdx - 0x10]; ret
0x000956c4 : movdqu xmm[rdi], xmm0; ret
0x000ed516 : adc [rdi + 0x40], eax; ret
0x000fbc82 : mov [rbx], 0; pop rbx; ret
0x00135532 : adc [rdi + 0x30], eax; ret
0x0010fed0 : add [rax], al; leave ; ret
0x000e3387 : add r9b, [rbp - 0x77]; ret
0x0006208c : mov [rax + 0x40], rcx; ret
0x0003205f : mov [rdi - 0x10], ecx; ret
0x00020a72 : add [rcx + 0x39], ecx; ret
0x0014b4ff : lea r9, [r11 + r9]; jmp r9
0x0012d8ef : mov [rdx + 0x20], rsi; ret
0x00002d54 : add [rax - 0x7d], ecx; ret
0x00096f02 : lea rax, [rdi + 0x1e]; ret
0x000af4cd : lea rax, [rdi - 0x10]; ret
0x00096f22 : lea rax, [rdi + 0x1f]; ret
0x00002118 : xchg [rax - 0x75], cl; ret
0x001523fc : dec [rax - 0x7f]; ret 0x80
0x0006e853 : sub eax, [rsi + 0x10]; ret
0x0013c8b6 : mov [rdi + 0x18], esi; ret
0x0012c92e : mov [rsi + 0x10], rax; ret
0x000e0754 : mov [rsi + 0x10], eax; ret
0x00144a10 : int 0xfc; jmp [rsi + 0x2e]
0x00152e74 : movdqu xmm[rdi], xmm1; ret
0x00096d9f : lea eax, [rdi + 0x13]; ret
0x000224fe : adc [rax - 0x77], ecx; ret
0x00131cda : movups xmm[rdx], xmm0; ret
0x0000a42c : add r9d, [rax + 0x39]; ret
0x0013cc70 : mov eax, [rdi + 0x28]; ret
0x0006148f : mov eax, r8d; pop rbx; ret
0x0000a3f0 : add [rax + 0x39], r9d; ret
0x0012bbb5 : sbb ecx, [rax - 0x7d]; ret
0x00011fed : sbb ecx, [rcx - 0x7d]; ret
0x000ed7e6 : adc [rsi + 0x70], eax; ret
0x000f44ba : mov [rsi + 0x48], rax; ret
0x0006208d : mov [rax + 0x40], ecx; ret
0x00096ea6 : lea rax, [rdi + 0x1b]; ret
0x000f44bb : mov [rsi + 0x48], eax; ret
0x0006eb40 : mov rax, [rdi + 0x68]; ret
0x00096d60 : lea rax, [rdi + 0x11]; ret
0x00096d7f : lea eax, [rdi + 0x12]; ret
0x001414e4 : sbb [rax - 0x7d], ecx; ret
0x00021e31 : adc ecx, [rax - 0x7d]; ret
0x0012d97d : pop rbp; add eax, edx; ret
0x0003388d : movss xmm0, [rsp - 4]; ret
0x0011fe02 : sub ebx, [rbx + 0x5d]; ret
0x0001326f : adc [rax - 0x7d], ecx; ret
0x00096de1 : lea eax, [rdi + 0x15]; ret
0x00079510 : lea rax, [rdx - 0x10]; ret
0x00022792 : mov [rdi], 0; pop rbx; ret
0x000eaba1 : xor ecx, [rax - 0x7d]; ret
0x0010fd13 : mov rbp, rsp; pop rbp; ret
0x0013c8b5 : mov [rdi + 0x18], rsi; ret
0x0010fd14 : mov ebp, esp; pop rbp; ret
0x0010ed49 : mov eax, [rax + 0x30]; ret
0x000338d3 : movsd xmm0, [rsp - 8]; ret
0x0009a476 : movups xmm[r11], xmm8; ret
0x00032704 : mov rax, rdx; pop rbx; ret
0x0006f14d : sub rax, [rdi + 0x18]; ret
0x00097d83 : lea eax, [rdi + 0x20]; ret
0x00065904 : mov eax, [rax + 0x4c]; ret
0x00022db4 : add [rbp + 0x39], ecx; ret
0x0009578c : mov [rdi + 0x10], rcx; ret
0x00096dc2 : lea eax, [rdi + 0x14]; ret
0x001005bb : pop rax; pop rdi; call rax
0x0009a477 : movups xmm[rbx], xmm0; ret
0x00003ba2 : mov [rax + 0x54], edx; ret
0x00032705 : mov eax, edx; pop rbx; ret
0x0011f7d7 : add [rax + 0x100], bh; ret
0x0009584e : movq [rdi + 0xe], mm2; ret
0x00085781 : add [rcx - 0x77], ecx; ret
0x0009586e : movq [rdi + 0xf], mm2; ret
0x00068085 : sub eax, [rdi + 0x38]; ret
0x0006f14e : sub eax, [rdi + 0x18]; ret
0x00096e43 : lea rax, [rdi + 0x18]; ret
0x00096d61 : lea eax, [rdi + 0x11]; ret
0x000ee16b : adc [rdi + 0xf8], eax; ret
0x000f1ecb : push rax; jmp [rsi - 0x7d]
0x0000de7e : mov eax, [rax + 0xa8]; ret
0x0009a3f0 : movups xmm[rbx], xmm4; ret
0x00096162 : push 5; add [rax], al; ret
0x00097fe9 : lea eax, [rdi + 0x40]; ret
0x00096ec3 : lea eax, [rdi + 0x1c]; ret
0x00068084 : sub rax, [rdi + 0x38]; ret
0x0003216f : mov [rdi + 0x10], ecx; ret
0x00096e01 : lea eax, [rdi + 0x16]; ret
0x00061490 : mov eax, eax; pop rbx; ret
0x00065903 : mov rax, [rax + 0x4c]; ret
0x00068195 : sub eax, [rdi + 0x20]; ret
0x00096ea7 : lea eax, [rdi + 0x1b]; ret
0x000957f3 : mov [rdi + 0x17], ecx; ret
0x001332a1 : int 0xec; jmp [rsi - 0x70]
0x000226f6 : mov eax, [rax + 0x58]; ret
0x0012d8d0 : mov [rdx + 0x68], ecx; ret
0x000bed41 : mov eax, [rdi + 0x20]; ret
0x000fe7d0 : mov rax, [rax + 0x58]; ret
0x0001c86d : not eax; and eax, ecx; ret
0x0013ccf3 : add [rdi + 0x28], esi; ret
0x0012d8f0 : mov [rdx + 0x20], esi; ret
0x0013732b : pop rdx; call [rax + 0x20]
0x000957d5 : mov [rdi + 0x18], ecx; ret
0x00096dc1 : lea rax, [rdi + 0x14]; ret
0x00096e44 : lea eax, [rdi + 0x18]; ret
0x0001d9dc : mov rbp, r9; nop ; jmp rdx
0x00096e00 : lea rax, [rdi + 0x16]; ret
0x0001416c : add [rax - 0x77], ecx; ret
0x00022a18 : mov eax, ebx; pop rbx; ret
0x0013d16d : mov [rax], 0; pop rbx; ret
0x000bed40 : mov rax, [rdi + 0x20]; ret
0x00008646 : add [rax + 0x39], ecx; ret
0x00096de0 : lea rax, [rdi + 0x15]; ret
0x00096e87 : lea eax, [rdi + 0x1a]; ret
0x0010ed48 : mov rax, [rax + 0x30]; ret
0x0000a42d : add ecx, [rax + 0x39]; ret
0x000af4ce : lea eax, [rdi - 0x10]; ret
0x00096f03 : lea eax, [rdi + 0x1e]; ret
0x0000a40e : add r9b, [rax + 0x39]; ret
0x00096e69 : lea eax, [rdi + 0x19]; ret
0x00096f23 : lea eax, [rdi + 0x1f]; ret
0x00096d7e : lea rax, [rdi + 0x12]; ret
0x000ed836 : adc [rdi + 0x78], eax; ret
0x00096ee3 : lea eax, [rdi + 0x1d]; ret
0x00102bcd : add ecx, [rax - 0x42]; ret
0x000f4bf5 : mov [rdi + 0x16], eax; ret
0x00096ee2 : lea rax, [rdi + 0x1d]; ret
0x00103b17 : mov eax, [rax + 0x38]; ret
0x0002e2dd : add [rax - 0x7f], ecx; ret
0x00097d82 : lea rax, [rdi + 0x20]; ret
0x0004b4fa : add [rcx - 0x7d], ecx; ret
0x00132856 : int 0xfb; jmp [rsi - 0x7d]
0x0004812c : add [rsi + 1], bh; jmp rax
0x0012d8cf : mov [rdx + 0x68], rcx; ret
0x0005bc17 : mov [rcx + 0xf], 0x4f; ret
0x00096e20 : lea rax, [rdi + 0x17]; ret
0x0001cce3 : movups xmm[rdi], xmm1; ret
0x0009a3ef : movups xmm[r11], xmm4; ret
0x0009582e : movq [rdi + 0xd], mm2; ret
0x0007cb32 : xor al, 0; add rsp, 8; ret
0x00096d9e : lea rax, [rdi + 0x13]; ret
0x00068194 : sub rax, [rdi + 0x20]; ret
0x00096e21 : lea eax, [rdi + 0x17]; ret
0x000a96b6 : add [rcx + 0x39], eax; ret
0x0003424a : sbb ecx, [rax - 0x39]; ret
0x000c3e39 : pop rbp; clc ; leave ; ret
0x0013556a : adc [rdi + 0x20], eax; ret
0x00097fe8 : lea rax, [rdi + 0x40]; ret
0x0000128b : mov eax, edi; neg eax; ret
0x00022a17 : mov rax, rbx; pop rbx; ret
0x0005b1a7 : mov eax, esi; pop rbx; ret
0x0009a888 : div ecx; mov eax, eax; ret
0x000c543f : add [rax + 0xfc17], bh; ret
0x000f885a : inc [rbp - 0x7cee8b40]; ret
0x0009a7c0 : movzx eax, cl; pop rbx; ret
0x0008a938 : push rdi; xor eax, eax; ret
0x000dd890 : dec [rbp - 0x7cb7febd]; ret
0x0001d7b8 : movq mm0, mm3; pop rbx; ret
0x0001da08 : xor rax, fs:[0x30]; jmp rax
0x0011a12e : pop rcx; add rsp, 0x38; ret
0x001525fc : movq [rdi - 0x10], mm0; ret
0x000fe7c0 : mov rax, [rax + 0x160]; ret
0x00075d1a : xor eax, 0; add bl, dh; ret
0x000f87fe : inc [rbp - 0x7cd28b40]; ret
0x0004a08a : xor eax, 0x37fc01; call rax
0x000967c4 : movq [rdi + 0x30], mm7; ret
0x000fbfba : xor eax, 0x7d8b48; call r12
0x000c8660 : inc [rax - 0x76b7ffc8]; ret
0x000bdb0b : movzx eax, al; pop rbx; ret
0x0001c8c9 : inc eax; shr eax, 0x1f; ret
0x0009babf : xor [rbp + 0x3d], r14b; ret
0x0009a0b6 : leave ; cmove rax, rdx; ret
0x00143538 : add al, bh; jmp [rsi + 0xf]
0x0001d371 : movq mm0, [rsp - 0x28]; ret
0x000ac057 : xor dh, dh; jmp [rsi + 0xf]
0x0005646b : inc [rbp + 0x6c850fdb]; ret
0x00173866 : push rsi; sub eax, edx; ret
0x00145ffc : inc [rbp - 0x76b08a40]; ret
0x000f66ff : mov eax, 1; add rsp, 8; ret
0x0000f587 : mov eax, [rax + rdi*4]; ret
0x00066602 : mov eax, r10d; pop rbx; ret
0x0012e3aa : inc [rbx - 0x76b79c03]; ret
0x0011b6e5 : sub eax, cs:[rax]; call rax
0x0015266c : movq [rdi - 0x10], mm1; ret
0x0006f585 : adc [r11 + 0x5d], r11b; ret
0x000af921 : add bl, al; mov eax, 2; ret
0x0001d9dd : mov ebp, ecx; nop ; jmp rdx
0x0000e62a : dec [rip - 0x7cb79d8c]; ret
0x000c53ff : add [rax + 0x7d00], bh; ret
0x000e38be : dec [rcx - 0x7d]; jmp [rax]
0x00121622 : div [rsp + rdx + 0x78]; ret
0x000cc864 : sub ah, dh; jmp [rsi + 0xf]
0x0011ffbb : add al, [rax]; pop rbx; ret
0x000225d8 : mov fs:[rbp], rdx; call rax
0x00131134 : sub dh, bh; jmp [rsi + 0xf]
0x0003a1b4 : xor eax, 0x38fad7; call rax
0x00046b98 : xor eax, 0x3830f3; call rax
0x0005aa19 : movzx eax, al; neg eax; ret
0x00052343 : xor eax, 0x377948; call rax
0x001458b8 : add r9, [rsp + 8]; call rax
0x0009c053 : dec [rax - 0x77]; clc ; ret
0x0003d3e1 : xor eax, 0x38c8aa; call rax
0x0009ba99 : sub [rbp + 0x63], r14b; ret
0x000dec7a : adc dh, dl; jmp [rsi + 0xf]
0x0009588e : movq [rdi + 0x10], mm2; ret
0x001423f3 : mov rsi, r8; call [rax + 8]
0x0007c7f7 : xor bh, cl; jmp [rsi + 0xf]
0x0000b877 : add [rax], al; pop rbx; ret
0x00102e9f : add [rax], al; pop rbp; ret
0x000fe7c1 : mov eax, [rax + 0x160]; ret
0x00049d5a : xor eax, 0x37ff31; call rax
0x000fbf07 : pop rsp; mov esi, 2; jmp rax
0x000fbf06 : pop r12; mov esi, 2; jmp rax
0x000000a4 : pop rax;  add [rax], al; ret
0x00086f23 : mov [rdi], edx; pop rbx; ret
0x0012afa2 : mov edi, ebp; call [rax + 8]
0x0009a790 : add eax, [rax]; pop rbx; ret
0x00086f22 : mov [rdi], rdx; pop rbx; ret
0x001383f5 : sub [rax], eax; pop rbx; ret
0x00136d22 : sub esp, -0x80; pop rbx; ret
0x0011fc4e : add [rdx], eax; pop rbx; ret
0x0013af2e : mov bh, ch; jmp [rsi + 0x2e]
0x00113a60 : mov eax, edi; bswap eax; ret
0x0012b2b7 : xchg dh, bh; jmp [rsi + 0xf]
0x0014b500 : lea ecx, [rbx + rcx]; jmp r9
0x00128b00 : mov [rsp + 8], rcx; call r12
0x000680a6 : sbb [rax], al; setne al; ret
0x0009c687 : lea ecx, [rax + 4]; call rbx
0x0010fe0c : sub eax, [rax]; pop rbp; ret
0x00020bec : mov rax, [rsp + 8]; call rax
0x0012c571 : mov ecx, [rsp + 8]; call rcx
0x00136d21 : sub rsp, -0x80; pop rbx; ret
0x0009c686 : lea rcx, [rax + 4]; call rbx
0x001423f4 : mov esi, eax; call [rax + 8]
0x000801e6 : int1 ; pop rbx; pop rbp; ret
0x00065045 : mov rdi, rax; call [rax + 8]
0x00138898 : add gs:[rax - 0x7d], cl; ret
0x00138fa4 : mov rdi, r15; call [rax + 8]
0x0006faa0 : mov [rip + 0x35cb8e], 0; ret
0x0001cfd7 : add [rdi], cl; push rsp; ret
0x0011fc4d : add [rdx], r8d; pop rbx; ret
0x00067541 : sub bh, dh; jmp [rsi + 0x2e]
0x00022e2b : mov [rsi], edx; pop rbp; ret
0x00131ed4 : bswap ebp; call [rax + 0x18]
0x001458b9 : add ecx, [rsp + 8]; call rax
0x0011d7a3 : sub dh, ch; jmp [rsi + 0x2e]
0x0005f707 : add ss:[rax - 0x77], cl; ret
0x0012dda8 : push rbp; adc [rcx], bh; ret
0x0013b8e0 : mov rsi, rsp; call [rax + 8]
0x000f25a5 : div [rcx]; shr al, 0xc3; ret
0x000062d3 : add al, 0; add bh, dh; ret 0
0x00138fa5 : mov edi, edi; call [rax + 8]
0x00065046 : mov edi, eax; call [rax + 8]
0x0009c51a : lea rcx, [rax + 1]; call rbx
0x0014217e : sbb ch, bh; jmp [rsi + 0x2e]
0x000bf506 : mov edi, [rsp + 8]; call r12
0x0009c51b : lea ecx, [rax + 1]; call rbx
0x000f2659 : push [rcx]; shr al, 0xf; ret
0x000bf505 : mov rdi, [rsp + 8]; call r12
0x0013b8e1 : mov esi, esp; call [rax + 8]
0x00072ee1 : mov [rsp + 8], rax; call rcx
0x000b16a3 : add [rax], al; syscall ; ret
0x00108e88 : mov edi, 0x2000004; call rcx
0x001264c7 : mov esi, gs; jmp [rsi + 0xf]
0x0000ed7b : adc bh, bh; jmp [rsi - 0x70]
0x00128b01 : mov [rsp + 8], ecx; call r12
0x0012b4fd : add [rax], r8b; pop rbx; ret
0x0005ab92 : add al, 1; xor eax, eax; ret
0x000877e5 : lea r10, [r10 + r9]; jmp r10
0x0013b324 : xchg ch, bh; jmp [rsi + 0xf]
0x0012afa1 : mov rdi, rbp; call [rax + 8]
0x0012d86c : mov rdi, rbx; call [rax + 8]
0x00113a70 : mov eax, edi; ror ax, 8; ret
0x0012c570 : mov rcx, [rsp + 8]; call rcx
0x00138395 : mov [rbx], eax; pop rbx; ret
0x00169a27 : sbb eax, eax; or eax, 1; ret
0x0012768a : xor rdi, fs:[0x30]; call rax
0x00072ee2 : mov [rsp + 8], eax; call rcx
0x00063dbd : add ss:[rax - 0x39], cl; ret
0x0006ec1c : mov [rip + 0x35d9b2], 0; ret
0x0006ebb8 : add [rip + 0x35da15], 1; ret
0x000025d3 : xor esp, ecx; cmp al, 0; ret
0x001003cb : xor al, al; or eax, edx; ret
0x000f0c3f : adc al, 2; call [rbx + 0x40]
0x00021c8e : xor rdx, fs:[0x30]; call rdx
0x00020bed : mov eax, [rsp + 8]; call rax
0x0013849d : sub rax, -0x80; pop rbx; ret
0x00134deb : bswap rbp; call [rax + 0x18]
0x000008d9 : xor rax, fs:[0x30]; call rax
0x00068053 : mov rdi, r9; jmp [rsi + 0xf]
0x0013849e : sub eax, -0x80; pop rbx; ret
0x0012d86d : mov edi, ebx; call [rax + 8]
0x00075d90 : mov [rip + 0x35689e], 0; ret
0x00086f1a : pop rbx; mov [rdi], rdx; ret
0x00138394 : mov [rbx], rax; pop rbx; ret
0x000c49fc : push rsi; add rsp, 0x38; ret
0x00169a2b : add ebx, eax; nop [rax]; ret
0x000af33e : adc [rax + 1], cl; clc ; ret
0x00088b94 : mov dh, 7; sub eax, ecx; ret
0x0003c033 : dec [rax + 1]; clc ; jmp rax
0x00127106 : mov gs, ebp; jmp [rsi + 0xf]
0x0006beaf : add [rdi], cl; mov dh, 2; ret
0x00033a30 : mov [rdx], 0; mov eax, 2; ret
0x00169870 : add rax, r8; vzeroupper ; ret
0x0014ba23 : sub [rdi - 0x10], ebp; jmp r9
0x00070bf5 : mov eax, edx; add rsp, 8; ret
0x0003c0ef : mov [rbp - 0x508], 1; jmp rax
0x0009548d : lea rcx, [r11 + rcx]; jmp rcx
0x0007b9b6 : add eax, 0x34e2bd; call [rax]
0x00134d0e : add bl, al; xor eax, eax; ret
0x00142355 : add eax, 0x288f26; call [rax]
0x00113929 : mov rax, rdi; sar rax, 6; ret
0x0009621c : mov al, 4; add [rax], al; ret
0x00136a95 : mov esi, 6; call [rax + 0x28]
0x000af82d : sub rax, rdi; shr rax, 2; ret
0x000680c3 : add al, 8; add [rax], al; ret
0x00120110 : lea eax, [rdi + rsi + 8]; ret
0x0009b9c8 : xor al, 1; add [rax], al; ret
0x000af609 : lea rax, es:[rdi - 0x10]; ret
0x00142084 : sbb ebp, edi; jmp [rsi + 0xf]
0x001120c7 : popfq ; clc ; jmp [rsi + 0xf]
0x0003aacf : mov [rbp - 0x500], 1; jmp rax
0x0009548e : lea ecx, [rbx + rcx]; jmp rcx
0x00048c89 : mov [rbp - 0x4c0], 1; jmp rax
0x00169672 : add ch, al; std ; xlatb ; ret
0x001451ba : add eax, 0x28a019; call [rax]
0x00030cc4 : xor edi, edi; jmp [rsi + 0xf]
0x000bfcb5 : mov eax, esi; add rsp, 8; ret
0x0003c0db : mov [rbp - 0x510], 1; jmp rax
0x0011fd5c : inc [rcx + rcx*4 - 0x40]; ret
0x00067207 : mov edi, dr1; jmp [rsi + 0xf]
0x00095e1c : mov al, 8; add [rax], al; ret
0x0013b355 : mov rax, [rdi + 8]; jmp [rax]
0x000b4c87 : mov dh, 0xff; jmp [rsi + 0xf]
0x000bfcb4 : mov rax, rsi; add rsp, 8; ret
0x0014b5d4 : lea edx, [rbx + rdx]; jmp rdx
0x000b0278 : movsd xmm0, [rsp - 0x10]; ret
0x0009c306 : sub rcx, 4; mov rax, rcx; ret
0x00162126 : inc ebx; nop [rax + rax]; ret
0x00046e10 : mov [rbp - 0x4d0], 0; jmp rax
0x0005abdb : add [rax], 0; add bl, dh; ret
0x00075fa8 : sbb [rbx + 0x5d], bl; jmp rax
0x0012899b : int1 ; mov rdi, r13; call r12
0x0003b0dd : mov [rbp - 0x4c8], 1; jmp rax
0x00068054 : mov edi, ecx; jmp [rsi + 0xf]
0x0013b356 : mov eax, [rdi + 8]; jmp [rax]
0x00145294 : sub [rax], al; call [rax + 8]
0x00174278 : adc al, 1; add [rax], al; ret
0x0009c307 : sub ecx, 4; mov rax, rcx; ret
0x00168e57 : adc ebx, esi; jmp [rsi + 0xf]
0x0003c0fe : mov [rbp - 0x520], 1; jmp rax
0x00048c66 : mov [rbp - 0x514], 1; jmp rax
0x000b013e : xor eax, eax; add rsp, 8; ret
0x00120000 : adc [rdi + rdx + 8], eax; ret
0x00033767 : mov [rdx], 0; mov eax, 1; ret
0x0003a437 : mov [rbp - 0x4d8], 0; jmp rax
0x00070bf4 : mov rax, rdx; add rsp, 8; ret
0x00169c45 : sub al, ch; std ; xlatb ; ret
0x00087344 : lea eax, [rdi + rax - 1]; ret
0x0016d600 : mov rax, r8; vzeroupper ; ret
0x0011936c : mov dl, 0xfa; jmp [rsi + 0xf]
0x0014b9c7 : lea rdx, [rdx - 0x40]; jmp r9
0x00141d08 : add eax, 0x289573; call [rax]
0x0003c08d : mov [rbp - 0x4f8], 1; jmp rax
0x001438a7 : add ebp, edi; jmp [rsi + 0xf]
0x000877e6 : lea edx, [rdx + rcx]; jmp r10
0x000af82e : sub eax, edi; shr rax, 2; ret
0x0009a215 : movsb [rdi], [rsi]; cld ; ret
0x00048c98 : mov [rbp - 0x4e8], 1; jmp rax
0x0014bacc : movaps xmm[rdi], xmm4; jmp r9
0x000e4a7e : lea r8, [rax + r13]; call r12
0x00087343 : lea rax, [rdi + rax - 1]; ret
0x0003c0cc : mov [rbp - 0x518], 1; jmp rax
0x0011392a : mov eax, edi; sar rax, 6; ret
0x0014b9c8 : lea edx, [rdx - 0x40]; jmp r9
0x00080648 : pop rbx; cmovne rax, rdx; ret
0x0007b8fb : add eax, 0x34e378; call [rax]
0x0014b5d3 : lea rdx, [r11 + rdx]; jmp rdx
0x00095fc8 : add al, 7; add [rax], al; ret
0x0010f4da : mov rdi, [rdi + 8]; jmp [rax]
0x0000ddf0 : mov [rip + 0x3bdb17], dl; ret
0x0010f4db : mov edi, [rdi + 8]; jmp [rax]
0x000a39e4 : mov bh, 0xf6; jmp [rsi + 0xf]
0x0003b1f0 : mov [rbp - 0x528], 1; jmp rax
0x00142c78 : mov bh, 5; xchg eax, edx; ret
0x0009b9f8 : add al, 1; add [rax], al; ret
0x000763b4 : mov ch, 0xff; jmp [rsi + 0xf]
0x001430d3 : add al, 0xf8; jmp [rsi + 0xf]
0x0017114c : add esi, edi; fadd st(3); ret
0x000449cf : mov dh, 0xfb; jmp [rsi + 0xf]
0x000aee48 : lea eax, [rax + rax - 1]; ret
0x0012010f : lea rax, [rdi + rsi + 8]; ret
0x000c55b1 : lea rax, [rax + rax - 1]; ret
0x0017428d : inc [rax]; add [rax], al; ret
0x00138efc : mov [rsp + 0xd0], 2; call rax
0x000afb93 : add al, 0; add [rax], al; ret
0x0002e0f4 : add [rax], 0; add al, ch; ret
0x0011b381 : xchg bh, bh; jmp [rsi - 0x70]
0x000d48c2 : mov bh, 0xf2; jmp [rsi + 0xf]
0x00022e2a : mov [rsi], r10d; pop rbp; ret
0x00067d51 : mov dr1, r9; jmp [rsi + 0x2e]
0x0007ba7b : add eax, 0x34e1f8; call [rax]
0x00169871 : add eax, eax; vzeroupper ; ret
0x0010d53e : add [rax], al; mov eax, 7; ret
0x0005dc99 : mov rdi, [rdi + 0xe0]; jmp rax
0x00000ed0 : pop r14; pop r15; pop rbp; ret
0x000a6914 : pop rbx; pop rbp; pop r14; ret
0x000338d4 : movups xmm0, xmm[rsp - 8]; ret
0x0000028a : pop r13; pop r14; pop r15; ret
0x0006f414 : mov [rip + 0x35abb5], rax; ret
0x00132ac6 : movzx eax, al; add eax, 1; ret
0x0007cb48 : mov [rip + 0x34fbca], eax; ret
0x0005ca5b : pop r13; pop r14; pop rbp; ret
0x0009c211 : add [rsp + rcx - 0xd], dh; ret
0x0006ac7d : add [rbp + 0x58d48c0], al; ret
0x0003388e : movups xmm0, xmm[rsp - 4]; ret
0x0015dd4f : add [rcx + 0x3518911], cl; ret
0x0005ca5c : pop rbp; pop r14; pop rbp; ret
0x0006f5bf : mov [rip + 0x35a9f3], eax; ret
0x0011b0a2 : mov edi, edi; jmp [rsi + 0x2e]
0x000009d1 : lea eax, [rip + 0x193971]; ret
0x0007cb47 : mov [rip + 0x34fbca], rax; ret
0x0007b667 : add [rsi + rax - 0xd], dh; ret
0x001244ce : add [rdx], al; add rsp, 8; ret
0x000662cf : add [rbx + 0xf89cfe1], al; ret
0x00120306 : mov rax, -1; mov rdx, rax; ret
0x000afb3e : add [rax], al; add rax, 3; ret
0x0005dc9a : mov edi, [rdi + 0xe0]; jmp rax
0x0016d601 : mov eax, eax; vzeroupper ; ret
0x0013c7b6 : div [rcx - 3]; jmp [rsi + 0xf]
0x0000f357 : add al, [rax]; add bl, dh; ret
0x000afbbe : add [rax], al; mov rax, 7; ret
0x0013d074 : add esp, 8; shr eax, 0x1f; ret
0x0003376b : add [rax], al; mov eax, 1; ret
0x0005f2af : add [rax - 0x7f], cl; ret 0xe8
0x000607fb : add edi, edx; jmp [rsi - 0x70]
0x000cc95e : mov [rdi], al; mov eax, 1; ret
0x000872b7 : add [rcx - 0x776b7f1], cl; ret
0x0009c83b : lea r9, [rsp + 0x28]; call r12
0x000afb9e : add [rax], al; mov rax, 5; ret
0x0012a706 : mov rcx, [rcx + 0x18]; jmp rcx
0x000f6bed : lea eax, [rip + 0x2d6235]; ret
0x0006d6f2 : pop rbx; xor edx, edx; jmp rax
0x0006f484 : mov [rip + 0x35ab8d], rax; ret
0x0002e195 : add rsp, 8; movzx eax, al; ret
0x0006f59e : mov [rip + 0x35aa0b], rax; ret
0x0006f5be : mov [rip + 0x35a9f3], rax; ret
0x0007d95b : add [rdx + rbp - 9], dh; ret 0
0x001244b5 : add [rbp - 0xcf98b40], al; ret
0x0002e196 : add esp, 8; movzx eax, al; ret
0x0001cb66 : add [rax], al; add rsp, 8; ret
0x001427a3 : mov rdi, r8; call [rax + 0x18]
0x001691d5 : add rax, rcx; vzeroupper ; ret
0x0001ee30 : mov eax, [rip + 0x3ab0a2]; ret
0x000e29f9 : pop rdx; pop rcx; pop rbx; ret
0x00002b96 : pop rsp; pop r13; pop r14; ret
0x000a04f1 : push -0x1fe17; jmp [rsi + 0xf]
0x000afb8e : add [rax], al; mov rax, 4; ret
0x0006f425 : mov [rip + 0x35ab9d], eax; ret
0x00112ed7 : pushfq ; clc ; jmp [rsi + 0xf]
0x0011c123 : sub al, [rax]; add rsp, 8; ret
0x001692fc : xor eax, eax; vzeroupper ; ret
0x001421aa : sub [rax], al; add rsp, 8; ret
0x0006721b : mov dr1, edi; jmp [rsi - 0x70]
0x00150b6b : add [rax - 0x7f], cl; ret 0x80
0x000a6533 : mov esi, esi; jmp [rsi + 0x2e]
0x000e8d27 : push [rsi + rbx*8 + 0x39]; ret
0x000f6a0c : lea rax, [rip + 0x2d6415]; ret
0x00000772 : pop rbp; pop r12; pop r13; ret
0x00138300 : mov dh, 0xfd; jmp [rsi + 0x2e]
0x0010330c : add eax, 1; mov [rdx], ax; ret
0x001426e3 : mov rdi, r8; call [rax + 0x10]
0x0006eb20 : mov rax, [rip + 0x35c869]; ret
0x00008533 : add [rax], al; add cl, ch; ret
0x0000028b : pop rbp; pop r14; pop r15; ret
0x0000aaf0 : mov rax, [rip + 0x3c0c69]; ret
0x00134b9e : push 2; add rdi, 0x68; jmp rcx
0x000025d1 : mov eax, [rip + 0x3ccc31]; ret
0x0012c943 : movups xmm[rsi + 8], xmm0; ret
0x0011eef2 : adc esi, ebp; jmp [rsi + 0x2e]
0x000ee2ee : sbb al, 0xf1; jmp [rsi + 0x2e]
0x00000081 : pop rax; pop rbx; pop rbp; ret
0x00075254 : stosq [rdi], rax; pop rbx; ret
0x0011881f : mov cl, 0xff; jmp [rsi + 0x2e]
0x00099620 : xor ch, ch; mov [rdi], ch; ret
0x001248f9 : sbb [rbp - 0xcfd8a40], al; ret
0x00173d75 : sbb eax, eax; sbb eax, -1; ret
0x00096bcf : add [rax + 0x78d4837], cl; ret
0x001184bf : mov ah, 0xff; jmp [rsi + 0x2e]
0x00169349 : add rax, rdi; vzeroupper ; ret
0x00000ed1 : pop rsi; pop r15; pop rbp; ret
0x00002b95 : pop r12; pop r13; pop r14; ret
0x00067d52 : mov dr1, ecx; jmp [rsi + 0x2e]
0x000b4c86 : mov sil, 0xff; jmp [rsi + 0xf]
0x00039272 : inc [rax - 0x94343]; jmp [rax]
0x001699ec : sub eax, edx; vzeroupper ; ret
0x0013b472 : lea esi, [rsp + 8]; call [rax]
0x000c5fcd : add [rax], al; add dh, dh; ret
0x0006f415 : mov [rip + 0x35abb5], eax; ret
0x000025c1 : mov eax, [rip + 0x3ccc51]; ret
0x001348cb : mov cl, 0xed; jmp [rsi - 0x70]
0x00003b35 : add [rax], al; add al, ch; ret
0x0012a707 : mov ecx, [rcx + 0x18]; jmp rcx
0x001484f3 : mov ah, 0xfc; jmp [rsi + 0x2e]
0x0010fecf : add [rax], al; add cl, cl; ret
0x0013c6b6 : div [rdx - 3]; jmp [rsi + 0xf]
0x00071276 : add al, [rax]; add dh, dh; ret
0x000abdb0 : xor r14, rsi; jmp [rsi + 0x2e]
0x0006f474 : mov [rip + 0x35ab95], rax; ret
0x000f6bec : lea rax, [rip + 0x2d6235]; ret
0x000f463d : adc [rax], al; add bl, dh; ret
0x00001935 : add eax, 1; push rax; call rbx
0x0006f5fe : mov [rip + 0x35a9d8], eax; ret
0x00033a34 : add [rax], al; mov eax, 2; ret
0x000703f5 : add [rbp - 0xcf98740], al; ret
0x0015268b : int1 ; mov [rdi - 8], rcx; ret
0x0006f475 : mov [rip + 0x35ab95], eax; ret
0x0001ee5c : mov [rip + 0x3ab076], edx; ret
0x0004539a : add cl, [rax + 0x29]; ret 0xb8
0x0006f59f : mov [rip + 0x35aa0b], eax; ret
0x0009ca0d : lea r9, [rsp + 0x20]; call rbx
0x000afb7e : add [rax], al; mov rax, 3; ret
0x00021595 : pop r12; pop r13; pop rbp; ret
0x00066da0 : popfq ; stc ; jmp [rsi + 0x2e]
0x000025c0 : mov rax, [rip + 0x3ccc51]; ret
0x000abc3a : lea r9, [rsp + 0x30]; call r12
0x00064e10 : mov rax, [rax + 0x20]; jmp rax
0x001368a3 : mov ch, 0xee; jmp [rsi + 0x2e]
0x00022669 : mov eax, eax; or rax, rdx; ret
0x00062f7b : add [rdx + rax - 0xd], dh; ret
0x00124145 : sbb al, [rdi]; add al, ch; ret
0x0016d30f : sub rax, rdx; vzeroupper ; ret
0x000009d0 : lea rax, [rip + 0x193971]; ret
0x001417a1 : add esp, 8; sar eax, 0x1f; ret
0x000c1d0c : pop rbx; pop r12; pop rbp; ret
0x0014dabf : int1 ; mov [rdi - 8], rdx; ret
0x0005d84b : xor edi, edx; jmp [rsi - 0x70]
0x000afb6e : add [rax], al; mov rax, 2; ret
0x00133a98 : sub al, ch; xchg eax, edx; ret
0x000e4a7f : lea eax, [rax + rbp]; call r12
0x0006eb21 : mov eax, [rip + 0x35c869]; ret
0x000026c0 : pop rbx; pop rbp; pop r12; ret
0x001450e1 : pop rax; pop rdx; pop rbx; ret
0x0000063d : add [rax], al; add bl, dh; ret
0x000965df : add [rcx + 0x4578817], cl; ret
0x0005e221 : sub edx, edi; jmp [rsi + 0x2e]
0x000025d0 : mov rax, [rip + 0x3ccc31]; ret
0x001690df : add rax, rdi; sub rax, r8; ret
0x000afec8 : pop rbp; pop r12; pop r14; ret
0x0006f424 : mov [rip + 0x35ab9d], rax; ret
0x000453fe : inc [rax - 0x91b43]; jmp [rax]
0x000009c0 : lea rax, [rip + 0x191b34]; ret
0x001417a0 : add rsp, 8; sar eax, 0x1f; ret
0x000afb5e : add [rax], al; mov rax, 1; ret
0x001249d9 : add rsp, 8; movzx eax, ax; ret
0x001327df : adc esi, edi; jmp [rsi + 0x2e]
0x00075255 : stosd [rdi], eax; pop rbx; ret
0x0013d073 : add rsp, 8; shr eax, 0x1f; ret
0x0001ee20 : mov eax, [rip + 0x3ab0b6]; ret
0x000afbae : add [rax], al; mov rax, 6; ret
0x0006f485 : mov [rip + 0x35ab8d], eax; ret
0x001249da : add esp, 8; movzx eax, ax; ret
0x00096680 : movdqu xmm[rdi - 1], xmm0; ret
0x00021596 : pop rsp; pop r13; pop rbp; ret
0x000abdb1 : xor esi, esi; jmp [rsi + 0x2e]
0x0007d9d6 : add dh, [rax + rcx - 9]; ret 0
0x00131cc1 : movups xmm[rdi + 8], xmm0; ret
0x0013b471 : lea rsi, [rsp + 8]; call [rax]
0x000488a0 : mov r8, [rbp - 0x520]; jmp rax
0x0016934a : add eax, edi; vzeroupper ; ret
0x00128933 : mov al, 0xfe; jmp [rsi + 0x2e]
0x001691d6 : add eax, ecx; vzeroupper ; ret
0x0006f614 : mov [rip + 0x35d042], eax; ret
0x00133583 : add al, 0xfe; jmp [rsi + 0x2e]
0x000fbb8e : add [rdi + rax - 0xd], dh; ret
0x000009c1 : lea eax, [rip + 0x191b34]; ret
0x00083b94 : sub [rax], al; add bh, dh; ret
0x00005cfc : add [rsp + rsi - 0xa], dh; ret
0x000f6a0d : lea eax, [rip + 0x2d6415]; ret
0x00064e11 : mov eax, [rax + 0x20]; jmp rax
0x0015dd2f : add [rcx + 0x4518811], cl; ret
0x0011ffb9 : mov [rax + 2], 0; pop rbx; ret
0x0006d034 : add [rcx + rcx - 0xd], dh; ret
0x0000aaf1 : mov eax, [rip + 0x3c0c69]; ret
0x001690e0 : add eax, edi; sub rax, r8; ret
0x0001f7ae : mov rdi, [rsp + 0x18]; call rbp
0x0003b137 : mov ecx, 1; mov r8d, 1; jmp rax
0x000048a0 : mov rdi, [rsp + 0x30]; call r14
0x000c3e38 : mov ebx, [rbp - 8]; leave ; ret
0x0004415e : mov edx, ebx; call [r13 + 0x38]
0x00003fc4 : mov rdi, [rsp + 0x20]; call r15
0x00021d6c : mov edi, [rax + 0x20]; call rdx
0x00004a79 : mov edi, [rsp + 0x30]; call rbx
0x000aa99b : add [rbp + 0x390a74db], al; ret
0x000b0a23 : mov [rsp + 0xb8], edi; call r13
0x0003099a : mov edi, [rsp + 0x24]; call rax
0x0011c0b6 : mov eax, [rsp + 0x30]; call rax
0x0011c0b5 : mov rax, [rsp + 0x30]; call rax
0x0016dd54 : add cl, [rax + 0x77f8c50f]; ret
0x000cd00f : add [rbp - 0x7cb7febd], cl; ret
0x000f3a83 : mov eax, 0; cmova eax, edx; ret
0x00060bf0 : mov [rdi], 0; mov rax, rdi; ret
0x0012c58d : mov edi, [rsp + 0x10]; call rax
0x00037e3f : add rdx, r15; call [rax + r9*8]
0x0005ff61 : mov rdi, rbx; call [rax + 0x58]
0x0009bb04 : add [rdi + 2], bh; neg eax; ret
0x00045527 : mov rdx, r13; call [rbx + 0x38]
0x0005fad4 : mov edi, ebx; call [r14 + 0x48]
0x00062a7c : mov edi, esp; call [r15 + 0x18]
0x000025c3 : push rcx; int3 ; cmp al, 0; ret
0x0016dd55 : mov [rdi], cl; vzeroupper ; ret
0x00131c45 : lea edi, [rbx + 0xc8]; call rax
0x0000835f : mov edi, [rsp + 0x38]; call r15
0x00137f5d : mov edi, ebx; call [rax + 0x10]
0x000b0111 : xor [rax], eax; add rsp, 8; ret
0x0006495c : mov rdi, r13; call [r13 + 0x20]
0x00064153 : sub edx, esi; call [r14 + 0x70]
0x0006110e : mov rdi, rbp; call [r13 + 0x38]
0x000d2355 : adc [rbx - 0x7cb7fe3b], al; ret
0x0005d5a7 : mov rdi, rbx; call [rbp + 0x60]
0x001121db : adc [rbx - 0x7cb603ba], cl; ret
0x00040809 : mov ecx, esi; call [rax + r8*8]
0x0006a85a : mov edi, ebx; call [rax + 0x78]
0x00094f3c : adc [rax - 0x77], cl; clc ; ret
0x0012ca7b : mov edi, ebp; call [rax + 0x30]
0x000473c7 : mov esi, edi; call [r14 + 0x38]
0x000317b7 : mov eax, ecx; adc eax, eax; ret
0x000904e6 : add eax, edx; sub rax, rdi; ret
0x0013901c : mov edi, esi; call [rax + 0x18]
0x00102176 : mov edx, 0; cmovb rax, rdx; ret
0x001133a6 : mov edi, ebx; call [rbp + 0x10]
0x000b068a : mov [rsp + 0xa8], r14; call rbx
0x000e1254 : mov rdi, r13; call [r14 + 0x40]
0x0008af4a : add eax, edi; add rax, rsi; ret
0x0005d9a0 : xor esi, esi; mov rax, rsi; ret
0x0010320b : add eax, 1; mov [rdx], eax; ret
0x0008a726 : add eax, edi; add rax, rcx; ret
0x000755b2 : add [rax - 0x7d], cl; jmp [rax]
0x00083ba0 : sub [rax], eax; add bh, dh; ret
0x0012da8d : mov rsi, r14; call [r15 + 0x40]
0x0008d5b5 : mov cl, [rbx - 0x37d67dfc]; ret
0x0013ce53 : adc [rsp + 0x28], eax; call rdx
0x0012b8f5 : mov rdi, r13; call [rax + 0x20]
0x0009c052 : xor edi, edi; mov rax, rdi; ret
0x00044bb3 : add ch, [rip - 0x7d000000]; ret
0x0004415d : mov rdx, rbx; call [r13 + 0x38]
0x0000835e : mov rdi, [rsp + 0x38]; call r15
0x0000539a : mov rdi, [rsp + 0x38]; call r14
0x00005840 : mov rdi, [rsp + 0x38]; call r13
0x00004d62 : mov rdi, [rsp + 0x38]; call r12
0x0001d01a : add [rax - 0x3f91f09a], al; ret
0x000c32fe : add [rax + 0x21058d48], dl; ret
0x00076950 : mov rsi, [rsp + 0x68]; call rax
0x00047046 : mov rdx, r14; call [rax + 0x38]
0x0005dfd9 : mov edi, ebx; call [r13 + 0x38]
0x000904e5 : add rax, rdx; sub rax, rdi; ret
0x000045a9 : mov edi, [rsp + 0x38]; call rbx
0x00063e05 : mov rdi, rbp; call [rbp + 0x20]
0x0013286e : lea edi, [rbp + 0x10]; call rax
0x0003a25d : mov rdx, r13; call [r15 + 0x38]
0x000476fe : mov edi, ebp; call [r15 + 0x38]
0x000ed335 : add [rax], eax; add al, ch; ret
0x000339c5 : mov [rdx], eax; mov eax, 2; ret
0x001133a5 : mov rdi, rbx; call [rbp + 0x10]
0x00069249 : mov rdi, rcx; call [r13 + 0x38]
0x0008a725 : add rax, rdi; add rax, rcx; ret
0x000045a8 : mov rdi, [rsp + 0x38]; call rbx
0x000872af : add cl, [rax - 0x77]; clc ; ret
0x0005da34 : add [rax], eax; add bl, dh; ret
0x000391f4 : inc [rbx - 0x8ff43]; call [rax]
0x001427a4 : mov edi, eax; call [rax + 0x18]
0x00022617 : xor eax, edx; sub eax, edx; ret
0x000482fe : mov edi, ebp; call [rax + 0x38]
0x0013347f : mov rdi, rbp; call [rax + 0x48]
0x0003a6d5 : mov edx, edi; call [rax + 0x38]
0x00137f5c : mov rdi, rbx; call [rax + 0x10]
0x0006bc7b : mov edi, ebx; call [r14 + 0x78]
0x000061fc : mov eax, [rsp + 0x20]; call rax
0x0009c83c : lea ecx, [rsp + 0x28]; call r12
0x0006d436 : mov edi, ebx; call [r15 + 0x18]
0x0013c300 : mov rdi, rbx; call [rax + 0x48]
0x00040808 : mov rcx, r14; call [rax + r8*8]
0x0011a740 : add [rcx], dh; jmp [rsi - 0x77]
0x0012defb : mov esi, ebp; call [rbx + 0x40]
0x00131d7a : mov [rdx], rax; mov eax, 1; ret
0x000b0c02 : mov [rsp + 0xa8], r13; call rbx
0x000067da : mov edi, [rsp + 0x40]; call r15
0x0007bd28 : mov rdi, [rbx + 0x48]; call rax
0x00038231 : sub rdx, rsi; call [rbx + 0x38]
0x0005e6a1 : mov edi, esp; call [r15 + 0x38]
0x000c67b5 : mov edi, ebp; call [r14 + 0x38]
0x0000219e : mov esi, [rbp - 0x70]; call rsi
0x0001cfbb : add [rax + 0x1fe8c17f], al; ret
0x0005ff62 : mov edi, ebx; call [rax + 0x58]
0x0006be72 : sub edx, esi; call [r13 + 0x70]
0x000af63f : add [rax - 0x73], cl; clc ; ret
0x0007c238 : mov [rdi], rsi; mov eax, 1; ret
0x000061fb : mov rax, [rsp + 0x20]; call rax
0x0012bf10 : mov edi, edx; call [rax + 0x20]
0x00123360 : add [rcx - 0x80], al; jmp [rsi]
0x0013c2ee : adc al, 0x24; call [rax + 0x48]
0x00022e76 : mov [rsi], 0; xor eax, eax; ret
0x0012afdf : mov edi, ebp; call [rax + 0x20]
0x0003a606 : mov rdi, r14; call [rax + 0x38]
0x0005d750 : mov edi, eax; call [rax + 0x20]
0x00139f79 : mov rdi, r12; call [rax + 0x28]
0x0012c5f1 : mov rax, [rsp + 0x28]; call rax
0x00088e3e : xor eax, eax; sub eax, ecx; ret
0x000404f9 : add ecx, eax; mov eax, r9d; ret
0x0005e6a0 : mov rdi, r12; call [r15 + 0x38]
0x00008f85 : mov rdi, [rsp + 0x40]; call rbx
0x000c044d : mov [rdx], esi; add rsp, 8; ret
0x0012e8e3 : mov rbp, rdx; call [rbx + 0x10]
0x0014504e : mov rax, [rax + 0x170]; jmp rax
0x0005d5a8 : mov edi, ebx; call [rbp + 0x60]
0x0012e8e4 : mov ebp, edx; call [rbx + 0x10]
0x0015dcdc : add [rax], eax; add bl, al; ret
0x0006cb1b : mov rdi, rbx; call [rbp + 0x18]
0x00138fb6 : mov rdi, r15; call [rax + 0x28]
0x00139002 : mov [rsp + 0xc8], rdx; call rax
0x0006d3cc : mov rdi, rbx; call [r15 + 0x20]
0x00100cfd : add edi, ebp; xor eax, eax; ret
0x0006aa41 : mov edi, ebx; call [r13 + 0x20]
0x0003a25e : mov edx, ebp; call [r15 + 0x38]
0x0006924a : mov edi, ecx; call [r13 + 0x38]
0x00069770 : mov rdi, rbx; call [r15 + 0x40]
0x00141d23 : mov rdi, rbp; call [rax + 0x18]
0x00015115 : add [rbx - 0x7bf0fc06], al; ret
0x0012c5f2 : mov eax, [rsp + 0x28]; call rax
0x00062566 : mov rdi, rbx; call [rax + 0x18]
0x0002262b : xor eax, edx; sub rax, rdx; ret
0x0005d74f : mov rdi, rax; call [rax + 0x20]
0x00038232 : sub edx, esi; call [rbx + 0x38]
0x00092166 : add [rax - 0x776b7fe], ecx; ret
0x0006a093 : mov rdi, rbx; call [rax + 0x40]
0x00134be1 : lea rdi, [rbx + 0x68]; call rax
0x000476fd : mov rdi, r13; call [r15 + 0x38]
0x0006e877 : sbb [rbx - 0x2fd6efb9], cl; ret
0x0005fda6 : mov edi, ebx; call [r13 + 0x48]
0x0012e73b : mov rsi, r14; call [r13 + 0x40]
0x0005fad3 : mov rdi, rbx; call [r14 + 0x48]
0x0016dd84 : mov [rdi], cx; vzeroupper ; ret
0x0005dcd6 : mov edi, [rdi + 0xe0]; call rax
0x00138fb7 : mov edi, edi; call [rax + 0x28]
0x000b068b : mov [rsp + 0xa8], esi; call rbx
0x000dd8d8 : sub [rbp - 0x7cb7febd], cl; ret
0x000623bd : mov edi, ebx; call [rbp + 0x20]
0x000d2a7b : add cl, [rax - 0x7bf0afad]; ret
0x000c8517 : add [rbx - 0x7cb7f3bd], cl; ret
0x000623bc : mov rdi, rbx; call [rbp + 0x20]
0x0006d435 : mov rdi, rbx; call [r15 + 0x18]
0x0003f703 : mov rdi, [rbp - 0xc0]; call rax
0x0001f7af : mov edi, [rsp + 0x18]; call rbp
0x000f46cc : add [rax - 0x3fcef877], al; ret
0x0001805f : add [rbx - 0x7bf0fe08], al; ret
0x000c3e37 : mov rbx, [rbp - 8]; leave ; ret
0x0012d203 : mov edi, ebp; call [rax + 0x28]
0x0006631b : mov edx, eax; mov eax, edx; ret
0x0005ff37 : mov rdi, rbx; call [r13 + 0x58]
0x0003a6d4 : mov rdx, r15; call [rax + 0x38]
0x0001bfed : add [rax - 1], bh; pop rbx; ret
0x00004d63 : mov edi, [rsp + 0x38]; call r12
0x00005841 : mov edi, [rsp + 0x38]; call r13
0x0000539b : mov edi, [rsp + 0x38]; call r14
0x0011fd5b : add esi, edi; mov eax, r8d; ret
0x0012702c : add [rdi - 0x3fce0013], cl; ret
0x0003bcc0 : mov r11, [rbp - 0x530]; jmp rax
0x000404f8 : add r9d, eax; mov eax, r9d; ret
0x00168e8a : add eax, edi; sub rax, rsi; ret
0x0012b71b : mov rdi, r15; call [rax + 0x20]
0x0008772a : add al, [rsi + 0x3948fff7]; ret
0x000e95d2 : add [rcx - 0x80], al; jmp [rdi]
0x0001d7b7 : movdqa xmm0, xmm3; pop rbx; ret
0x0013c301 : mov edi, ebx; call [rax + 0x48]
0x0010f407 : syscall ; pop rdx; pop rsi; ret
0x0013901b : mov rdi, r14; call [rax + 0x18]
0x0006be71 : sub rdx, rsi; call [r13 + 0x70]
0x00139d46 : mov edi, esi; call [rax + 0x28]
0x000872ae : add r9b, [r8 - 0x77]; clc ; ret
0x00136adf : mov esi, 0xd; call [rax + 0x28]
0x000630da : sbb [rcx + 0x5bc0310b], cl; ret
0x0005f7b8 : mov rsi, r12; call [r13 + 0x38]
0x0008af49 : add rax, rdi; add rax, rsi; ret
0x00060bf5 : add [rax - 0x77], cl; clc ; ret
0x0005fda5 : mov rdi, rbx; call [r13 + 0x48]
0x000473c6 : mov rsi, r15; call [r14 + 0x38]
0x0012da8e : mov esi, esi; call [r15 + 0x40]
0x00131c44 : lea rdi, [rbx + 0xc8]; call rax
0x0003f704 : mov edi, [rbp - 0xc0]; call rax
0x0014504f : mov eax, [rax + 0x170]; jmp rax
0x0012d3c4 : mov edi, ebp; call [rax + 0x10]
0x0006110f : mov edi, ebp; call [r13 + 0x38]
0x0003d431 : mov edi, ebx; call [r14 + 0x38]
0x0012defa : mov rsi, r13; call [rbx + 0x40]
0x0003a607 : mov edi, esi; call [rax + 0x38]
0x0013286d : lea rdi, [rbp + 0x10]; call rax
0x00076951 : mov esi, [rsp + 0x68]; call rax
0x0012bd98 : xor eax, eax; call [rbp + 0x28]
0x000419a2 : mov dl, [rbx + 0x29490015]; ret
0x0006a39d : mov edi, ebx; call [rbp + 0x70]
0x0006e882 : adc [rbx - 0x2fd6efb9], cl; ret
0x000488a1 : mov eax, [rbp - 0x520]; jmp rax
0x0006aa40 : mov rdi, rbx; call [r13 + 0x20]
0x00033785 : mov eax, 1; mov [rdi], rsi; ret
0x0001c059 : sub cl, [rip - 0x763f7b00]; ret
0x0006bc7a : mov rdi, rbx; call [r14 + 0x78]
0x0003bcc1 : mov ebx, [rbp - 0x530]; jmp rax
0x0012d9ea : mov edx, eax; call [rbx + 0x10]
0x0012bf0f : mov rdi, r10; call [rax + 0x20]
0x00131f1e : mov ecx, [rsp + 0x28]; call rcx
0x00004a78 : mov rdi, [rsp + 0x30]; call rbx
0x000337a8 : mov [rdx], eax; mov eax, 1; ret
0x001375e0 : mov rdi, rax; call [rdx + 0x20]
0x00134be2 : lea edi, [rbx + 0x68]; call rax
0x00045528 : mov edx, ebp; call [rbx + 0x38]
0x000601d6 : mov edi, ebx; call [rbp + 0x68]
0x00001298 : mov [rax], 9; mov eax, edi; ret
0x00003fc5 : mov edi, [rsp + 0x20]; call r15
0x00160051 : add [rax + 0x28d4802], ecx; ret
0x0012afde : mov rdi, rbp; call [rax + 0x20]
0x0005dcd5 : mov rdi, [rdi + 0xe0]; call rax
0x00003b34 : add [rax], r8b; add al, ch; ret
0x0006a094 : mov edi, ebx; call [rax + 0x40]
0x00064152 : sub rdx, rsi; call [r14 + 0x70]
0x00146009 : mov edx, [rsp + 0x10]; call rdx
0x000631b2 : mov edi, ebx; call [rbp + 0x30]
0x0000219d : mov rsi, [rbp - 0x70]; call rsi
0x0012bcd6 : xor eax, eax; call [rbx + 0x18]
0x000b0c03 : mov [rsp + 0xa8], ebp; call rbx
0x000631b1 : mov rdi, rbx; call [rbp + 0x30]
0x0005f7b9 : mov esi, esp; call [r13 + 0x38]
0x00021d6b : mov rdi, [rax + 0x20]; call rdx
0x00138393 : mov fs:[rbx], rax; pop rbx; ret
0x000fe7e0 : mov [rax], 2; xor eax, eax; ret
0x0012bde4 : mov edi, ebx; call [rax + 0x28]
0x0009ca0e : lea ecx, [rsp + 0x20]; call rbx
0x0003a852 : mov rdi, r14; call [r15 + 0x38]
0x00037b20 : mov edx, ebp; call [r13 + 0x38]
0x001787ce : add [rax - 0x7ab80000], al; ret
0x0006726f : add [rax - 0x76b80000], al; ret
0x0014248d : mov rdi, rdx; call [rax + 0x20]
0x0001daea : add [rax], al; mov rax, -1; ret
0x0011fba5 : add [rax], r8b; mov eax, 2; ret
0x00141d24 : mov edi, ebp; call [rax + 0x18]
0x00139d45 : mov rdi, r14; call [rax + 0x28]
0x001426e4 : mov edi, eax; call [rax + 0x10]
0x0006d3cd : mov edi, ebx; call [r15 + 0x20]
0x0011b5b2 : push [rbp - 0x15]; pop rbx; ret
0x000abc3b : lea ecx, [rsp + 0x30]; call r12
0x000a9cad : add dh, [rcx]; jmp [rsi + 0x41]
0x0012e73c : mov esi, esi; call [r13 + 0x40]
0x000ec49f : add [rcx - 0x80], al; jmp [rdx]
0x00047047 : mov edx, esi; call [rax + 0x38]
0x00018e46 : add [rbx - 0x7bf0fc08], al; ret
0x000067d9 : mov rdi, [rsp + 0x40]; call r15
0x000c5eb5 : add [rax], r8b; mov eax, 1; ret
0x0006a39c : mov rdi, rbx; call [rbp + 0x70]
0x0003b136 : mov r9d, 1; mov r8d, 1; jmp rax
0x00037e40 : add edx, edi; call [rax + r9*8]
0x00135671 : lea rdi, [rbx + 0x58]; call rax
0x00132110 : mov rdx, [rsp + 0x20]; call rdx
0x00095634 : add ecx, [rcx + 0x357890f]; ret
0x001375e1 : mov edi, eax; call [rdx + 0x20]
0x0012b71c : mov edi, edi; call [rax + 0x20]
0x0012c58c : mov rdi, [rsp + 0x10]; call rax
0x000482fd : mov rdi, r13; call [rax + 0x38]
0x00037b1f : mov rdx, rbp; call [r13 + 0x38]
0x00146008 : mov rdx, [rsp + 0x10]; call rdx
0x0012bde3 : mov rdi, rbx; call [rax + 0x28]
0x00132111 : mov edx, [rsp + 0x20]; call rdx
0x000bf464 : pop rbx; or [rax], al; call r14
0x000aaa15 : add [rbp + 0x29d675db], al; ret
0x000c052e : add cl, [rcx - 0x3b7cb710]; ret
0x00069771 : mov edi, ebx; call [r15 + 0x40]
0x0012d202 : mov rdi, rbp; call [rax + 0x28]
0x00168e89 : add rax, rdi; sub rax, rsi; ret
0x0000f3ef : add [rcx + 0x7fe083f8], cl; ret
0x0012b109 : mov esi, esp; call [rax + 0x10]
0x000008c1 : mov eax, [rsp + 0x18]; call rax
0x00003e94 : mov rax, [rsp + 0x10]; call rax
0x0001e851 : mov edx, 1; cmove eax, edx; ret
0x0012a7db : mov edi, ebx; call [rax + 0x20]
0x0012b108 : mov rsi, r12; call [rax + 0x10]
0x0006d1bf : mov edi, edi; call [rax + 0x18]
0x0013c2b5 : mov esi, esp; call [rax + 0x40]
0x00135672 : lea edi, [rbx + 0x58]; call rax
0x00139003 : mov [rsp + 0xc8], edx; call rax
0x0005f028 : mov rdi, rbp; call [rax + 0x38]
0x00133480 : mov edi, ebp; call [rax + 0x48]
0x00124c88 : add [rbp + rsi - 9], esi; ret 0
0x000008c0 : mov rax, [rsp + 0x18]; call rax
0x000f7ca1 : add [rax - 0x76b7ffc8], al; ret
0x000aa947 : add [rbp + 0x29dc75db], al; ret
0x0012d3c3 : mov rdi, r13; call [rax + 0x10]
0x0006a859 : mov rdi, rbx; call [rax + 0x78]
0x00003e95 : mov eax, [rsp + 0x10]; call rax
0x00131f1d : mov rcx, [rsp + 0x28]; call rcx
0x00139f7a : mov edi, esp; call [rax + 0x28]
0x00062a7b : mov rdi, r12; call [r15 + 0x18]
0x000c67b4 : mov rdi, r13; call [r14 + 0x38]
0x0002269a : add [rbp + 3], dh; pop rbx; ret
0x0013f006 : add [rbx - 0x16efdbac], cl; ret
0x000b0a22 : mov [rsp + 0xb8], r15; call r13
0x00132668 : mov rdi, r12; call [rax + 0x20]
0x000e1255 : mov edi, ebp; call [r14 + 0x40]
0x0007bd29 : mov edi, [rbx + 0x48]; call rax
0x00008f86 : mov edi, [rsp + 0x40]; call rbx
0x000ed87f : add [rcx - 0x3fcefb89], cl; ret
0x0005ff38 : mov edi, ebx; call [r13 + 0x58]
0x00062567 : mov edi, ebx; call [rax + 0x18]
0x0006495d : mov edi, ebp; call [r13 + 0x20]
0x0003a853 : mov edi, esi; call [r15 + 0x38]
0x0013c2b4 : mov rsi, rsp; call [rax + 0x40]
0x0012a7da : mov rdi, rbx; call [rax + 0x20]
0x0010e41e : mov [rbp - 0x80], eax; call rcx
0x000601d5 : mov rdi, rbx; call [rbp + 0x68]
0x0003d430 : mov rdi, rbx; call [r14 + 0x38]
0x0010e006 : adc [rbp - 0x78], eax; call rax
0x0012dda4 : mov edx, ebx; call [r13 + 0x10]
0x0006d1be : mov rdi, r15; call [rax + 0x18]
0x0000b6ef : dec [rcx + rcx*4 - 9]; call rdx
0x000921a6 : add [rcx - 0x776b7fe], ecx; ret
0x0002262a : xor rax, rdx; sub rax, rdx; ret
0x00132669 : mov edi, esp; call [rax + 0x20]
0x0009c1c7 : sbb ecx, [rip - 0xc3d8c00]; ret
0x000048a1 : mov edi, [rsp + 0x30]; call r14
0x0000b836 : add esi, [rdi + rax - 0xd]; ret
0x0005dfd8 : mov rdi, rbx; call [r13 + 0x38]
0x000c63d5 : inc [rbx - 0x2ff73]; call [rax]
0x000e29f6 : add [rcx + 0x5b595a0a], cl; ret
0x0007c239 : mov [rdi], esi; mov eax, 1; ret
0x000af64f : add [rax - 0x73], cl; cld ; ret
0x00174394 : add [rdi + 9], bh; neg eax; ret
0x00063e06 : mov edi, ebp; call [rbp + 0x20]
0x0012bd68 : mov [rsp], 0; call [rax + 0x20]
0x0012ca7a : mov rdi, rbp; call [rax + 0x30]
0x0006cb1c : mov edi, ebx; call [rbp + 0x18]
0x0008a88e : xor [rsi + 0xf], ah; xlatb ; ret
0x00023087 : xor eax, eax; mov [rdi], r8; ret
0x0003819a : mov rdi, [rbp - 0x8a8]; call rax
0x0016549f : xchg eax, ecx; sub eax, edx; ret
0x00132112 : push rsp; and al, 0x20; call rdx
0x0000f3f0 : mov eax, edi; and eax, 0x7f; ret
0x0008a974 : lea eax, [rax + rdi + 0x20]; ret
0x000f5223 : mov [rax], -1; xor eax, eax; ret
0x0008b099 : movzx edx, dl; sub eax, edx; ret
0x00040601 : add [rax], al; mov eax, edx; ret
0x0001d074 : add [rdx + rbp*8 - 0xd], dh; ret
0x0008a943 : lea rax, [rax + rdi - 0x10]; ret
0x00153423 : add dh, bl; movq [rdi], mm1; ret
0x00137f37 : lea r9, [rsp + 0x3a]; call [rax]
0x0005f02c : push rax; cmp [rax + 1], cl; ret
0x00112143 : mov [rsi*2 - 0x776b717], al; ret
0x0008ae43 : lea rax, [rax + rdi + 0x30]; ret
0x0000ede3 : mov rdx, -1; cmove rax, rdx; ret
0x0001cbcc : sub rax, rdx; shr rax, 0x3f; ret
0x0010fb70 : mov [r8], edx; xor eax, eax; ret
0x0012affc : add [rax], al; call [rax + 0x28]
0x0001b6ee : add [rbx - 0x7cb70030], eax; ret
0x0006c62e : lea rsi, [rip - 0x3f5]; call rax
0x0006c62f : lea esi, [rip - 0x3f5]; call rax
0x0011fef4 : add rdi, rdx; mov [r9], rdi; ret
0x0012b70a : lea r9, [rsp + 0x2c]; call [rax]
0x00080165 : mov eax, 0; cmovne rax, rdi; ret
0x00060bf4 : add [rax], al; mov rax, rdi; ret
0x0008a999 : lea eax, [rdi + rax + 0x10]; ret
0x0009582d : movdqu xmm[rdi + 0xd], xmm2; ret
0x0000b887 : mov [rbx + 8], eax; pop rbx; ret
0x0007c33d : mov rax, r8; mov [rdi], rsi; ret
0x000f8d4b : adc ebp, [rip - 0x7af0ff00]; ret
0x0006c33a : lea esi, [rip - 0x100]; call rax
0x0001c058 : sub r9b, [rip - 0x763f7b00]; ret
0x0005f492 : lea esi, [rip - 0x198]; call rax
0x000741ae : add [rax], al; mov rax, rsi; ret
0x0008a8a2 : lea rax, [rdi + rax + 0x30]; ret
0x0009d093 : sbb [rdx + 0x39480032], esp; ret
0x0000a280 : add [rdx + rdi*2 - 0xa], dh; ret
0x0012c99e : add [rax], al; mov [rsi], 8; ret
0x0012bd6d : add [rax], al; call [rax + 0x20]
0x0000129c : add [rax], al; mov eax, edi; ret
0x000fc0e5 : pop rdi; or [rcx - 0xa], al; ret
0x0000f325 : adc [rdi], cl; mov bh, 0xc0; ret
0x00044498 : add edx, esp; call [r10 + rax*8]
0x0008a9a9 : lea eax, [rdi + rax + 0x20]; ret
0x0009a35a : adc [rdi + rdx - 0x20], ebx; ret
0x0011fef5 : add edi, edx; mov [r9], rdi; ret
0x00023126 : add [rax], al; xor eax, ecx; ret
0x00113b06 : mov eax, edi; shr eax, 0x18; ret
0x0000f224 : add cl, [rdi]; mov bh, 0xc0; ret
0x00009040 : add [rsi + rsi*2 - 0xa], dh; ret
0x0014600a : push rsp; and al, 0x10; call rdx
0x0002366a : mov [rdx], eax; mov rax, -1; ret
0x0009adc9 : mov [rsp + rbx*8 - 0xd], dh; ret
0x00070c4e : add [rcx], dh; call [rax + 0x31]
0x00044497 : add rdx, r12; call [r10 + rax*8]
0x00141d49 : sub [rax], al; call [rax + 0x28]
0x00092167 : mov [rdx], al; mov rax, rdi; ret
0x0008a973 : lea rax, [rax + rdi + 0x20]; ret
0x0009658b : add [rax], 0; add [rax], al; ret
0x0003819b : mov edi, [rbp - 0x8a8]; call rax
0x0002dd41 : lea esi, [rip + 0x349]; call rax
0x0009584d : movdqu xmm[rdi + 0xe], xmm2; ret
0x000794f6 : sbb [rax - 0x73], ecx; clc ; ret
0x000d0b9f : sub [rax - 0x80], al; call [rsi]
0x0004787d : add [rax + 1], cl; clc ; jmp rax
0x0000f5bb : add [rax], al; and eax, esi; ret
0x000871a1 : mov [rdi], dh; add rax, rdi; ret
0x0001bf8c : add [rax], al; mov rax, rcx; ret
0x0011d975 : add [rsi - 0x7d], ah; call [rax]
0x000903d0 : add [rax], al; bsf rax, rdx; ret
0x000c052f : mov eax, esi; add rsp, 0x48; ret
0x0006c339 : lea rsi, [rip - 0x100]; call rax
0x00122666 : add [rax], al; mov [r10], 0; ret
0x0007d999 : add [rdx + rax*8 - 0xd], dh; ret
0x0001cbcd : sub eax, edx; shr rax, 0x3f; ret
0x0008a8a3 : lea eax, [rdi + rax + 0x30]; ret
0x0001c8b6 : sub eax, edx; sar eax, 0x10; ret
0x0013c894 : push rdi; sub [rax + 1], bh; ret
0x000c644e : add [rax], al; call [r14 + 0x28]
0x00062f91 : add [rax], al; call [rax + 0x68]
0x0008ad4c : add [rsi + 0xf], ah; xlatb ; ret
0x0010fe90 : lea edi, [rip - 0x176]; call rax
0x0008a944 : lea eax, [rax + rdi - 0x10]; ret
0x0010fe8f : lea rdi, [rip - 0x176]; call rax
0x0013751d : lea r9, [rsp + 0x1c]; call [r10]
0x00061113 : push rbp; cmp [rax + 1], cl; ret
0x0006359d : xchg eax, ebp; sal bh, 0xd8; ret
0x0010fb65 : mov eax, 3; cmovne eax, edx; ret
0x000ed843 : mov [rsi], ax; xor eax, eax; ret
0x0012befb : lea r9, [rsp + 0x40]; call [rax]
0x0008252b : add [rdi + rcx - 0x4a], eax; ret
0x00047825 : mov [rbp - 0x4f0], 0x20; jmp rax
0x00146343 : sub [rax], al; xor eax, eax; ret
0x0016dd6e : mov [rdi], rcx; vzeroupper ; ret
0x000904f2 : div [rbp + 4]; xor rax, rax; ret
0x00021bf6 : add [rax], al; xor eax, eax; ret
0x00136b89 : lea r9, [rsp + 0x14]; call [r10]
0x000871c0 : mov [rdi], dx; add rax, rdi; ret
0x000d2e2e : add [rax], al; mov eax, 0xc; ret
0x0010d51b : push rax; mov rsi, rdx; call rax
0x0010a628 : add [rdx], al; call [rbx + 0x28]
0x0009668f : add bl, dh; movq [rdi], mm0; ret
0x00092178 : mov [rdx], ax; mov rax, rdi; ret
0x0007cc43 : mov [rdx + 0x63480034], edi; ret
0x0009bb0e : add [rax], al; xor rax, rax; ret
0x000d05bd : add [rax], al; add bh, dh; ret 8
0x0007d9b1 : add [rax], al; add bh, dh; ret 0
0x0007617b : add [rax - 0x7d], cl; call [rax]
0x0011fe62 : mov [r9], rax; mov eax, edx; ret
0x0002dd40 : lea rsi, [rip + 0x349]; call rax
0x0001cf9f : sub eax, edx; shr eax, 0x1f; ret
0x0001f8e7 : add [rcx - 0x7d], cl; call [rbx]
0x001641f7 : xchg eax, edx; sub eax, edx; ret
0x00094db2 : mov [rax], cl; mov rax, rdi; ret
0x0009a011 : add [rax], al; sub rax, rdx; ret
0x00138bf5 : add [rax], al; call [rax + 0x18]
0x0012b9da : lea r9, [rsp + 0x20]; call [rax]
0x00086dd3 : mov rcx, r8; mov [rdx], rcx; ret
0x0008a964 : lea eax, [rax + rdi + 0x10]; ret
0x000921fe : add ecx, [rax - 0x77]; clc ; ret
0x001699d9 : push [rbp + 4]; vzeroupper ; ret
0x00110ad6 : xchg eax, ebp; mov rax, rdi; ret
0x0008a963 : lea rax, [rax + rdi + 0x10]; ret
0x0005f491 : lea rsi, [rip - 0x198]; call rax
0x0009d37b : xor [rdi + 0x39480032], ebx; ret
0x0000a994 : adc ecx, [rcx + 0x29d231fb]; ret
0x0008ae44 : lea eax, [rax + rdi + 0x30]; ret
0x0016fa5c : add [rax], al; sub eax, ecx; ret
0x0008a9a8 : lea rax, [rdi + rax + 0x20]; ret
0x00087290 : mov [rdi], si; mov rax, rdi; ret
0x0009a1b3 : adc [rdi + rdx - 0x10], ecx; ret
0x000658ec : inc ebx; nop ; xor eax, eax; ret
0x0004482c : mov rdi, [rbp - 0x8d0]; call rax
0x000fab1f : add [rbx - 0x7d], dl; call [rcx]
0x000b45d5 : add [rbx + rcx*4 + 0xd], cl; ret
0x000dda55 : add [rbp - 0x7cb7febd], ecx; ret
0x0004482d : mov edi, [rbp - 0x8d0]; call rax
0x0008a998 : lea rax, [rdi + rax + 0x10]; ret
0x0016dd6f : mov [rdi], ecx; vzeroupper ; ret
0x0009586d : movdqu xmm[rdi + 0xf], xmm2; ret
0x0001ee7c : inc ebx; nop ; mov eax, edx; ret
0x000ab98e : push rdx; cmc ; jmp [rsi + 0x2e]
0x000e9aa3 : push rcx; int1 ; jmp [rsi + 0xf]
0x001454ea : sub [rax], al; call [rax + 0x10]
0x0010b772 : add [rdx], al; call [r13 + 0x28]
0x0009a337 : adc [rdi + rdx - 0x40], edi; ret
0x00080036 : int1 ; xor eax, eax; pop rbx; ret
0x0011f7d9 : add [rcx], al; add [rax], al; ret
0x0013751e : lea ecx, [rsp + 0x1c]; call [r10]
0x0001d370 : movdqa xmm0, xmm[rsp - 0x28]; ret
0x000ee16a : movups xmm[rdi + 0xf8], xmm0; ret
0x000cc90c : mov [r15 + 8], 1; mov eax, 1; ret
0x00048c49 : mov r8, rcx; mov r15d, 1; jmp rax
0x00082c6c : add [rdi], ecx; mov dh, 0x55; ret
0x000962a0 : mov dl, [rsi]; mov [rdi], dl; ret
0x0006da57 : lea rsi, [rip - 0x181e]; call rax
0x0006e4c7 : lea rsi, [rip - 0x228e]; call rax
0x000871e9 : mov [rdi], eax; add rax, rdi; ret
0x0007c33e : mov eax, eax; mov [rdi], rsi; ret
0x0012039b : add eax, edi; cmovs eax, edx; ret
0x000872b8 : mov [rdi], ecx; mov rax, rdi; ret
0x00171300 : mov cl, [rsi]; mov [rdi], cl; ret
0x0015dcfe : add [rax], al; mov [rcx], dx; ret
0x0007fa67 : add bh, al; dec [rax + 0x29]; ret
0x00042e1e : stosd [rdi], eax; mov eax, 1; ret
0x000e3b9d : inc [rcx - 0x73]; jmp [r14 + 0xf]
0x00022671 : mov eax, edi; cqo ; idiv rsi; ret
0x00022670 : mov rax, rdi; cqo ; idiv rsi; ret
0x001450df : sbb [r8 + 0x5a], bl; pop rbx; ret
0x000e023b : mov [rbx + 0x28], 0; pop rbx; ret
0x0012b70b : lea ecx, [rsp + 0x2c]; call [rax]
0x000e8e03 : xor [rdi], cl; xchg eax, ebp; ret
0x001779ee : popfq ; idiv edi; jmp [rsi + 0xf]
0x00079c1e : add [rax], al; mov eax, 0x16; ret
0x000c1e3b : add [rax], al; add [rdi], cl; ret
0x0015dcee : add [rax], al; mov [rcx], dl; ret
0x000fed29 : mov eax, 2; pop rbx; pop rbp; ret
0x000ed7e5 : movups xmm[rsi + 0x70], xmm0; ret
0x00131d60 : mov [rdi + 4], 0; mov eax, 1; ret
0x000c540e : add [rax], al; mov eax, 0x7e; ret
0x0011e6e3 : add ecx, [rax - 0x7d]; call [rcx]
0x0009c83a : lea r9, ds:[rsp + 0x28]; call r12
0x0012b42d : mov rsi, [rsp + 0x10]; call [rax]
0x0003a517 : xor eax, eax; mov r9d, 1; jmp rax
0x00002502 : adc al, 0; mov rdi, rbx; call r13
0x00001bbb : adc al, 0; mov rdi, rbx; call r14
0x00173896 : push rsi; cmc ; sub eax, edx; ret
0x000f0941 : movzx eax, al; add rsp, 0x58; ret
0x000cc90d : mov [rdi + 8], 1; mov eax, 1; ret
0x00018102 : add [rbx - 0x7bf0fe08], al; ret 4
0x00064780 : add al, 0; add [rax + 1], cl; ret
0x0011f48f : mov [rsi], edi; xor eax, eax; ret
0x0008adf4 : add [rbx - 0x79f0ef06], al; ret 0
0x0001d1df : add bl, dh; addps xmm0, xmm0; ret
0x000955e0 : mov dx, [rsi]; mov [rdi], dx; ret
0x0006868b : mov [rsi], eax; xor eax, eax; ret
0x00131d50 : mov [rdi + 4], 1; mov eax, 1; ret
0x0006315a : mov [rax + 0x48], 0; pop rbx; ret
0x0013bc0c : lea rsi, [rsp + 0x10]; call [rax]
0x000955ce : add [rax], al; mov [rdi], dh; ret
0x0013b342 : mov eax, [rdi + 8]; jmp [rax + 8]
0x000ed515 : movups xmm[rdi + 0x40], xmm0; ret
0x0006da58 : lea esi, [rip - 0x181e]; call rax
0x0005ab7e : add [rax], al; mov eax, 0x10; ret
0x0011fe63 : mov [rcx], eax; mov eax, edx; ret
0x0009abbd : sub [rbx + rcx*4 + 0x35], cl; ret
0x0001dbe0 : sbb [rcx], al; add [rax], al; ret
0x0009686d : add [rax], r8b; mov rax, rdi; ret
0x0001e5e3 : movups xmm[rdi + 0x70], xmm0; ret
0x0007c352 : xor eax, eax; mov [rdi], rsi; ret
0x000e2d67 : add [rax], ah; add [rax], al; ret
0x00066537 : mov [rax], bh; mov eax, r10d; ret
0x00171ed1 : dec [rax + 0x6f]; jmp [r10 - 0xf]
0x000f7afa : mov r8, rsi; mov [r8 - 1], 0; ret
0x000c0acd : add [rbx + rcx*4 + 0x25], cl; ret
0x00087285 : mov [rdi], rax; mov rax, rdi; ret
0x00135531 : movups xmm[rdi + 0x30], xmm0; ret
0x0009659e : add [rax], al; mov [rdi], dl; ret
0x00061391 : mov [rcx], edi; mov eax, edi; ret
0x000871c1 : mov [rdi], edx; add rax, rdi; ret
0x000871e8 : mov [rdi], r8d; add rax, rdi; ret
0x000ef136 : xchg [rip - 0x76ffffff], ecx; ret
0x0013c2ed : mov [rsp], edx; call [rax + 0x48]
0x000920f8 : adc eax, [rdx]; mov rax, rdi; ret
0x000967c3 : movdqu xmm[rdi + 0x30], xmm7; ret
0x0011f48e : mov [rsi], rdi; xor eax, eax; ret
0x00001a71 : add esp, 8; pop rbx; pop rbp; ret
0x000871b6 : add eax, edi; mov [rdi], rdx; ret
0x0005ab81 : adc [rax], al; add [rax], al; ret
0x00030d86 : push [rbx + 3]; xor eax, eax; ret
0x00000a5c : add [rax], al; add rsp, 0x98; ret
0x00092179 : mov [rdx], eax; mov rax, rdi; ret
0x0001eb2b : mov [rdi], eax; xor eax, eax; ret
0x00002241 : adc al, 0; mov rdi, r14; call r13
0x000960ca : add al, [rsi]; add [rax], al; ret
0x00002613 : adc al, 0; mov rdi, rbx; call rbp
0x000965ae : add [rax], al; mov [rdi], dx; ret
0x0014b497 : add rdi, rdx; add r9, r11; jmp r9
0x0009785e : mov es, [rsi]; add [rax], al; ret
0x0000f3c8 : add [rdx], al; add [rax], al; ret
0x0003685b : add [rax], al; add [rcx], ch; ret
0x000871a0 : mov [rdi], sil; add rax, rdi; ret
0x00135569 : movups xmm[rdi + 0x20], xmm0; ret
0x0010fb71 : mov [rax], edx; xor eax, eax; ret
0x00001a70 : add rsp, 8; pop rbx; pop rbp; ret
0x0006de5f : lea esi, [rip - 0x1c25]; call rax
0x0006de5e : lea rsi, [rip - 0x1c25]; call rax
0x00122665 : add [rax], r8b; mov [r10], 0; ret
0x000b0279 : movups xmm0, xmm[rsp - 0x10]; ret
0x00141aea : sub [rax], al; mov eax, 0xca; ret
0x0003a516 : xor r8d, r8d; mov r9d, 1; jmp rax
0x00177be2 : add [rcx], dh; dec [rax + 9]; ret
0x0006868a : mov [rsi], rax; xor eax, eax; ret
0x000abc39 : lea r9, ds:[rsp + 0x30]; call r12
0x0003c03a : mov ebx, edx; mov r9d, 1; jmp rax
0x0000a27f : add [rdx + rdi*2 - 0xa], sil; ret
0x0014b498 : add edi, edx; add r9, r11; jmp r9
0x0000b872 : mov [rbx + 0x10], 0; pop rbx; ret
0x0003c039 : mov r11, rdx; mov r9d, 1; jmp rax
0x0012d80a : lea esp, [rsp + 0x10]; call [rax]
0x00145127 : adc [r8 + 0x5a], bl; pop rbx; ret
0x00112142 : mov [rsi*2 - 0x776b717], r8b; ret
0x0013cefb : movzx eax, al; add rsp, 0x18; ret
0x0009588d : movdqu xmm[rdi + 0x10], xmm2; ret
0x00145291 : add eax, 0x289f42; call [rax + 8]
0x0010fd87 : mov eax, 5; pop r12; pop rbp; ret
0x000fbb8d : add ds:[rdi + rax - 0xd], dh; ret
0x001739a6 : add [rbx - 0x7bf0ed07], al; ret 2
0x0012cdd3 : sub [rax], eax; jmp [rdx + rax*8]
0x0000f264 : add [rdx], al; movzx eax, ax; ret
0x0015266b : movdqu xmm[rdi - 0x10], xmm1; ret
0x0012d225 : mov eax, 1; pop rbp; pop r12; ret
0x0015bcb3 : mov [rdx], rax; mov rax, rdi; ret
0x0000903f : add [rsi + rsi*2 - 0xa], sil; ret
0x00087286 : mov [rdi], eax; mov rax, rdi; ret
0x0006cbab : mov [rbx + 0x50], 0; pop rbx; ret
0x0015271a : push rdi; mov [rdi - 8], rcx; ret
0x000e53c3 : add cl, [rdi]; xchg eax, ebp; ret
0x0012befc : lea ecx, [rsp + 0x40]; call [rax]
0x00137f38 : lea ecx, [rsp + 0x3a]; call [rax]
0x000eec01 : add [rax], al; add rsp, 0x78; ret
0x000fcbc2 : pop rsi; mov rdi, [r13]; call r12
0x0006e164 : lea rsi, [rip - 0x1f2b]; call rax
0x0003aaa0 : xchg [rax + 1], cl; clc ; jmp rax
0x0000f324 : add [rax], dl; movzx eax, ax; ret
0x000ed835 : movups xmm[rdi + 0x78], xmm0; ret
0x000ee9dc : add [rax], al; add rsp, 0x68; ret
0x00086f3a : xor edx, edx; mov [rdi], rdx; ret
0x00096cdc : push rdi; add eax, 0xc478d48; ret
0x0010d19c : mov eax, 7; pop rbx; pop rbp; ret
0x0007c06d : mov eax, 1; pop rbx; pop rbp; ret
0x0007009e : mov rdi, rbp; neg rdi; call [r13]
0x0012b42e : mov esi, [rsp + 0x10]; call [rax]
0x0000f244 : add [rax], cl; movzx eax, ax; ret
0x0009a64e : movq [rdi + rdx - 0x20], mm0; ret
0x0003cbda : inc [rcx - 0x80]; jmp [rdi + rcx]
0x0010ab7c : mov eax, edx; cmove eax, ecx; ret
0x000871b5 : add rax, rdi; mov [rdi], rdx; ret
0x00136b8a : lea ecx, [rsp + 0x14]; call [r10]
0x0000f304 : add [rcx], al; movzx eax, ax; ret
0x000fda9e : call [rax + 0x19058b48]; ret 0x2c
0x0007009f : mov edi, ebp; neg rdi; call [r13]
0x0007ac7f : add [rax], al; add rsp, 0x18; ret
0x0013ccc5 : mov [rbx + 0x18], 0; pop rbx; ret
0x0012268f : mov [rdi], edx; mov [rax], 0; ret
0x00085f5d : add [rdi], ecx; mov dh, 0x45; ret
0x0013bc0d : lea esi, [rsp + 0x10]; call [rax]
0x0006e4c8 : lea esi, [rip - 0x228e]; call rax
0x000339c8 : add al, [rax]; add [rax], al; ret
0x0012b4f6 : dec [rdx - 0x13]; jmp [rsi + 0xf]
0x0000f2e4 : add [rax], ah; movzx eax, ax; ret
0x001525fb : movdqu xmm[rdi - 0x10], xmm0; ret
0x0000f305 : add [rdi], ecx; mov bh, 0xc0; ret
0x0012b9db : lea ecx, [rsp + 0x20]; call [rax]
0x0001cf50 : add [rax], al; add rsp, 0x28; ret
0x0013ecbe : add bl, ch; fidivr [rax - 1]; ret
0x000d4e71 : add [rbx - 0x7bf0f505], al; ret 0
0x00033530 : add [rbp + 0x3b], dh; leave ; ret
0x000dc3bc : add [rax], al; add [rcx], al; ret
0x0012d809 : lea r12, [rsp + 0x10]; call [rax]
0x0013b341 : mov rax, [rdi + 8]; jmp [rax + 8]
0x0001eb2a : mov [rdi], rax; xor eax, eax; ret
0x00095e40 : mov [rax], cs; add [rax], al; ret
0x00064743 : mov [rsi], eax; call [rbp + 0x30]
0x00030237 : add [rbp - 0xa], dh; pop rbx; ret
0x00082581 : adc [rdi], cl; xchg eax, ebx; ret
0x0006e165 : lea esi, [rip - 0x1f2b]; call rax
0x00064742 : mov [rsi], rax; call [rbp + 0x30]
0x00087291 : mov [rdi], esi; mov rax, rdi; ret
0x000fcbf2 : pop rdi; mov rdi, [r13]; call r12
0x0009a870 : int1 ; pop rbx; mov eax, eax; ret
0x0009bb0d : add [rax], r8b; xor rax, rax; ret
0x00021bf5 : add [rax], r8b; xor eax, eax; ret
0x0006cad4 : push rdi; mov [rdi + 8], rax; ret
0x0012268e : mov [rdi], rdx; mov [rax], 0; ret
0x00097b2c : push rdi; add eax, 0xd478d48; ret
0x0006763d : sub bh, ch; dec [rax - 0x7f]; ret
0x000e79ac : mov eax, 5; pop rbp; pop r12; ret
0x00000c5c : add [rax], al; add [rax], al; ret
0x00086dd4 : mov ecx, eax; mov [rdx], rcx; ret
0x0005fc98 : pop rbx; pop rbp; pop r12; jmp rax
0x00173856 : push rsi; int1 ; sub eax, edx; ret
0x0000de4d : mov rax, [rdx + rdi*8 + 0x40]; ret
0x00099646 : xor ch, ch; mov [rdi + 2], ch; ret
0x00096bd0 : mov [rdi], dh; lea rax, [rdi]; ret
0x0009660e : add [rax], al; mov [rdi], rdx; ret
0x0003b13a : add [rax], al; mov r8d, 1; jmp rax
0x000996dc : xor ch, ch; mov [rdi + 9], ch; ret
0x000f8a6d : add [rax], eax; add rsp, 0x80; ret
0x00145322 : mov ah, dh; cld ; jmp [rsi + 0x2e]
0x0009ba73 : mov [rax], eax; add [rax], al; ret
0x000b1a89 : add [rax], eax; add [rcx], ch; ret
0x00000080 : add [rax + 0x5b], bl; pop rbp; ret
0x000f3a86 : add [rax], al; cmova eax, edx; ret
0x00077716 : pop rbp; pop r14; pop r15; jmp rax
0x000c0383 : mov [rdx], esi; add rsp, 0x18; ret
0x00021e29 : add ecx, [rbp + rcx*4 + 0x64]; ret
0x0011f7c1 : add [rcx], eax; add [rax], al; ret
0x001202f2 : mov rax, rdx; movsxd rdx, esi; ret
0x0015db79 : add eax, [rbx]; add [rax], al; ret
0x00103bd4 : mov eax, [rsp]; add rsp, 0x40; ret
0x00103b73 : mov eax, [rsp]; add rsp, 0x38; ret
0x0007f84c : mov eax, edx; cmovne rax, rdi; ret
0x00031274 : add [rax], eax; add [rax], al; ret
0x00025fac : inc [rax - 0x80]; jmp [rbp + 0x49]
0x000226f4 : add [rbx - 0x75], bl; pop rax; ret
0x00099674 : xor ch, ch; mov [rdi + 4], ch; ret
0x00131cd9 : add [rdi], cl; adc [rdx], eax; ret
0x0012c98e : add [rax], al; mov [rsi], 0xa; ret
0x0015db53 : sub [rbx], eax; add [rax], al; ret
0x00108e89 : add al, 0; add [rdx], al; call rcx
0x0009965c : xor ch, ch; mov [rdi + 3], ch; ret
0x0000de4e : mov eax, [rdx + rdi*8 + 0x40]; ret
0x000e29f5 : add cs:[rcx + 0x5b595a0a], cl; ret
0x000996ba : xor ch, ch; mov [rdi + 7], ch; ret
0x0013c03e : mov eax, [rbp + 8]; call [rax + 8]
0x000de66a : add [rax], eax; add [rcx], al; ret
0x0009969c : xor ch, ch; mov [rdi + 6], ch; ret
0x000c867b : add bl, [rbx + 0x5d]; pop r12; ret
0x000955e1 : mov edx, [rsi]; mov [rdi], dx; ret
0x001202f3 : mov eax, edx; movsxd rdx, esi; ret
0x00049f42 : sub [rbx + 0x5d], bl; pop r12; ret
0x0005bf8c : mov esi, 1; mov rdi, rbx; call rax
0x000f6756 : add [rax + 1], bh; add rsp, 8; ret
0x00095ea1 : sub ecx, [rax]; add [rax], al; ret
0x0000ac4b : add [rbx + 0x41], bl; pop rsp; ret
0x000fbc95 : sub al, 0; mov fs:[rax], 0x16; ret
0x000f9ebc : add [rip - 0x7af0ff00], ebp; ret 0
0x0007f84b : mov rax, rdx; cmovne rax, rdi; ret
0x0013b3db : mov esi, 0x8478b48; call [rax + 8]
0x000e56ea : adc ecx, [rdi]; xchg eax, esp; ret
0x0004812b : add [rax], al; mov esi, 1; jmp rax
0x000c867a : add bl, [r11 + 0x5d]; pop r12; ret
0x001113ff : popfq ; imul esi; jmp [rsi + 0x2e]
0x000f7b69 : mov rax, rdi; mov [r8 - 1], 0; ret
0x0009a5eb : stosb [rdi], al; mov rax, rdx; ret
0x00138f13 : mov rax, [r15 + 8]; call [rax + 8]
0x0013b42a : mov [rsp + 8], rdx; call [rax + 8]
0x0001d1d3 : movd mm0, eax; mov [rdi], edx; ret
0x0009ae42 : add [r8], eax; cmove rax, rdx; ret
0x000e47d8 : add [rdi], ecx; xchg eax, esp; ret
0x00145128 : adc [rax + 0x5a], bl; pop rbx; ret
0x000764a1 : pop r12; pop r13; pop r14; jmp rax
0x0010fd8b : add [rcx + 0x5c], al; pop rbp; ret
0x000230a3 : mov [r8], edx; mov [rsi], edx; ret
0x0007d933 : add [rax], al; cmove rax, rdx; ret
0x0005c149 : xchg [rax + 1], ecx; clc ; jmp rax
0x00078b4c : pop r12; pop r13; pop r14; jmp rcx
0x0009a762 : xchg [rax + 1], cl; int1 ; jmp rcx
0x000026bf : xor [rbx + 0x5d], bl; pop r12; ret
0x00048c4a : mov eax, ecx; mov r15d, 1; jmp rax
0x000700b6 : push rcx; xor edi, edi; call [r13]
0x000fbee9 : mov edx, esp; mov esi, 1; call rbp
0x000f7afb : mov eax, esi; mov [r8 - 1], 0; ret
0x000fca33 : mov edi, ebx; mov esi, 1; call rbp
0x00111540 : pop rsp; imul dh; jmp [rsi + 0x2e]
0x0013b42b : mov [rsp + 8], edx; call [rax + 8]
0x000d2d65 : add [rbp + 0x41], bl; pop rsp; ret
0x0000b9a5 : adc [rbx + 0x5d], bl; pop r12; ret
0x000f7b6a : mov eax, edi; mov [r8 - 1], 0; ret
0x0012c9ae : add [rax], al; mov [rsi], 0xc; ret
0x000fe7df : mov fs:[rax], 2; xor eax, eax; ret
0x000764a2 : pop rsp; pop r13; pop r14; jmp rax
0x0000eeef : mov eax, [rax + rdi*8 + 0x80]; ret
0x00066536 : mov [rax], dil; mov eax, r10d; ret
0x0003bb1f : add [rax - 0x4e743], al; jmp [rax]
0x0009968a : xor ch, ch; mov [rdi + 5], ch; ret
0x0007db63 : mov [rcx], 0; cmovne rax, rdx; ret
0x00077715 : pop r13; pop r14; pop r15; jmp rax
0x000965ce : add [rax], al; mov [rdi], edx; ret
0x001450e0 : sbb [rax + 0x5a], bl; pop rbx; ret
0x0000eeee : mov rax, [rax + rdi*8 + 0x80]; ret
0x000e4bf8 : push rax; mov rcx, [r14]; call r12
0x000fe7cf : add [rax - 0x75], cl; pop rax; ret
0x00153493 : add ebx, esi; movq [rdi], mm1; ret
0x0010d313 : add [rdi], ecx; xchg eax, ebp; ret
0x00103bd3 : mov rax, [rsp]; add rsp, 0x40; ret
0x000afb83 : add eax, [rax]; add [rax], al; ret
0x0007cb7d : add [rax], al; add rsp, 8; jmp rax
0x00160052 : mov [rdx], al; lea rax, [rdx]; ret
0x0001e854 : add [rax], al; cmove eax, edx; ret
0x00102179 : add [rax], al; cmovb rax, rdx; ret
0x00099634 : xor ch, ch; mov [rdi + 1], ch; ret
0x00001297 : mov fs:[rax], 9; mov eax, edi; ret
0x0017253e : add [rax], al; lea rax, [rdi]; ret
0x00103b72 : mov rax, [rsp]; add rsp, 0x38; ret
0x00168fa0 : movsxd rax, ecx; add rax, rdi; ret
0x0013c03d : mov rax, [rbp + 8]; call [rax + 8]
0x001533b3 : add esi, ebx; movq [rdi], mm1; ret
0x0000de58 : mov rax, [rsi + rax*8 + 0x80]; ret
0x0012d79b : mov eax, [rdi + 8]; call [rax + 8]
0x0008772b : xchg bh, dh; dec [rax + 0x39]; ret
0x00013fd1 : add [rbx + 0x5d], bl; pop r12; ret
0x000c044c : mov fs:[rdx], esi; add rsp, 8; ret
0x0012d79a : mov rax, [rdi + 8]; call [rax + 8]
0x0008a88d : xor [r14 + 0xf], r12b; xlatb ; ret
0x00079e9d : add [rax], r8b; mov eax, 0x16; ret
0x000996c6 : xor ch, ch; mov [rdi + 8], ch; ret
0x0015dc79 : add eax, [rdx]; add [rax], al; ret
0x000de689 : add [rax], eax; add [rcx], bh; ret
0x0000de59 : mov eax, [rsi + rax*8 + 0x80]; ret
0x0015dd5e : add [rax], al; mov [rcx], rdx; ret
0x0011f7d6 : add [rax], al; mov eax, 0x100; ret
0x00033788 : add [rax], al; mov [rdi], rsi; ret
0x000fca32 : mov rdi, rbx; mov esi, 1; call rbp
0x00078b4d : pop rsp; pop r13; pop r14; jmp rcx
0x0015dd1e : add [rax], al; mov [rcx], edx; ret
0x0012d97c : pop rbx; pop rbp; add eax, edx; ret
0x00030c66 : mov eax, edx; pop rbp; pop r12; ret
0x0000f3e4 : mov rax, [rax + rdi*4 + 0x200]; ret
0x0008b073 : movzx edx, [rsi]; sub eax, edx; ret
0x0005de43 : xor ebx, [rbx + 0x5d]; pop r12; ret
0x0011b9eb : lea rdi, [rip + 0x2b2b1e]; call r12
0x0010b776 : push rbp; sub [rax - 0x77], cl; ret
0x00111ad4 : add [rax - 0x77], cl; imul eax; ret
0x0005d967 : mov rax, rsi; pop rbp; pop r12; ret
0x00002204 : xchg [rbp + rcx*4 + 0x34], ecx; ret
0x0007be34 : adc ebx, [rbx + 0x5d]; pop r12; ret
0x0006e8f0 : xor eax, eax; pop rbx; pop rbp; ret
0x00052341 : mov rsi, [rip + 0x377948]; call rax
0x0006e844 : mov rax, [rdi]; mov [rdx], rax; ret
0x0005aead : mov eax, esi; pop rbx; pop rbp; ret
0x0007cc35 : mov rax, rbp; pop rbx; pop rbp; ret
0x0013915b : push rbp; add [rax - 0x7d], cl; ret
0x000fbee8 : mov edx, r12d; mov esi, 1; call rbp
0x0011b6e2 : lea edi, [rip + 0x2b2e28]; call rax
0x000203a2 : adc [rcx + rcx*4 - 9], cl; call rbp
0x000c9832 : pop rax; idiv edi; jmp [rsi + 0x2e]
0x001455a2 : add ebx, [rax + 0x5a]; pop rbx; ret
0x0004c36d : inc [rax - 0x80]; jmp [rdi + rax*8]
0x00010132 : add [rcx + rax - 0x18], cl; jmp rax
0x0009a7d9 : add ah, bh; inc [rbx]; pop rbx; ret
0x000dfed8 : mov eax, [rdx]; mov [rdx], rdi; ret
0x0005d968 : mov eax, esi; pop rbp; pop r12; ret
0x00068151 : mov [rbx + 0x28], eax; pop rbx; ret
0x00013fef : xor eax, eax; pop rbp; pop r12; ret
0x0013b42c : push rsp; and al, 8; call [rax + 8]
0x0009cd71 : mov rdi, rbp; mov r9, r14; call rbx
0x000318f6 : adc eax, edx; pop rbp; pop rbx; ret
0x00100daf : add [rax + 0xe4], bh; syscall ; ret
0x000c53a5 : add [rax], al; cmovne rax, rdx; ret
0x0013563d : add bl, al; nop ; xor eax, eax; ret
0x00002242 : add [rcx + rcx*4 - 9], cl; call r13
0x0013be9f : mov edi, ebp; xor eax, eax; call r8
0x0006812c : mov [rax + 0x20], edx; pop rbx; ret
0x00068150 : mov [rbx + 0x28], rax; pop rbx; ret
0x0003d3e0 : mov esi, [rip + 0x38c8aa]; call rax
0x000472f1 : add [rbx - 0x51f43], al; call [rax]
0x000fb389 : mov rax, rbx; pop rdx; pop rbx; ret
0x0000f3c5 : mov eax, [rax + rdi*4 + 0x200]; ret
0x00095641 : mov edx, [rsi]; mov [rdi], rdx; ret
0x00046b96 : mov rsi, [rip + 0x3830f3]; call rax
0x0001d5a8 : movq mm0, [rsp]; add rsp, 0x28; ret
0x000c463f : add [rax + 0x6b], bh; syscall ; ret
0x0000b411 : add [rcx + rcx*4 - 9], cl; call rbx
0x00071040 : mov eax, edi; pop rbp; pop r12; ret
0x0006812b : mov [rax + 0x20], rdx; pop rbx; ret
0x000cc8c8 : mov [rdi + 8], 2; xor eax, eax; ret
0x0008a9bc : xor bl, al; nop ; xor eax, eax; ret
0x00069183 : sbb [rdx - 7], edi; jmp [rsi + 0xf]
0x0007a735 : mov rdx, r15; mov rdi, r8; call rax
0x000dfed7 : mov rax, [rdx]; mov [rdx], rdi; ret
0x00038c16 : add [rax - 0x94343], eax; jmp [rax]
0x0012c961 : mov [rcx + rax - 0x3e], cl; jmp rdx
0x000cebd3 : xchg eax, ebp; rol [rcx], 0xc0; ret
0x00095600 : mov edx, [rsi]; mov [rdi], edx; ret
0x000138d5 : mov eax, ebx; pop rbx; pop rbp; ret
0x000438d7 : inc [rcx - 0x75]; add al, 0x83; ret
0x0007103f : mov rax, rdi; pop rbp; pop r12; ret
0x0003b833 : add [rax - 0x4e743], eax; jmp [rax]
0x00052342 : mov esi, [rip + 0x377948]; call rax
0x0002233e : xor esi, esi; mov rdi, r9; call rdx
0x000c543e : add [rax], al; mov eax, 0xfc17; ret
0x000fb38a : mov eax, ebx; pop rdx; pop rbx; ret
0x00095640 : mov rdx, [rsi]; mov [rdi], rdx; ret
0x000c465f : add [rax + 0x6c], bh; syscall ; ret
0x00136c10 : pushfq ; int 0xfd; jmp [rsi - 0x70]
0x000138d4 : mov rax, rbx; pop rbx; pop rbp; ret
0x0006f560 : push rdi; sbb [rax + 0x39], cl; ret
0x0011f7d5 : add [rax], r8b; mov eax, 0x100; ret
0x000226f5 : pop rbx; mov eax, [rax + 0x58]; ret
0x000c48cf : add [rax + 0x6f], bh; syscall ; ret
0x00060819 : mov [rax], rcx; mov eax, [rdx]; ret
0x0005ab90 : add [rdx + 4], 1; xor eax, eax; ret
0x000680c0 : mov eax, [rdi]; and eax, 0x804; ret
0x000e6c5e : push rsi; sub [rax - 0x7d], cl; ret
0x000e456e : push rsp; idiv edi; jmp [rsi + 0xf]
0x00109657 : push rdi; sbb [rax - 0x77], cl; ret
0x0001e589 : add esi, ebx; stosq [rdi], rax; ret
0x0010fb68 : add [rax], al; cmovne eax, edx; ret
0x00060bc6 : sub ebx, [rbx + 0x5d]; pop r12; ret
0x0011b9ec : lea edi, [rip + 0x2b2b1e]; call r12
0x0011fda0 : stosq [rdi], rax; mov eax, r8d; ret
0x000c460f : add [rax + 0x27], bh; syscall ; ret
0x000224a0 : pop rsp; idiv edi; jmp [rsi + 0x2e]
0x000705ac : mov rax, rdx; pop rbx; pop rbp; ret
0x000230a4 : mov [rax], edx; mov [rsi], edx; ret
0x0006e845 : mov eax, [rdi]; mov [rdx], rax; ret
0x00046b97 : mov esi, [rip + 0x3830f3]; call rax
0x0004a088 : mov rsi, [rip + 0x37fc01]; call rax
0x00023669 : mov fs:[rdx], eax; mov rax, -1; ret
0x00133f23 : mov edx, edi; std ; jmp [rsi + 0xf]
0x0012d8ce : pop rax; mov [rdx + 0x68], rcx; ret
0x000339dd : mov [rdi + 8], rax; mov eax, 2; ret
0x0011fda1 : stosd [rdi], eax; mov eax, r8d; ret
0x000f7a51 : mov [rdi], 0; mov [rdi + 8], 0; ret
0x0009cd72 : mov edi, ebp; mov r9, r14; call rbx
0x00088b93 : movzx eax, [rdi]; sub eax, ecx; ret
0x000318f5 : adc rax, rdx; pop rbp; pop rbx; ret
0x0006d72a : mov ecx, edx; xor edx, edx; jmp rax
0x00047282 : add [rbx - 0x4ef43], eax; jmp [rax]
0x0000cfb3 : mov [rcx + rax - 0x3a], cl; jmp rsi
0x0006081a : mov [rax], ecx; mov eax, [rdx]; ret
0x0006d071 : add ebx, [rbx + 0x5d]; pop r12; ret
0x0010fd77 : xor eax, eax; pop r12; pop rbp; ret
0x0003d66b : mov eax, ebp; pop rbx; pop rbp; ret
0x00146064 : int 0xe8; frndint ; jmp [rsi + 0xf]
0x00113af1 : add [rcx], cl; clc ; bswap eax; ret
0x0003d3df : mov rsi, [rip + 0x38c8aa]; call rax
0x0007c9c3 : add [rax], eax; cmove rax, rdx; ret
0x00108e87 : sbb [rdi + 0x2000004], bh; call rcx
0x0003a1b2 : mov rsi, [rip + 0x38fad7]; call rax
0x0011b6e1 : lea rdi, [rip + 0x2b2e28]; call rax
0x00049d58 : mov rsi, [rip + 0x37ff31]; call rax
0x0011eedf : inc [rbx - 0xc8b0a08]; pop rbx; ret
0x0006de08 : sub r8, rcx; lea eax, [r8 - 1]; ret
0x000c461f : add [rax + 0x6e], bh; syscall ; ret
0x0012615f : push rax; sbb [rax - 0x77], cl; ret
0x0002e9e7 : mov eax, edx; pop rbx; pop rbp; ret
0x0001d1d2 : movd xmm0, eax; mov [rdi], edx; ret
0x000450cd : push rbp; cmp [rax + 0x39], cl; ret
0x0001d730 : movmskps eax, xmm0; and eax, 8; ret
0x00079592 : mov ah, [rax - 1]; jmp [rsi + 0x2e]
0x0003a1b3 : mov esi, [rip + 0x38fad7]; call rax
0x0004a089 : mov esi, [rip + 0x37fc01]; call rax
0x0013be9e : mov rdi, rbp; xor eax, eax; call r8
0x0007a736 : mov edx, edi; mov rdi, r8; call rax
0x000c53fe : add [rax], al; mov eax, 0x7d00; ret
0x00102bcc : pop rsi; add ecx, [rax - 0x42]; ret
0x000c464f : add [rax + 0x68], bh; syscall ; ret
0x000ee7df : add [rax + 0x5f], bh; syscall ; ret
0x00136523 : mov esp, edx; std ; jmp [rsi + 0xf]
0x0011ff70 : add [rax], al; cmovae eax, edi; ret
0x000339de : mov [rdi + 8], eax; mov eax, 2; ret
0x00049d59 : mov esi, [rip + 0x37ff31]; call rax
0x0009a86f : div ecx; pop rbx; mov eax, eax; ret
0x000c462f : add [rax + 0x66], bh; syscall ; ret
0x00038ab0 : push rax; cmp [rax + 0x39], cl; ret
0x00080168 : add [rax], al; cmovne rax, rdi; ret
0x0011fb92 : sub esi, 1; mov [rdi + 1], sil; ret
0x00169a63 : movzx ecx, [rsi]; sub eax, ecx; ret
0x000b169f : add [rax + 0xc9], bh; syscall ; ret
0x000685c3 : sub [rsi - 5], ebp; jmp [rsi + 0xf]
0x000680f0 : mov eax, [rdi]; and eax, 0x200; ret
0x00064d40 : lea r8, [rsp + 0x38]; call [r13 + 8]
0x0013b0f6 : mov esi, ebx; mov rdi, r12; call r13
0x000872ad : mov [rdi + 2], al; mov rax, rdi; ret
0x0012899a : mov ecx, esi; mov rdi, r13; call r12
0x00128d07 : mov rdi, rbx; mov rcx, r13; call r10
0x000872e3 : mov [rdi + 4], ax; mov rax, rdi; ret
0x0012d71f : lea esp, [rdx - 2]; jmp [rsi + 0x2e]
0x000fca20 : xor edx, edx; xor esi, esi; call rbp
0x00153492 : add r11d, r14d; movq [rdi], mm1; ret
0x0004787c : add [rax], al; add rax, rdi; jmp rax
0x000ee345 : xor esi, esi; mov rdi, rbx; call rax
0x0013b0f5 : mov rsi, rbx; mov rdi, r12; call r13
0x0006de09 : sub eax, ecx; lea eax, [r8 - 1]; ret
0x001454e7 : add eax, 0x289cec; call [rax + 0x10]
0x00128d08 : mov edi, ebx; mov rcx, r13; call r10
0x0013bf00 : mov rdi, rbp; xor eax, eax; call rcx
0x000fcd3e : mov esi, ebx; mov rdi, r14; call r13
0x000fccb0 : mov rsi, rbx; mov rdi, r13; call r14
0x0003fcbc : inc [rbx - 0x9b43]; jmp [rsi + 0x75]
0x000ab294 : mov rsi, r13; mov rdi, r12; call rbp
0x0009977e : xor ch, ch; mov [rdi + 0xe], ch; ret
0x0005d02d : dec [rcx + 0x415d5be8]; pop rsp; ret
0x0001f798 : mov rbx, rax; mov rdi, r14; call rbp
0x0003ab05 : sbb al, 0; add [rcx - 0x77], cl; ret
0x0001e18c : add [rax], al; pop rbx; pop rbp; ret
0x001534a0 : movzx edx, [rsi]; mov [rdi], dl; ret
0x00113a86 : mov eax, edi; and eax, 0xffffff; ret
0x0001f799 : mov ebx, eax; mov rdi, r14; call rbp
0x0003b801 : sbb [rbx - 0x52f43], eax; call [rax]
0x001533b2 : add r14d, r11d; movq [rdi], mm1; ret
0x000996fe : xor ch, ch; mov [rdi + 0xa], ch; ret
0x0001d1de : add [rax], al; addss xmm0, xmm0; ret
0x00064403 : add [rsi - 1], bh; call [r13 + 0x18]
0x000e0734 : add [rax], al; mov [rsi + 8], 0; ret
0x0007affa : mov esi, esi; mov rdi, r13; call rax
0x0013280a : mov esi, edx; add rdi, 0x10; jmp rcx
0x0005aa4c : movzx eax, al; neg eax; pop rbx; ret
0x0013c5f9 : mov eax, [rdi + 8]; jmp [rax + 0x40]
0x000bf01c : mov ebp, esp; mov rdi, rbx; call r13
0x0013bf01 : mov edi, ebp; xor eax, eax; call rcx
0x0013cc50 : add [rdi + 0x28], 4; mov eax, 1; ret
0x00128999 : mov rcx, r14; mov rdi, r13; call r12
0x0001f8a4 : mov edi, esi; mov rdx, r12; call rbp
0x0013b1f7 : mov [rsp], 2; mov rdi, rsp; call rdx
0x000e414c : add al, 0; add [rax - 0x77], cl; ret
0x0009971c : xor ch, ch; mov [rdi + 0xb], ch; ret
0x0008096d : add al, 0; add [rcx - 0x77], cl; ret
0x0009218e : mov [rdx + 2], al; mov rax, rdi; ret
0x0014ba22 : movaps xmm[rdi - 0x10], xmm5; jmp r9
0x001712f2 : mov [rdi], si; mov [r9 - 2], cx; ret
0x0006bdd8 : add [rsi - 1], bh; call [r14 + 0x18]
0x0009973c : xor ch, ch; mov [rdi + 0xc], ch; ret
0x0013ca5d : mov rsi, rbx; mov rdi, rbp; call rcx
0x000872cb : mov [rdi + 4], al; mov rax, rdi; ret
0x00069604 : mov [rdx + 0x130], rdi; pop rbx; ret
0x0012ebba : movzx eax, al; pop rbx; pop rbp; ret
0x0001fbf6 : mov rsi, r13; mov rdi, rbx; call rbp
0x00173d58 : push [rbp + 0x1a]; xor eax, eax; ret
0x000c8ee4 : mov ah, 3; add [rcx - 0x77], al; ret
0x0013c5f8 : mov rax, [rdi + 8]; jmp [rax + 0x40]
0x0004724d : sbb [rbx - 0x51f43], eax; call [rax]
0x0013c601 : mov eax, [rdi + 8]; jmp [rax + 0x48]
0x00079c80 : mov rsi, rbp; mov rdi, rax; call rcx
0x000321ae : push [rbp - 0x11]; mov rax, rdx; ret
0x00069605 : mov [rdx + 0x130], edi; pop rbx; ret
0x0007b588 : mov rdx, rbx; mov rsi, r12; call rax
0x000b0510 : mov esi, ebp; mov rdi, r12; call rbx
0x000ab295 : mov esi, ebp; mov rdi, r12; call rbp
0x0013ca5e : mov esi, ebx; mov rdi, rbp; call rcx
0x0009979e : xor ch, ch; mov [rdi + 0xf], ch; ret
0x0013cbaf : mov rsi, r14; mov rdi, rbp; call r12
0x00102fb8 : sub al, 0; add [rdx + rax*2], 1; ret
0x0009cfe9 : mov rdx, r14; mov rdi, rbp; call rbx
0x0001fbf7 : mov esi, ebp; mov rdi, rbx; call rbp
0x000235b0 : xor eax, eax; mov [rdi + 2], dx; ret
0x00087304 : mov [rdi + 6], al; mov rax, rdi; ret
0x000b050f : mov rsi, rbp; mov rdi, r12; call rbx
0x0007a478 : mov rsi, rbp; mov rdi, rbx; call rax
0x0001f7ee : mov rsi, rbx; mov rdi, r14; call rbp
0x00132809 : mov rsi, rdx; add rdi, 0x10; jmp rcx
0x000bdae3 : mov esi, edi; xor edi, edi; call rax
0x000ee7de : add [rax + 0x5f], dil; syscall ; ret
0x00136cae : mov esi, 9; mov rdi, rax; call [r10]
0x00094ed0 : mov [rdx + 8], ah; mov rax, rdi; ret
0x0013c600 : mov rax, [rdi + 8]; jmp [rax + 0x48]
0x000d2d64 : add [rax], al; pop rbp; pop r12; ret
0x0009cfea : mov edx, esi; mov rdi, rbp; call rbx
0x000226c3 : inc [rbp - 0x3db7f040]; pop rbx; ret
0x0007c5b7 : add [rax], eax; cmovne rax, rdx; ret
0x00092240 : mov [rdx + 8], al; mov rax, rdi; ret
0x0001b491 : xchg eax, edi; add rdx, rdi; jmp rdx
0x00128ea2 : mov rdi, rbp; mov rcx, r14; call r10
0x0001f7d3 : mov rsi, r14; mov rdi, r13; call rbp
0x000921dd : mov [rdx + 4], ax; mov rax, rdi; ret
0x000fcd3d : mov rsi, rbx; mov rdi, r14; call r13
0x000af5dc : push rbx; lea rax, [rdi - 0x10]; ret
0x00113e05 : sub eax, [rax]; add rax, fs:[0]; ret
0x0009a2a8 : movzx ecx, [rsi]; mov [rdi], cl; ret
0x00092261 : mov [rdx + 8], ax; mov rax, rdi; ret
0x000fe4d4 : dec [rax - 0x77]; fucompi st(0); ret
0x0007b589 : mov edx, ebx; mov rsi, r12; call rax
0x001332a0 : push rsp; int 0xec; jmp [rsi - 0x70]
0x0009a7f4 : xchg eax, esi; add rax, rsi; jmp rax
0x0001f7d4 : mov esi, esi; mov rdi, r13; call rbp
0x0006beae : add [rax], al; movzx eax, [rdx]; ret
0x00086a2d : add [rax], al; add cl, ch; stc ; ret
0x000fc413 : mov rdi, r12; mov r13, rbx; call rbp
0x00046f23 : add [rax], al; xor esi, esi; jmp rax
0x0006309b : add [rsi - 1], bh; call [rax + 0x18]
0x000bf01b : mov rbp, r12; mov rdi, rbx; call r13
0x00066f51 : sub esp, [rax - 1]; jmp [rsi + 0x2e]
0x000ab110 : mov edx, esi; mov rsi, r13; call rbp
0x00137c7e : mov rsi, r12; mov rdi, rbp; call rax
0x00140316 : xchg eax, esi; std ; jmp [rsi + 0xf]
0x0001f7ef : mov esi, ebx; mov rdi, r14; call rbp
0x0011fc4b : lea eax, [r9 + r8 + 2]; pop rbx; ret
0x0013cbb0 : mov esi, esi; mov rdi, rbp; call r12
0x0014273c : add [rdx - 1], bh; mov eax, edx; ret
0x000dac3a : xchg eax, edx; add rdx, r10; jmp rdx
0x00030f1c : add edx, esi; cmp r9d, 0x2f; jmp rdx
0x000f7a55 : add [rax], al; mov [rdi + 8], 0; ret
0x00141d46 : add eax, 0x289535; call [rax + 0x28]
0x00087190 : mov [rcx + rax - 0x37], ecx; jmp rcx
0x00153422 : add r14b, r11b; movq [rdi], mm1; ret
0x000921bc : mov [rdx + 4], al; mov rax, rdi; ret
0x000bb1e5 : xchg eax, edi; add rax, rdi; jmp rax
0x000e4ea7 : push rbx; add [rax - 0x7d], ecx; ret
0x0001f8a3 : mov rdi, r14; mov rdx, r12; call rbp
0x00153430 : movzx edx, [rsi]; mov [rdi], dx; ret
0x00003ba1 : push rax; mov [rax + 0x54], edx; ret
0x0016deaf : neg eax; or eax, 1; vzeroupper ; ret
0x00079c81 : mov esi, ebp; mov rdi, rax; call rcx
0x001438f8 : add eax, 0x287983; call [rax + 0x28]
0x0009975e : xor ch, ch; mov [rdi + 0xd], ch; ret
0x00031986 : push [rbp - 0x19]; mov rax, rdx; ret
0x000fccb1 : mov esi, ebx; mov rdi, r13; call r14
0x0000ac4a : add [rax], al; pop rbx; pop r12; ret
0x001354af : push rax; mov [rsi + 0x10], rax; ret
0x000dd78e : push rsp; add [rax - 0x7d], ecx; ret
0x00142525 : add eax, 0x288d56; call [rax + 0x28]
0x0007b411 : mov esi, ebx; mov rdi, r12; call rax
0x000fc414 : mov edi, esp; mov r13, rbx; call rbp
0x0007a479 : mov esi, ebp; mov rdi, rbx; call rax
0x00136a94 : sbb [rsi + 6], bh; call [rax + 0x28]
0x000bdae2 : mov rsi, rdi; xor edi, edi; call rax
0x00137c7f : mov esi, esp; mov rdi, rbp; call rax
0x0007aff9 : mov rsi, r14; mov rdi, r13; call rax
0x0016ed10 : xchg eax, ebx; add rcx, r11; jmp rcx
0x0010fd8a : add [rax], al; pop r12; pop rbp; ret
0x0012d1ae : add [rax], al; xor eax, eax; jmp rcx
0x0011ffff : movups xmm[rdi + rdx + 8], xmm0; ret
0x00128ea3 : mov edi, ebp; mov rcx, r14; call r10
0x00045ba3 : mov ah, 1; add [rax + 0x39], cl; ret
0x0009667f : add bl, dh; movq [rdi - 1], mm0; ret
0x0012cdd0 : adc eax, 0x29cabb; jmp [rdx + rax*8]
0x0009218c : add cl, [r8 - 0x76b7fdbe]; clc ; ret
0x000d626d : add [rax], 0; add [rax + 1], cl; ret
0x00015e8c : add [rbx - 0x7bf0fe02], al; ret 0x1b
0x00110e96 : xchg eax, edx; dec [rax - 0x7f]; ret
0x000ab10f : mov rdx, r14; mov rsi, r13; call rbp
0x0007b410 : mov rsi, rbx; mov rdi, r12; call rax
0x00030f1b : add rdx, rsi; cmp r9d, 0x2f; jmp rdx
0x000962c6 : mov [rdi], cx; mov [rdi + 2], dl; ret
0x000997f0 : xor ch, ch; mov [rdi + 0x12], ch; ret
0x0001cd4c : movd mm1, rdi; movapd xmm0, xmm1; ret
0x001533c7 : mov [rdi + 1], dx; mov [rdi], cx; ret
0x0009982e : xor ch, ch; mov [rdi + 0x14], ch; ret
0x00141d07 : mov eax, [rip + 0x289573]; call [rax]
0x000b08dd : add [rax], al; mov rsi, rbp; call rbx
0x000105cd : add [rax], al; mov rdi, r12; call rax
0x00102e97 : mov [rip + 0x2c71ef], 2; pop rbp; ret
0x00103b15 : sub al, 0; mov eax, [rax + 0x38]; ret
0x0012d2fa : lea rax, [rbx + 0x2260]; pop rbx; ret
0x0006d22e : lea ebx, [rcx + 1]; call [rax + 0x18]
0x0009218d : add cl, [rax - 0x76b7fdbe]; clc ; ret
0x0001d88e : add [rbp + 5], dh; add rsp, 0x18; ret
0x001712f3 : mov [rdi], esi; mov [r9 - 2], cx; ret
0x0001d032 : adc [rdi], ecx; subss xmm0, xmm1; ret
0x0008234b : add [rax], al; add [rbp + 1], al; ret
0x0015bda9 : mov [rdx + 6], eax; mov rax, rdi; ret
0x0003a43d : add [rax], al; add [rax], al; jmp rax
0x0001d0c9 : movd mm1, edi; movaps xmm0, xmm1; ret
0x001249c5 : sub al, [rax]; mov rax, fs:[rax]; ret
0x0012bdc1 : mov rax, [rbx + 8]; call [rax + 0x28]
0x0003fca0 : inc [rax - 0x15343]; jmp [rdi + 0x74]
0x0005f12b : add [rax], al; mov rdi, rbp; call rax
0x0005bf8f : add [rax], al; mov rdi, rbx; call rax
0x0013a5ab : xchg eax, esp; std ; jmp [rsi - 0x70]
0x0007b8f9 : mov rax, [rip + 0x34e378]; call [rax]
0x0013b198 : mov rax, [rdi + 8]; call [rax + 0x18]
0x0001ccde : movd mm1, rax; movsd [rdi], xmm1; ret
0x0000aa16 : add [rax], al; xor r9d, r9d; call r15
0x0012eeaa : add [rbp + 5], dh; add rsp, 0x58; ret
0x00099916 : xor ch, ch; mov [rdi + 0x1b], ch; ret
0x0011dbf3 : add gs:[rbx + 0x5d], bl; pop r12; ret
0x001719c2 : mov [rdi], cx; mov [rsi - 2], cx; ret
0x0009980e : xor ch, ch; mov [rdi + 0x13], ch; ret
0x00099952 : xor ch, ch; mov [rdi + 0x1d], ch; ret
0x0002306b : mov [rdi + 8], rcx; xor eax, eax; ret
0x00092280 : mov [rdx + 7], eax; mov rax, rdi; ret
0x000967c2 : push rbx; movq [rdi + 0x30], mm7; ret
0x00142e6b : add [rdi], eax; clc ; jmp [rsi + 0xf]
0x000998f8 : xor ch, ch; mov [rdi + 0x1a], ch; ret
0x0010d53d : add [rax], al; add [rax + 7], bh; ret
0x0013b199 : mov eax, [rdi + 8]; call [rax + 0x18]
0x00138a60 : add [rbp + 5], dh; add rsp, 0x78; ret
0x0010d533 : sbb [rcx - 0xf], ecx; jmp [rsi + 0xf]
0x000997b8 : xor ch, ch; mov [rdi + 0x10], ch; ret
0x000998d6 : xor ch, ch; mov [rdi + 0x19], ch; ret
0x0015bd0a : mov [rdx + 8], rax; mov rax, rdi; ret
0x0013c684 : lea rsi, [rsp + 4]; call [rax + 0x40]
0x00099854 : xor ch, ch; mov [rdi + 0x15], ch; ret
0x0007b9b4 : mov rax, [rip + 0x34e2bd]; call [rax]
0x0012b09d : mov esi, [rsp + 8]; call [rax + 0x18]
0x0007ba79 : mov rax, [rip + 0x34e1f8]; call [rax]
0x0001d046 : movd mm1, eax; movss [rdi], xmm1; ret
0x000f65b4 : add [rbp + 5], dh; add rsp, 0x38; ret
0x00086dc1 : div [rbp - 0x14]; mov [rdx], rcx; ret
0x000999d8 : xor ch, ch; mov [rdi + 0x21], ch; ret
0x001451b8 : mov rax, [rip + 0x28a019]; call [rax]
0x000872e4 : mov [rdi + 4], eax; mov rax, rdi; ret
0x0012b09c : mov rsi, [rsp + 8]; call [rax + 0x18]
0x00063dbc : pop rbp; add ss:[rax - 0x39], cl; ret
0x00141d06 : mov rax, [rip + 0x289573]; call [rax]
0x0012bdc2 : mov eax, [rbx + 8]; call [rax + 0x28]
0x000921fa : add ecx, [r9 - 0x76b7fcbe]; clc ; ret
0x000de688 : add fs:[rax], eax; add [rcx], bh; ret
0x00099972 : xor ch, ch; mov [rdi + 0x1e], ch; ret
0x000ec207 : add [rcx - 0x80], al; jmp [rdi + rcx]
0x000922c4 : adc ecx, [rdx + 5]; mov rax, rdi; ret
0x0015bdfa : mov [rdx + 6], rax; mov rax, rdi; ret
0x0007b9a1 : mov [rbx], esi; mov rdi, r9; call rcx
0x0007b9b5 : mov eax, [rip + 0x34e2bd]; call [rax]
0x000ed880 : mov [rdi + 4], esi; xor eax, eax; ret
0x0006fafa : add [rax - 0x77], cl; adc bl, dh; ret
0x000b3f55 : add bl, ch; adc [rax - 0x7d], cl; ret
0x00131d2d : mov [rdx + 0x6c], ax; mov eax, 1; ret
0x0001da0d : xor [rax], al; add [rax], al; jmp rax
0x0010b76f : mov edi, 0x2000005; call [r13 + 0x28]
0x000f4670 : xor eax, eax; mov [rdi + 8], esi; ret
0x0002eaad : add [rbp + 8], dh; add rsp, 0xd8; ret
0x00092304 : adc ecx, [rdx + 7]; mov rax, rdi; ret
0x00175775 : add [rax], al; add [rax + 9], cl; ret
0x0013c6ac : mov rax, [rdi + 8]; call [rax + 0x48]
0x0013b18b : add rsp, 8; pop rbx; pop rbp; jmp rax
0x00035551 : add cl, ch; idiv edi; jmp [rsi + 0xf]
0x000fbf1b : mov esi, 3; pop rbp; pop r12; jmp rax
0x00142083 : sub [rcx], ebx; std ; jmp [rsi + 0xf]
0x0007b8fa : mov eax, [rip + 0x34e378]; call [rax]
0x0010a625 : mov edi, 0x2000003; call [rbx + 0x28]
0x0004a97f : add [rax - 0x80], al; jmp [rdi + rcx]
0x00134ba1 : add [rax], al; add rdi, 0x68; jmp rcx
0x00099890 : xor ch, ch; mov [rdi + 0x17], ch; ret
0x000322a9 : add [rax], al; add [rax + 1], cl; ret
0x000c0382 : mov fs:[rdx], esi; add rsp, 0x18; ret
0x0012ca16 : mov eax, [rdi + 8]; call [rax + 0x30]
0x0013551c : mov [rdx + 0xc], eax; mov eax, 1; ret
0x0012c329 : push rdi; std ; dec [rax + 0x39]; ret
0x0013b169 : mov eax, [rdi + 8]; call [rax + 0x10]
0x00144ad3 : add esi, ebx; movsq [rdi], [rsi]; ret
0x0013b210 : add [rbp + 5], dh; add rsp, 0x48; ret
0x00099936 : xor ch, ch; mov [rdi + 0x1c], ch; ret
0x0011b243 : add al, [rax]; mov rdi, rbx; call rbp
0x001105dd : dec [rbx + 0xb491]; add bh, dh; ret 0
0x0012afb7 : mov eax, [rdi + 0x38]; call [rax + 8]
0x000b06c8 : add [rax], al; mov rdi, r12; call rbx
0x0002276e : add [rbp + 5], dh; add rsp, 0x28; ret
0x001369af : mov rax, [rdi + 8]; call [rax + 0x28]
0x001451b9 : mov eax, [rip + 0x28a019]; call [rax]
0x0015be1a : mov [rdx + 7], rax; mov rax, rdi; ret
0x0012d859 : sub [rsp + 0x10], eax; call [rax + 8]
0x0011bd02 : add al, [rax]; mov rdi, rbp; call r12
0x0013c685 : lea esi, [rsp + 4]; call [rax + 0x40]
0x0010f53e : mov [rip + 0x2c00d0], 1; pop rbx; ret
0x00135825 : mov eax, [rdi + 0x60]; call [rax + 8]
0x000e8af3 : add [rbp - 0xf], esi; jmp [rsi + 0xf]
0x000921de : mov [rdx + 4], eax; mov rax, rdi; ret
0x00040022 : inc [rax - 0x15343]; jmp [rdi + 0x75]
0x00102ec1 : mov [rip + 0x2c71c5], 0; pop rbp; ret
0x0011fd6b : mov eax, r8d; mov [rdi + rdx], 0; ret
0x00099992 : xor ch, ch; mov [rdi + 0x1f], ch; ret
0x0013b1fc : add [rax], al; mov rdi, rsp; call rdx
0x0013c6ad : mov eax, [rdi + 8]; call [rax + 0x48]
0x0012afb6 : mov rax, [rdi + 0x38]; call [rax + 8]
0x000c314e : add [rax], 0; add al, ch; cdq ; ret 4
0x000f28a9 : adc ebp, -0x10; dec [rax + 0x39]; ret
0x00064d41 : lea eax, [rsp + 0x38]; call [r13 + 8]
0x0007b9a0 : mov [rbx], rsi; mov rdi, r9; call rcx
0x00065044 : pop rax; mov rdi, rax; call [rax + 8]
0x0001f22c : add [rbp + 8], dh; add rsp, 0xa8; ret
0x00144c49 : add [rax], al; mov rdi, rbx; call r13
0x0012b355 : mov rax, [rdi + 8]; call [rax + 0x20]
0x0012b356 : mov eax, [rdi + 8]; call [rax + 0x20]
0x0004b4f8 : add al, 2; add [rcx - 0x7d], ecx; ret
0x00142354 : mov eax, [rip + 0x288f26]; call [rax]
0x0002306c : mov [rdi + 8], ecx; xor eax, eax; ret
0x0012c8eb : mov [rsi], 7; mov [rsi + 8], eax; ret
0x0012ca15 : mov rax, [rdi + 8]; call [rax + 0x30]
0x000922e4 : adc ecx, [rdx + 6]; mov rax, rdi; ret
0x0015bdda : mov [rdx + 5], rax; mov rax, rdi; ret
0x000fbed4 : xor esi, esi; mov r12d, edx; call rbp
0x0003376a : add [rax], al; add [rax + 1], bh; ret
0x00092262 : mov [rdx + 8], eax; mov rax, rdi; ret
0x0006d22d : lea rbx, [rcx + 1]; call [rax + 0x18]
0x0001ccc5 : adc [rdi], ecx; subsd xmm0, xmm1; ret
0x0009a205 : add esi, ebx; movsb [rdi], [rsi]; ret
0x00099dfd : add [rax], al; add [rcx + 1], cl; ret
0x00131c04 : add [rax], al; add rdi, 0xc8; jmp rcx
0x000955f3 : mov [rdi], cx; mov [rdi + 2], dh; ret
0x00142353 : mov rax, [rip + 0x288f26]; call [rax]
0x000fbf05 : pop rbp; pop r12; mov esi, 2; jmp rax
0x00033a33 : add [rax], al; add [rax + 2], bh; ret
0x000fbf09 : add al, [rax]; add [rax], al; jmp rax
0x000ec32f : add [rcx - 0x80], al; jmp [rax + 0xf]
0x0007ba7a : mov eax, [rip + 0x34e1f8]; call [rax]
0x00145023 : sub [rbx - 0x26], dh; mov eax, 1; ret
0x000260d4 : sbb cl, ch; idiv dil; jmp [rsi + 0xf]
0x0001ccdf : movd mm1, eax; movsd [rdi], xmm1; ret
0x0013b18c : add esp, 8; pop rbx; pop rbp; jmp rax
0x000921fc : mov [rdx + 3], eax; mov rax, rdi; ret
0x00152c2f : add [rbx + 0x5789fc56], cl; cld ; ret
0x00038597 : sub dh, al; add [rcx - 0x7d], cl; ret
0x00132831 : add [rax], al; add rdi, 0x10; jmp rcx
0x0001e21c : add [rbp + 8], dh; add rsp, 0x98; ret
0x000999b2 : xor ch, ch; mov [rdi + 0x20], ch; ret
0x0001ce93 : addps xmm0, xmm0; mov [rdi], ecx; ret
0x000da8f3 : add [rbp + 0x31], al; jmp [rsi + 0xf]
0x00074cf0 : xor eax, 0xd034800; call [rdx + 0x35]
0x00135824 : mov rax, [r15 + 0x60]; call [rax + 8]
0x0011fd6c : mov eax, eax; mov [rdi + rdx], 0; ret
0x0015bd99 : mov [rdx + 5], eax; mov rax, rdi; ret
0x0009214e : adc ecx, [rdx + 8]; mov rax, rdi; ret
0x000920f7 : movlps [rdx], xmm0; mov rax, rdi; ret
0x000e029c : pop rax; std ; int1 ; jmp [rsi + 0xf]
0x000997ce : xor ch, ch; mov [rdi + 0x11], ch; ret
0x00099870 : xor ch, ch; mov [rdi + 0x16], ch; ret
0x000998b0 : xor ch, ch; mov [rdi + 0x18], ch; ret
0x00099a28 : xor ch, ch; mov [rdi + 0x40], ch; ret
0x0012d2fb : lea eax, [rbx + 0x2260]; pop rbx; ret
0x000920f6 : movlpd [rdx], xmm0; mov rax, rdi; ret
0x001369b0 : mov eax, [rdi + 8]; call [rax + 0x28]
0x0001dc2b : add [rax], al; add [rax - 1], bh; ret
0x0015dd10 : mov [rcx], dx; mov [rcx + 2], dl; ret
0x001354d1 : add [rax], al; add rdi, 0x58; jmp rcx
0x0001ce92 : addsd xmm0, xmm0; mov [rdi], ecx; ret
0x0013b168 : mov rax, [rdi + 8]; call [rax + 0x10]
0x00000bfb : add [rax], al; add rsp, 0x28; jmp rax
0x0001cd4d : movd mm1, edi; movapd xmm0, xmm1; ret
0x000c314f : add [rax], al; add al, ch; cdq ; ret 4
0x00138de5 : mov esi, ebp; mov rdi, r15; call [rax]
0x00095612 : mov [rdi + 4], dh; mov [rdi], ecx; ret
0x00131d2e : mov [rdx + 0x6c], eax; mov eax, 1; ret
0x0001d0c8 : movd xmm1, edi; movaps xmm0, xmm1; ret
0x0005dd36 : mov eax, [rsp + 8]; add rsp, 0x18; ret
0x000fe418 : lea rax, [rip + 0x960e9]; pop rbx; ret
0x0015dd11 : mov [rcx], edx; mov [rcx + 2], dl; ret
0x0005dd35 : mov rax, [rsp + 8]; add rsp, 0x18; ret
0x0012d819 : mov esi, esp; mov rdi, rbx; call [rax]
0x00131cd5 : mov eax, 1; movups xmm[rdx], xmm0; ret
0x001725be : add [rax], al; lea rax, [rdi + 9]; ret
0x001712ce : mov [rdi], esi; mov [r9 - 8], rcx; ret
0x0013ce52 : movups xmm[rsp + 0x28], xmm0; call rdx
0x0011b781 : mov esi, [rsp]; mov rdi, r13; call r12
0x00135808 : mov [rdi + 0x58], 0; call [rax + 0x28]
0x000955f4 : mov [rdi], ecx; mov [rdi + 2], dh; ret
0x0015dd70 : mov [rcx], rdx; mov [rcx + 8], dl; ret
0x001712cd : mov [rdi], rsi; mov [r9 - 8], rcx; ret
0x00063ab5 : sub eax, [rdx + 0x10]; sar rax, 2; ret
0x000fe419 : lea eax, [rip + 0x960e9]; pop rbx; ret
0x00031270 : add [rbp - 0x23], esi; mov eax, 1; ret
0x00095653 : mov [rdi + 8], dh; mov [rdi], rcx; ret
0x001725ae : add [rax], al; lea rax, [rdi + 8]; ret
0x00069b82 : mov [rsp], ecx; mov rdi, rbx; call rax
0x0012d818 : mov rsi, r12; mov rdi, rbx; call [rax]
0x0013561c : mov [rdx + 0x10], eax; mov eax, 1; ret
0x00063ab4 : sub rax, [rdx + 0x10]; sar rax, 2; ret
0x00096631 : mov [rdi], edx; mov [rdi + 8], dx; ret
0x00041281 : adc cl, ch; idiv r15b; jmp [rsi + 0xf]
0x00068076 : sub eax, [rdx + 0x30]; sar rax, 2; ret
0x00108d78 : mov esi, ebp; xor r15d, r15d; call rax
0x00068185 : sub rax, [rdx + 0x18]; sar rax, 2; ret
0x000af63e : add [rax], al; lea rax, [rdi - 8]; ret
0x0013cc60 : add [rdi + 0x28], edx; mov eax, 1; ret
0x00056acc : inc [rbp - 0x7b]; ror [rdi], 0x85; ret
0x0013831c : sub [rax], eax; mov fs:[rax], rdx; ret
0x00096327 : mov [rdi], ecx; mov [rdi + 8], dl; ret
0x0011bda1 : mov esi, [rsp]; mov rdi, rbp; call r12
0x000bf5ef : add [rcx + rcx*4 - 0x10], cl; call rax
0x00096284 : add [rax], al; nop cs:[rax + rax]; ret
0x000f7a74 : add ecx, [rax - 0x77]; adc bl, dh; ret
0x0015dd40 : mov [rcx], edx; mov [rcx + 4], dx; ret
0x0012b07d : mov [rbx + 0x18], 0; call [rax + 0x28]
0x0001ccdd : movq xmm1, rax; movsd [rdi], xmm1; ret
0x0000aa17 : add [rbp + 0x31], al; leave ; call r15
0x0013bfd1 : mov rsi, rsp; mov rdi, rbp; call [rax]
0x0015dd81 : mov [rcx], edx; mov [rcx + 8], dx; ret
0x0011b780 : mov rsi, [rsp]; mov rdi, r13; call r12
0x00113af0 : inc [rax]; or eax, edi; bswap eax; ret
0x00021c93 : xor [rax], al; add [rax], al; call rdx
0x00131dbd : mov [rdi + 0xb8], eax; mov eax, 1; ret
0x00001287 : add rsp, 8; mov eax, edi; neg eax; ret
0x0012c8ef : add [rax], al; mov [rsi + 8], eax; ret
0x001533c8 : mov [rdi + 1], edx; mov [rdi], cx; ret
0x000afb2a : add al, bl; nop [rax]; add rax, 1; ret
0x00081a98 : add [rax - 0x80], al; call [rdi + rcx]
0x0006598e : sbb [rcx + rcx*4 - 0x19], cl; call rbx
0x00069b81 : mov [rsp], rcx; mov rdi, rbx; call rax
0x00095626 : mov [rdi], ecx; mov [rdi + 4], dx; ret
0x000965f0 : mov [rdi], edx; mov [rdi + 4], dx; ret
0x000f5b02 : xchg eax, ebp; int1 ; jmp [rsi + 0x2e]
0x000f463c : movups xmm0, xmm[rax]; add bl, dh; ret
0x0003a776 : add [rcx - 0x80], al; call [rbx + 0xf]
0x000105ce : add [rcx + rcx*4 - 0x19], cl; call rax
0x0012c8fc : add [rax], al; mov [rsi + 8], rax; ret
0x0013d13a : add [rax], al; mov [rdi + 8], rax; ret
0x00127105 : push rdi; mov gs, ebp; jmp [rsi + 0xf]
0x00131d90 : mov [rdi + 0xa8], eax; mov eax, 1; ret
0x0001cd4b : movq xmm1, rdi; movapd xmm0, xmm1; ret
0x00097a02 : mov [rdi], dl; lea rax, [rdi + 1]; ret
0x0011d7a2 : push rdx; sub dh, ch; jmp [rsi + 0x2e]
0x000962c7 : mov [rdi], ecx; mov [rdi + 2], dl; ret
0x00023566 : mov [rsi + 0xe], ax; xor eax, eax; ret
0x000fd52a : add [rbp + 8], dh; add rsp, 0x418; ret
0x0003a51b : add [rax], eax; add [rax], al; jmp rax
0x00047dfb : add [rax], al; xor r15d, r15d; jmp rax
0x0001d045 : movd xmm1, eax; movss [rdi], xmm1; ret
0x00138de4 : mov rsi, rbp; mov rdi, r15; call [rax]
0x001712df : mov [rdi], esi; mov [r9 - 4], ecx; ret
0x00138f03 : add al, [rax]; add [rax], al; call rax
0x0011fc4c : lea eax, [rcx + rax + 2]; pop rbx; ret
0x0017254e : add [rax], al; lea rax, [rdi + 1]; ret
0x0014d49a : push rdi; std ; mov [rdi - 2], cx; ret
0x000962e5 : mov [rdi], ecx; mov [rdi + 4], dl; ret
0x0017257e : add [rax], al; lea rax, [rdi + 4]; ret
0x0000b410 : adc eax, [rax]; mov rdi, r14; call rbx
0x0006fd2a : add [rax], eax; add [rax + 1], cl; ret
0x001719c3 : mov [rdi], ecx; mov [rsi - 2], cx; ret
0x00134cf5 : mov [rdi + 0x58], eax; mov eax, 1; ret
0x0011f771 : add [rax - 1], bh; cmove eax, edx; ret
0x0000f204 : add [rdi + rcx], al; mov bh, 0xc0; ret
0x000b06c9 : add [rcx + rcx*4 - 0x19], cl; call rbx
0x0013c893 : mov [rdi + 0x28], edx; mov eax, 1; ret
0x0000f2a4 : add [rax + 0xf], al; mov bh, 0xc0; ret
0x000965e0 : mov [rdi], edx; mov [rdi + 4], dl; ret
0x0017258e : add [rax], al; lea rax, [rdi + 5]; ret
0x000af64e : add [rax], al; lea rax, [rdi - 4]; ret
0x0010e005 : movups xmm[rbp - 0x78], xmm0; call rax
0x00095667 : mov [rdi], rcx; mov [rdi + 8], dx; ret
0x0017256e : add [rax], al; lea rax, [rdi + 3]; ret
0x001719cc : add [rdx + 2], esi; mov [rdi], cl; ret
0x000921fb : add ecx, [rcx - 0x76b7fcbe]; clc ; ret
0x000c8459 : xor eax, eax; cmp esi, 1; sete al; ret
0x00135807 : mov [r15 + 0x58], 0; call [rax + 0x28]
0x0000b2ba : add [rcx + rcx*4 - 0x11], cl; call r12
0x0015dd30 : mov [rcx], edx; mov [rcx + 4], dl; ret
0x0010f8fe : add [rax], al; mov rax, fs:[0x10]; ret
0x00138bef : mov [rsp + 0x18], 1; call [rax + 0x18]
0x0012c942 : add [rdi], cl; adc [rsi + 8], eax; ret
0x000fbf1f : add [rbp + 0x41], bl; pop rsp; jmp rax
0x00096be3 : mov [rdi], dx; lea rax, [rdi + 1]; ret
0x00160063 : mov [rdx], ax; lea rax, [rdx + 1]; ret
0x00096620 : mov [rdi], rdx; mov [rdi + 8], dl; ret
0x00001288 : add esp, 8; mov eax, edi; neg eax; ret
0x0015dd71 : mov [rcx], edx; mov [rcx + 8], dl; ret
0x00095668 : mov [rdi], ecx; mov [rdi + 8], dx; ret
0x001695e2 : pop rdi; and ch, al; std ; xlatb ; ret
0x000c38fc : mov [rcx], al; add [rax], al; call rax
0x00065a73 : adc [rcx + rcx*4 - 0x19], cl; call rbx
0x00096326 : mov [rdi], rcx; mov [rdi + 8], dl; ret
0x000008de : xor [rax], al; add [rax], al; call rax
0x00134cc8 : mov [rdi + 0x48], eax; mov eax, 1; ret
0x00145022 : sub [rbx - 0x26], sil; mov eax, 1; ret
0x00134c35 : mov [rdi + 0x54], eax; mov eax, 1; ret
0x00096630 : mov [rdi], rdx; mov [rdi + 8], dx; ret
0x0015dd80 : mov [rcx], rdx; mov [rcx + 8], dx; ret
0x000062d2 : mov es, [rax + rax]; add bh, dh; ret 0
0x000210c6 : dec [rcx + 0xf]; scasd eax, [rdi]; ret
0x0017259e : add [rax], al; lea rax, [rdi + 6]; ret
0x00097a13 : mov [rdi], dx; lea rax, [rdi + 2]; ret
0x0013bfd2 : mov esi, esp; mov rdi, rbp; call [rax]
0x00138f92 : mov [rsp + 0xb8], 1; call [rax + 0x18]
0x00108d77 : mov rsi, r13; xor r15d, r15d; call rax
0x001724da : add [rax], al; lea rax, [rdi + 7]; ret
0x0011bda0 : mov rsi, [rsp]; mov rdi, rbp; call r12
0x00131cc0 : add [rdi], cl; adc [rdi + 8], eax; ret
0x00068f80 : push rdi; or [rdi], cl; mov dh, 0; ret
0x00146216 : xchg [rdi - 0x12], bh; jmp [rsi + 0xf]
0x00068075 : sub rax, [rdx + 0x30]; sar rax, 2; ret
0x00131ca5 : mov [rdi + 0xb4], eax; mov eax, 1; ret
0x000965be : add [rax], al; mov [rdi - 1], edx; ret
0x0000b2b9 : adc eax, [rax]; mov rdi, r13; call r12
0x000965fe : add [rax], al; mov [rdi - 1], rdx; ret
0x00068186 : sub eax, [rdx + 0x18]; sar rax, 2; ret
0x0012aff7 : mov [rbx + 0x18], 1; call [rax + 0x28]
0x00096621 : mov [rdi], edx; mov [rdi + 8], dl; ret
0x00138c53 : mov [rsp + 0x20], 5; call [rax + 0x18]
0x0017255e : add [rax], al; lea rax, [rdi + 2]; ret
0x001530b8 : mov [rdi + 2], edx; mov [rdi], rcx; ret
0x000f0c3e : mov edx, [rdx + rax]; call [rbx + 0x40]
0x000f4aa8 : add [rbp + 0xc], dh; add rsp, 0x18; ret
0x00138478 : mov eax, [rip + 0x29183a]; pop rbx; ret
0x0007b9a2 : xor ecx, [rcx + rcx*4 - 0x31]; call rcx
0x001385c0 : mov rax, [rip + 0x291659]; pop rbx; ret
0x0010fe07 : mov [rip + 0x2be1a2], rax; pop rbp; ret
0x0009a1b2 : movups xmm[rdi + rdx - 0x10], xmm1; ret
0x00138680 : mov rax, [rip + 0x291531]; pop rbx; ret
0x00152fd7 : mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x000c3060 : add [rax], 0; add al, ch; push rdi; ret
0x0013852f : mov rax, [rip + 0x2917da]; pop rbx; ret
0x00045e36 : popfq ; idiv edi; dec [rax - 0x77]; ret
0x00153047 : mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x0015dda1 : mov [rcx], edx; mov [rcx + 8], edx; ret
0x000bbbeb : add [rax], al; add [rcx + 0xf], al; ret
0x00096be4 : mov [rdi], edx; lea rax, [rdi + 1]; ret
0x00103eab : xor eax, eax; cmp edi, 9; setbe al; ret
0x0013d071 : not eax; add rsp, 8; shr eax, 0x1f; ret
0x00020d12 : sbb al, 7; mov rax, [rsp + 8]; call rax
0x00096c53 : mov [rdi], rdx; lea rax, [rdi + 7]; ret
0x00152e88 : mov [rdi + 7], edx; mov [rdi], rcx; ret
0x0012c0a5 : mov [rax + rsi*4 + 0x75000001], ss; ret
0x00102dd0 : mov [rip + 0x2c72ba], ebx; pop rbx; ret
0x0005ca59 : pop r12; pop r13; pop r14; pop rbp; ret
0x001385ef : mov rax, [rip + 0x29162a]; pop rbx; ret
0x0015ddd0 : mov [rcx], rdx; mov [rcx + 7], rdx; ret
0x001386af : mov rax, [rip + 0x291502]; pop rbx; ret
0x00096c66 : mov [rdi], rcx; lea rax, [rdi + 8]; ret
0x00152ef8 : mov [rdi + 6], edx; mov [rdi], rcx; ret
0x00021594 : pop rbx; pop r12; pop r13; pop rbp; ret
0x0002268f : add [rax - 0x7b], cl; call [rbx + 0x74]
0x00110492 : add [rax], 0; add [rax - 0x7d], cl; ret
0x0009c446 : movzx esi, bl; mov rdi, [r12]; call rbp
0x000d2e2d : add [rax], al; add [rax + 0xc], bh; ret
0x000555b4 : add cl, ch; sar bh, cl; jmp [rsi + 0xf]
0x00102dcf : mov [rip + 0x2c72ba], rbx; pop rbx; ret
0x0007d4e3 : dec [rbp - 0x7b]; test [rdi], 0x84; ret
0x0010fe08 : mov [rip + 0x2be1a2], eax; pop rbp; ret
0x00096670 : mov [rdi], rdx; mov [rdi + 6], rdx; ret
0x000f3775 : mov [rsi + 0x66], dx; xor eax, eax; ret
0x0014cf02 : push rsi; clc ; mov [rdi - 8], rdx; ret
0x0015dd90 : mov [rcx], rdx; mov [rcx + 7], edx; ret
0x000afec7 : pop rbx; pop rbp; pop r12; pop r14; ret
0x0016fbc4 : movzx ecx, [rsi - 1]; sub eax, ecx; ret
0x000a77cc : dec [rbp - 0x7b]; dec [rax - 0x77]; ret
0x00141a9f : add [rax - 0x77], cl; xor eax, eax; ret
0x0015dde1 : mov [rcx], edx; mov [rcx + 8], rdx; ret
0x001383f1 : mov eax, [rip + 0x2918c1]; pop rbx; ret
0x0013f8f4 : inc [rbp - 0x7b]; dec [rax - 0x39]; ret
0x000f7a44 : mov [rdi], rax; mov [rdi + 8], rsi; ret
0x00000288 : pop r12; pop r13; pop r14; pop r15; ret
0x00096c15 : mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x000d2654 : add ch, al; fdiv st(2); jmp [rsi + 0xf]
0x000fb2cb : pop rcx; pop rbx; pop rbp; pop r12; ret
0x0016f79a : adc [rsi + 0xf], ah; cmp [rdi], dl; ret
0x0009a359 : movups xmm[rdi + rdx - 0x20], xmm3; ret
0x00175e11 : add [rax], al; add [rcx + 0xf], cl; ret
0x0011b6e4 : sub [rsi], ch; sub eax, [rax]; call rax
0x0015dda0 : mov [rcx], rdx; mov [rcx + 8], edx; ret
0x00138681 : mov eax, [rip + 0x291531]; pop rbx; ret
0x00063e90 : mov r9, [rax + 0x10]; call [rbp + 0x18]
0x00095686 : mov [rdi], rcx; mov [rdi + 8], edx; ret
0x0015ddc0 : mov [rcx], rdx; mov [rcx + 6], rdx; ret
0x0009bb35 : add ss:[eax], eax; cmovne rax, rdx; ret
0x001530b7 : mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x000264a0 : pop rax; idiv bh; dec [rax + 0x39]; ret
0x00133582 : sub al, [rsi + rdi*8]; jmp [rsi + 0x2e]
0x000956a7 : mov [rdi], rcx; mov [rdi + 6], rdx; ret
0x00000ece : pop r13; pop r14; pop r15; pop rbp; ret
0x0017382b : movzx edx, [rsi - 9]; sub eax, edx; ret
0x00138477 : mov rax, [rip + 0x29183a]; pop rbx; ret
0x000f7a45 : mov [rdi], eax; mov [rdi + 8], rsi; ret
0x00160064 : mov [rdx], eax; lea rax, [rdx + 1]; ret
0x0016f977 : movzx edx, [rsi - 1]; sub eax, edx; ret
0x000f2657 : div [rcx]; push [rcx]; shr al, 0xf; ret
0x00096c67 : mov [rdi], ecx; lea rax, [rdi + 8]; ret
0x0012d3cf : add [rax], al; mov rdi, rbp; call [rbx]
0x00153048 : mov [rdi + 3], edx; mov [rdi], rcx; ret
0x00096283 : add [rax], r8b; nop cs:[rax + rax]; ret
0x000fcb69 : add [rax], al; mov rdi, [r13]; call r12
0x0015ffe3 : mov [rdx], rax; lea rax, [rdx + 7]; ret
0x0007cb76 : xor rax, fs:[0x30]; add rsp, 8; jmp rax
0x00025458 : inc [rbp + 0x31]; dec [rax - 0x39]; ret
0x0009a336 : movups xmm[rdi + rdx - 0x40], xmm7; ret
0x0001d9d9 : mov rsp, r8; mov rbp, r9; nop ; jmp rdx
0x00002b94 : pop rbp; pop r12; pop r13; pop r14; ret
0x00138501 : mov eax, [rip + 0x291809]; pop rbx; ret
0x00095677 : mov [rdi], ecx; mov [rdi + 7], edx; ret
0x000956b8 : mov [rdi], ecx; mov [rdi + 7], rdx; ret
0x00152e87 : mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x000943a4 : pop rax; or [rax], eax; add cl, ch; ret
0x0015ddc1 : mov [rcx], edx; mov [rcx + 6], rdx; ret
0x00136cb1 : add [rax], al; mov rdi, rax; call [r10]
0x0005f97b : mov rdi, rbx; pop rbx; pop rbp; jmp rax
0x00096651 : mov [rdi], edx; mov [rdi + 8], edx; ret
0x001386b0 : mov eax, [rip + 0x291502]; pop rbx; ret
0x0011d1ef : add [rax], al; add [rcx - 0xa], al; ret
0x000fbeec : add [rax], eax; add [rax], al; call rbp
0x00096660 : mov [rdi], rdx; mov [rdi + 5], rdx; ret
0x000047c0 : add [rax], al; add [rax + 0xf], cl; ret
0x00043a12 : add al, [rcx - 0x75]; add al, 0x39; ret
0x00096c54 : mov [rdi], edx; lea rax, [rdi + 7]; ret
0x0015dd91 : mov [rcx], edx; mov [rcx + 7], edx; ret
0x00097a94 : mov [rdi], edx; lea rax, [rdi + 8]; ret
0x001007f5 : add rsp, 8; movzx eax, al; neg eax; ret
0x0015ddb0 : mov [rcx], rdx; mov [rcx + 5], rdx; ret
0x00095698 : mov [rdi], ecx; mov [rdi + 5], rdx; ret
0x00153128 : mov [rdi + 1], edx; mov [rdi], rcx; ret
0x0015dde0 : mov [rcx], rdx; mov [rcx + 8], rdx; ret
0x00152f67 : mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x00138500 : mov rax, [rip + 0x291809]; pop rbx; ret
0x000fca54 : mov eax, ebp; pop rbx; pop rbp; jmp rax
0x00168eca : lea eax, [rdi + rcx]; sub rax, rsi; ret
0x00096650 : mov [rdi], rdx; mov [rdi + 8], edx; ret
0x0014d671 : push rsi; cld ; mov [rdi - 4], edx; ret
0x00096640 : mov [rdi], rdx; mov [rdi + 7], edx; ret
0x00064eab : lea r8, [rsp + 0x10]; call [rbp + 0x18]
0x000a9c01 : adc [rcx + 0xf], al; xchg eax, ebx; ret
0x000234db : mov [rsi + 0xc], eax; xor eax, eax; ret
0x00023567 : mov [rsi + 0xe], eax; xor eax, eax; ret
0x00095687 : mov [rdi], ecx; mov [rdi + 8], edx; ret
0x00096671 : mov [rdi], edx; mov [rdi + 6], rdx; ret
0x0009bb36 : add ss:[rax], eax; cmovne rax, rdx; ret
0x001385f0 : mov eax, [rip + 0x29162a]; pop rbx; ret
0x00160092 : mov [rdx], eax; lea rax, [rdx + 3]; ret
0x00096641 : mov [rdi], edx; mov [rdi + 7], edx; ret
0x000f5b45 : add [rbp + 0xf], dh; add rsp, 0x28; ret
0x0015ddd1 : mov [rcx], edx; mov [rcx + 7], rdx; ret
0x00000289 : pop rsp; pop r13; pop r14; pop r15; ret
0x00152ef7 : mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x00094f3a : mov [rdx + 0x10], ah; mov rax, rdi; ret
0x0005ca5a : pop rsp; pop r13; pop r14; pop rbp; ret
0x0015dd50 : mov [rcx], edx; mov [rcx + 3], edx; ret
0x00138530 : mov eax, [rip + 0x2917da]; pop rbx; ret
0x001385c1 : mov eax, [rip + 0x291659]; pop rbx; ret
0x00161c6a : add [rax - 0x7d], ecx; fdivr st(7); ret
0x000956b7 : mov [rdi], rcx; mov [rdi + 7], rdx; ret
0x0009a64d : movdqu xmm[rdi + rdx - 0x20], xmm0; ret
0x0008afe6 : add [rax], al; add [rcx - 9], cl; ret 2
0x0015ddb1 : mov [rcx], edx; mov [rcx + 5], rdx; ret
0x00095676 : mov [rdi], rcx; mov [rdi + 7], edx; ret
0x00095697 : mov [rdi], rcx; mov [rdi + 5], rdx; ret
0x0004155f : add [rcx + 0xf], al; xchg eax, esp; ret
0x0015ffe4 : mov [rdx], eax; lea rax, [rdx + 7]; ret
0x0013731a : add [rax], al; mov rdi, rbx; call [rax]
0x0008afc0 : add [rax], al; add [rcx - 9], cl; ret 1
0x00000ecf : pop rbp; pop r14; pop r15; pop rbp; ret
0x00097a42 : mov [rdi], edx; lea rax, [rdi + 4]; ret
0x00097a93 : mov [rdi], rdx; lea rax, [rdi + 8]; ret
0x0003021e : add [rax], al; add rax, 1; pop rbx; ret
0x000fca53 : mov rax, rbp; pop rbx; pop rbp; jmp rax
0x000b94e6 : add [rax], al; add [rbp + 0xf], al; ret
0x001383f0 : mov rax, [rip + 0x2918c1]; pop rbx; ret
0x00168ec9 : lea rax, [rdi + rcx]; sub rax, rsi; ret
0x0012aef2 : xor eax, eax; pop rbx; pop rbp; jmp rcx
0x0014dc77 : push rdi; stc ; mov [rdi - 4], ecx; ret
0x00095635 : mov [rdi], ecx; mov [rdi + 3], edx; ret
0x00097a14 : mov [rdi], edx; lea rax, [rdi + 2]; ret
0x0005f97c : mov edi, ebx; pop rbx; pop rbp; jmp rax
0x001719b7 : mov [rdi], ecx; mov [rsi - 4], ecx; ret
0x00096661 : mov [rdi], edx; mov [rdi + 5], rdx; ret
0x00000771 : pop rbx; pop rbp; pop r12; pop r13; ret
0x000234da : mov [rsi + 0xc], rax; xor eax, eax; ret
0x001007f6 : add esp, 8; movzx eax, al; neg eax; ret
0x000956a8 : mov [rdi], ecx; mov [rdi + 6], rdx; ret
0x00003e0c : add cl, [rax + 1]; fimul [rax + 1]; ret
0x00152fd8 : mov [rdi + 4], edx; mov [rdi], rcx; ret
0x00152f68 : mov [rdi + 5], edx; mov [rdi], rcx; ret
0x001532e5 : mov [rdi + 1], edx; mov [rdi], ecx; ret
0x00153127 : mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x00096c02 : mov [rdi], edx; lea rax, [rdi + 3]; ret
0x00153275 : mov [rdi + 2], edx; mov [rdi], ecx; ret
0x001528b9 : push rdi; cmc ; mov [rdi - 4], ecx; ret
0x00153205 : mov [rdi + 3], edx; mov [rdi], ecx; ret
0x00032701 : add rdx, r8; mov rax, rdx; pop rbx; ret
0x0012c77f : xor eax, eax; pop rbx; pop rbp; jmp rdx
0x000ef446 : add [rbp + 0x4a], dh; add rsp, 0x68; ret
0x000fe3be : mov [rax], 0; mov rax, rbx; pop rbx; ret
0x000f3776 : mov [rsi + 0x66], edx; xor eax, eax; ret
0x0001d9da : mov esp, eax; mov rbp, r9; nop ; jmp rdx
0x00110995 : add [rbp - 0x18], esi; mov rax, rdi; ret
0x0017114a : add [rbx + rax - 9], bh; fadd st(3); ret
0x000000a2 : add al, ch; pop rax;  add [rax], al; ret
0x00122667 : add [rcx - 0x3a], al; add al, [rax]; ret
0x000eed1b : add [rbp + 0x45], dh; add rsp, 0x58; ret
0x000fbf1e : add [rax], al; pop rbp; pop r12; jmp rax
0x000c3653 : mov eax, [rsp + 0xc]; add rsp, 0x18; ret
0x0001c86b : sub ecx, edx; not eax; and eax, ecx; ret
0x0005e4cf : mov [rax], 5; mov rax, rdx; pop rbx; ret
0x00079c1d : add [rax], al; add [rax + 0x16], bh; ret
0x0006e878 : mov eax, [rdi + 0x10]; sub eax, edx; ret
0x00064eac : lea eax, [rsp + 0x10]; call [rbp + 0x18]
0x0013699b : sub [rsp + 0x20], eax; call [rax + 0x28]
0x0001d0e6 : mulss xmm1, xmm0; movaps xmm0, xmm1; ret
0x000c540d : add [rax], al; add [rax + 0x7e], bh; ret
0x00171ed0 : int1 ; dec [rax + 0x6f]; jmp [r10 - 0xf]
0x0003a851 : dec [rcx + rcx*4 - 9]; call [r15 + 0x38]
0x0010fd11 : xor eax, eax; mov rbp, rsp; pop rbp; ret
0x000e2681 : xor cl, ch; sar esi, -1; jmp [rsi + 0xf]
0x000473c5 : dec [rcx + rcx*4 - 2]; call [r14 + 0x38]
0x0003114a : mov esi, [rsi + 0x70]; xor eax, eax; ret
0x0017252d : add [rax], al; lea rax, [rdi + 0xf]; ret
0x000c49fa : add [rbp + 0x56], dh; add rsp, 0x38; ret
0x0001be9d : add [rax], al; add [rax - 0x39], cl; ret
0x0009a776 : mov edx, 0; cmove rax, rdx; pop rbx; ret
0x0010bfd8 : mov esi, [rbp - 0x98]; call [r10 + 0x28]
0x001725de : add [rax], al; lea rax, [rdi + 0xb]; ret
0x0010055b : add [rbp + 0x1d], dh; add rsp, 0x78; ret
0x0013901a : dec [rcx + rcx*4 - 9]; call [rax + 0x18]
0x0017260e : add [rax], al; lea rax, [rdi + 0xe]; ret
0x00136392 : xor [r9 - 0x77], r9b; cmp r8b, r13b; ret
0x00079505 : lea rcx, [rdx - 8]; cmovne rax, rcx; ret
0x001725ee : add [rax], al; lea rax, [rdi + 0xc]; ret
0x0013c8b2 : add rsi, rax; mov [rdi + 0x18], rsi; ret
0x001003b5 : add [rip - 0x1000], ah; or eax, edx; ret
0x000082cd : add al, [rax]; add [rax + 0x39], cl; ret
0x00068ef3 : add [rbp + 0x11], dh; add rsp, 0x48; ret
0x00094db1 : leave ; mov [rax], cl; mov rax, rdi; ret
0x000f597c : add [rbp + 0x76], dh; add rsp, 0x38; ret
0x0007c06c : sbb [rax + 1], bh; pop rbx; pop rbp; ret
0x000f7902 : add [rbp + 0x40], dh; add rsp, 0x38; ret
0x00000a5a : int 0; add [rax], al; add rsp, 0x98; ret
0x001057f4 : add [rax - 0x77], cl; fucompi st(0); ret
0x0004fe76 : sbb [rax], al; add [rax - 0x7d], cl; ret
0x00138dca : add [rax], al; add [rax - 0x7f], cl; ret
0x00044188 : add [rax], al; add [rax + 0x29], cl; ret
0x00134031 : pop rax; mov rdi, rbp; call [rax + 0x20]
0x0006499b : mov [rsp + 0x30], rax; call [r13 + 0x30]
0x00138d3c : mov [rsp + 0x40], edx; call [rax + 0x18]
0x000f6d06 : mov [rip + 0x2d60e0], 0; add rsp, 8; ret
0x0011e0d3 : add [rax], al; add [rcx - 0x77], al; ret
0x000bfbaa : add [rbp + 0x4e], dh; add rsp, 0x38; ret
0x00138a4b : mov [rsp + 0x38], rdx; call [rax + 0x18]
0x0001e6da : add es:[rax], al; add [rax - 1], bh; ret
0x00032702 : add edx, eax; mov rax, rdx; pop rbx; ret
0x0013932e : add [rbp + 0x27], dh; add rsp, 0x28; ret
0x0010321f : mov rax, [rax + 0x18]; add [rax], 1; ret
0x00039c53 : add al, [rax]; add [rax + 0x63], cl; ret
0x001454fc : add [rbp + 0x64], dh; add rsp, 0x38; ret
0x00138a4c : mov [rsp + 0x38], edx; call [rax + 0x18]
0x000404f5 : div r8d; add r9d, eax; mov eax, r9d; ret
0x000f4a4d : add [rbp + 0x1b], dh; add rsp, 0x38; ret
0x0005d84a : push rdx; xor edi, edx; jmp [rsi - 0x70]
0x0005ab7d : add [rax], al; add [rax + 0x10], bh; ret
0x000b451e : add al, [rax]; add [rax - 0x77], cl; ret
0x0005a9d2 : add [rbp + 0x12], dh; add rsp, 0x18; ret
0x000d44de : add al, [rax]; add [rcx - 0x7d], cl; ret
0x000af62e : add [rax], al; lea rax, [rdi - 0xc]; ret
0x00003f3d : add [rax], al; add [rax - 0x77], cl; ret
0x00102ba1 : mov [rip + 0x2c74e5], 0; add rsp, 8; ret
0x0004fe4b : sbb [rax], al; add [rax - 0x77], cl; ret
0x00112ed6 : push rsi; pushfq ; clc ; jmp [rsi + 0xf]
0x000f7833 : add [rbp + 0x3f], dh; add rsp, 0x38; ret
0x0014214d : add [rbp + 0x2c], dh; add rsp, 0x18; ret
0x00138ab2 : adc [rsp + 0x18], eax; call [rax + 0x18]
0x000f6454 : mov eax, 0; cmove rax, rbx; pop rbx; ret
0x0001e18b : add [rax], al; add [rbx + 0x5d], bl; ret
0x00079506 : lea ecx, [rdx - 8]; cmovne rax, rcx; ret
0x0010248e : add [rbp + 0x4a], dh; add rsp, 0x58; ret
0x0002d3d1 : add [rax], al; add [rax + 0x63], cl; ret
0x00002516 : add [rax], al; add [rax - 0x7d], cl; ret
0x000ee206 : add [rbp + 0x10], dh; add rsp, 0x28; ret
0x00102b70 : mov [rip + 0x2c7516], 3; add rsp, 8; ret
0x0002e976 : xchg ah, dh; std ; dec [rax - 0x77]; ret
0x0003021d : add [rax], r8b; add rax, 1; pop rbx; ret
0x00135f1b : lea rsi, [rbp + 0x18]; call [rax + 0x10]
0x0012b119 : mov rax, [rdi + 0x38]; call [rax + 0x10]
0x00141d0a : xchg eax, ebp; sub [rax], al; call [rax]
0x0012b11a : mov eax, [rdi + 0x38]; call [rax + 0x10]
0x001452a6 : add [rbp + 0x78], dh; add rsp, 0x68; ret
0x00134578 : lea esi, [rsp + 0x10]; call [rax + 0x10]
0x0009a475 : xor [rbp + 0xf], al; adc [rbx], eax; ret
0x0013c8b3 : add esi, eax; mov [rdi + 0x18], rsi; ret
0x000757b3 : add [rax], al; add [rax + 0x39], cl; ret
0x0006499c : mov [rsp + 0x30], eax; call [r13 + 0x30]
0x00063e91 : mov ecx, [rax + 0x10]; call [rbp + 0x18]
0x0001bf77 : add rcx, [rdi + 0x20]; mov rax, rcx; ret
0x0003a605 : dec [rcx + rcx*4 - 9]; call [rax + 0x38]
0x00022ff0 : mov [rsi + 0x28], rax; xor eax, eax; ret
0x0001d0e7 : mulps xmm1, xmm0; movaps xmm0, xmm1; ret
0x0001cd70 : mulsd xmm1, xmm0; movapd xmm0, xmm1; ret
0x0015268a : push rdi; int1 ; mov [rdi - 8], rcx; ret
0x000eeaf6 : add [rbp + 0x42], dh; add rsp, 0x58; ret
0x00136393 : xor [rcx - 0x77], cl; cmp r8b, r13b; ret
0x000c3061 : add [rax], al; add al, ch; push rdi; ret
0x0013690a : mov eax, [rdi + 0x38]; call [rax + 0x20]
0x00145475 : add [rbp + 0x3e], dh; add rsp, 0x78; ret
0x000f4bf2 : add [rax], al; mov [rdi + 0x16], ax; ret
0x0006305c : add [rcx + 0x5d5b7453], cl; pop r12; ret
0x000c98d3 : xchg eax, esp; idiv edi; jmp [rsi + 0xf]
0x0007337c : add [rax], al; add [rcx - 0x7d], cl; ret
0x0012b06a : mov eax, [rdi + 0x38]; call [rax + 0x18]
0x00030e19 : mov rdi, [rdi + 0x68]; xor eax, eax; ret
0x000ce9fe : add [rax], al; add [rbp + 0x63], cl; ret
0x00134577 : lea rsi, [rsp + 0x10]; call [rax + 0x10]
0x000f8333 : mov [rip + 0x2d4c43], 0; add rsp, 8; ret
0x001439a1 : add [rcx + 0x415d5bd8], cl; pop rsp; ret
0x00133416 : push rax; pop rbx; pop rbp; pop r12; ret
0x0009a78e : add ah, bh; add eax, [rax]; pop rbx; ret
0x0011a12c : add [rbp + 0x59], dh; add rsp, 0x38; ret
0x0001d030 : movss [rdi], xmm1; subss xmm0, xmm1; ret
0x0001bf78 : add ecx, [rdi + 0x20]; mov rax, rcx; ret
0x00133cf0 : mov rax, [rsp + 0x48]; call [rax + 0x28]
0x00110ad3 : add rsi, [rbp - 0x6b]; mov rax, rdi; ret
0x000e4a7d : dec [rsi - 0x73]; add al, 0x28; call r12
0x000e53be : push [rcx]; fild [rbx - 0x6af0fd08]; ret
0x0006f48a : add bl, al; nop [rax]; xor eax, eax; ret
0x00022ff1 : mov [rsi + 0x28], eax; xor eax, eax; ret
0x0003e424 : add [rax - 0x15343], al; jmp [rsi + 0xf]
0x0012b069 : mov rax, [rdi + 0x38]; call [rax + 0x18]
0x0001ccc3 : movsd [rdi], xmm1; subsd xmm0, xmm1; ret
0x000f668f : add [rbp + 0x3b], dh; add rsp, 0x68; ret
0x0001cd71 : mulps xmm1, xmm0; movapd xmm0, xmm1; ret
0x001725fe : add [rax], al; lea rax, [rdi + 0xd]; ret
0x001264c4 : add al, ch; mov esi, gs; jmp [rsi + 0xf]
0x00103220 : mov eax, [rax + 0x18]; add [rax], 1; ret
0x0003e536 : sbb al, [rax]; add [rax - 0x7d], cl; ret
0x001451ce : add [rbp + 0x6d], dh; add rsp, 0x58; ret
0x00138d3b : mov [rsp + 0x40], rdx; call [rax + 0x18]
0x0010bfd7 : mov rsi, [rbp - 0x98]; call [r10 + 0x28]
0x000b4bf0 : add [rbp + 0x22], dh; add rsp, 0x28; ret
0x00030e1a : mov edi, [rdi + 0x68]; xor eax, eax; ret
0x000f6426 : mov [rbx], 0; mov rax, rbx; pop rbx; ret
0x0005a1d9 : adc [rax], al; add [rbx + 0x5d], bl; ret
0x00175da0 : add [rax], al; add [rcx + 0x21], cl; ret
0x0010d46b : sbb [rcx], dh; ror [rax - 0x7d], cl; ret
0x00110ad4 : add esi, [rbp - 0x6b]; mov rax, rdi; ret
0x000f4620 : mov eax, [rdi + 8]; and eax, 0x100f; ret
0x000c54f3 : add [rbp - 0x53], dh; mov eax, 0x40; ret
0x001725ce : add [rax], al; lea rax, [rdi + 0xa]; ret
0x000c53ef : add [rbp - 0x20], dh; mov eax, 0xfa; ret
0x00103322 : sbb [rsi - 0x7d], ah; add [rcx], al; ret
0x0005ab1a : mov [rdx + 8], r9; add [rdx + 4], 1; ret
0x00135f1c : lea esi, [rbp + 0x18]; call [rax + 0x10]
0x00133cf1 : mov eax, [rsp + 0x48]; call [rax + 0x28]
0x00136909 : mov rax, [rdi + 0x38]; call [rax + 0x20]
0x00039807 : add [rax], al; add [rcx - 0x77], cl; ret
0x001005b9 : xor ebp, ebp; pop rax; pop rdi; call rax
0x000404f6 : div eax; add r9d, eax; mov eax, r9d; ret
0x00031149 : mov rsi, [rsi + 0x70]; xor eax, eax; ret
0x0005a320 : xor ebx, ebx; mov rax, rbx; pop rbx; ret
0x0007d959 : add al, 0; add [rdx + rbp - 9], dh; ret 0
0x00061bde : add [rax], eax; add [rax - 0x7f], cl; ret
0x000b07d2 : push rax; mov rax, [rsp + 0x18]; call rax
0x000ed93b : add [rax - 9], cl; fmul [rax + 0x21]; ret
0x0007cb45 : xor al, 0; mov [rip + 0x34fbca], rax; ret
0x001327ea : add [rax], al; nop [rax]; mov eax, 2; ret
0x0010edd2 : xor eax, eax; test edx, edx; sete al; ret
0x00173884 : movzx edx, [rsi - 0xc]; sub eax, edx; ret
0x0009a291 : mov rcx, rdx; rep movsb [rdi], [rsi]; ret
0x0001ea60 : mov [rdi + rax*8], rdx; xor eax, eax; ret
0x000450c5 : mov edi, [rbp - 0x8d0]; call [r13 + 0x38]
0x0009214d : movlps [rdx + 8], xmm1; mov rax, rdi; ret
0x00088b78 : movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x000ee1a2 : mov [rdi + 0x108], eax; xor eax, eax; ret
0x0006148d : add [rax], al; mov eax, r8d; pop rbx; ret
0x0006eb3e : add [rax], al; mov rax, [rdi + 0x68]; ret
0x0014528f : mov rax, [rip + 0x289f42]; call [rax + 8]
0x0010ed46 : add [rax], al; mov rax, [rax + 0x30]; ret
0x0009c303 : add esp, 8; sub rcx, 4; mov rax, rcx; ret
0x00052223 : adc ecx, [rcx + 0x415d5b28]; pop rsp; ret
0x000f6fc2 : add [rax], eax; add [rax + 0x39], cl; ret
0x000680d0 : xor eax, eax; test [rdi], 4; sete al; ret
0x00062f8c : mov rax, [rax + 0x130]; call [rax + 0x68]
0x00080080 : mov edx, 0; cmovne rax, rdx; pop rbx; ret
0x000c5fcb : inc [rax]; add [rax], al; add dh, dh; ret
0x0014d498 : mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x0003aeb2 : mov rsi, [rbp - 0x528]; call [rax + 0x38]
0x0012216a : sbb esi, [rcx]; ror [rbp - 0x77], cl; ret
0x00138a4d : push rsp; and al, 0x38; call [rax + 0x18]
0x00000cb5 : add eax, [rax]; add [rax - 0x7d], cl; ret
0x0014b4fe : mov ecx, [rdi - 0x73]; or al, 0xb; jmp r9
0x0012c92c : add [rax], al; mov [rsi + 0x10], rax; ret
0x000c791f : mov esi, [rbp - 0x4f0]; call [rbx + 0x40]
0x00068f7f : mov [rdi + 8], edx; movzx eax, [rax]; ret
0x0013cc6e : add [rax], al; mov eax, [rdi + 0x28]; ret
0x0001dde6 : add [rbp + 0x4a], dh; add rsp, 0x148; ret
0x00062f8d : mov eax, [rax + 0x130]; call [rax + 0x68]
0x00166d72 : mov eax, [rcx + rax*4]; sub eax, edx; ret
0x001458b6 : mov edx, esi; add r9, [rsp + 8]; call rax
0x00092303 : movlps [rdx + 7], xmm1; mov rax, rdi; ret
0x000def01 : sub eax, [rcx - 1]; dec [rax - 0x77]; ret
0x000fb2c8 : add ebp, [rip + 0x5d5b5900]; pop r12; ret
0x0006e876 : push rax; sbb [rbx - 0x2fd6efb9], cl; ret
0x000388df : mov edi, [rbp - 0x8a8]; call [rax + 0x38]
0x00042fa2 : add [rax], al; mov eax, edx; pop rbx; ret
0x001423f0 : mov rdi, rdx; mov rsi, r8; call [rax + 8]
0x0009c302 : add rsp, 8; sub rcx, 4; mov rax, rcx; ret
0x00092302 : movlpd [rdx + 7], xmm1; mov rax, rdi; ret
0x0001e08e : add [rbp + 0x16], dh; add rsp, 0x118; ret
0x000af4cb : add [rax], al; lea rax, [rdi - 0x10]; ret
0x00002611 : sub dl, [r8 + r8]; mov rdi, rbx; call rbp
0x0006886a : add [rax], eax; add [rax - 0x77], cl; ret
0x000922e2 : movlpd [rdx + 6], xmm1; mov rax, rdi; ret
0x0010e4ac : push rbp; or [rax - 0x77], 0xda; call rax
0x000922c2 : movlpd [rdx + 5], xmm1; mov rax, rdi; ret
0x0009a292 : mov ecx, edx; rep movsb [rdi], [rsi]; ret
0x00088d51 : movzx edx, [rdx + rcx]; sub eax, edx; ret
0x00042bb8 : add [rax], eax; add [rax - 0x7d], cl; ret
0x000cec0e : sbb eax, eax; and eax, 2; add eax, 8; ret
0x0011fd5a : push rsp; add esi, edi; mov eax, r8d; ret
0x0003101c : dec [rax - 0x77]; fimul [rax - 0x7d]; ret
0x00045851 : mov edi, [rbp - 0x8d0]; call [rbx + 0x38]
0x00103321 : sbb [rsi - 0x7d], spl; add [rcx], al; ret
0x000922e3 : movlps [rdx + 6], xmm1; mov rax, rdi; ret
0x000e2d60 : mov rax, [rdi]; or [rax + 8], 0x2000; ret
0x0011ffb8 : add esi, eax; add al, [rax]; pop rbx; ret
0x0000f39e : movzx eax, [rax + rdi*2]; and eax, 1; ret
0x0005b1a5 : add [rax], al; mov eax, esi; pop rbx; ret
0x0005ab6b : mov [rdx + 8], ecx; mov [rdx + 4], 1; ret
0x00037fee : dec [rcx - 0x1b42763f]; idiv bh; call rax
0x00013ba0 : add [rax - 9], ecx; ror [rax + 1], 1; ret
0x0004812a : add [rax], al; add [rsi + 1], bh; jmp rax
0x00125434 : add cl, ch; cmp dh, 0xff; jmp [rsi + 0xf]
0x0008d5b6 : mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0013d611 : add [rax], eax; add [rax - 0x39], cl; ret
0x000630d9 : push rax; sbb [rcx + 0x5bc0310b], cl; ret
0x000393ff : add eax, [rax]; add [rcx - 0x77], al; ret
0x0004fe75 : sbb [rax], r8b; add [rax - 0x7d], cl; ret
0x0003b927 : mov rdx, [rbp - 0x510]; call [r15 + 0x38]
0x000f8027 : add [rax], 0; mov eax, 1; add rsp, 8; ret
0x00132855 : xchg eax, edi; int 0xfb; jmp [rsi - 0x7d]
0x0010fcaf : sub bl, al; nop [rax]; mov eax, 0x16; ret
0x000450c4 : mov rdi, [rbp - 0x8d0]; call [r13 + 0x38]
0x0001ea61 : mov [rdi + rax*8], edx; xor eax, eax; ret
0x001458b5 : mov rdx, r14; add r9, [rsp + 8]; call rax
0x00142c24 : add al, ch; or eax, r15d; jmp [rsi + 0xf]
0x000388de : mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x000ee0dc : add [rdi], cl; adc [rsi + 0x70], eax; ret
0x00095633 : push rsi; add ecx, [rcx + 0x357890f]; ret
0x0001e111 : add [rbp + 0x13], dh; add rsp, 0x118; ret
0x0005ab1b : mov [rdx + 8], ecx; add [rdx + 4], 1; ret
0x000601d4 : push rbp; mov rdi, rbx; call [rbp + 0x68]
0x00173894 : movzx edx, [rsi - 0xb]; sub eax, edx; ret
0x00173854 : movzx edx, [rsi - 0xf]; sub eax, edx; ret
0x0003b928 : mov edx, [rbp - 0x510]; call [r15 + 0x38]
0x001423f1 : mov edi, edx; mov rsi, r8; call [rax + 8]
0x000e2d61 : mov eax, [rdi]; or [rax + 8], 0x2000; ret
0x0010ee17 : xor eax, eax; cmp rdx, rdi; setae al; ret
0x00112068 : add ch, cl; fsubp st(6); jmp [rsi - 0x70]
0x00057613 : inc [rdx]; add [rax], al; add cl, ch; ret
0x0011ee00 : mov edi, [rdi]; mov eax, 3; syscall ; ret
0x0006be9f : mov dh, 0; pop r12; pop r13; pop r14; ret
0x00038d1d : mov edi, [rbp - 0x8a8]; call [rbx + 0x38]
0x0014d2b0 : mov dx, [rsi - 2]; mov [rdi - 2], dx; ret
0x0003192a : sbb eax, eax; and eax, 2; sub eax, 1; ret
0x0001d5a7 : movdqa xmm0, xmm[rsp]; add rsp, 0x28; ret
0x0016eb63 : mov rax, r8; shr rax, 2; vzeroupper ; ret
0x00044fe9 : sbb [rax], eax; add [rax - 0x7d], cl; ret
0x000c791e : mov rsi, [rbp - 0x4f0]; call [rbx + 0x40]
0x00173864 : movzx edx, [rsi - 0xe]; sub eax, edx; ret
0x00138d3d : push rsp; and al, 0x40; call [rax + 0x18]
0x00021bb3 : add [rax], al; xor eax, eax; pop rbx; ret
0x00072ee0 : sbb [rax - 0x77], cl; and al, 8; call rcx
0x000c7dee : mov rdi, [rbp - 0x4c8]; call [rbx + 0x40]
0x000fe7ce : add [rax], al; mov rax, [rax + 0x58]; ret
0x0016549d : mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00081eac : add [rax], eax; add [rax + 0x63], cl; ret
0x000435f7 : add [rip - 0x11d17], ch; jmp [rsi - 0x70]
0x0012c56f : adc [rax - 0x75], cl; and al, 8; call rcx
0x0005ab6a : mov [rdx + 8], rcx; mov [rdx + 4], 1; ret
0x00135568 : add [rdi], cl; adc [rdi + 0x20], eax; ret
0x0012d31e : xchg eax, ebx; xor eax, eax; pop rbx; ret
0x00169709 : add [rax + 1], cl; clc ; vzeroupper ; ret
0x000c993e : add [rax], esi; add [rcx - 0x7d], cl; ret
0x001738a4 : movzx edx, [rsi - 0xa]; sub eax, edx; ret
0x00131cd8 : add [rax], al; movups xmm[rdx], xmm0; ret
0x000c7def : mov edi, [rbp - 0x4c8]; call [rbx + 0x40]
0x00088be3 : movzx edx, [rsi + rdx]; sub eax, edx; ret
0x000680e0 : xor eax, eax; test [rdi], 8; sete al; ret
0x00068f7e : mov [rdi + 8], rdx; movzx eax, [rax]; ret
0x00131ca7 : mov ah, 0; add [rax], al; mov eax, 1; ret
0x001454e9 : pushfq ; sub [rax], al; call [rax + 0x10]
0x000ed514 : xor [rdi], cl; adc [rdi + 0x40], eax; ret
0x000d331e : add [rax], eax; add [rcx - 0x7d], al; ret
0x00022abc : add [rax], al; mov rax, rbx; pop rbx; ret
0x00038d1c : mov rdi, [rbp - 0x8a8]; call [rbx + 0x38]
0x0014d0d0 : mov dl, [rsi - 1]; mov [rdi - 1], dl; ret
0x0011ef2a : mov [rdi + 0xc], edx; mov [rsi], rdi; ret
0x0003751e : dec [rax + 0x48e57506]; mov eax, esi; ret
0x0005e4d3 : add [rax], al; mov rax, rdx; pop rbx; ret
0x001635af : movzx edx, [rsi + rcx]; sub eax, edx; ret
0x0009214c : movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x00048123 : mov [rbp - 0x4c0], 1; mov esi, 1; jmp rax
0x0012cc8c : add cl, ch; sar ch, 0xff; jmp [rsi + 0xf]
0x00145290 : mov eax, [rip + 0x289f42]; call [rax + 8]
0x00044f70 : add [rbx - 0x8bf43], al; call [rbx + 0xf]
0x00020beb : add [rax - 0x75], cl; and al, 8; call rax
0x00135530 : add [rdi], cl; adc [rdi + 0x30], eax; ret
0x000922c3 : movlps [rdx + 5], xmm1; mov rax, rdi; ret
0x00173874 : movzx edx, [rsi - 0xd]; sub eax, edx; ret
0x00086f19 : add [rbx + 0x48], bl; mov [rdi], edx; ret
0x0009668e : add [rax], al; movdqu xmm[rdi], xmm0; ret
0x00045850 : mov rdi, [rbp - 0x8d0]; call [rbx + 0x38]
0x0003aeb3 : mov esi, [rbp - 0x528]; call [rax + 0x38]
0x0007ad8f : add [rax], al; mov eax, ebx; pop rbx; ret
0x0006e881 : push rax; adc [rbx - 0x2fd6efb9], cl; ret
0x0009bc7a : add al, 0; add [rax], al; add bl, dh; ret
0x0007d9ad : add [rbx + 0xb491], cl; add bh, dh; ret 0
0x00066601 : add [rcx + rcx*4 - 0x30], al; pop rbx; ret
0x0005a39e : adc [rax], dl; add [rax], al; pop rbx; ret
0x000f6d2e : mov [rip + 0x2d48db], rax; add rsp, 8; ret
0x00048c63 : mov r8, rcx; mov [rbp - 0x514], 1; jmp rax
0x00061699 : mov [rdx + 0x28], rsi; mov [rcx], dil; ret
0x000b4c84 : add cl, ch; mov sil, 0xff; jmp [rsi + 0xf]
0x000c53fd : add [rax], al; add [rax + 0x7d00], bh; ret
0x00142ace : sub [rax], al; mov eax, 1; add rsp, 8; ret
0x00144a5e : add [rax - 0x246417], dl; jmp [rsi + 0x2e]
0x000e2680 : xor r9b, bpl; sar esi, -1; jmp [rsi + 0xf]
0x0009bdc5 : neg eax; cmp ecx, r8d; cmovg eax, edx; ret
0x00061523 : mov [rdx + 0x20], rsi; mov [rcx], eax; ret
0x000b010c : lea rax, [rip + 0x31c73d]; add rsp, 8; ret
0x00144a7e : add [rax - 0x11d417], dl; jmp [rsi + 0x2e]
0x000abdae : add al, ch; xor r14, rsi; jmp [rsi + 0x2e]
0x00102ec7 : add [rax], al; add [rax], al; pop rbp; ret
0x00020c79 : mov edi, ebp; mov rax, [rsp + 8]; call rax
0x000630db : mov [rbx], ecx; xor eax, eax; pop rbx; ret
0x00096d35 : movq [rdi], mm0; lea rax, [rdi + 0xf]; ret
0x0004aebf : dec [rcx - 0x61f4b]; dec [rax + 0x39]; ret
0x00173844 : movzx edx, [rsi - 0x10]; sub eax, edx; ret
0x000ee2d3 : lea eax, [rip - 0xb9]; cmove rax, rdx; ret
0x0012d224 : pop rbx; mov eax, 1; pop rbp; pop r12; ret
0x000ed700 : mov eax, 9; pop rbx; pop rbp; pop r12; ret
0x0006169a : mov [rdx + 0x28], esi; mov [rcx], dil; ret
0x001600b8 : mov [rdx + 4], ax; lea rax, [rdx + 5]; ret
0x0006fd23 : sbb [rax - 0x7b], cl; ror [rdi], 0x84; ret
0x0016e83f : sub rax, rdx; shr rax, 2; vzeroupper ; ret
0x000fab06 : lea rax, [rip + 0x2d2553]; add rsp, 8; ret
0x00131cbc : mov eax, 1; movups xmm[rdi + 8], xmm0; ret
0x0001c8e8 : adc bl, bl; insb [rdi], dx; and al, 8; ret
0x00047044 : inc [rdx]; mov rdx, r14; call [rax + 0x38]
0x0009a7be : add [rax], al; movzx eax, cl; pop rbx; ret
0x000e79ab : pop rbx; mov eax, 5; pop rbp; pop r12; ret
0x0014d2b1 : mov edx, [rsi - 2]; mov [rdi - 2], dx; ret
0x0001f67e : add r15, [rsp + 8]; mov rsi, r15; call r14
0x00095708 : movq [rdi], mm0; mov [rdi + 0xf], ecx; ret
0x001355dd : bswap eax; mov [rdx], eax; mov eax, 1; ret
0x00066ddc : mov [rdx], eax; xor eax, eax; pop rbx; ret
0x000a575d : dec [rax - 0x7b]; ror [rdi], 0x84; ret 0xb
0x0011fd58 : mov [rcx + rax - 2], dx; mov eax, r8d; ret
0x0007009d : pop rdx; mov rdi, rbp; neg rdi; call [r13]
0x000b010d : lea eax, [rip + 0x31c73d]; add rsp, 8; ret
0x00066069 : mov [rcx], rax; xor eax, eax; pop rbx; ret
0x0008a724 : add [rax + 1], cl; clc ; add rax, rcx; ret
0x00144a8e : add [rax - 0x10c417], dl; jmp [rsi + 0x2e]
0x00047b3c : mov r8, rdx; mov [rbp - 0x4f8], 1; jmp rax
0x00018e44 : add al, 0; add [rbx - 0x7bf0fc08], al; ret
0x0004226f : add [rip - 0x119c17], ch; jmp [rsi + 0x2e]
0x000af91f : add [rax], al; add bl, al; mov eax, 2; ret
0x00144a2e : add [rax - 0x292417], dl; jmp [rsi + 0x2e]
0x0015a893 : adc [rax - 0x7b], cl; ror [rdi], 0x85; ret
0x000fab07 : lea eax, [rip + 0x2d2553]; add rsp, 8; ret
0x000929b3 : add [rax - 0x7b], cl; ror [rdi], 0x85; ret
0x00132ac3 : add esp, 8; movzx eax, al; add eax, 1; ret
0x000956e9 : movq [rdi], mm0; mov [rdi + 0x10], cx; ret
0x0012b529 : mov [rip + 0x2a375d], eax; add rsp, 8; ret
0x000e072f : mov [rsi + 0x10], 0; mov [rsi + 8], 0; ret
0x00048c77 : mov r8, rcx; mov [rbp - 0x500], 1; jmp rax
0x0009a83c : adc [rax], al; add [rax], al; pop rbx; ret
0x00069607 : xor [rcx], al; add [rax], al; pop rbx; ret
0x0011c11e : mov [rip + 0x2af5ab], rax; add rsp, 8; ret
0x00137f36 : push rbp; lea r9, [rsp + 0x3a]; call [rax]
0x001421a6 : mov [rip + 0x2890d4], edx; add rsp, 8; ret
0x0001f67f : add edi, [rsp + 8]; mov rsi, r15; call r14
0x0006487d : mov [rsp + 8], rcx; mov rdi, r15; call rax
0x000f680e : lea rax, [rip + 0x2d6613]; add rsp, 8; ret
0x00082b97 : dec [rbp + 0x19]; fisttp [rcx - 0x7d]; ret
0x00144a3e : add [rax - 0x256417], dl; jmp [rsi + 0x2e]
0x00061524 : mov [rdx + 0x20], esi; mov [rcx], eax; ret
0x0000de7c : mov eax, [rax]; mov eax, [rax + 0xa8]; ret
0x00018241 : add al, 0; add [rbx - 0x7bf0fc06], al; ret
0x00144a4e : add [rax - 0x24d417], dl; jmp [rsi + 0x2e]
0x00095769 : movq [rdi], mm0; mov [rdi + 0xf], rcx; ret
0x0007c351 : add [rcx], dh; ror [rax - 0x77], 0x37; ret
0x00066ddb : mov [rdx], rax; xor eax, eax; pop rbx; ret
0x00020c78 : mov rdi, r13; mov rax, [rsp + 8]; call rax
0x0006487e : mov [rsp + 8], ecx; mov rdi, r15; call rax
0x0008ae6b : push rsp; lea rax, [rdi + rax + 0x10]; ret
0x00048c95 : mov r8, rcx; mov [rbp - 0x4e8], 1; jmp rax
0x00113acd : movzx eax, dh; or eax, edi; bswap eax; ret
0x00048c54 : mov r8, rcx; mov [rbp - 0x508], 1; jmp rax
0x0003021f : add [rax - 0x7d], cl; rol [rcx], 0x5b; ret
0x00000bf4 : xor rax, fs:[0x30]; add rsp, 0x28; jmp rax
0x0006667f : movsd [rdi], [rsi]; stc ; jmp [rsi + 0x2e]
0x000105c6 : xor rax, fs:[0x30]; mov rdi, r12; call rax
0x00043ae0 : add [rbx + 0x28907c8], al; mov eax, 1; ret
0x0003211f : add [rbp + 0xf], cl; lodsd eax, [rsi]; ret
0x00095749 : movq [rdi], mm0; mov [rdi + 0xe], rcx; ret
0x000ee2ff : add cl, ch; sbb al, 0xf1; jmp [rsi + 0x2e]
0x00144a6e : add [rax - 0x263417], dl; jmp [rsi + 0x2e]
0x000225d6 : add [rax], al; mov fs:[rbp], rdx; call rax
0x000c543d : add [rax], al; add [rax + 0xfc17], bh; ret
0x00097a29 : mov [rdi + 2], dl; lea rax, [rdi + 3]; ret
0x0014cf4b : mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x0011c11f : mov [rip + 0x2af5ab], eax; add rsp, 8; ret
0x0007cb2e : mov [rip + 0x34fbe4], eax; add rsp, 8; ret
0x001421a5 : mov [rip + 0x2890d4], rdx; add rsp, 8; ret
0x000654db : pop rax; mov [rsi], rax; call [rbp + 0x30]
0x0005f236 : xor rax, fs:[0x30]; mov rdi, rbp; call rax
0x000859a1 : dec [rdi]; test [rbx - 0x8fffff3], dl; ret
0x000877e4 : mov cl, [rdi - 0x73]; adc al, 0xa; jmp r10
0x0006606a : mov [rcx], eax; xor eax, eax; pop rbx; ret
0x001600a7 : mov [rdx + 4], al; lea rax, [rdx + 4]; ret
0x00068f2f : add [rbx + 0x5e8c107], cl; and eax, 1; ret
0x00066600 : add [rax], al; mov eax, r10d; pop rbx; ret
0x000f8028 : add [rax], al; mov eax, 1; add rsp, 8; ret
0x000ee2d2 : lea rax, [rip - 0xb9]; cmove rax, rdx; ret
0x000f6d2f : mov [rip + 0x2d48db], eax; add rsp, 8; ret
0x000cc92f : add dh, al; or [r9], r11b; mov eax, 1; ret
0x0009a843 : xor [rax], al; add [rax], al; pop rbx; ret
0x00048c86 : mov r8, rcx; mov [rbp - 0x4c0], 1; jmp rax
0x000956d5 : movq [rdi], mm0; mov [rdi + 0x10], dh; ret
0x0014d047 : mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x00086f17 : mov [rcx], 0; pop rbx; mov [rdi], rdx; ret
0x0010ed45 : add [rax], r8b; mov rax, [rax + 0x30]; ret
0x0009babd : xor [rbx], bh; xor [rbp + 0x3d], r14b; ret
0x0014d048 : mov [rdi - 9], ecx; mov [rdi - 1], dl; ret
0x00160079 : mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x00096c28 : mov [rdi + 4], dx; lea rax, [rdi + 5]; ret
0x00128afd : mov rdi, rbx; mov [rsp + 8], rcx; call r12
0x000dda54 : push rsp; add [rbp - 0x7cb7febd], ecx; ret
0x00008154 : inc [rbp + 0x31]; fisttp [rcx - 0x7d]; ret
0x000963a8 : movq [rdi], mm0; mov [rdi + 0x10], cl; ret
0x00132ac2 : add rsp, 8; movzx eax, al; add eax, 1; ret
0x00113adb : movzx eax, si; or eax, edi; bswap eax; ret
0x0009ba97 : sub [rbx], bh; sub [rbp + 0x63], r14b; ret
0x00097a57 : mov [rdi + 4], dl; lea rax, [rdi + 5]; ret
0x0014604a : adc [rcx], al; add [rax], al; pop rbx; ret
0x0010fd86 : pop rbx; mov eax, 5; pop r12; pop rbp; ret
0x00102e9d : add al, [rax]; add [rax], al; pop rbp; ret
0x00096285 : add [rsi + 0x2e], ah; nop [rax + rax]; ret
0x000ed74d : add [rax], r8b; xor eax, eax; pop rbx; ret
0x00031427 : mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x0016e840 : sub eax, edx; shr rax, 2; vzeroupper ; ret
0x0007cb2d : mov [rip + 0x34fbe4], rax; add rsp, 8; ret
0x00122a51 : neg eax; add rsp, 8; pop rbx; pop rbp; ret
0x00128afe : mov edi, ebx; mov [rsp + 8], rcx; call r12
0x00023331 : lea eax, [rip + 0x3ac03f]; add rsp, 8; ret
0x0006148e : add [rcx + rcx*4 - 0x40], al; pop rbx; ret
0x000ed513 : xor [r15], r9b; adc [rdi + 0x40], eax; ret
0x0014d499 : mov [rdi - 3], edx; mov [rdi - 2], cx; ret
0x0016eb64 : mov eax, eax; shr rax, 2; vzeroupper ; ret
0x00096bf6 : mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x000c542f : add [rbp - 0x60], dh; mov eax, 0xfffa; ret
0x00097aa9 : mov [rdi + 8], dl; lea rax, [rdi + 9]; ret
0x00096c7a : mov [rdi + 8], dx; lea rax, [rdi + 9]; ret
0x0009929d : dec [rbp + rcx*4 + 0x1d]; call [rdx + 0xf]
0x00023330 : lea rax, [rip + 0x3ac03f]; add rsp, 8; ret
0x00086f20 : xor edx, edx; mov [rdi], rdx; pop rbx; ret
0x00097a68 : mov [rdi + 4], dx; lea rax, [rdi + 6]; ret
0x00064ce4 : add cl, [rax + 0xf]; scasd eax, [rdi]; ret
0x00137f35 : push r13; lea r9, [rsp + 0x3a]; call [rax]
0x0000b875 : add [rax], al; add [rax], al; pop rbx; ret
0x000f6427 : add eax, [rax]; mov rax, rbx; pop rbx; ret
0x00169a54 : mov cl, [rsi + rdx - 1]; sub eax, ecx; ret
0x000f680f : lea eax, [rip + 0x2d6613]; add rsp, 8; ret
0x00003b9e : sbb ecx, [rcx + 0x50895048]; push rsp; ret
0x00046c47 : inc [rdx]; mov rdx, r15; call [rax + 0x38]
0x0000de7b : mov rax, [rax]; mov eax, [rax + 0xa8]; ret
0x00002612 : sub dl, [rax + rax]; mov rdi, rbx; call rbp
0x0016986e : add eax, edi; add rax, r8; vzeroupper ; ret
0x0014dc76 : mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x00097b85 : movq [rdi], mm0; lea rax, [rdi + 0x10]; ret
0x001427a0 : mov rsi, r9; mov rdi, r8; call [rax + 0x18]
0x0014d876 : mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x000764a0 : pop rbp; pop r12; pop r13; pop r14; jmp rax
0x000af82a : add rax, rdx; sub rax, rdi; shr rax, 2; ret
0x0003aacc : mov r11, rdx; mov [rbp - 0x500], 1; jmp rax
0x0010f544 : add [rax], eax; add [rax], al; pop rbx; ret
0x0016986d : add rax, rdi; add rax, r8; vzeroupper ; ret
0x0016fff7 : add al, 3; add [rax], al; xor eax, eax; ret
0x0011f1f4 : add [rax + 0x63], cl; fisttp [rax + 1]; ret
0x0003c0d9 : mov ebx, edx; mov [rbp - 0x510], 1; jmp rax
0x0009a779 : add [rax], al; cmove rax, rdx; pop rbx; ret
0x00078b4b : pop rbp; pop r12; pop r13; pop r14; jmp rcx
0x000e1253 : dec [rcx + rcx*4 - 0x11]; call [r14 + 0x40]
0x00097a69 : mov [rdi + 4], edx; lea rax, [rdi + 6]; ret
0x000801e4 : add [rbp - 0xf], esi; pop rbx; pop rbp; ret
0x00113acc : movzx eax, sil; or eax, edi; bswap eax; ret
0x000448cb : sub rdx, rsi; sar rdx, 2; call [rbx + 0x38]
0x00095789 : movq [rdi], mm0; mov [rdi + 0x10], rcx; ret
0x00096c47 : mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x0003c08a : mov r11, rdx; mov [rbp - 0x4f8], 1; jmp rax
0x001426e0 : mov rsi, r9; mov rdi, r8; call [rax + 0x10]
0x00160109 : mov [rdx + 6], eax; lea rax, [rdx + 9]; ret
0x00068f30 : mov eax, [rdi]; shr eax, 5; and eax, 1; ret
0x0009a7b1 : add [rax], al; cmove rax, rcx; pop rbx; ret
0x000af82b : add eax, edx; sub rax, rdi; shr rax, 2; ret
0x0003aacd : mov ebx, edx; mov [rbp - 0x500], 1; jmp rax
0x0016fc46 : mov ch, 6; add [rax], al; xor eax, eax; ret
0x0011865a : add [rbp + 0x41], bl; pop rsp; pop r13; ret
0x0014cf4c : mov [rdi - 9], eax; mov [rdi - 4], edx; ret
0x0001f0ba : add [rbx + 0x5d], bl; pop r12; pop r13; ret
0x0014cf01 : mov edx, [rsi - 8]; mov [rdi - 8], rdx; ret
0x000f6457 : add [rax], al; cmove rax, rbx; pop rbx; ret
0x0003eb7d : lea ebx, [rdi + rdi*8 - 1]; jmp [rsi + 0xf]
0x001787c9 : mov eax, 0; add [rax - 0x7ab80000], al; ret
0x0011fd59 : mov [rcx + rax - 2], edx; mov eax, r8d; ret
0x00077713 : pop r12; pop r13; pop r14; pop r15; jmp rax
0x00023124 : inc [rbx]; add [rax], al; xor eax, ecx; ret
0x001354cc : mov [rdi + 0x58], 2; add rdi, 0x58; jmp rcx
0x001385f2 : sub dl, [rsi]; sub [rax], eax; pop rbx; ret
0x0013282c : mov [rdi + 0x10], 2; add rdi, 0x10; jmp rcx
0x00020f3f : dec [rcx - 0x75]; add [r8 - 0x7d], r9b; ret
0x0009a6da : mov [rdi + rdx - 2], cx; mov [rdi], cx; ret
0x00045526 : dec [rcx + rcx*4 - 0x16]; call [rbx + 0x38]
0x0017186f : dec [rax + 0x6f]; pop rcx; jmp [rdx - 0x2f]
0x0011fe00 : lea eax, [rbx + rbp]; pop rbx; pop rbp; ret
0x000098c4 : dec [rax - 0x73]; add cl, [rax + 0x39]; ret
0x000fb2ca : add [rcx + 0x5b], bl; pop rbp; pop r12; ret
0x0005d99f : add [rcx], dh; test [rax - 0x77], 0xf0; ret
0x000fbfb8 : push [rbp + 0x35]; mov rdi, [rbp]; call r12
0x00096c29 : mov [rdi + 4], edx; lea rax, [rdi + 5]; ret
0x00075d8e : add [rax], al; mov [rip + 0x35689e], 0; ret
0x00048c87 : mov eax, ecx; mov [rbp - 0x4c0], 1; jmp rax
0x0003c08b : mov ebx, edx; mov [rbp - 0x4f8], 1; jmp rax
0x0006bea0 : add [rcx + 0x5c], al; pop r13; pop r14; ret
0x000fbf90 : push [rbp + 0x3d]; mov rdi, [rbp]; call r12
0x000476fc : dec [rcx + rcx*4 - 0x11]; call [r15 + 0x38]
0x0003c0c9 : mov r11, rdx; mov [rbp - 0x518], 1; jmp rax
0x0006eae6 : inc ebx; nop [rax + rax]; xor eax, eax; ret
0x00131ed2 : add [rax], al; bswap ebp; call [rax + 0x18]
0x00113a5e : add [rax], al; mov eax, edi; bswap eax; ret
0x0014d670 : mov edx, [rsi - 4]; mov [rdi - 4], edx; ret
0x000e540c : add [rcx], dh; fild [rbx - 0x6af0fd08]; ret
0x0012caef : mov esi, 8; mov rdi, rbp; call [rax + 0x30]
0x0014cf93 : mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00048c78 : mov eax, ecx; mov [rbp - 0x500], 1; jmp rax
0x0003c0fc : mov ebx, edx; mov [rbp - 0x520], 1; jmp rax
0x0014cf00 : mov rdx, [rsi - 8]; mov [rdi - 8], rdx; ret
0x00170327 : inc [rax]; add [rax], al; sub eax, ecx; ret
0x000b4c5c : xchg eax, esp; rol [rip + 0x16d], 0xf3; ret
0x001529b8 : mov [rdi - 9], edx; mov [rdi - 4], ecx; ret
0x000fcbc0 : push [rbp + 0x5e]; mov rdi, [r13]; call r12
0x000b2daa : add cl, ch; cmp bl, 0xff; call [rbp + 0x53]
0x001600d7 : mov [rdx + 3], eax; lea rax, [rdx + 6]; ret
0x00131bfc : mov [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx
0x00022e28 : xor eax, eax; mov [rsi], r10d; pop rbp; ret
0x00048c55 : mov eax, ecx; mov [rbp - 0x508], 1; jmp rax
0x00037e3e : adc ecx, [rcx + rax - 6]; call [rax + r9*8]
0x0006359b : dec [rdi]; xchg eax, ebp; sal bh, 0xd8; ret
0x00080645 : mov rax, rbx; pop rbx; cmovne rax, rdx; ret
0x00048c96 : mov eax, ecx; mov [rbp - 0x4e8], 1; jmp rax
0x001529b7 : mov [rdi - 9], rdx; mov [rdi - 4], ecx; ret
0x000fcbf0 : push [rbp + 0x5f]; mov rdi, [r13]; call r12
0x0010bf07 : dec [rax - 0x75]; cmp [rax - 0x77], cl; ret
0x00095718 : movq [rdi], mm0; mov [rdi + 0x10], ecx; ret
0x000c67b3 : dec [rcx + rcx*4 - 0x11]; call [r14 + 0x38]
0x00068f20 : mov eax, [rdi]; shr eax, 4; and eax, 1; ret
0x00173cbe : mov bl, 0; add [rax], al; xor eax, eax; ret
0x000448cc : sub edx, esi; sar rdx, 2; call [rbx + 0x38]
0x00134b9c : mov [rdi + 0x68], 2; add rdi, 0x68; jmp rcx
0x00097a87 : mov [rdi + 3], edx; lea rax, [rdi + 7]; ret
0x000482fc : dec [rcx + rcx*4 - 0x11]; call [rax + 0x38]
0x000de833 : pop rsp; add [rax], eax; add [rcx], bh; ret
0x00037b69 : sbb [rbx + 0x5d], bl; pop r12; pop r13; ret
0x0001d1ee : add [rax - 0x3f28f09a], dl; and eax, 8; ret
0x0003c0ca : mov ebx, edx; mov [rbp - 0x518], 1; jmp rax
0x00087340 : mov [rdi], 0; lea rax, [rdi + rax - 1]; ret
0x00080646 : mov eax, ebx; pop rbx; cmovne rax, rdx; ret
0x0005dcd2 : sub esp, 8; mov rdi, [rdi + 0xe0]; call rax
0x001600e9 : mov [rdx + 5], eax; lea rax, [rdx + 8]; ret
0x000ed841 : mov bh, 7; mov [rsi], ax; xor eax, eax; ret
0x000e4bf7 : call [rax + 0x49]; mov ecx, [rsi]; call r12
0x0003c0ed : mov ebx, edx; mov [rbp - 0x508], 1; jmp rax
0x0003c0fb : mov r11, rdx; mov [rbp - 0x520], 1; jmp rax
0x000564cf : inc [rbp + 0xfc389c0]; test [rsi], eax; ret
0x00046f1b : mov [rbp - 0x4c0], 1; xor esi, esi; jmp rax
0x00096c7b : mov [rdi + 8], edx; lea rax, [rdi + 9]; ret
0x00060372 : add [rax], al; nop [rax]; mov eax, edi; ret
0x00048c64 : mov eax, ecx; mov [rbp - 0x514], 1; jmp rax
0x000cb0b3 : inc [rbp + 0x31]; ror [rcx - 0x7d], cl; ret
0x00047b3d : mov eax, edx; mov [rbp - 0x4f8], 1; jmp rax
0x001600b9 : mov [rdx + 4], eax; lea rax, [rdx + 5]; ret
0x000956c1 : movq mm0, [rsi]; movdqu xmm[rdi], xmm0; ret
0x0006ec19 : add [rax], al; mov [rip + 0x35d9b2], 0; ret
0x0011f7b6 : add [rax + 0x102], bh; cmovne eax, edx; ret
0x0007fffe : adc [rbp - 0x7c], eax; ror [rdi], 0x95; ret
0x0009a2d4 : mov [rdi + rdx - 2], cx; mov [rdi], si; ret
0x0005e4ce : mov fs:[rax], 5; mov rax, rdx; pop rbx; ret
0x0005dcd1 : sub rsp, 8; mov rdi, [rdi + 0xe0]; call rax
0x0014cf94 : mov [rdi - 9], ecx; mov [rdi - 4], edx; ret
0x0014da76 : mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x0003c0ec : mov r11, rdx; mov [rbp - 0x508], 1; jmp rax
0x00000770 : sub [rbx + 0x5d], bl; pop r12; pop r13; ret
0x00077714 : pop rsp; pop r13; pop r14; pop r15; jmp rax
0x0003c0d8 : mov r11, rdx; mov [rbp - 0x510], 1; jmp rax
0x000f6beb : add [rax - 0x73], cl; add eax, 0x2d6235; ret
0x00070e3b : add [rax], 0; add [rax], al; add rsp, 8; ret
0x00020be9 : mov edi, [rbp]; mov rax, [rsp + 8]; call rax
0x000c0964 : add ecx, ebp; cmp esp, 0xff; jmp [rsi + 0xf]
0x00001933 : xor edx, edx; add eax, 1; push rax; call rbx
0x001427a1 : mov esi, ecx; mov rdi, r8; call [rax + 0x18]
0x0006f584 : mov [rdi + 0x10], eax; pop rbx; pop rbp; ret
0x00068828 : mov rax, r12; pop rbx; pop rbp; pop r12; ret
0x0009ca0b : xor edx, edx; lea r9, [rsp + 0x20]; call rbx
0x00132afd : mov [rbx], 0; pop rbx; pop rbp; pop r12; ret
0x00065c63 : lea r9, [rbp - 0x40]; mov rdi, r15; call r12
0x00094db0 : xor cl, cl; mov [rax], cl; mov rax, rdi; ret
0x0007d92e : lea rax, [rip + 0xcd6b]; cmove rax, rdx; ret
0x0000b9ca : mov eax, ebx; pop rbx; pop rbp; pop r12; ret
0x00018100 : add al, 0; add [rbx - 0x7bf0fe08], al; ret 4
0x0016cf78 : add eax, ecx; add rax, rdi; vzeroupper ; ret
0x0012d770 : mov rax, [rdi + 8]; mov rsi, rsp; call [rax]
0x00112c8e : add [rcx], sil; test [rax - 0x77], 0xf0; ret
0x00106cad : add [rax], al; mov eax, edx; add rsp, 8; ret
0x000009bf : add [rax - 0x73], cl; add eax, 0x191b34; ret
0x0006d729 : pop rbx; mov ecx, edx; xor edx, edx; jmp rax
0x000b013c : add [rax], al; xor eax, eax; add rsp, 8; ret
0x000afb76 : add bl, al; nop [rax + rax]; mov rax, 3; ret
0x0007d92f : lea eax, [rip + 0xcd6b]; cmove rax, rdx; ret
0x00075252 : add esi, ebx; stosq [rdi], rax; pop rbx; ret
0x00061b2c : mov eax, esp; pop rbp; pop r12; pop r13; ret
0x000f6a0b : add [rax - 0x73], cl; add eax, 0x2d6415; ret
0x0003200f : add [rbp + 0xf], cl; movsd [rdi], [rsi]; ret
0x000008bf : adc [rax - 0x75], cl; and al, 0x18; call rax
0x00087360 : mov [rdi], si; lea rax, [rdi + rax - 1]; ret
0x0000b9c9 : mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x001426e1 : mov esi, ecx; mov rdi, r8; call [rax + 0x10]
0x0013b8dd : mov [rsp], ebp; mov rsi, rsp; call [rax + 8]
0x0000b884 : sub eax, 1; mov [rbx + 8], eax; pop rbx; ret
0x0008740f : lea eax, [rip + 0x37bb]; cmove rax, rdx; ret
0x000ed86f : add [rbx + 0x6890447], cl; xor eax, eax; ret
0x000009cf : add [rax - 0x73], cl; add eax, 0x193971; ret
0x0009ba96 : sub [r11], r15b; sub [rbp + 0x63], r14b; ret
0x0009a0b3 : xor edx, edx; or cl, cl; cmove rax, rdx; ret
0x0009cf16 : lea r9, [rsp + 0x28]; mov rdi, rbp; call rbx
0x0009babc : xor [r11], r15b; xor [rbp + 0x3d], r14b; ret
0x0009548c : xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx
0x000018b6 : mov esi, [rsp + 0x18]; mov r9, r13; call rbx
0x000062cf : dec [rdi]; test [rsi - 0x8fffffc], cl; ret 0
0x00080083 : add [rax], al; cmovne rax, rdx; pop rbx; ret
0x0000aa10 : lea r8, [rsp + 0xb0]; xor r9d, r9d; call r15
0x00013fee : pop rbx; xor eax, eax; pop rbp; pop r12; ret
0x0009cc1b : lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x000fb388 : pop rax; mov rax, rbx; pop rdx; pop rbx; ret
0x0006f5bd : add [rax - 0x77], cl; add eax, 0x35a9f3; ret
0x00072d5e : mov [rsp + 8], rdx; mov rdi, r15; call [rax]
0x00139d44 : add [rcx + rcx*4 - 9], cl; call [rax + 0x28]
0x0007103e : pop rbx; mov rax, rdi; pop rbp; pop r12; ret
0x00066ae0 : movzx edx, [rax]; mov eax, edx; pop rbx; ret
0x0012c975 : mov [rsi], 9; movups xmm[rsi + 8], xmm0; ret
0x00046c48 : add cl, [rcx + rcx*4 - 6]; call [rax + 0x38]
0x000018b5 : mov rsi, [rsp + 0x18]; mov r9, r13; call rbx
0x00013fcf : mov [rcx], 0; pop rbx; pop rbp; pop r12; ret
0x001691d2 : add rax, rdi; add rax, rcx; vzeroupper ; ret
0x0016d3c4 : add rax, rdi; sub rax, rdx; vzeroupper ; ret
0x0007f50e : lea rax, [rip + 0xb4bb]; cmove rax, rdx; ret
0x00141d44 : mov rax, [rip + 0x289535]; call [rax + 0x28]
0x0007f50f : lea eax, [rip + 0xb4bb]; cmove rax, rdx; ret
0x000871db : movzx edx, [rsp - 6]; mov [rdi + 2], dl; ret
0x0016d30c : add rax, rcx; sub rax, rdx; vzeroupper ; ret
0x0012d858 : movaps xmm[rsp + 0x10], xmm0; call [rax + 8]
0x000479e2 : push 1; add [rax], al; add rax, rdi; jmp rax
0x00118658 : mov [rdx], 0; pop rbp; pop r12; pop r13; ret
0x0016960a : add [rax], 0; add [rax - 0x7f], cl; ret 0x80
0x00152d40 : movzx edx, [rsi - 2]; mov [rdi - 2], dx; ret
0x0006f59d : add [rax - 0x77], cl; add eax, 0x35aa0b; ret
0x0012c5f0 : add [rax - 0x75], cl; and al, 0x28; call rax
0x0007cb46 : add [rax - 0x77], cl; add eax, 0x34fbca; ret
0x000b976d : inc [rbp - 0x7b]; rol [rbp + 0xf], 0x44; ret
0x00064b46 : add [rcx + 0x2b], cl; and [r8 + 1], r9b; ret
0x0011ee03 : add eax, [rax]; add [rax], al; syscall ; ret
0x0000aaef : add [rax - 0x75], cl; add eax, 0x3c0c69; ret
0x000801f7 : add [rbp - 0x7a], esi; pop rbx; pop rbp; ret
0x00113a5d : add [rax], r8b; mov eax, edi; bswap eax; ret
0x0012cdcf : lea edx, [rip + 0x29cabb]; jmp [rdx + rax*8]
0x000d22a0 : add [rax - 0x77], cl; fmul [rax - 0x7d]; ret
0x0006eb1f : add [rax - 0x75], cl; add eax, 0x35c869; ret
0x001113a6 : pop rbx; mov eax, esi; pop rbp; pop r12; ret
0x00021e2a : lea r12, [rbx + rax*8 + 8]; nop ; call [rbx]
0x0001d031 : movups xmm[rdi], xmm1; subss xmm0, xmm1; ret
0x00068829 : mov eax, esp; pop rbx; pop rbp; pop r12; ret
0x0009c013 : mov [r12], 0; pop rbx; pop rbp; pop r12; ret
0x00065a6f : lea r9, [rsp + 0x10]; mov rdi, r12; call rbx
0x001454e6 : mov eax, [rip + 0x289cec]; call [rax + 0x10]
0x0012d771 : mov eax, [rdi + 8]; mov rsi, rsp; call [rax]
0x0006a5b6 : mov rax, rbp; pop rbx; pop rbp; pop r12; ret
0x00161c67 : add [rax - 0x7cb7fec8], al; fdivr st(7); ret
0x0006ccd9 : mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret
0x000cc8c7 : add dh, al; or [r10], r8b; xor eax, eax; ret
0x0009a6db : mov [rdi + rdx - 2], ecx; mov [rdi], cx; ret
0x0012c9c7 : mov [rsi + 8], 0; mov [rsi + 0x10], rax; ret
0x00072ad3 : mov [rsp + 8], ebx; mov rdi, r12; call [rax]
0x00070bf1 : mov [r8], rdx; mov rax, rdx; add rsp, 8; ret
0x001438f7 : mov eax, [rip + 0x287983]; call [rax + 0x28]
0x000f51c9 : mov [rbx], 1; pop rbx; pop rbp; pop r12; ret
0x0000cad8 : add [rcx - 0x78], eax; dec [rax - 0x7d]; ret
0x0007ac7d : mov cl, 0; add [rax], al; add rsp, 0x18; ret
0x000871b4 : sbb [rax + 1], cl; clc ; mov [rdi], rdx; ret
0x0016d3c5 : add eax, edi; sub rax, rdx; vzeroupper ; ret
0x00097aca : mov [rdi + 8], dx; lea rax, [rdi + 0xa]; ret
0x001511bb : mov dr1, [rdi + rdi*8 - 1]; jmp [rsi + 0x45]
0x0013d135 : mov [rdi + 0x20], 0; mov [rdi + 8], rax; ret
0x0009c014 : mov [rsp], 0; pop rbx; pop rbp; pop r12; ret
0x00086f18 : add [rax], eax; pop rbx; mov [rdi], rdx; ret
0x0009a2d5 : mov [rdi + rdx - 2], ecx; mov [rdi], si; ret
0x00142524 : mov eax, [rip + 0x288d56]; call [rax + 0x28]
0x00020be8 : mov rdi, [r13]; mov rax, [rsp + 8]; call rax
0x00046e0d : add [rax], al; mov [rbp - 0x4d0], 0; jmp rax
0x0012a704 : mov edi, eax; mov rcx, [rcx + 0x18]; jmp rcx
0x0007f8ba : mov [rbp], 0; pop rbx; pop rbp; pop r12; ret
0x0003bd11 : mov rsi, r8; mov rdi, r14; call [r15 + 0x38]
0x00141d45 : mov eax, [rip + 0x289535]; call [rax + 0x28]
0x0012c93d : mov [rsi], 6; movups xmm[rsi + 8], xmm0; ret
0x0001ccc4 : movups xmm[rdi], xmm1; subsd xmm0, xmm1; ret
0x00151dbb : mov dr0, [rdi + rdi*8 - 1]; jmp [rsi + 0x45]
0x000ef134 : dec [rdi]; xchg [rip - 0x76ffffff], ecx; ret
0x0005d02e : mov eax, ebp; pop rbx; pop rbp; pop r12; ret
0x0016d5fe : add [rax], al; mov rax, r8; vzeroupper ; ret
0x000025cf : add [rax - 0x75], cl; add eax, 0x3ccc31; ret
0x00134d0c : add [rax], al; add bl, al; xor eax, eax; ret
0x0014633e : mov [rip + 0x28631b], rsi; xor eax, eax; ret
0x0003b1ee : add [rax], al; mov [rbp - 0x528], 1; jmp rax
0x0014b5d2 : xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx
0x0012ae79 : xor ecx, [rbx + 0x1f0ffffe]; add bl, dh; ret
0x0013b8dc : mov [rsp], rbp; mov rsi, rsp; call [rax + 8]
0x00152dc0 : movzx edx, [rsi - 1]; mov [rdi - 1], dl; ret
0x0000f585 : movsxd rdi, edi; mov eax, [rax + rdi*4]; ret
0x00021e2b : lea esp, [rbx + rax*8 + 8]; nop ; call [rbx]
0x0016cf77 : add rax, rcx; add rax, rdi; vzeroupper ; ret
0x0006598a : lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x0016d30d : add eax, ecx; sub rax, rdx; vzeroupper ; ret
0x0002d08b : int1 ; fist [rsi]; add [rax - 0x7d], cl; ret
0x0012c927 : mov [rsi + 8], 1; mov [rsi + 0x10], rax; ret
0x00021f0e : xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x000ed897 : mov ch, 7; add [rax], al; add rsp, 0x18; ret
0x001424ca : add [rax], al; mov rax, rdx; add rsp, 8; ret
0x000afb86 : add bl, al; nop [rax + rax]; mov rax, 4; ret
0x0010fd76 : pop rbx; xor eax, eax; pop r12; pop rbp; ret
0x0000f3c4 : pop rax; mov eax, [rax + rdi*4 + 0x200]; ret
0x00171853 : xchg eax, ecx; sar ch, 0xff; jmp [rdx - 0xf]
0x00002501 : sub edx, [rax + rax]; mov rdi, rbx; call r13
0x00072e66 : mov [rsp + 8], rsi; xor edi, edi; call [rax]
0x001691d3 : add eax, edi; add rax, rcx; vzeroupper ; ret
0x000025bf : add [rax - 0x75], cl; add eax, 0x3ccc51; ret
0x00072ad2 : mov [rsp + 8], r11; mov rdi, r12; call [rax]
0x00138efa : add [rax], al; mov [rsp + 0xd0], 2; call rax
0x000aee45 : movzx eax, al; lea eax, [rax + rax - 1]; ret
0x00072e67 : mov [rsp + 8], esi; xor edi, edi; call [rax]
0x000600e0 : mov eax, edx; pop rbp; pop r12; pop r13; ret
0x00142523 : mov rax, [rip + 0x288d56]; call [rax + 0x28]
0x000af714 : add [rax], al; bsf rax, rdx; shr rax, 2; ret
0x000afba6 : add bl, al; nop [rax + rax]; mov rax, 6; ret
0x0007dff3 : mov rax, r11; pop rbx; pop rbp; pop r12; ret
0x0014633f : mov [rip + 0x28631b], esi; xor eax, eax; ret
0x001438f6 : mov rax, [rip + 0x287983]; call [rax + 0x28]
0x00064bdf : add [rcx + 0x2b], cl; adc [r8 + 1], r9b; ret
0x0012a703 : mov rdi, rax; mov rcx, [rcx + 0x18]; jmp rcx
0x00150a7b : movsxd r9, [r11 + r9*4]; add r9, r11; jmp r9
0x000afb96 : add bl, al; nop [rax + rax]; mov rax, 5; ret
0x001454e5 : mov rax, [rip + 0x289cec]; call [rax + 0x10]
0x0012cdce : lea rdx, [rip + 0x29cabb]; jmp [rdx + rax*8]
0x00141c20 : mov edx, 0; cmovne rax, rdx; add rsp, 8; ret
0x0006d6f0 : mov ecx, edx; pop rbx; xor edx, edx; jmp rax
0x00072ad4 : pop rsp; and al, 8; mov rdi, r12; call [rax]
0x000cc95d : add [rax + 0x1b807], ecx; add [rax], al; ret
0x0008740e : lea rax, [rip + 0x37bb]; cmove rax, rdx; ret
0x000afbb6 : add bl, al; nop [rax + rax]; mov rax, 7; ret
0x00002e43 : add ecx, [rax - 0x77]; or [r15], 0x8e; ret 1
0x0006bead : add [rax], al; add [rdi], cl; mov dh, 2; ret
0x000c55ae : movzx eax, al; lea rax, [rax + rax - 1]; ret
0x0001ee6b : mov [rip + 0x3ab06b], eax; mov eax, edx; ret
0x00030c65 : pop rbx; mov eax, edx; pop rbp; pop r12; ret
0x00072d5f : mov [rsp + 8], edx; mov rdi, r15; call [rax]
0x000afb66 : add bl, al; nop [rax + rax]; mov rax, 2; ret
0x00023667 : neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0002e7d5 : adc cl, [rcx + 0x1ee0c1c8]; or eax, edx; ret
0x000871e7 : add [rcx + rcx*4 + 7], al; add rax, rdi; ret
0x0005d966 : pop rbx; mov rax, rsi; pop rbp; pop r12; ret
0x0013584c : mov esi, [rsp + 0x10]; mov rdi, rbp; call rbx
0x0007bcb9 : mov edi, [rbx + 0x48]; mov rsi, r13; call rax
0x00097b09 : mov [rdi + 8], edx; lea rax, [rdi + 0xc]; ret
0x0005f025 : mov rsi, r14; mov rdi, rbp; call [rax + 0x38]
0x00097b4a : mov [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret
0x000afb7c : add [rax], al; add [rax], al; mov rax, 3; ret
0x00135544 : xor [rax + 1], bh; movups xmm[rdx], xmm0; ret
0x00135564 : mov eax, 1; movups xmm[rdi + 0x20], xmm0; ret
0x001528b7 : mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x00097b4b : mov [rdi + 6], edx; lea rax, [rdi + 0xe]; ret
0x0012d272 : xor esi, esi; mov rdi, rbx; call [rax + 0x28]
0x00070bf2 : mov [rax], edx; mov rax, rdx; add rsp, 8; ret
0x0005f2ad : add [rax], al; add [rax - 0x7f], cl; ret 0xe8
0x0006dcbc : pop rsp; or al, [rax]; nop ; mov rax, -1; ret
0x0012def8 : sub edx, ecx; mov rsi, r13; call [rbx + 0x40]
0x0007eb06 : xchg [rax + rdi*8], dl; dec [rax - 0x77]; ret
0x00139018 : mov rsi, r15; mov rdi, r14; call [rax + 0x18]
0x0000b6e9 : mov rdx, [rbp - 0x98]; mov rdi, r14; call rdx
0x0012bd96 : mov edi, ebx; xor eax, eax; call [rbp + 0x28]
0x00069246 : mov rdx, rbx; mov rdi, rcx; call [r13 + 0x38]
0x00040806 : mov edi, ebp; mov rcx, r14; call [rax + r8*8]
0x0014d6bc : mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0013584b : mov rsi, [rsp + 0x10]; mov rdi, rbp; call rbx
0x000cc861 : add al, ch; cdq ; sub ah, dh; jmp [rsi + 0xf]
0x001527a9 : mov [rdi - 0xd], edx; mov [rdi - 8], rcx; ret
0x00131cbf : add [rax], al; movups xmm[rdi + 8], xmm0; ret
0x0004792d : lea rdi, [rip + 0x21c]; add rax, rdi; jmp rax
0x0006f5bc : add [rax], al; mov [rip + 0x35a9f3], rax; ret
0x00060cc4 : mov rsi, rbp; mov rdi, rbx; call [r14 + 0x38]
0x00087390 : mov [rdi], ecx; lea rax, [rdi + rax - 1]; ret
0x0006a857 : mov esi, ebp; mov rdi, rbx; call [rax + 0x78]
0x000fb34e : lea rax, [rip + 0x2d1d5b]; add rsp, 0x18; ret
0x0014dabc : mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0005f026 : mov esi, esi; mov rdi, rbp; call [rax + 0x38]
0x0000aaee : add [rax], al; mov rax, [rip + 0x3c0c69]; ret
0x0012e739 : sub edx, ebx; mov rsi, r14; call [r13 + 0x40]
0x0012bde1 : mov esi, esi; mov rdi, rbx; call [rax + 0x28]
0x0016018b : mov [rdx + 6], eax; lea rax, [rdx + 0xd]; ret
0x000b06c3 : mov [rsp + 0xa8], ebp; mov rdi, r12; call rbx
0x0016018a : mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x0012afc7 : mov rsi, [rsp + 0x18]; mov rdi, rbp; call r14
0x00069247 : mov edx, ebx; mov rdi, rcx; call [r13 + 0x38]
0x000965dd : add [rax], al; add [rcx + 0x4578817], cl; ret
0x0012268a : add rdx, 1; mov [rdi], rdx; mov [rax], 0; ret
0x000d8ee3 : add [rsi], al; add [rax], al; add cl, ch; ret
0x0001f7ab : mov rsi, r14; mov rdi, [rsp + 0x18]; call rbp
0x00097acb : mov [rdi + 8], edx; lea rax, [rdi + 0xa]; ret
0x00152838 : mov [rdi - 0xc], edx; mov [rdi - 4], ecx; ret
0x0012c941 : add [rax], al; movups xmm[rsi + 8], xmm0; ret
0x0006976e : mov esi, ebp; mov rdi, rbx; call [r15 + 0x40]
0x00064e0e : add [rax], al; mov rax, [rax + 0x20]; jmp rax
0x0015dd2d : add [rax], al; add [rcx + 0x4518811], cl; ret
0x0016003a : mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x00111f1f : sbb [rax - 0x77], cl; fcomp [rbx + 0x5d]; ret
0x0013347c : mov rsi, r12; mov rdi, rbp; call [rax + 0x48]
0x00070e3c : add [rax], al; add [rax], al; add rsp, 8; ret
0x0006414f : mov rdi, rbx; sub rdx, rsi; call [r14 + 0x70]
0x001088d3 : add esp, 8; mov eax, 1; pop rbx; pop rbp; ret
0x000b0687 : add r14, rax; mov [rsp + 0xa8], r14; call rbx
0x0012268b : add edx, 1; mov [rdi], rdx; mov [rax], 0; ret
0x0012afc8 : mov esi, [rsp + 0x18]; mov rdi, rbp; call r14
0x0007c9ee : lea rax, [rip + 0x13afb]; cmove rax, rdx; ret
0x0006012b : mov rsi, rbp; mov rdi, rbx; call [r13 + 0x58]
0x0009a6ca : mov [rdi + rdx - 8], rcx; mov [rdi], rcx; ret
0x00048901 : mov rsi, r11; mov rdi, r13; call [r15 + 0x38]
0x0009ae3f : lea eax, [rip + 0x1438b]; cmove rax, rdx; ret
0x0000219a : mov rdi, r15; mov rsi, [rbp - 0x70]; call rsi
0x0013552c : mov eax, 1; movups xmm[rdi + 0x30], xmm0; ret
0x000b08d7 : lea rdi, [rsp + 0xb0]; mov rsi, rbp; call rbx
0x00097b6b : mov [rdi + 7], edx; lea rax, [rdi + 0xf]; ret
0x000e414b : pop rcx; add al, 0; add [rax - 0x77], cl; ret
0x00062a79 : mov esi, esi; mov rdi, r12; call [r15 + 0x18]
0x001122f4 : lea edx, [rip + 0x5fdf6]; cmove rax, rdx; ret
0x0009a2b7 : mov [rdi + rdx - 8], ecx; mov [rdi], rsi; ret
0x000afbac : add [rax], al; add [rax], al; mov rax, 6; ret
0x0002039f : mov esi, [rsp + 0x10]; mov rdi, r14; call rbp
0x00047991 : lea rdi, [rip + 0x1b8]; add rax, rdi; jmp rax
0x0006bc77 : mov rsi, r13; mov rdi, rbx; call [r14 + 0x78]
0x0005e5a7 : mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret
0x000afb3c : add [rax], al; add [rax], al; add rax, 3; ret
0x00065c64 : lea ecx, [rbp - 0x40]; mov rdi, r15; call r12
0x00096cfa : mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x0012bd64 : mov rdi, rbx; mov [rsp], 0; call [rax + 0x20]
0x0006f5fc : add [rax], al; mov [rip + 0x35a9d8], eax; ret
0x0012d3ff : mov edx, ebp; mov rdi, r13; call [rax + 0x20]
0x000e0750 : mov [rsi + 8], ecx; mov [rsi + 0x10], r8; ret
0x0006eb1e : add [rax], al; mov rax, [rip + 0x35c869]; ret
0x0009bbfe : lea rax, [rip + 0x13d2b]; cmove rax, rdx; ret
0x00131f1b : mov edi, ebx; mov rcx, [rsp + 0x28]; call rcx
0x0012da8b : sub edx, eax; mov rsi, r14; call [r15 + 0x40]
0x00033820 : sub eax, ecx; mov [rdx], eax; mov eax, 1; ret
0x00097b2a : mov [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret
0x00141384 : dec [rax - 0x7d]; clc ; dec [rax - 0x77]; ret
0x0006be6e : mov rdi, rbx; sub rdx, rsi; call [r13 + 0x70]
0x00064150 : mov edi, ebx; sub rdx, rsi; call [r14 + 0x70]
0x000009be : add [rax], al; lea rax, [rip + 0x191b34]; ret
0x0001ee2e : add [rax], al; mov eax, [rip + 0x3ab0a2]; ret
0x0001b6eb : inc [rbx - 0x2f7cfe08]; dec [rax - 0x7d]; ret
0x00160129 : mov [rdx + 7], eax; lea rax, [rdx + 0xa]; ret
0x000b06c2 : mov [rsp + 0xa8], r13; mov rdi, r12; call rbx
0x00169708 : add [rax], al; add rax, rdi; vzeroupper ; ret
0x0013210d : mov rdi, rbx; mov rdx, [rsp + 0x20]; call rdx
0x0009bf3e : lea rax, [rip + 0x1341b]; cmove rax, rdx; ret
0x001693ae : add [rax], al; vzeroupper ; xor eax, eax; ret
0x0011c0b3 : mov edi, ebp; mov rax, [rsp + 0x30]; call rax
0x0013210e : mov edi, ebx; mov rdx, [rsp + 0x20]; call rdx
0x00152938 : mov [rdi - 0xa], edx; mov [rdi - 4], ecx; ret
0x00043a10 : sub [rax + 0x468b4102], cl; add al, 0x39; ret
0x000fed25 : add rsp, 8; mov eax, 2; pop rbx; pop rbp; ret
0x000479df : lea rdi, [rip + 0x16a]; add rax, rdi; jmp rax
0x000478d0 : lea edi, [rip + 0x27a]; add rax, rdi; jmp rax
0x0014d2fc : mov [rdi - 0xb], ecx; mov [rdi - 4], edx; ret
0x0003b133 : mov r11, rdx; mov r9d, 1; mov r8d, 1; jmp rax
0x000bfcb2 : mov [rdx], eax; mov rax, rsi; add rsp, 8; ret
0x00047df3 : mov [rbp - 0x510], 1; xor r15d, r15d; jmp rax
0x001601ab : mov [rdx + 7], eax; lea rax, [rdx + 0xe]; ret
0x0014d2fb : mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0005b4ba : add cl, [rcx + 0x440f48c3]; rol [rax], 1; ret
0x0010d518 : mov rdi, [rdx + 0x50]; mov rsi, rdx; call rax
0x0009bbff : lea eax, [rip + 0x13d2b]; cmove rax, rdx; ret
0x0006976d : mov rsi, r13; mov rdi, rbx; call [r15 + 0x40]
0x000fcf8f : add [rdx], cl; pop rbx; pop rbp; pop r12; ret
0x000fed26 : add esp, 8; mov eax, 2; pop rbx; pop rbp; ret
0x000b0688 : add esi, eax; mov [rsp + 0xa8], r14; call rbx
0x0006e29b : xor esi, esi; mov rdi, rbx; call [rax + 0x58]
0x0003b134 : mov ebx, edx; mov r9d, 1; mov r8d, 1; jmp rax
0x0007c9ef : lea eax, [rip + 0x13afb]; cmove rax, rdx; ret
0x00033769 : add [rax], al; add [rax], al; mov eax, 1; ret
0x00152688 : mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x0002039e : mov rsi, [rsp + 0x10]; mov rdi, r14; call rbp
0x00139019 : mov esi, edi; mov rdi, r14; call [rax + 0x18]
0x0006598b : lea ecx, [rsp + 0x18]; mov rdi, r12; call rbx
0x000fe7dd : sub al, 0; mov fs:[rax], 2; xor eax, eax; ret
0x0014d8bc : mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x000339c3 : sub eax, edx; mov [rdx], eax; mov eax, 2; ret
0x0003b24a : lea rsi, [rip - 0x841]; add rax, rsi; jmp rax
0x00131d78 : mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x00033a32 : add [rax], al; add [rax], al; mov eax, 2; ret
0x0010d198 : add rsp, 8; mov eax, 7; pop rbx; pop rbp; ret
0x0006110c : mov esi, esi; mov rdi, rbp; call [r13 + 0x38]
0x0009c233 : lea rdx, [rip + 0xd5ec6]; cmove rax, rdx; ret
0x00059f75 : add al, 0; add [rbx + 0x5d], bl; pop r12; ret
0x0009a6d3 : mov [rdi + rdx - 4], ecx; mov [rdi], ecx; ret
0x00097b6a : mov [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret
0x00113e04 : pop rbp; sub eax, [rax]; add rax, fs:[0]; ret
0x00096cb9 : mov [rdi + 8], edx; lea rax, [rdi + 0xb]; ret
0x0006012c : mov esi, ebp; mov rdi, rbx; call [r13 + 0x58]
0x0005ff35 : mov esi, esp; mov rdi, rbx; call [r13 + 0x58]
0x0006a856 : mov rsi, r13; mov rdi, rbx; call [rax + 0x78]
0x0003a25b : sub ebp, ebx; mov rdx, r13; call [r15 + 0x38]
0x0012ce4a : mov esi, esp; mov rdi, rbp; call [rax + 0x30]
0x00096cda : mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x0003a6d2 : mov edi, esi; mov rdx, r15; call [rax + 0x38]
0x0012e031 : sub edx, edi; mov rsi, r13; call [rbx + 0x40]
0x0009a6cb : mov [rdi + rdx - 8], ecx; mov [rdi], rcx; ret
0x000ed938 : inc [rcx - 0x8b80000]; fmul [rax + 0x21]; ret
0x0007c9bf : lea eax, [rip + 0x1398b]; cmove rax, rdx; ret
0x00082b86 : add [rbp + 0x19], eax; fild [rcx - 0x7d]; ret
0x00096d1a : mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x0010ebe3 : mov [rbp - 0x80], edx; mov rdx, r12; call rax
0x0016343f : add [rbx + 0x48028901], cl; mov eax, edi; ret
0x0014d6bd : mov [rdi - 0xd], ecx; mov [rdi - 8], rdx; ret
0x0007cabf : lea eax, [rip + 0x1359b]; cmove rax, rdx; ret
0x00040805 : mov rdi, rbp; mov rcx, r14; call [rax + r8*8]
0x0006f59c : add [rax], al; mov [rip + 0x35aa0b], rax; ret
0x0007bcb8 : mov rdi, [rbx + 0x48]; mov rsi, r13; call rax
0x001370c5 : lea rsi, [rsp + 0x10]; mov edi, eax; call rbp
0x00097ae9 : mov [rdi + 7], edx; lea rax, [rdi + 0xb]; ret
0x000479e0 : lea edi, [rip + 0x16a]; add rax, rdi; jmp rax
0x0000219b : mov edi, edi; mov rsi, [rbp - 0x70]; call rsi
0x00097b2b : mov [rdi + 5], edx; lea rax, [rdi + 0xd]; ret
0x0014d8bd : mov [rdi - 0xe], ecx; mov [rdi - 8], rdx; ret
0x000794f4 : add [rbx + 0x19], dh; lea rax, [rdx - 8]; ret
0x0012e8e1 : sub edx, esi; mov rbp, rdx; call [rbx + 0x10]
0x0006ead4 : inc ebx; nop cs:[rax + rax]; mov rax, -1; ret
0x00063e03 : xor eax, eax; mov rdi, rbp; call [rbp + 0x20]
0x001601aa : mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x000c044b : add [rcx + rcx*4 + 0x32], ah; add rsp, 8; ret
0x0003a25a : sub r13, rbx; mov rdx, r13; call [r15 + 0x38]
0x0013e1ee : add [rbx - 0xb343], cl; dec [rax - 0x77]; ret
0x0004792e : lea edi, [rip + 0x21c]; add rax, rdi; jmp rax
0x00096d1b : mov [rdi + 7], edx; lea rax, [rdi + 0xe]; ret
0x00152719 : mov [rdi - 0xe], edx; mov [rdi - 8], rcx; ret
0x0005f7b6 : mov edx, ebx; mov rsi, r12; call [r13 + 0x38]
0x0010e507 : add [rcx - 0x876b], cl; dec [rax - 0x7d]; ret
0x0010e4ab : mov [rbp - 0x80], edx; mov rdx, rbx; call rax
0x0001ce91 : leave ; addsd xmm0, xmm0; mov [rdi], ecx; ret
0x0005ff5e : mov rsi, r12; mov rdi, rbx; call [rax + 0x58]
0x00087361 : mov [rdi], esi; lea rax, [rdi + rax - 1]; ret
0x000ee29a : mov eax, r12d; pop rbx; pop rbp; pop r12; ret
0x0005fad1 : mov esi, ebp; mov rdi, rbx; call [r14 + 0x48]
0x0006a090 : mov rsi, r14; mov rdi, rbx; call [rax + 0x40]
0x0011c0b2 : mov rdi, rbp; mov rax, [rsp + 0x30]; call rax
0x00047992 : lea edi, [rip + 0x1b8]; add rax, rdi; jmp rax
0x001370c6 : lea esi, [rsp + 0x10]; mov edi, eax; call rbp
0x0005fad0 : mov rsi, r13; mov rdi, rbx; call [r14 + 0x48]
0x0000063b : add [rax], al; add [rax], al; add bl, dh; ret
0x00044d79 : lea rdx, [rip - 0x2fe]; add rax, rdx; jmp rax
0x0009667e : add [rax], al; movdqu xmm[rdi - 1], xmm0; ret
0x0000aa11 : lea eax, [rsp + 0xb0]; xor r9d, r9d; call r15
0x0016d234 : lea rax, [rdi + rax - 0x20]; vzeroupper ; ret
0x0012d3c1 : mov edx, ebp; mov rdi, r13; call [rax + 0x10]
0x00096c99 : mov [rdi + 7], edx; lea rax, [rdi + 0xa]; ret
0x00131f1a : mov rdi, rbx; mov rcx, [rsp + 0x28]; call rcx
0x0003f700 : mov rsi, r14; mov rdi, [rbp - 0xc0]; call rax
0x0005dfd6 : mov esi, ebp; mov rdi, rbx; call [r13 + 0x38]
0x00060df1 : mov esi, esp; mov rdi, rbx; call [r14 + 0x38]
0x0014d4eb : mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00108634 : sbb [rax - 0x77], cl; fimul [rax - 0x7d]; ret
0x0005dfd5 : mov rsi, rbp; mov rdi, rbx; call [r13 + 0x38]
0x0016016b : mov [rdx + 5], eax; lea rax, [rdx + 0xc]; ret
0x0014dabd : mov [rdi - 0xf], ecx; mov [rdi - 8], rdx; ret
0x0005f7b5 : mov rdx, rbx; mov rsi, r12; call [r13 + 0x38]
0x000b08d8 : lea edi, [rsp + 0xb0]; mov rsi, rbp; call rbx
0x0003f701 : mov esi, esi; mov rdi, [rbp - 0xc0]; call rax
0x0009cc1c : lea ecx, [rsp + 0x30]; mov rdi, rbp; call rbx
0x000025ce : add [rax], al; mov rax, [rip + 0x3ccc31]; ret
0x00152837 : mov [rdi - 0xc], rdx; mov [rdi - 4], ecx; ret
0x0006110b : mov rsi, r14; mov rdi, rbp; call [r13 + 0x38]
0x0006c091 : movzx eax, ch; pop rbx; pop rbp; pop r12; ret
0x0006d1bd : add [rcx + rcx*4 - 1], ecx; call [rax + 0x18]
0x0005e69e : mov esi, esi; mov rdi, r12; call [r15 + 0x38]
0x0005ff34 : mov rsi, r12; mov rdi, rbx; call [r13 + 0x58]
0x0005fda3 : mov esi, ebp; mov rdi, rbx; call [r13 + 0x48]
0x000afbbc : add [rax], al; add [rax], al; mov rax, 7; ret
0x0006a399 : mov rsi, r12; mov rdi, rbx; call [rbp + 0x70]
0x0006bc78 : mov esi, ebp; mov rdi, rbx; call [r14 + 0x78]
0x001692fa : add [rax], al; xor eax, eax; vzeroupper ; ret
0x0014d4ec : mov [rdi - 0xc], ecx; mov [rdi - 4], edx; ret
0x0007ba69 : mov edi, [rdi + 0x48]; mov rsi, rbp; call rax
0x0012d3fe : mov rdx, rbp; mov rdi, r13; call [rax + 0x20]
0x0012bd95 : mov rdi, rbx; xor eax, eax; call [rbp + 0x28]
0x0011f78e : add al, 1; add [rax], al; cmove eax, edx; ret
0x00060df0 : mov rsi, r12; mov rdi, rbx; call [r14 + 0x38]
0x000fb34f : lea eax, [rip + 0x2d1d5b]; add rsp, 0x18; ret
0x000dfebd : add [rax], r8b; xor eax, eax; add rsp, 8; ret
0x000bf5ed : pop rdx; or [rax], al; mov rax, r14; call rax
0x0003b24b : lea esi, [rip - 0x841]; add rax, rsi; jmp rax
0x000680ef : add [rbx + 0x2002507], cl; add [rax], al; ret
0x00031010 : add [rcx - 0x77], cl; fimul [rax - 0x7d]; ret
0x0016003b : mov [rdx + 8], eax; lea rax, [rdx + 0xf]; ret
0x0006a39a : mov esi, esp; mov rdi, rbx; call [rbp + 0x70]
0x000e074f : mov [rsi + 8], rcx; mov [rsi + 0x10], r8; ret
0x00078ff1 : mov esi, [rsp + 0x28]; mov rdi, rbp; call rax
0x0009a2c5 : mov [rdi + rdx - 4], ecx; mov [rdi], esi; ret
0x000478cf : lea rdi, [rip + 0x27a]; add rax, rdi; jmp rax
0x00060cc5 : mov esi, ebp; mov rdi, rbx; call [r14 + 0x38]
0x0012da8a : sub edx, r8d; mov rsi, r14; call [r15 + 0x40]
0x00087356 : lea eax, [rdi + rax - 1]; mov [rdi], rdx; ret
0x00049f41 : mov [rax], ch; pop rbx; pop rbp; pop r12; ret
0x0013347d : mov esi, esp; mov rdi, rbp; call [rax + 0x48]
0x00152937 : mov [rdi - 0xa], rdx; mov [rdi - 4], ecx; ret
0x00152689 : mov [rdi - 0xf], edx; mov [rdi - 8], rcx; ret
0x001133a3 : xor esi, esi; mov rdi, rbx; call [rbp + 0x10]
0x0012bd65 : mov edi, ebx; mov [rsp], 0; call [rax + 0x20]
0x0010d519 : mov edi, [rdx + 0x50]; mov rsi, rdx; call rax
0x000482fb : mov esi, edi; mov rdi, r13; call [rax + 0x38]
0x0009ae3e : lea rax, [rip + 0x1438b]; cmove rax, rdx; ret
0x00071274 : xchg edi, esi; add al, [rax]; add dh, dh; ret
0x000b0c00 : add ebp, eax; mov [rsp + 0xa8], r13; call rbx
0x00152364 : add [rax], al; add [rax - 0x7f], cl; ret 0x80
0x000afb5c : add [rax], al; add [rax], al; mov rax, 1; ret
0x0015bd1f : add [rdx + 0x48028801], cl; mov eax, edi; ret
0x000afb9c : add [rax], al; add [rax], al; mov rax, 5; ret
0x0009961e : add [rax], al; xor ch, ch; mov [rdi], ch; ret
0x000482fa : mov rsi, r15; mov rdi, r13; call [rax + 0x38]
0x00047878 : lea edi, [rip + 0x2d2]; add rax, rdi; jmp rax
0x00078ff0 : mov rsi, [rsp + 0x28]; mov rdi, rbp; call rax
0x0007f53f : lea eax, [rip + 0x1090b]; cmove rax, rdx; ret
0x000680bf : add [rbx + 0x8042507], cl; add [rax], al; ret
0x00061b2b : mov eax, r12d; pop rbp; pop r12; pop r13; ret
0x00065a70 : lea ecx, [rsp + 0x10]; mov rdi, r12; call rbx
0x001088d2 : add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret
0x0006be6f : mov edi, ebx; sub rdx, rsi; call [r13 + 0x70]
0x00048902 : mov esi, ebx; mov rdi, r13; call [r15 + 0x38]
0x000009ce : add [rax], al; lea rax, [rip + 0x193971]; ret
0x00169670 : add [rax], eax; add ch, al; std ; xlatb ; ret
0x00072d60 : push rsp; and al, 8; mov rdi, r15; call [rax]
0x0006a091 : mov esi, esi; mov rdi, rbx; call [rax + 0x40]
0x000afb6c : add [rax], al; add [rax], al; mov rax, 2; ret
0x0003a6d1 : mov rdi, r14; mov rdx, r15; call [rax + 0x38]
0x0010d53c : add [rax], al; add [rax], al; mov eax, 7; ret
0x00161c66 : add [rax], al; cmp [rax], 1; sbb rax, -1; ret
0x0000b6ea : mov edx, [rbp - 0x98]; mov rdi, r14; call rdx
0x00045688 : add dh, al; test esp, esp; idiv bh; jmp [rax]
0x00044d7a : lea edx, [rip - 0x2fe]; add rax, rdx; jmp rax
0x0007ba68 : mov rdi, [rdi + 0x48]; mov rsi, rbp; call rax
0x000b0bff : add r13, rax; mov [rsp + 0xa8], r13; call rbx
0x0009cf17 : lea ecx, [rsp + 0x28]; mov rdi, rbp; call rbx
0x0009ad2e : sbb [rbx + 0xc7402f8], eax; xor eax, eax; ret
0x0012d3c0 : mov rdx, rbp; mov rdi, r13; call [rax + 0x10]
0x0005e69d : mov rsi, r14; mov rdi, r12; call [r15 + 0x38]
0x000a6827 : add [rax], al; add [rdx + rax - 0xd], dh; ret
0x0011ffbc : add [rbx - 0x3d], bl; nop ; xor eax, eax; ret
0x00087355 : lea rax, [rdi + rax - 1]; mov [rdi], rdx; ret
0x0007d865 : lea rax, [rip + 0x1c274]; cmove rax, rdx; ret
0x00096bcd : add [rax], al; add [rax + 0x78d4837], cl; ret
0x0009bf3f : lea eax, [rip + 0x1341b]; cmove rax, rdx; ret
0x0007cabe : lea rax, [rip + 0x1359b]; cmove rax, rdx; ret
0x0007f53e : lea rax, [rip + 0x1090b]; cmove rax, rdx; ret
0x0007d866 : lea eax, [rip + 0x1c274]; cmove rax, rdx; ret
0x0005ff5f : mov esi, esp; mov rdi, rbx; call [rax + 0x58]
0x0001e021 : add [rax], al; pop rbx; pop rbp; pop r12; ret
0x0005fda2 : mov rsi, rbp; mov rdi, rbx; call [r13 + 0x48]
0x00045ba2 : pop rdx; mov ah, 1; add [rax + 0x39], cl; ret
0x00043a0f : sub [r8 + 0x468b4102], r9b; add al, 0x39; ret
0x0009c234 : lea edx, [rip + 0xd5ec6]; cmove rax, rdx; ret
0x0015dd4d : add [rax], al; add [rcx + 0x3518911], cl; ret
0x00108633 : sbb [r8 - 0x77], r9b; fimul [rax - 0x7d]; ret
0x0007c9be : lea rax, [rip + 0x1398b]; cmove rax, rdx; ret
0x0001f7ac : mov esi, esi; mov rdi, [rsp + 0x18]; call rbp
0x0012e8e0 : sub rdx, rsi; mov rbp, rdx; call [rbx + 0x10]
0x0009c15e : lea rax, [rip + 0x12d0b]; cmove rax, rdx; ret
0x000afb8c : add [rax], al; add [rax], al; mov rax, 4; ret
0x00096cdb : mov [rdi + 5], edx; lea rax, [rdi + 0xc]; ret
0x0014d11b : mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x001527a8 : mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x0009a2b6 : mov [rdi + rdx - 8], rcx; mov [rdi], rsi; ret
0x0016d235 : lea eax, [rdi + rax - 0x20]; vzeroupper ; ret
0x0006ac7b : add [rax], al; add [rbp + 0x58d48c0], al; ret
0x00118659 : add al, [rax]; pop rbp; pop r12; pop r13; ret
0x0000cfb0 : movsxd rsi, [r8 + r9*4]; add rsi, r8; jmp rsi
0x0016016a : mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x00160149 : mov [rdx + 8], eax; lea rax, [rdx + 0xb]; ret
0x0014d11c : mov [rdi - 0xa], ecx; mov [rdi - 4], edx; ret
0x0003bd12 : mov esi, eax; mov rdi, r14; call [r15 + 0x38]
0x0009c15f : lea eax, [rip + 0x12d0b]; cmove rax, rdx; ret
0x00096cfb : mov [rdi + 6], edx; lea rax, [rdi + 0xd]; ret
0x00152718 : mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x001528b8 : mov [rdi - 0xb], edx; mov [rdi - 4], ecx; ret
0x001122f3 : lea rdx, [rip + 0x5fdf6]; cmove rax, rdx; ret
0x0010d199 : add esp, 8; mov eax, 7; pop rbx; pop rbp; ret
0x000bfcb1 : mov [rdx], r8d; mov rax, rsi; add rsp, 8; ret
0x00047877 : lea rdi, [rip + 0x2d2]; add rax, rdi; jmp rax
0x0005de42 : mov [rbx], esi; pop rbx; pop rbp; pop r12; ret
0x0011075e : lea rax, [rip + 0x5d02b]; cmovne rax, rdx; ret
0x00070d6f : mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret
0x0007dafe : lea eax, [rip + 0xf462c]; cmovne rax, rdx; ret
0x0000eecd : mov rax, [rip + 0x3bac3c]; mov [rax], rdx; ret
0x0007dbad : lea rax, [rip + 0xf3fac]; cmovne rax, rdx; ret
0x0004b4f6 : inc esi; add al, 2; add [rcx - 0x7d], ecx; ret
0x000f6700 : add [rax], eax; add [rax], al; add rsp, 8; ret
0x0011068e : lea rax, [rip + 0x5d0fb]; cmovne rax, rdx; ret
0x0006cad2 : mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x00139f77 : add [rax], al; mov rdi, r12; call [rax + 0x28]
0x0014248b : sub [rax], al; mov rdi, rdx; call [rax + 0x20]
0x0006495a : add [rax], al; mov rdi, r13; call [r13 + 0x20]
0x0007de5f : lea rax, [rip + 0x1c32a]; cmovne rax, rdx; ret
0x00141d21 : add [rax], al; mov rdi, rbp; call [rax + 0x18]
0x0001c8c5 : add [rax - 0x3f000001], al; shr eax, 0x1f; ret
0x0007c5b3 : lea eax, [rip + 0x1d9c7]; cmovne rax, rdx; ret
0x00038197 : mov rsi, r15; mov rdi, [rbp - 0x8a8]; call rax
0x00021d69 : add [rax], al; mov rdi, [rax + 0x20]; call rdx
0x0001d018 : add [rax], al; add [rax - 0x3f91f09a], al; ret
0x0005f126 : lea rsi, [rip + 0x1d3]; mov rdi, rbp; call rax
0x000af64d : add [rax], al; add [rax - 0x73], cl; cld ; ret
0x0007decf : lea eax, [rip + 0xef8cb]; cmovne rax, rdx; ret
0x001106f0 : lea eax, [rip - 0x76576]; cmovne rax, rdx; ret
0x0013751a : mov rdi, rax; lea r9, [rsp + 0x1c]; call [r10]
0x000f46ca : add [rax], al; add [rax - 0x3fcef877], al; ret
0x000ee8ca : pop rdi; add [rax], al; add [rax - 1], bh; ret
0x001455a0 : mov [rbx], rax; pop rax; pop rdx; pop rbx; ret
0x0011082e : lea rax, [rip + 0x5cf3b]; cmovne rax, rdx; ret
0x0014cd95 : mov [rdi - 0x10], ebx; mov [rdi - 8], rcx; ret
0x000632b8 : sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret
0x000fbf04 : pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax
0x0006d3ca : add [rax], al; mov rdi, rbx; call [r15 + 0x20]
0x0007c5b2 : lea rax, [rip + 0x1d9c7]; cmovne rax, rdx; ret
0x000705ab : sbb [rax - 0x77], cl; rcr [rbx + 0x5d], 1; ret
0x000338ce : mov [rsp - 8], rdx; movsd xmm0, [rsp - 8]; ret
0x0013ca31 : mov [rdi + 0x28], edx; mov [rdi + 8], rax; ret
0x0006eb26 : add bl, al; nop [rax + rax]; xor eax, eax; ret
0x0012dda3 : add cl, [rcx + 0x55ff41da]; adc [rcx], bh; ret
0x0006caa3 : mov [rdi + 0x18], eax; mov [rdi + 8], rax; ret
0x00047045 : add cl, [rcx + rcx*4 - 0xe]; call [rax + 0x38]
0x0007be32 : mov [rbx], rdx; pop rbx; pop rbp; pop r12; ret
0x00110883 : lea rax, [rip + 0x5d386]; cmovne rax, rdx; ret
0x0007da5f : lea eax, [rip + 0xefd3b]; cmovne rax, rdx; ret
0x000ed87d : add [rax], al; add [rcx - 0x3fcefb89], cl; ret
0x00030998 : add [rax], al; mov edi, [rsp + 0x24]; call rax
0x0007da5e : lea rax, [rip + 0xefd3b]; cmovne rax, rdx; ret
0x0006c090 : movzx eax, bpl; pop rbx; pop rbp; pop r12; ret
0x00064c0d : adc [r9 + 0x2b], r9b; or [r8 + 0x29], r9b; ret
0x000900b4 : add [rax], al; bsr rax, rax; add rax, rdi; ret
0x00174392 : add [rax], al; add [rdi + 9], bh; neg eax; ret
0x000f6534 : add [rcx + 0x480575d0], cl; add esp, 0x58; ret
0x00064c0e : adc [rcx + 0x2b], cl; or [r8 + 0x29], r9b; ret
0x0008096c : xor [rax + rax], al; add [rcx - 0x77], cl; ret
0x0008a94e : add [rax], al; bsf eax, eax; add rax, rdi; ret
0x00075d7f : mov eax, [rip + 0x353e7b]; mov [rax], rdi; ret
0x00020dea : add [rcx - 0x73], ecx; or [r8 + 0x39], cl; ret
0x0009c838 : mov rdi, [r14]; lea r9, [rsp + 0x28]; call r12
0x0013c8b8 : sbb bl, al; nop [rax + rax]; xor eax, eax; ret
0x0000b2b8 : popfq ; adc eax, [rax]; mov rdi, r13; call r12
0x0010e597 : add [rdi], cl; adc [rbp - 0x78], eax; call rax
0x0012e030 : sub edx, r15d; mov rsi, r13; call [rbx + 0x40]
0x0006ebb7 : add [rbx + 0x35da1505], al; add [rcx], al; ret
0x00139000 : add [rax], al; mov [rsp + 0xc8], rdx; call rax
0x0009a831 : add [rbx - 0x3d], bl; mov eax, 8; pop rbx; ret
0x0012ce49 : mov esi, r12d; mov rdi, rbp; call [rax + 0x30]
0x00038198 : mov esi, edi; mov rdi, [rbp - 0x8a8]; call rax
0x0006cad3 : mov [rdi + 0x48], edx; mov [rdi + 8], rax; ret
0x000ec215 : add al, [rax]; add [rcx - 0x80], al; jmp [rdi]
0x0007a561 : add cl, ch; imul edi, esi, -1; jmp [rsi + 0xf]
0x0011066e : lea eax, [rip + 0x614fc]; cmovne rax, rdx; ret
0x001106ef : lea rax, [rip - 0x76576]; cmovne rax, rdx; ret
0x0010fca4 : mov eax, 0; cmova eax, edx; add rsp, 0x28; ret
0x0007dab3 : lea rax, [rip + 0xf0166]; cmovne rax, rdx; ret
0x0003c02d : lea rdi, [rip - 0x1624]; add rax, rdi; jmp rax
0x000ec58d : add [rax], al; add [rcx - 0x80], al; jmp [rdx]
0x00062f8e : xor [rax], 1; add [rax], al; call [rax + 0x68]
0x000c3652 : add [rbx + 0x480c2444], cl; add esp, 0x18; ret
0x0009a86d : inc [rbx]; div ecx; pop rbx; mov eax, eax; ret
0x0007dbce : lea rax, [rip + 0xefbab]; cmovne rax, rdx; ret
0x000c32fc : add [rax], al; add [rax + 0x21058d48], dl; ret
0x0007c1cb : add [rax], 0; add [rax], al; xor eax, eax; ret
0x000ee753 : sub esp, -0x80; pop rbx; pop rbp; pop r12; ret
0x00087332 : movsxd rdx, [r8 + rdx*4]; add rdx, r8; jmp rdx
0x000c32bc : mov edx, 0; cmovne rdx, rax; mov rax, rdx; ret
0x0001875a : sbb [rax], al; add [rbx - 0x7bf0fc06], al; ret
0x0011dbf2 : mov [rbp], esp; pop rbx; pop rbp; pop r12; ret
0x0007c236 : add [rax], al; mov [rdi], rsi; mov eax, 1; ret
0x00136b86 : mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0007be33 : mov [rbx], edx; pop rbx; pop rbp; pop r12; ret
0x0007de60 : lea eax, [rip + 0x1c32a]; cmovne rax, rdx; ret
0x0007c684 : adc [rax + 0x1f7403fa], al; movsx eax, dl; ret
0x0003c02e : lea edi, [rip - 0x1624]; add rax, rdi; jmp rax
0x0005d99e : add [rax], al; xor esi, esi; mov rax, rsi; ret
0x000873e4 : movzx edx, [rsp + 0xe]; mov [rdi + 6], dl; ret
0x0011068f : lea eax, [rip + 0x5d0fb]; cmovne rax, rdx; ret
0x001389e5 : add [rax], r8b; pop rbx; pop rbp; pop r12; ret
0x00135543 : xor [r8 + 1], r15b; movups xmm[rdx], xmm0; ret
0x000338cf : mov [rsp - 8], edx; movsd xmm0, [rsp - 8]; ret
0x00137327 : mov rax, [rbx + 8]; pop rdx; call [rax + 0x20]
0x0009bb02 : add [rax], al; add [rdi + 2], bh; neg eax; ret
0x0007dafd : lea rax, [rip + 0xf462c]; cmovne rax, rdx; ret
0x0003bcbe : add [rax], al; mov r11, [rbp - 0x530]; jmp rax
0x0007dece : lea rax, [rip + 0xef8cb]; cmovne rax, rdx; ret
0x0009bb33 : lea eax, [rip + 0x13667]; cmovne rax, rdx; ret
0x000ee752 : sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret
0x0011082f : lea eax, [rip + 0x5cf3b]; cmovne rax, rdx; ret
0x00033889 : mov [rsp - 4], edx; movss xmm0, [rsp - 4]; ret
0x001108ce : lea eax, [rip + 0x6184c]; cmovne rax, rdx; ret
0x0011080d : lea rax, [rip + 0x6133c]; cmovne rax, rdx; ret
0x00015113 : sbb al, [rax]; add [rbx - 0x7bf0fc06], al; ret
0x0001beaf : add [rax - 0x77], cl; fisttp [rax - 0x39]; ret
0x00110620 : lea eax, [rip - 0x764a6]; cmovne rax, rdx; ret
0x0012c283 : add [rax], al; mov rdi, rbx; call [rax + 0x20]
0x0014cdd2 : mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0007db60 : lea eax, [rip + 0x1c60a]; cmovne rax, rdx; ret
0x0012ca78 : add [rax], al; mov rdi, rbp; call [rax + 0x30]
0x0007cae2 : lea rax, [rip + 0x1d537]; cmovne rax, rdx; ret
0x00060bee : add [rax], al; mov [rdi], 0; mov rax, rdi; ret
0x001108cd : lea rax, [rip + 0x6184c]; cmovne rax, rdx; ret
0x0012c5ef : add [rax], al; mov rax, [rsp + 0x28]; call rax
0x001455a1 : mov [rbx], eax; pop rax; pop rdx; pop rbx; ret
0x000d2e2b : add [rax], 0; add [rax], al; mov eax, 0xc; ret
0x0007dab4 : lea eax, [rip + 0xf0166]; cmovne rax, rdx; ret
0x00075d7e : mov rax, [rip + 0x353e7b]; mov [rax], rdi; ret
0x0008a723 : add [rax], al; add rax, rdi; add rax, rcx; ret
0x0002dd3f : add [rax - 0x73], cl; xor eax, 0x349; call rax
0x0007cae3 : lea eax, [rip + 0x1d537]; cmovne rax, rdx; ret
0x0007db5f : lea rax, [rip + 0x1c60a]; cmovne rax, rdx; ret
0x001383b9 : add [rax], al; mov fs:[rbx], rax; pop rbx; ret
0x0008b071 : mov dh, 7; movzx edx, [rsi]; sub eax, edx; ret
0x000c8472 : add ch, bl; cdq ; nop [rax]; xor eax, eax; ret
0x00139d43 : add [rax], al; mov rdi, r14; call [rax + 0x28]
0x0011073d : lea rax, [rip + 0x6142c]; cmovne rax, rdx; ret
0x0013751b : mov edi, eax; lea r9, [rsp + 0x1c]; call [r10]
0x0012c95e : movsxd rdx, [r8 + rcx*4]; add rdx, r8; jmp rdx
0x0014cdd3 : mov [rdi - 0x10], ebx; mov [rdi - 8], rdx; ret
0x0007da3d : lea rax, [rip + 0xf413c]; cmovne rax, rdx; ret
0x000339c2 : sub eax, r10d; mov [rdx], eax; mov eax, 2; ret
0x00062a78 : mov esi, r14d; mov rdi, r12; call [r15 + 0x18]
0x0012bde0 : mov esi, r14d; mov rdi, rbx; call [rax + 0x28]
0x0007cd92 : lea rax, [rip + 0x1d327]; cmovne rax, rdx; ret
0x00074b51 : add [rbp + rcx*4 + 0x46], cl; jmp [rsi + 0x2e]
0x0006aa3e : add [rax], al; mov rdi, rbx; call [r13 + 0x20]
0x001107c0 : lea eax, [rip - 0x76666]; cmovne rax, rdx; ret
0x0005f127 : lea esi, [rip + 0x1d3]; mov rdi, rbp; call rax
0x0006470d : add [rax], al; mov rdi, rbp; call [rbp + 0x20]
0x0014cd94 : mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x001787cc : add [rax], al; add [rax - 0x7ab80000], al; ret
0x001107bf : lea rax, [rip - 0x76666]; cmovne rax, rdx; ret
0x0008718d : movsxd rcx, [r9 + rcx*4]; add rcx, r9; jmp rcx
0x000abc37 : mov rdi, [r14]; lea r9, [rsp + 0x30]; call r12
0x0012b9d7 : mov rdi, rbp; lea r9, [rsp + 0x20]; call [rax]
0x00060bc5 : mov [rbx], ebp; pop rbx; pop rbp; pop r12; ret
0x00049f40 : mov [rax], bpl; pop rbx; pop rbp; pop r12; ret
0x00092164 : add [rdx + 0x48028801], ecx; mov eax, edi; ret
0x000abc38 : mov edi, [rsi]; lea r9, [rsp + 0x30]; call r12
0x000e29f7 : mov [rdx], ecx; pop rdx; pop rcx; pop rbx; ret
0x0012b9d8 : mov edi, ebp; lea r9, [rsp + 0x20]; call [rax]
0x000bdd1e : call [rax + 0x5c415d5b]; pop r13; pop r14; ret
0x0007dbae : lea eax, [rip + 0xf3fac]; cmovne rax, rdx; ret
0x0011061f : lea rax, [rip - 0x764a6]; cmovne rax, rdx; ret
0x000372c7 : pop rbx; cmovb rax, rdi; pop rbp; pop r12; ret
0x00102b76 : add eax, [rax]; add [rax], al; add rsp, 8; ret
0x000871f9 : movzx edx, [rsp - 0xc]; mov [rdi + 4], dl; ret
0x0000eece : mov eax, [rip + 0x3bac3c]; mov [rax], rdx; ret
0x0011073e : lea eax, [rip + 0x6142c]; cmovne rax, rdx; ret
0x000af63d : add [rax], al; add [rax - 0x73], cl; clc ; ret
0x00137328 : mov eax, [rbx + 8]; pop rdx; call [rax + 0x20]
0x0009bb32 : lea rax, [rip + 0x13667]; cmovne rax, rdx; ret
0x0009a2d3 : mov ss:[rdi + rdx - 2], cx; mov [rdi], si; ret
0x0007d9f0 : lea eax, [rip + 0x1c79a]; cmovne rax, rdx; ret
0x0007dbcf : lea eax, [rip + 0xefbab]; cmovne rax, rdx; ret
0x0016d5ff : add [rcx + rcx*4 - 0x40], cl; vzeroupper ; ret
0x0007dead : lea rax, [rip + 0xf3ccc]; cmovne rax, rdx; ret
0x000e7291 : add cl, ch; maskmovq mm7, mm7; jmp [rsi + 0xf]
0x00060bf3 : add [rax], al; add [rax - 0x77], cl; clc ; ret
0x0009560f : add [rbx + 0x477880e], cl; mov [rdi], ecx; ret
0x0011204a : xchg eax, edx; fucompi st(6); jmp [rsi - 0x70]
0x00132666 : add [rax], al; mov rdi, r12; call [rax + 0x20]
0x000671f1 : stosd [rdi], eax; cdq ; stc ; jmp [rsi + 0x2e]
0x0011075f : lea eax, [rip + 0x5d02b]; cmovne rax, rdx; ret
0x00087211 : movzx edx, [rsp + 0xc]; mov [rdi + 4], dx; ret
0x00126df6 : add [rax - 0x7b], cl; sal [rbp + 4], 0xf3; ret
0x00169a61 : mov dh, 7; movzx ecx, [rsi]; sub eax, ecx; ret
0x0011080e : lea eax, [rip + 0x6133c]; cmovne rax, rdx; ret
0x0006d070 : mov [rbx], eax; pop rbx; pop rbp; pop r12; ret
0x00138895 : inc [rbp - 0x75]; add gs:[rax - 0x7d], cl; ret
0x0007da3e : lea eax, [rip + 0xf413c]; cmovne rax, rdx; ret
0x001327dc : sub eax, -0x32; adc esi, edi; jmp [rsi + 0x2e]
0x0010f752 : add [rax], al; mov rbx, [rbp - 8]; leave ; ret
0x0012f96e : movzx eax, [rax + rdx]; mov [rdi + 7], al; ret
0x0007deae : lea eax, [rip + 0xf3ccc]; cmovne rax, rdx; ret
0x0009c839 : mov edi, [rsi]; lea r9, [rsp + 0x28]; call r12
0x00131d53 : add [rax], eax; add [rax], al; mov eax, 1; ret
0x000cd00d : add [rax], al; add [rbp - 0x7cb7febd], cl; ret
0x00031046 : mov [rax - 0x77], ecx; fimul [rax - 0x7d]; ret
0x0006eabc : add [rax], al; add [rax], al; mov rax, -1; ret
0x00062f98 : push [rbp + rax + 0x5b]; pop rbp; pop r12; ret
0x00153272 : add cl, [rbx + 0x257890e]; mov [rdi], ecx; ret
0x00052224 : mov [rax], ebp; pop rbx; pop rbp; pop r12; ret
0x00086dd0 : mov [rcx], 0; mov rcx, r8; mov [rdx], rcx; ret
0x00013fd0 : add [rax], eax; pop rbx; pop rbp; pop r12; ret
0x00122e3c : add [rax - 0x73], cl; and [r8 - 0x7d], cl; ret
0x000cec0d : add [rcx], ebx; rol [rbx - 0x3f7cfd20], 8; ret
0x001216b8 : add [rcx + 0x480575d0], cl; add esp, 0x18; ret
0x0011066d : lea rax, [rip + 0x614fc]; cmovne rax, rdx; ret
0x0005d74d : add [rax], al; mov rdi, rax; call [rax + 0x20]
0x0001bfeb : add [rax], al; add [rax - 1], bh; pop rbx; ret
0x0012d200 : add [rax], al; mov rdi, rbp; call [rax + 0x28]
0x0012d21c : add [rax], al; mov rdi, rbp; call [rax + 0x20]
0x0010f405 : add [rax], al; syscall ; pop rdx; pop rsi; ret
0x00110884 : lea eax, [rip + 0x5d386]; cmovne rax, rdx; ret
0x0006caa2 : mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x0007cd93 : lea eax, [rip + 0x1d327]; cmovne rax, rdx; ret
0x00136b87 : mov edi, eax; lea r9, [rsp + 0x14]; call [r10]
0x0007d9ef : lea rax, [rip + 0x1c79a]; cmovne rax, rdx; ret
0x0012c995 : add bl, al; nop [rax + rax]; mov [rsi], 8; ret
0x00060afd : add [rax], r8b; xor esi, esi; mov rax, rsi; ret
0x0014248c : add [rax - 0x77], cl; xlatb ; call [rax + 0x20]
0x0010ac24 : sub eax, r9d; cmp sil, cl; cmovne eax, edx; ret
0x0014b494 : add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9
0x00141c23 : add [rax], al; cmovne rax, rdx; add rsp, 8; ret
0x00139f78 : add [rcx + rcx*4 - 0x19], cl; call [rax + 0x28]
0x00141d48 : xchg eax, ebp; sub [rax], al; call [rax + 0x28]
0x00038596 : push rcx; sub dh, al; add [rcx - 0x7d], cl; ret
0x0002dd3e : add [rax], al; lea rsi, [rip + 0x349]; call rax
0x0012d9e8 : mov [rcx], edx; mov edx, eax; call [rbx + 0x10]
0x00047823 : add [rax], al; mov [rbp - 0x4f0], 0x20; jmp rax
0x000e456c : add cl, ch; push rsp; idiv edi; jmp [rsi + 0xf]
0x00000c50 : mov rax, [rip + 0x3c8f41]; add rax, fs:[0]; ret
0x001533b0 : movq [rdi + 3], mm0; movdqu xmm[rdi], xmm1; ret
0x0004787b : add al, [rax]; add [rax + 1], cl; clc ; jmp rax
0x000685c1 : add al, ch; sub [rsi - 5], ebp; jmp [rsi + 0xf]
0x000008bd : mov rdx, [rax]; mov rax, [rsp + 0x18]; call rax
0x0000f600 : mov rax, [rip + 0x3ba649]; add rax, fs:[0]; ret
0x00139f9d : sbb [rcx + rcx*4 - 0x19], cl; call [rax + 0x20]
0x001690dd : movsxd rax, ecx; add rax, rdi; sub rax, r8; ret
0x00153340 : movq [rdi + 4], mm0; movdqu xmm[rdi], xmm1; ret
0x0001c8b4 : add [rax], al; sub eax, edx; sar eax, 0x10; ret
0x0002342d : xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x0012d979 : add esp, 8; pop rbx; pop rbp; add eax, edx; ret
0x000008be : mov edx, [rax]; mov rax, [rsp + 0x18]; call rax
0x000859f2 : add [rbp + 0x19], ecx; fisttp [rcx - 0x7d]; ret
0x000225cf : xor rax, fs:[0x30]; mov fs:[rbp], rdx; call rax
0x0012c99c : add [rax], al; add [rax], al; mov [rsi], 8; ret
0x00141c1f : add [rdx], bh; cmovne rax, rdx; add rsp, 8; ret
0x000fe7e2 : add al, [rax]; add [rax], al; xor eax, eax; ret
0x000c012f : add [rax - 0x75], cl; sbb [r8 - 0x7d], r9b; ret
0x0016004f : add [rdx + 0x48028801], cl; lea eax, [rdx]; ret
0x0006495b : add [rcx + rcx*4 - 0x11], cl; call [r13 + 0x20]
0x0016f8eb : adc [rdx], cl; add [rax], al; xor eax, eax; ret
0x000337a5 : mov [rdi], rsi; mov [rdx], eax; mov eax, 1; ret
0x00068c3f : mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret
0x001531f0 : movq [rdi + 7], mm0; movdqu xmm[rdi], xmm1; ret
0x0007cc31 : add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret
0x0006c62c : add [rax], al; lea rsi, [rip - 0x3f5]; call rax
0x0000084f : mov edi, [rsp + 0x14]; mov rdx, [rax]; call rbp
0x0014504a : mov rdi, [rsp]; mov rax, [rax + 0x170]; jmp rax
0x0011fb8d : mov eax, 2; sub esi, 1; mov [rdi + 1], sil; ret
0x0012bcd3 : mov [rbx], rax; xor eax, eax; call [rbx + 0x18]
0x0014504b : mov edi, [rsp]; mov rax, [rax + 0x170]; jmp rax
0x0009a86e : add esi, edi; int1 ; pop rbx; mov eax, eax; ret
0x0002267f : add [rax - 0x77], cl; clc ; cqo ; idiv rsi; ret
0x000481bc : add [rax - 0x7b], cl; ror [rdi], 0x84; ret 0x11
0x000fc4ac : mov edi, [rbp - 0x58]; mov r12d, r14d; call r15
0x000138d1 : add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x000c9830 : add cl, ch; pop rax; idiv edi; jmp [rsi + 0x2e]
0x00060bf2 : add [rax], al; add [rax], al; mov rax, rdi; ret
0x0010fcb3 : add [rax], 0; add [rax], al; mov eax, 0x16; ret
0x0003d668 : add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x0000f5e1 : mov eax, [rip + 0x3ba621]; add rax, fs:[0]; ret
0x0001f796 : xor al, 7; mov rbx, rax; mov rdi, r14; call rbp
0x0000826a : add [rax - 0x73], cl; add cl, [rax + 0x39]; ret
0x0006c337 : add [rax], al; lea rsi, [rip - 0x100]; call rax
0x0011a73e : add [rax], eax; add [rcx], dh; jmp [rsi - 0x77]
0x0016d634 : sub ecx, [rcx + rcx*4 - 0x40]; vzeroupper ; ret
0x00106cbc : add [rax], al; add [rax], al; mov eax, edx; ret
0x000d2e2c : add [rax], al; add [rax], al; mov eax, 0xc; ret
0x00092165 : mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret
0x0013699a : movaps xmm[rsp + 0x20], xmm0; call [rax + 0x28]
0x00002623 : mov [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret
0x0009a00f : add [rcx], al; add [rax], al; sub rax, rdx; ret
0x00132df6 : add [rbx + rax*4 + 0x38], ah; add al, 0x75; ret
0x00090ce4 : adc [rax - 0x7b], cl; ror [rdi], 0x85; ret 0x13
0x0005aeaa : add esp, 8; mov eax, esi; pop rbx; pop rbp; ret
0x0007df9f : add [rbp + 0x31], al; ror [rcx - 0x39], cl; ret
0x001368a2 : stosb [rdi], al; mov ch, 0xee; jmp [rsi + 0x2e]
0x0013cbae : dec [rcx + rcx*4 - 0xa]; mov rdi, rbp; call r12
0x00000c51 : mov eax, [rip + 0x3c8f41]; add rax, fs:[0]; ret
0x0003d667 : add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x00153180 : movq [rdi + 8], mm0; movdqu xmm[rdi], xmm1; ret
0x000c644c : add [rax], al; add [rax], al; call [r14 + 0x28]
0x00030cab : add bl, ch; fidivr [rdx - 1]; mov eax, edx; ret
0x00092175 : mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret
0x000fab1d : add [rax], al; add [rbx - 0x7d], dl; call [rcx]
0x000f14f1 : add al, ch; or esp, ebx; int1 ; jmp [rsi + 0xf]
0x0010abee : sub eax, edx; cmp dil, cl; cmovne eax, esi; ret
0x00070bf0 : mov fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret
0x00022e78 : add [rax], al; add [rax], al; xor eax, eax; ret
0x000dbdec : add [rax + 0x63], cl; add cl, [rax - 0x77]; ret
0x00139f9c : sbb [r9 + rcx*4 - 0x19], r9b; call [rax + 0x20]
0x0001805d : add [rax], eax; add [rbx - 0x7bf0fe08], al; ret
0x000af34c : add [rax], al; add [rax], al; xor rax, rax; ret
0x00033a2c : add bl, al; nop ; mov [rdx], 0; mov eax, 2; ret
0x001532d0 : movq [rdi + 5], mm0; movdqu xmm[rdi], xmm1; ret
0x00132667 : add [rcx + rcx*4 - 0x19], cl; call [rax + 0x20]
0x0012335e : add [rax], eax; add [rcx - 0x80], al; jmp [rsi]
0x000755b0 : add [rax], eax; add [rax - 0x7d], cl; jmp [rax]
0x0009668d : add [rax], al; add bl, dh; movq [rdi], mm0; ret
0x000873c3 : movzx edx, [rsp - 0x14]; mov [rdi + 4], dx; ret
0x00120399 : sub eax, esi; add eax, edi; cmovs eax, edx; ret
0x0012d978 : add rsp, 8; pop rbx; pop rbp; add eax, edx; ret
0x0010d9f9 : add [rax - 0x75], cl; add cl, [rax - 0x7d]; ret
0x0010abb2 : sub eax, r9d; cmp sil, dl; cmovne eax, ecx; ret
0x0003a513 : mov r11, rdx; xor r8d, r8d; mov r9d, 1; jmp rax
0x0007c235 : add [rax], r8b; mov [rdi], rsi; mov eax, 1; ret
0x0006e8ed : add esp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x000823ff : add [rax + 0x19], ecx; fisttp [rax - 0x7d]; ret
0x0012335d : add [rax], rax; add [rcx - 0x80], al; jmp [rsi]
0x0000f601 : mov eax, [rip + 0x3ba649]; add rax, fs:[0]; ret
0x0012dda2 : mov [rdx], eax; mov edx, ebx; call [r13 + 0x10]
0x0011fe5f : mov [r8], ecx; mov [r9], rax; mov eax, edx; ret
0x00033764 : div [rbp + 0x29]; mov [rdx], 0; mov eax, 1; ret
0x0002e9e4 : add esp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x0012bcd4 : mov [rbx], eax; xor eax, eax; call [rbx + 0x18]
0x0012bd6b : add [rax], al; add [rax], al; call [rax + 0x20]
0x0014b495 : add esi, edx; add rdi, rdx; add r9, r11; jmp r9
0x000448ca : dec [rax + 0x29]; sar rdx, 2; call [rbx + 0x38]
0x0000f5b9 : add [rcx], al; add [rax], al; and eax, esi; ret
0x0011dbf1 : mov [rbp], r12d; pop rbx; pop rbp; pop r12; ret
0x00087232 : movzx edx, [rsp + 0x16]; mov [rdi + 6], dl; ret
0x0008ad4a : add [rax], al; add [rsi + 0xf], ah; xlatb ; ret
0x0012d961 : mov eax, esi; add rsp, 8; pop rbx; pop rbp; ret
0x000ec6e9 : add [rax], eax; add [rcx - 0x80], al; jmp [rdx]
0x0000b40f : pushfq ; adc eax, [rax]; mov rdi, r14; call rbx
0x00074179 : mov [rsi + rbx], cl; mov rax, rsi; pop rbx; ret
0x00153110 : movq [rdi + 9], mm0; movdqu xmm[rdi], xmm1; ret
0x0012ba9d : add [rax], al; lea r9, [rsp + 0x20]; call [rax]
0x00153260 : movq [rdi + 6], mm0; movdqu xmm[rdi], xmm1; ret
0x00168ec8 : leave ; lea rax, [rdi + rcx]; sub rax, rsi; ret
0x000337a6 : mov [rdi], esi; mov [rdx], eax; mov eax, 1; ret
0x001532e2 : add [rbx + 0x157890e], ecx; mov [rdi], ecx; ret
0x0012b107 : sbb [rcx + rcx*4 - 0x1a], cl; call [rax + 0x10]
0x00153420 : movq [rdi + 2], mm0; movdqu xmm[rdi], xmm1; ret
0x0012b080 : add [rax], al; add [rax], al; call [rax + 0x28]
0x0013b481 : lea esi, [rsp + 0x10]; mov rdi, rbx; call [rax]
0x0000f5c0 : mov rax, [rip + 0x3ba569]; add rax, fs:[0]; ret
0x000cbcdd : add [rcx - 0x1b], al; add [rax + 0x63], cl; ret
0x0005f48f : add [rax], al; lea rsi, [rip - 0x198]; call rax
0x000fc4ab : mov rdi, [rbp - 0x58]; mov r12d, r14d; call r15
0x0003ab03 : xchg [rsp + rbx], dh; add [rcx - 0x77], cl; ret
0x0000f5c1 : mov eax, [rip + 0x3ba569]; add rax, fs:[0]; ret
0x000f51c8 : mov fs:[rbx], 1; pop rbx; pop rbp; pop r12; ret
0x0000f5e0 : mov rax, [rip + 0x3ba621]; add rax, fs:[0]; ret
0x0013cc5f : add [rcx], al; push rdi; sub [rax + 1], bh; ret
0x0006a011 : add [rdi], cl; test [rax - 0x18000000], dl; ret
0x00146062 : adc bl, ch; int 0xe8; frndint ; jmp [rsi + 0xf]
0x00076340 : add eax, [rax]; add [rax - 0x7d], cl; jmp [rax]
0x0008fc7d : add al, 7; cmp [rax], sil; cmovne rax, rdx; ret
0x00153490 : movq [rdi + 1], mm0; movdqu xmm[rdi], xmm1; ret
0x00138ab1 : movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x0002e9e3 : add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x0006e8ec : add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x000138d0 : add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x00113e00 : mov rax, [rip + 0x2b5d79]; add rax, fs:[0]; ret
0x00047930 : sbb al, 2; add [rax], al; add rax, rdi; jmp rax
0x0013b480 : lea rsi, [rsp + 0x10]; mov rdi, rbx; call [rax]
0x00068c3e : mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret
0x00169996 : adc [rbp + 0x31000002], -0x40; vzeroupper ; ret
0x0010ac25 : sub eax, ecx; cmp sil, cl; cmovne eax, edx; ret
0x000fe52b : add [rbx - 0x3f7ac7c0], cl; cmove eax, edx; ret
0x0001bf8a : sub al, [rax]; add [rax], al; mov rax, rcx; ret
0x00113e01 : mov eax, [rip + 0x2b5d79]; add rax, fs:[0]; ret
0x0003f9d7 : inc edi; test [rdi + rdi*8 - 1], esp; jmp [rsi]
0x001249c4 : push rbx; sub al, [rax]; mov rax, fs:[rax]; ret
0x0014b9c0 : lea r9, [r9 - 7]; lea rdx, [rdx - 0x40]; jmp r9
0x0003a514 : mov ebx, edx; xor r8d, r8d; mov r9d, 1; jmp rax
0x0008726d : add [rax], r8b; mov [rdi], 0; mov rax, rdi; ret
0x0011d973 : add [rax], al; add [rsi - 0x7d], ah; call [rax]
0x0013ccf0 : sbb [rsi + 0xd], dh; add [rdi + 0x28], esi; ret
0x00020e47 : add [rcx - 0x75], cl; add [r8 - 0x7d], r9b; ret
0x000632b9 : sub eax, ecx; sar r8, 2; lea eax, [r8 - 1]; ret
0x0012d104 : add bl, al; nop cs:[rax + rax]; mov eax, 2; ret
0x0007cc32 : add esp, 8; mov rax, rbp; pop rbx; pop rbp; ret
0x00062f8f : xor [rcx], al; add [rax], al; call [rax + 0x68]
0x0007b8e5 : mov [rbx + 0x30], eax; mov [rbx], rdi; call rcx
0x00070d70 : mov eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x000662c0 : xchg eax, ecx; or al, [rax]; add rsp, 0x80; ret
0x0005aea9 : add rsp, 8; mov eax, esi; pop rbx; pop rbp; ret
0x0010abb3 : sub eax, ecx; cmp sil, dl; cmovne eax, ecx; ret
0x00044496 : adc ecx, [rcx + rax - 0x1e]; call [r10 + rax*8]
0x00131d40 : mov eax, [rdi]; mov [rdx], eax; mov eax, 1; ret
0x00153202 : add ecx, [rbx + 0x357890e]; mov [rdi], ecx; ret
0x00097bdb : mov [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret
0x00001a0f : add [rax - 0x75], cl; cmp ecx, [rax - 0x7d]; ret
0x00096480 : mov [rdi + 0x10], edx; mov [rdi + 0x18], cl; ret
0x0015dcec : add [rax], al; add [rax], al; mov [rcx], dl; ret
0x00047995 : add [rax], eax; add [rax + 1], cl; clc ; jmp rax
0x0007c350 : add [rax], al; xor eax, eax; mov [rdi], rsi; ret
0x000b08db : mov al, 0; add [rax], al; mov rsi, rbp; call rbx
0x00097b9b : mov [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret
0x0002dea1 : add [rcx], 0; add [rbx + 0x5d], bl; pop r12; ret
0x00096ddc : mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x00131d52 : add al, 1; add [rax], al; add [rax + 1], bh; ret
0x0012c9a5 : add bl, al; nop [rax + rax]; mov [rsi], 0xc; ret
0x00138f11 : mov edi, edi; mov rax, [r15 + 8]; call [rax + 8]
0x00141a9e : add [rax], al; mov [rsi], rdi; xor eax, eax; ret
0x00131c96 : movsxd rax, [rcx + rsi*4]; add rax, rcx; jmp rax
0x0012d8ec : sub [rdi - 0x17], dh; mov [rdx + 0x20], rsi; ret
0x001412fe : add al, ch; cld ; fucomp st(4); jmp [rsi - 0x70]
0x00097cc4 : mov [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret
0x0009572b : mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x0001012e : movsxd rax, [r13 + rax*4]; add rax, r13; jmp rax
0x0012eda7 : pop rax; pop rbx; pop rbp; pop r12; pop r13; ret
0x000fb2fb : lea eax, [rip + 0x2d1def]; pop rbp; pop r12; ret
0x000963fe : mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; ret
0x0008adf2 : add [rax], al; add [rbx - 0x79f0ef06], al; ret 0
0x0016ed0d : movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00087261 : movsxd rdx, [rax + rdx*4]; add rdx, rax; jmp rdx
0x0009a2c4 : mov ss:[rdi + rdx - 4], ecx; mov [rdi], esi; ret
0x000c052d : mov [rdx], eax; mov eax, esi; add rsp, 0x48; ret
0x00173853 : int1 ; movzx edx, [rsi - 0xf]; sub eax, edx; ret
0x00096dbe : mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x000957d1 : mov [rdi + 0x10], edx; mov [rdi + 0x18], cx; ret
0x000d4e6e : add [r8], eax; add [rbx - 0x7bf0f505], al; ret 0
0x00037b1d : movsxd rbp, ebp; mov rdx, rbp; call [r13 + 0x38]
0x000cc95a : mov [rdi + 8], 1; mov [rdi], al; mov eax, 1; ret
0x0006243e : mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax
0x00096d34 : movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x000965ac : add [rax], al; add [rax], al; mov [rdi], dx; ret
0x00138fa0 : mov rax, [r15 + 8]; mov rdi, r15; call [rax + 8]
0x0001b777 : movsxd rdi, [r10 + rdi*4]; add rdi, r10; jmp rdi
0x0000aa14 : mov al, 0; add [rax], al; xor r9d, r9d; call r15
0x001739a4 : add al, [rax]; add [rbx - 0x7bf0ed07], al; ret 2
0x000c540c : add [rax], al; add [rax], al; mov eax, 0x7e; ret
0x000ee0db : add [rax], al; movups xmm[rsi + 0x70], xmm0; ret
0x00097c21 : mov [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret
0x0001d1dd : add [rax], al; add bl, dh; addps xmm0, xmm0; ret
0x0002200f : add [rcx], al; add rsp, 8; pop rbx; pop rbp; ret
0x000955de : add [rax], al; mov dx, [rsi]; mov [rdi], dx; ret
0x0010a626 : add eax, [rax]; add [rdx], al; call [rbx + 0x28]
0x0012c985 : add bl, al; nop [rax + rax]; mov [rsi], 0xa; ret
0x0009a737 : movsxd rax, [rsi + rdi*4]; add rax, rsi; jmp rax
0x000aaec9 : adc [rcx], al; add rsp, 8; pop rbx; pop rbp; ret
0x0000a40b : add [rax - 0x73], cl; add r9b, [rax + 0x39]; ret
0x0010f53c : sub al, 0; mov [rip + 0x2c00d0], 1; pop rbx; ret
0x00131d4e : add [rax], al; mov [rdi + 4], 1; mov eax, 1; ret
0x00066e8f : popfq ; add [rax], al; add [rax - 0x77], cl; ret
0x0006243f : mov edi, ebx; pop rbx; pop rbp; pop r12; jmp rax
0x0000f3ff : add [rcx], dh; rol [rbx - 0x6bf07f19], 0xc0; ret
0x0003cc22 : movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x00113926 : add [rdi + 8], dh; mov rax, rdi; sar rax, 6; ret
0x000474fb : movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x000fbc93 : add edi, ebx; sub al, 0; mov fs:[rax], 0x16; ret
0x0012ebb7 : add esp, 8; movzx eax, al; pop rbx; pop rbp; ret
0x0005fc96 : xor edx, edx; pop rbx; pop rbp; pop r12; jmp rax
0x000fb2fa : lea rax, [rip + 0x2d1def]; pop rbp; pop r12; ret
0x00108b8f : movsx eax, bl; add rsp, 8; pop rbx; pop rbp; ret
0x000ee0f4 : add [rax], al; mov [rsi], eax; xor eax, eax; ret
0x0012ebb6 : add rsp, 8; movzx eax, al; pop rbx; pop rbp; ret
0x000c4f4b : movsxd rax, [rdx + rsi*4]; add rax, rdx; jmp rax
0x000963a7 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; ret
0x00022c6e : push rsi; or [rcx - 0x3e], bh; xor eax, eax; ret
0x00036ff9 : movq mm0, [rsp - 0x18]; pinsrw xmm0, eax, 6; ret
0x00063157 : add [rax], al; mov [rax + 0x48], 0; pop rbx; ret
0x0000113b : movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x000ca89f : movsxd rax, [rdx + r15*4]; add rax, rdx; jmp rax
0x000bb1e2 : movsxd rax, [rdi + rdx*4]; add rax, rdi; jmp rax
0x000e55c3 : add eax, [rip + 0x2e45cf]; mov r8, rax; call r12
0x00097c3d : mov [rdi + 0xe], ecx; lea rax, [rdi + 0x16]; ret
0x0001f8e5 : adc [rax], eax; add [rcx - 0x7d], cl; call [rbx]
0x000dac37 : movsxd rdx, [r10 + rdx*4]; add rdx, r10; jmp rdx
0x00103eaa : xor [rcx], dh; rol [rbx - 0x69f0f601], 0xc0; ret
0x0016debf : add [rcx], dh; ror [rbx + 0x75163b17], 0xe4; ret
0x0013552f : add [rax], al; movups xmm[rdi + 0x30], xmm0; ret
0x00002627 : add [rax], al; add rsp, 8; pop rbx; pop rbp; ret
0x00095707 : movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x0003b191 : movsxd rax, [rax + rsi*4]; add rax, rdi; jmp rax
0x00000ecd : pop rsp; pop r13; pop r14; pop r15; pop rbp; ret
0x00170f19 : sub [rdx], eax; add [rax], al; xor eax, eax; ret
0x000d32ed : add [rbx - 0x7af7db8c], cl; div [rdx - 0xa]; ret
0x0009647f : mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; ret
0x0010f753 : add [rax - 0x75], cl; pop rbp; clc ; leave ; ret
0x0005ab7c : add [rax], al; add [rax], al; mov eax, 0x10; ret
0x0009be92 : mov [rdi + 0xc], eax; mov rax, rbx; pop rbx; ret
0x0009a2b5 : mov ss:[rdi + rdx - 8], rcx; mov [rdi], rsi; ret
0x0003d42e : movsxd rdx, ebp; mov rdi, rbx; call [r14 + 0x38]
0x00131d62 : add al, 0; add [rax], al; add [rax + 1], bh; ret
0x00038701 : movsxd rax, [rsi + rax*4]; add rax, rdx; jmp rax
0x00048c40 : movsxd rax, [rdi + rax*4]; add rax, rcx; jmp rax
0x0006276b : dec [rbx - 0x3b7cb7fa]; or [rbx + 0x5d], bl; ret
0x0011fec1 : mov [rax], edx; mov [r9], rax; mov eax, edx; ret
0x0005ca04 : popfq ; add [rax], al; add [rax - 0x7d], cl; ret
0x0012affa : add [rax], eax; add [rax], al; call [rax + 0x28]
0x00096dfd : mov [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; ret
0x0007a734 : add [rcx + rcx*4 - 6], cl; mov rdi, r8; call rax
0x00097c3c : mov [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret
0x000c052c : mov [rdx], r8d; mov eax, esi; add rsp, 0x48; ret
0x00097c5d : mov [rdi + 0xf], ecx; lea rax, [rdi + 0x17]; ret
0x00096d7b : mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x0017645c : movsxd r12, [rdx + r12*4]; add rdx, r12; jmp rdx
0x0006da55 : add [rax], al; lea rsi, [rip - 0x181e]; call rax
0x00080034 : add [rbp - 0xf], esi; xor eax, eax; pop rbx; ret
0x0012d28a : movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret
0x0006cba8 : add [rax], al; mov [rbx + 0x50], 0; pop rbx; ret
0x00000ecc : pop r12; pop r13; pop r14; pop r15; pop rbp; ret
0x0000a3ed : add [rax - 0x73], cl; add [rax + 0x39], r9d; ret
0x0002267e : add [rax], al; mov rax, rdi; cqo ; idiv rsi; ret
0x00096e64 : mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x0004415b : movsxd rbx, ebx; mov rdx, rbx; call [r13 + 0x38]
0x0008719e : add [rax], al; mov [rdi], sil; add rax, rdi; ret
0x0013ecbc : add [rax], al; add bl, ch; fidivr [rax - 1]; ret
0x0006e162 : add [rax], al; lea rsi, [rip - 0x1f2b]; call rax
0x000ccc0a : neg eax; pop r12; pop r13; pop r14; pop r15; ret
0x00097c5c : mov [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret
0x0001b48e : movsxd rdx, [rdi + rdx*4]; add rdx, rdi; jmp rdx
0x0005c146 : movsxd rax, [rdi + rax*4]; add rax, rdi; jmp rax
0x0011fe60 : mov [rax], ecx; mov [r9], rax; mov eax, edx; ret
0x000da203 : movsxd rdx, [rbp + rdx*4]; add rdx, rbp; jmp rdx
0x000955cc : add [rax], al; add [rax], al; mov [rdi], dh; ret
0x00096d5c : mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x0012d869 : lea esi, [rbp + 8]; mov rdi, rbx; call [rax + 8]
0x0014bac9 : adc [rdx + 8], dh; movaps xmm[rdi], xmm4; jmp r9
0x00097ca3 : mov [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret
0x0013551a : bswap eax; mov [rdx + 0xc], eax; mov eax, 1; ret
0x000956e8 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x000c0acb : add [rax], al; add [rbx + rcx*4 + 0x25], cl; ret
0x0006be9e : movzx eax, [rax]; pop r12; pop r13; pop r14; ret
0x00052502 : movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0000007e : int1 ; cmp al, 0; pop rax; pop rbx; pop rbp; ret
0x00096d48 : mov [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret
0x0000a429 : add [rax - 0x73], cl; add r9d, [rax + 0x39]; ret
0x0003aa9d : movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0011fec0 : mov [r8], r10d; mov [r9], rax; mov eax, edx; ret
0x000658ff : add [rax - 0x75], cl; mov rax, [rax + 0x4c]; ret
0x0012d868 : lea rsi, [rbp + 8]; mov rdi, rbx; call [rax + 8]
0x00138f10 : mov rdi, r15; mov rax, [r15 + 8]; call [rax + 8]
0x000956d4 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x000957d0 : mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x00175809 : movsxd rax, [rbp + rax*4]; add rbp, rax; jmp rbp
0x000957ac : mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x0002f63f : add [rax - 0x7d], cl; rol [rcx], 0xc6; jmp [rax]
0x0000d4af : movsxd rdi, [r11 + rsi*4]; add rdi, r11; jmp rdi
0x000bfcb0 : mov fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret
0x0009659c : add [rax], al; add [rax], al; mov [rdi], dl; ret
0x000c5813 : movsxd rax, [rdx + rbx*4]; add rax, rdx; jmp rax
0x00095768 : movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x0011ef27 : add [rcx], dh; ror [rcx - 0x76b7f3a9], 0x3e; ret
0x0015dcfc : add [rax], al; add [rax], al; mov [rcx], dx; ret
0x00092176 : mov eax, [rcx]; mov [rdx], ax; mov rax, rdi; ret
0x0009629e : add [rax], al; mov dl, [rsi]; mov [rdi], dl; ret
0x00086dd1 : add [rax], eax; mov rcx, r8; mov [rdx], rcx; ret
0x0006e4c5 : add [rax], al; lea rsi, [rip - 0x228e]; call rax
0x0009a7f1 : movsxd rax, [rsi + rdx*4]; add rax, rsi; jmp rax
0x000c8458 : add dh, [rcx]; rol [rbx - 0x6bf0fe02], 0xc0; ret
0x000fca30 : xor edx, edx; mov rdi, rbx; mov esi, 1; call rbp
0x000d0461 : movsxd rax, [rsi + r12*4]; add rax, rsi; jmp rax
0x00046853 : leave ; add [rax], al; add [rax + 0x63], cl; ret
0x0006de5c : add [rax], al; lea rsi, [rip - 0x1c25]; call rax
0x00097bbc : mov [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret
0x0005ca58 : pop rbx; pop r12; pop r13; pop r14; pop rbp; ret
0x00076179 : add eax, [rax]; add [rax - 0x7d], cl; call [rax]
0x00094ece : xor ah, ah; mov [rdx + 8], ah; mov rax, rdi; ret
0x000957ad : mov [rdi + 0x10], ecx; mov [rdi + 0x18], dh; ret
0x000b45d3 : add eax, [rax]; add [rbx + rcx*4 + 0xd], cl; ret
0x00096dfc : mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x0009a75f : movsxd rcx, [rsi + rax*4]; add rcx, rsi; jmp rcx
0x00095748 : movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x00168e87 : movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret
0x000680a1 : xor eax, eax; cmp [rdi + 0x18], 0; setne al; ret
0x00002b93 : pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00079c1c : add [rax], al; add [rax], al; mov eax, 0x16; ret
0x0004a53f : movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x0005b9aa : movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x000f7b68 : add [rax - 0x77], cl; clc ; mov [r8 - 1], 0; ret
0x00096e40 : mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x00138bf3 : add [rax], eax; add [rax], al; call [rax + 0x18]
0x00000287 : pop rbp; pop r12; pop r13; pop r14; pop r15; ret
0x0010fecb : add [rdi], cl; test [rbx - 0x37000000], esp; ret
0x00031931 : add ebx, eax; nop [rax + rax]; xor eax, eax; ret
0x00096ddd : mov [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; ret
0x000814ce : inc [rbx + 0x14e9ffc8]; idiv bh; jmp [rsi + 0xf]
0x0003ab3b : movsxd rax, [rax + rdx*4]; add rax, rsi; jmp rax
0x000c0381 : add [rcx + rcx*4 + 0x32], ah; add rsp, 0x18; ret
0x00138fa1 : mov eax, [rdi + 8]; mov rdi, r15; call [rax + 8]
0x0015dd15 : add al, bl; nop [rax + rax]; mov [rcx], edx; ret
0x0007de62 : sub al, bl; add [rax], eax; cmovne rax, rdx; ret
0x000e55c2 : add rax, [rip + 0x2e45cf]; mov r8, rax; call r12
0x0003352e : add [rax], al; add [rbp + 0x3b], dh; leave ; ret
0x0012d71d : mov al, ch; lea esp, [rdx - 2]; jmp [rsi + 0x2e]
0x00135567 : add [rax], al; movups xmm[rdi + 0x20], xmm0; ret
0x000d0511 : movsxd rax, [rcx + r14*4]; add rax, rcx; jmp rax
0x00097c7d : mov [rdi + 0x10], ecx; lea rax, [rdi + 0x18]; ret
0x001354ac : mov rax, [rax + 0x50]; mov [rsi + 0x10], rax; ret
0x0011b9e8 : mov rsi, r14; lea rdi, [rip + 0x2b2b1e]; call r12
0x00097c7c : mov [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret
0x00096efe : movq [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; ret
0x0014b9c1 : lea ecx, [rcx - 7]; lea rdx, [rdx - 0x40]; jmp r9
0x0010fca7 : add [rax], al; cmova eax, edx; add rsp, 0x28; ret
0x000228ab : add [rax], al; add [rbx - 0x75], bl; pop rax; ret
0x00096e65 : mov [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; ret
0x0006e850 : mov eax, [rdi + 0x10]; sub eax, [rsi + 0x10]; ret
0x0011fef2 : movsxd rdx, eax; add rdi, rdx; mov [r9], rdi; ret
0x00142e69 : add al, ch; add [rdi], eax; clc ; jmp [rsi + 0xf]
0x0007f8a3 : add [rdx + rcx + 0x5b], dh; pop rbp; pop r12; ret
0x000e029a : add al, ch; pop rax; std ; int1 ; jmp [rsi + 0xf]
0x0001d91d : mov [rbx + 0x40], esi; xor eax, eax; pop rbx; ret
0x0000de56 : add [rax], al; mov rax, [rsi + rax*8 + 0x80]; ret
0x00095788 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x00134b7c : mov rax, [rax + 0x40]; mov [rsi + 0x10], rax; ret
0x0007cb7b : xor [rax], al; add [rax], al; add rsp, 8; jmp rax
0x00103752 : add [rbx + rcx*4 + 0x7a], ecx; sub [rcx], bh; ret
0x00131d8e : bswap eax; mov [rdi + 0xa8], eax; mov eax, 1; ret
0x000d2d63 : add [rax], al; add [rbp + 0x41], bl; pop rsp; ret
0x0000f665 : mov edx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x00095810 : mov [rdi + 0x10], edx; mov [rdi + 0x18], ecx; ret
0x00099643 : mov [rdi], dx; xor ch, ch; mov [rdi + 2], ch; ret
0x00096e1d : mov [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; ret
0x00096e1c : mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x00097d5e : movq [rdi + 0xf], mm2; lea rax, [rdi + 0x1f]; ret
0x001530a0 : movq [rdi + 0xa], mm0; movdqu xmm[rdi], xmm1; ret
0x000fbee6 : mov edi, ebx; mov edx, r12d; mov esi, 1; call rbp
0x00152fc0 : movq [rdi + 0xc], mm0; movdqu xmm[rdi], xmm1; ret
0x000620c9 : mov [rax + 0x10], esi; mov [rax + 0x40], rcx; ret
0x000219cd : add [rax - 1], bh; pop rbx; pop rbp; pop r12; ret
0x00096d5d : mov [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; ret
0x00161c64 : push -0x7ffffffa; cmp [rcx], al; sbb rax, -1; ret
0x0012c9ac : add [rax], al; add [rax], al; mov [rsi], 0xc; ret
0x0013c851 : mov eax, [rdi + 0x18]; sub rax, [rdi + 0x20]; ret
0x0003a1b1 : add [rax - 0x75], cl; xor eax, 0x38fad7; call rax
0x00097d03 : mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret
0x00052340 : add [rax - 0x75], cl; xor eax, 0x377948; call rax
0x000921a5 : mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret
0x000695a6 : mov [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret
0x0015dd5c : add [rax], al; add [rax], al; mov [rcx], rdx; ret
0x000957ef : mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x00131ca3 : bswap eax; mov [rdi + 0xb4], eax; mov eax, 1; ret
0x00178167 : add [rax], al; mov rax, [rsp]; add rsp, 0x38; ret
0x00134c33 : bswap eax; mov [rdi + 0x54], eax; mov eax, 1; ret
0x00062088 : mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x00096ea3 : mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x00068190 : mov rax, [rdi + 0x28]; sub rax, [rdi + 0x20]; ret
0x0010fd75 : adc [rbx + 0x31], bl; rol [rcx + 0x5c], 0x5d; ret
0x00096ebe : movq [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; ret
0x000ce2fd : add cl, [rcx + 1]; sal [rcx], cl; jmp [rsi + 0xf]
0x0005e458 : add [rsi + 0x48], esi; mov eax, edx; pop rbx; ret
0x00111ad1 : add [rax], 0; add [rax - 0x77], cl; imul eax; ret
0x0016975a : add [rbx + 0x14840c0], al; clc ; vzeroupper ; ret
0x0011b9e9 : mov esi, esi; lea rdi, [rip + 0x2b2b1e]; call r12
0x000d4e6f : add [rax], eax; add [rbx - 0x7bf0f505], al; ret 0
0x000957f0 : mov [rdi + 0x10], edx; mov [rdi + 0x17], ecx; ret
0x0015a857 : adc [rax - 0x7b], cl; ror [rdi], 0x85; call [rbx]
0x00152ee0 : movq [rdi + 0xe], mm0; movdqu xmm[rdi], xmm1; ret
0x00131be0 : mov eax, [rax + 0xa0]; mov [rsi + 0x10], rax; ret
0x0006e832 : add cl, [rax - 0x7b]; sal [rbp - 0x10], 0xf3; ret
0x00134cf3 : bswap eax; mov [rdi + 0x58], eax; mov eax, 1; ret
0x0009580f : mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x00096e83 : mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x0011ffb6 : mov [rax + 1], bl; mov [rax + 2], 0; pop rbx; ret
0x00100462 : mov [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret
0x0006069c : mov [rcx], ebp; add rsp, 8; pop rbx; pop rbp; ret
0x00086dd2 : add [rcx + rcx*4 - 0x3f], cl; mov [rdx], rcx; ret
0x000c53ce : sbb [rsp + rsi*2 + 0x2e], edx; mov eax, 0x7f; ret
0x0006968f : mov [rbx + 0x10], eax; xor eax, eax; pop rbx; ret
0x00111f56 : mov rbx, rax; mov rax, rbx; pop rbx; pop rbp; ret
0x00152f50 : movq [rdi + 0xd], mm0; movdqu xmm[rdi], xmm1; ret
0x0004a087 : add [rax - 0x75], cl; xor eax, 0x37fc01; call rax
0x0012c98c : add [rax], al; add [rax], al; mov [rsi], 0xa; ret
0x001249c1 : mov eax, [rip + 0x2a5351]; mov rax, fs:[rax]; ret
0x00131cbb : add bh, [rax + 1]; movups xmm[rdi + 8], xmm0; ret
0x00096ede : movq [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; ret
0x00062089 : mov [rax + 0x10], edx; mov [rax + 0x40], rcx; ret
0x0000ac49 : add [rax], al; add [rbx + 0x41], bl; pop rsp; ret
0x0009a3ec : adc [rcx - 0x30], eax; movups xmm[r11], xmm4; ret
0x00137316 : lea edx, [rip + 0x3f04]; mov rdi, rbx; call [rax]
0x0015bcb1 : mov eax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x00097d3e : movq [rdi + 0xe], mm2; lea rax, [rdi + 0x1e]; ret
0x00097cc5 : mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1a]; ret
0x00113a6d : add [rax], al; nop ; mov eax, edi; ror ax, 8; ret
0x0012161f : add [rax - 0x7c], al; div [rsp + rdx + 0x78]; ret
0x000320ed : mov [rdi], r8; shr r9, cl; mov [rdi + 8], r9; ret
0x00031426 : adc [rax + 1], bh; pop rbx; pop rbp; pop r12; ret
0x000f28a7 : add al, ch; adc ebp, -0x10; dec [rax + 0x39]; ret
0x00138318 : lea edx, [rip + 0x296b52]; mov fs:[rax], rdx; ret
0x0005f97a : sbb [rax - 0x77], cl; fistp [rbx + 0x5d]; jmp rax
0x0012d8cc : mov [rdx + 0x58], edi; mov [rdx + 0x68], rcx; ret
0x000b0025 : sbb [rdi + 0x18], edi; mov rax, rbx; pop rbx; ret
0x00049d57 : add [rax - 0x75], cl; xor eax, 0x37ff31; call rax
0x000fe7cd : add [rax], al; add [rax - 0x75], cl; pop rax; ret
0x000cced5 : sub [rax + 1], bh; pop rbx; pop rbp; pop r12; ret
0x00095717 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; ret
0x00134b7d : mov eax, [rax + 0x40]; mov [rsi + 0x10], rax; ret
0x0009586a : movq [rdi], mm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x00152e70 : movq [rdi + 0xf], mm0; movdqu xmm[rdi], xmm1; ret
0x00068191 : mov eax, [rdi + 0x28]; sub rax, [rdi + 0x20]; ret
0x00046b95 : add [rax - 0x75], cl; xor eax, 0x3830f3; call rax
0x00003b9f : mov [rax + 0x50], ecx; mov [rax + 0x54], edx; ret
0x00097bfb : mov [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret
0x00068080 : mov rax, [rdi + 0x40]; sub rax, [rdi + 0x38]; ret
0x0017253c : add [rax], al; add [rax], al; lea rax, [rdi]; ret
0x00153030 : movq [rdi + 0xb], mm0; movdqu xmm[rdi], xmm1; ret
0x00138317 : lea rdx, [rip + 0x296b52]; mov fs:[rax], rdx; ret
0x001249c0 : mov rax, [rip + 0x2a5351]; mov rax, fs:[rax]; ret
0x00131dbb : bswap eax; mov [rdi + 0xb8], eax; mov eax, 1; ret
0x000f0006 : adc [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x0000f664 : mov rdx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x00131bdf : mov rax, [rax + 0xa0]; mov [rsi + 0x10], rax; ret
0x0013561a : bswap eax; mov [rdx + 0x10], eax; mov eax, 1; ret
0x00068081 : mov eax, [rdi + 0x40]; sub rax, [rdi + 0x38]; ret
0x0013cc67 : add bl, al; nop [rax]; mov eax, [rdi + 0x28]; ret
0x000fbee5 : mov rdi, rbx; mov edx, r12d; mov esi, 1; call rbp
0x00097ce3 : mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret
0x00100463 : mov [rax], edx; add rsp, 8; pop rbx; pop rbp; ret
0x00065570 : adc [rax - 1], bh; pop rbx; pop rbp; pop r12; ret
0x0003d3de : add [rax - 0x75], cl; xor eax, 0x38c8aa; call rax
0x000fca5d : add [rax], r8b; add rsp, 8; pop rbx; pop rbp; ret
0x00137d9a : add [rax + 1], bh; pop rbx; pop rbp; pop r12; ret
0x00128996 : mov r8, rbp; mov rcx, r14; mov rdi, r13; call r12
0x0013c850 : mov rax, [rdi + 0x18]; sub rax, [rdi + 0x20]; ret
0x000965cc : add [rax], al; add [rax], al; mov [rdi], edx; ret
0x00099632 : mov [rdi], dl; xor ch, ch; mov [rdi + 1], ch; ret
0x00065901 : mov eax, [rdi + 0x48]; mov eax, [rax + 0x4c]; ret
0x0009582a : movq [rdi], mm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x00096d9b : mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x000c53f6 : add bl, al; nop [rax + rax]; mov eax, 0x7d00; ret
0x0010f8f7 : add [rax], al; nop [rax]; mov rax, fs:[0x10]; ret
0x0009660c : add [rax], al; add [rax], al; mov [rdi], rdx; ret
0x000fc0e2 : dec [rbx + rcx*4 + 0x5f]; or [rcx - 0xa], al; ret
0x000625bf : mov eax, [rsi]; add rsp, 8; pop rbx; pop rbp; ret
0x00065900 : mov rax, [rdi + 0x48]; mov eax, [rax + 0x4c]; ret
0x00160050 : mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret
0x00097d1e : movq [rdi + 0xd], mm2; lea rax, [rdi + 0x1d]; ret
0x001354ad : mov eax, [rax + 0x50]; mov [rsi + 0x10], rax; ret
0x000f94e5 : dec [rbx + 0x2d0b943d]; add al, ch; jmp [rax - 1]
0x0017440f : add [rcx], eax; imul rax, rdx; shr rax, 0x38; ret
0x00097b84 : movdqu xmm[rdi], xmm0; lea rax, [rdi + 0x10]; ret
0x0000f087 : add [rax - 0x7d], cl; clc ; dec [rax - 0x77]; ret
0x00031fe3 : mov [rdi], r8; shl r9, cl; mov [rdi - 8], r9; ret
0x00120303 : push [rbp + 0x12]; mov rax, -1; mov rdx, rax; ret
0x0013ccef : sbb [r14 + 0xd], r14b; add [rdi + 0x28], esi; ret
0x00111f57 : mov ebx, eax; mov rax, rbx; pop rbx; pop rbp; ret
0x000ab291 : mov r9, r15; mov rsi, r13; mov rdi, r12; call rbp
0x0009584a : movq [rdi], mm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x00177046 : add [rax + 9], cl; fmul [rdi]; xchg eax, ebp; ret
0x00097bbd : mov [rdi + 0x10], ecx; lea rax, [rdi + 0x12]; ret
0x0011f7c4 : add bl, al; nop cs:[rax + rax]; xor eax, eax; ret
0x0013be9c : mov esi, ebp; mov rdi, rbp; xor eax, eax; call r8
0x00137315 : lea rdx, [rip + 0x3f04]; mov rdi, rbx; call [rax]
0x0010fd89 : add [rax], al; add [rcx + 0x5c], al; pop rbp; ret
0x000695a7 : mov [rbx + 0x10], eax; mov rax, rbx; pop rbx; ret
0x0015bcb0 : mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x00096bce : add [rax], al; mov [rdi], dh; lea rax, [rdi]; ret
0x00138c10 : pushfq ; lodsd eax, [rsi]; std ; jmp [rsi - 0x70]
0x0012d8cb : mov [rdx + 0x58], rdi; mov [rdx + 0x68], rcx; ret
0x0001f29c : add al, [rax]; add [rbx + 0x5d], bl; pop r12; ret
0x000c32bf : add [rax], al; cmovne rdx, rax; mov rax, rdx; ret
0x00079504 : add [rax - 0x73], ecx; clc ; cmovne rax, rcx; ret
0x00131cd7 : add [rax], al; add [rdi], cl; adc [rdx], eax; ret
0x000956c0 : movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; ret
0x000759b4 : xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret
0x0001cc63 : adc [rdi], eax; and rax, rdx; movq xmm0, rax; ret
0x00177be0 : add eax, [rax]; add [rcx], dh; dec [rax + 9]; ret
0x00102177 : add [rax], al; add [rax], al; cmovb rax, rdx; ret
0x0013ce99 : add [rax], al; nop [rax + rax]; xor eax, eax; ret
0x00134cc6 : bswap eax; mov [rdi + 0x48], eax; mov eax, 1; ret
0x0013be9b : mov rsi, r13; mov rdi, rbp; xor eax, eax; call r8
0x000318f3 : mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret
0x0000b86f : adc eax, [rax]; mov [rbx + 0x10], 0; pop rbx; ret
0x00131d4d : add [rax], r8b; mov [rdi + 4], 1; mov eax, 1; ret
0x0009a473 : adc [rdi + 0x30], edi; movups xmm[r11], xmm8; ret
0x00096581 : movq [rdi + 0x10], mm2; mov [rdi + 0x20], cl; ret
0x000c044a : add [rax], al; mov fs:[rdx], esi; add rsp, 8; ret
0x000f5104 : sub edx, eax; test eax, eax; cmovns eax, edx; ret
0x000620c8 : mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x000c5436 : add bl, al; nop [rax + rax]; mov eax, 0xfc17; ret
0x000f3a84 : add [rax], al; add [rax], al; cmova eax, edx; ret
0x00038e3f : add bh, al; test [rax], eax; idiv edi; call [rax]
0x0001e020 : add [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x0015dd1c : add [rax], al; add [rax], al; mov [rcx], edx; ret
0x0006968e : mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x0009c681 : lea r9, [rsp + 0x28]; lea rcx, [rax + 4]; call rbx
0x0007ea76 : dec [rax - 0x7d]; clc ; add [rax - 0x77], ecx; ret
0x001746b6 : add [rcx + 9], cl; fimul [rdi]; xchg eax, ebp; ret
0x0007bd7d : mov [rbx + 8], esi; pop rbx; pop rbp; pop r12; ret
0x00128d05 : mov esi, esp; mov rdi, rbx; mov rcx, r13; call r10
0x0013c992 : sub [rcx], bh; sal [rbx + 9], 1; xor eax, eax; ret
0x0001f8a0 : mov rsi, r13; mov rdi, r14; mov rdx, r12; call rbp
0x000cc8c6 : add [rax], al; mov [rdi + 8], 2; xor eax, eax; ret
0x0013563b : add [rax], al; add bl, al; nop ; xor eax, eax; ret
0x0013befd : mov rsi, r13; mov rdi, rbp; xor eax, eax; call rcx
0x00033a22 : mov [rdi + 8], r9; mov [rdx], eax; mov eax, 2; ret
0x000f52a9 : dec [rax - 0x77]; fcomp [rbx + 0x5d]; pop r12; ret
0x00020d11 : lea ebx, [rdi + rax]; mov rax, [rsp + 8]; call rax
0x0013befe : mov esi, ebp; mov rdi, rbp; xor eax, eax; call rcx
0x0017186e : int1 ; dec [rax + 0x6f]; pop rcx; jmp [rdx - 0x2f]
0x0003b138 : add [rax], eax; add [rax], al; mov r8d, 1; jmp rax
0x0011fc4a : adc [rbx - 0x73], al; add [rdx], r8d; pop rbx; ret
0x000c464d : add [rax], al; add [rax + 0x68], bh; syscall ; ret
0x0001ee59 : lea edx, [rax - 1]; mov [rip + 0x3ab076], edx; ret
0x00128997 : mov eax, ebp; mov rcx, r14; mov rdi, r13; call r12
0x0006d771 : adc edi, [rax + 1]; pop rbx; pop rbp; pop r12; ret
0x000fbc90 : mov rax, [rip + 0x2cdf01]; mov fs:[rax], 0x16; ret
0x0001f8a1 : mov esi, ebp; mov rdi, r14; mov rdx, r12; call rbp
0x001183ef : mov edx, edi; mov rsi, r14; mov rdi, r13; call rax
0x000c5404 : add bl, al; nop cs:[rax + rax]; mov eax, 0x7e; ret
0x0003a1b0 : add [rax], al; mov rsi, [rip + 0x38fad7]; call rax
0x000ee343 : xor edx, edx; xor esi, esi; mov rdi, rbx; call rax
0x00080166 : add [rax], al; add [rax], al; cmovne rax, rdi; ret
0x000c53fc : add [rax], al; add [rax], al; mov eax, 0x7d00; ret
0x000c465d : add [rax], al; add [rax + 0x6c], bh; syscall ; ret
0x0013c03a : mov [rsp], eax; mov rax, [rbp + 8]; call [rax + 8]
0x0002dea2 : add [rax], eax; add [rbx + 0x5d], bl; pop r12; ret
0x00097fe4 : movq [rdi + 0x30], mm7; lea rax, [rdi + 0x40]; ret
0x0001d1d0 : add [rdi], bh; movd xmm0, eax; mov [rdi], edx; ret
0x0001f7eb : mov rdx, r12; mov rsi, rbx; mov rdi, r14; call rbp
0x00023561 : mov eax, 1; mov [rsi + 0xe], ax; xor eax, eax; ret
0x0002233c : add [rax], al; xor esi, esi; mov rdi, r9; call rdx
0x00031fe4 : mov [rdi], eax; shl r9, cl; mov [rdi - 8], r9; ret
0x0000e627 : add [rcx - 0x7d], eax; dec [rip - 0x7cb79d8c]; ret
0x0011ffb7 : pop rax; add esi, eax; add al, [rax]; pop rbx; ret
0x000ed840 : movzx eax, [rdi]; mov [rsi], ax; xor eax, eax; ret
0x0007aff6 : mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax
0x0017197b : adc [rdi], rdx; vmovups zmm[rsi - 0x40], zmm2; ret
0x00128ea0 : mov esi, ebp; mov rdi, rbp; mov rcx, r14; call r10
0x00099672 : mov [rdi], edx; xor ch, ch; mov [rdi + 4], ch; ret
0x000c8678 : lea rax, [rbx + 2]; pop rbx; pop rbp; pop r12; ret
0x00062560 : add [rsi - 1], bh; mov rdi, rbx; call [rax + 0x18]
0x00046b94 : add [rax], al; mov rsi, [rip + 0x3830f3]; call rax
0x0001d1db : add [rax], 0; add [rax], al; addss xmm0, xmm0; ret
0x00020d10 : lea rbx, [r15 + rax]; mov rax, [rsp + 8]; call rax
0x001624a2 : lea eax, [rdx + 7]; cmp [rax], 1; sbb rax, -1; ret
0x0006cd30 : add [rsi - 1], bh; mov rdi, rbx; call [rbp + 0x18]
0x000f3cac : adc eax, [rbx + 0x1674a1f8]; neg eax; pop rbx; ret
0x00100d2a : lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret
0x00096f1e : movq [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; ret
0x0000eeeb : mov rax, [rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x000fca1d : mov rbx, rdi; xor edx, edx; xor esi, esi; call rbp
0x00108c9c : mov eax, 0; cmovns rax, [rbx + 0x28]; pop rbx; ret
0x00049d56 : add [rax], al; mov rsi, [rip + 0x37ff31]; call rax
0x00083bc0 : add al, [rbx + 0x194501fb]; fild [rcx - 0x7d]; ret
0x000cebd1 : add [rdi], cl; xchg eax, ebp; rol [rcx], 0xc0; ret
0x001461e3 : not eax; and [rdi + rdx*8], rax; xor eax, eax; ret
0x000b169d : add [rax], al; add [rax + 0xc9], bh; syscall ; ret
0x000c462d : add [rax], al; add [rax + 0x66], bh; syscall ; ret
0x000ab292 : mov ecx, edi; mov rsi, r13; mov rdi, r12; call rbp
0x000ccea1 : add [rax + 1], edi; pop rbx; pop rbp; pop r12; ret
0x0009563e : add [rax], al; mov rdx, [rsi]; mov [rdi], rdx; ret
0x0012d796 : mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0013b1f5 : xor eax, eax; mov [rsp], 2; mov rdi, rsp; call rdx
0x0001d043 : add [rax - 0x3791f09a], al; movss [rdi], xmm1; ret
0x00111ad2 : add [rax], al; add [rax - 0x77], cl; imul eax; ret
0x000996c3 : mov [rdi], rdx; xor ch, ch; mov [rdi + 8], ch; ret
0x000fca1e : mov ebx, edi; xor edx, edx; xor esi, esi; call rbp
0x0005233f : add [rax], al; mov rsi, [rip + 0x377948]; call rax
0x0005ab74 : add bl, al; nop cs:[rax + rax]; mov eax, 0x10; ret
0x0001fbf3 : mov rdx, r12; mov rsi, r13; mov rdi, rbx; call rbp
0x00048129 : add [rax], eax; add [rax], al; mov esi, 1; jmp rax
0x000ab10d : mov ecx, ebx; mov rdx, r14; mov rsi, r13; call rbp
0x0000de55 : add [rax], r8b; mov rax, [rsi + rax*8 + 0x80]; ret
0x0007bd7c : mov [rbx + 8], rsi; pop rbx; pop rbp; pop r12; ret
0x000996c4 : mov [rdi], edx; xor ch, ch; mov [rdi + 8], ch; ret
0x000ab10c : mov rcx, rbx; mov rdx, r14; mov rsi, r13; call rbp
0x000c8679 : lea eax, [rbx + 2]; pop rbx; pop rbp; pop r12; ret
0x0006d42f : add [rsi - 1], bh; mov rdi, rbx; call [r15 + 0x18]
0x00033786 : add [rax], eax; add [rax], al; mov [rdi], rsi; ret
0x000680ee : add [rax], al; mov eax, [rdi]; and eax, 0x200; ret
0x000228ac : add [rax], al; pop rbx; mov eax, [rax + 0x58]; ret
0x00137c7b : mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax
0x0004a086 : add [rax], al; mov rsi, [rip + 0x37fc01]; call rax
0x0001f7d0 : mov rdx, r12; mov rsi, r14; mov rdi, r13; call rbp
0x0001f7ec : mov edx, esp; mov rsi, rbx; mov rdi, r14; call rbp
0x000e45f0 : push rbp; or [rax], eax; add [rax - 0x7d], cl; ret
0x000472ef : add [rax], al; add [rbx - 0x51f43], al; call [rax]
0x000fbc91 : mov eax, [rip + 0x2cdf01]; mov fs:[rax], 0x16; ret
0x0017197c : adc [rdi], edx; vmovups zmm[rsi - 0x40], zmm2; ret
0x00099644 : mov [rdi], edx; xor ch, ch; mov [rdi + 2], ch; ret
0x000c543c : add [rax], al; add [rax], al; mov eax, 0xfc17; ret
0x000450ca : inc [rcx - 1]; push rbp; cmp [rax + 0x39], cl; ret
0x000ed562 : dec [rbx + 0x438d0455]; add [rax - 0x7d], ecx; ret
0x000b5478 : add [rbp + 0xd], dh; mov rax, rdx; add rsp, 8; ret
0x000320ee : mov [rdi], eax; shr r9, cl; mov [rdi + 8], r9; ret
0x000680be : add [rax], al; mov eax, [rdi]; and eax, 0x804; ret
0x001183ee : mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax
0x0009c515 : lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx
0x0007b585 : mov rdi, r13; mov rdx, rbx; mov rsi, r12; call rax
0x0012d797 : mov [rsp], eax; mov rax, [rdi + 8]; call [rax + 8]
0x00132807 : xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx
0x0011dbf0 : mov fs:[rbp], r12d; pop rbx; pop rbp; pop r12; ret
0x000c8568 : lea rax, [rbx + 8]; pop rbx; pop rbp; pop r12; ret
0x000c461d : add [rax], al; add [rax + 0x6e], bh; syscall ; ret
0x001461e2 : not rax; and [rdi + rdx*8], rax; xor eax, eax; ret
0x0011fb90 : add [rax], al; sub esi, 1; mov [rdi + 1], sil; ret
0x00128e9f : mov rsi, r13; mov rdi, rbp; mov rcx, r14; call r10
0x000c8569 : lea eax, [rbx + 8]; pop rbx; pop rbp; pop r12; ret
0x0007b586 : mov edi, ebp; mov rdx, rbx; mov rsi, r12; call rax
0x00137c7c : mov edx, ebp; mov rsi, r12; mov rdi, rbp; call rax
0x0013c039 : mov [rsp], rax; mov rax, [rbp + 8]; call [rax + 8]
0x00128d04 : mov rsi, r12; mov rdi, rbx; mov rcx, r13; call r10
0x0013b46d : mov rax, [rdi + 8]; lea rsi, [rsp + 8]; call [rax]
0x0001e852 : add [rax], eax; add [rax], al; cmove eax, edx; ret
0x0000eeec : mov eax, [rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x0006de06 : add [rax], al; sub r8, rcx; lea eax, [r8 - 1]; ret
0x001624a1 : lea rax, [rdx + 7]; cmp [rax], 1; sbb rax, -1; ret
0x000955fe : add [rax], al; mov edx, [rsi]; mov [rdi], edx; ret
0x0009ca86 : lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx
0x0003d3dd : add [rax], al; mov rsi, [rip + 0x38c8aa]; call rax
0x0011f7b8 : add al, [rcx]; add [rax], al; cmovne eax, edx; ret
0x001289f7 : xor eax, eax; mov rcx, r14; mov rdi, r13; call r12
0x0001fbf4 : mov edx, esp; mov rsi, r13; mov rdi, rbx; call rbp
0x0005ab8e : add [rax], al; add [rdx + 4], 1; xor eax, eax; ret
0x0010fd10 : push rbp; xor eax, eax; mov rbp, rsp; pop rbp; ret
0x00097d7e : movq [rdi + 0x10], mm2; lea rax, [rdi + 0x20]; ret
0x0009588a : movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0013b46e : mov eax, [rdi + 8]; lea rsi, [rsp + 8]; call [rax]
0x001289f6 : xor r8d, r8d; mov rcx, r14; mov rdi, r13; call r12
0x0013b0f3 : mov edx, esi; mov rsi, rbx; mov rdi, r12; call r13
0x0001f7d1 : mov edx, esp; mov rsi, r14; mov rdi, r13; call rbp
0x0007aff7 : mov edx, ebx; mov rsi, r14; mov rdi, r13; call rax
0x0007a733 : add [rax], al; mov rdx, r15; mov rdi, r8; call rax
0x001334c3 : add [rsi + 8], bh; mov rdi, rbp; call [rax + 0x30]
0x0009ca85 : lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx
0x000c463d : add [rax], al; add [rax + 0x6b], bh; syscall ; ret
0x000437ef : dec [rax - 0x75]; test [rax - 0x7d000000], esp; ret
0x0007c9c1 : mov edi, [rcx]; add [rax], eax; cmove rax, rdx; ret
0x0009c516 : lea ecx, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx
0x0006de05 : add [rax], r8b; sub r8, rcx; lea eax, [r8 - 1]; ret
0x000bf501 : mov esi, [rsp + 0x60]; mov rdi, [rsp + 8]; call r12
0x000fe2bf : mov [rax], al; add [rax], al; pop rbx; pop rbp; ret
0x00134c49 : mov [rdi + 0x18], 1; movups xmm[rdi + 8], xmm0; ret
0x0014273a : add [rax], al; add [rdx - 1], bh; mov eax, edx; ret
0x000fc071 : mov edi, [rsp + 8]; mov rax, [rsp + 0x10]; call rax
0x0013b43a : lea rsi, [rsp + 0x10]; mov rdi, rbx; call [rax + 8]
0x0001ee1c : add [rax], al; nop ; mov eax, [rip + 0x3ab0b6]; ret
0x0012afb4 : mov esi, ebp; mov rax, [rdi + 0x38]; call [rax + 8]
0x00137f59 : lea esi, [rdx + 8]; mov rdi, rbx; call [rax + 0x10]
0x0009c20e : add [rax + rax], cl; add [rsp + rcx - 0xd], dh; ret
0x000ec04e : mov [rbp + 8], 0; add rsp, 8; pop rbx; pop rbp; ret
0x00131ecc : mov [r12 + 0xa8], ebp; bswap ebp; call [rax + 0x18]
0x0015349e : add [rax], al; movzx edx, [rsi]; mov [rdi], dl; ret
0x000c052b : mov fs:[rdx], r8d; mov eax, esi; add rsp, 0x48; ret
0x0001ce90 : xor ecx, ecx; addsd xmm0, xmm0; mov [rdi], ecx; ret
0x0012a7d6 : mov eax, [rsp + 8]; mov rdi, rbx; call [rax + 0x20]
0x00024027 : add al, 1; add [rax], al; add [rax - 0x7d], cl; ret
0x0007b40e : add [rax], al; mov rsi, rbx; mov rdi, r12; call rax
0x0006d1ba : lea rbx, [rcx + 1]; mov rdi, r15; call [rax + 0x18]
0x0016008f : add [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret
0x00131eeb : mov rsi, [rsp + 0x18]; mov rdi, rbx; call [rax + 8]
0x0012b717 : mov rax, [r15 + 8]; mov rdi, r15; call [rax + 0x20]
0x00131ecd : mov [rsp + 0xa8], ebp; bswap ebp; call [rax + 0x18]
0x0012bd84 : mov rax, [rbx + 8]; mov rdi, rbx; call [rax + 0x20]
0x0000f5b5 : movzx eax, [rax + rdi*2 + 0x100]; and eax, esi; ret
0x00062542 : add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax
0x001375dc : mov rdx, [rax + 8]; mov rdi, rax; call [rdx + 0x20]
0x00094f38 : xor ah, ah; mov [rdx + 0x10], ah; mov rax, rdi; ret
0x00030991 : xor rax, fs:[0x30]; mov edi, [rsp + 0x24]; call rax
0x000e0732 : add [rax], al; add [rax], al; mov [rsi + 8], 0; ret
0x0009bf8f : xchg [rbp - 0x7b], eax; sal [rbp - 0x35], 0xf3; ret
0x0007ad87 : mov [rip + 0x3518eb], 1; mov eax, ebx; pop rbx; ret
0x0009de66 : sub al, 1; add [rax], al; add [rax - 0x7d], cl; ret
0x0003b1e6 : mov [rbp - 0x518], 0; mov [rbp - 0x528], 1; jmp rax
0x0010fb66 : add eax, [rax]; add [rax], al; cmovne eax, edx; ret
0x0010321d : sub al, 0; mov rax, [rax + 0x18]; add [rax], 1; ret
0x00138fb3 : mov eax, [rdi + 8]; mov rdi, r15; call [rax + 0x28]
0x000c8393 : mov [rbx + 8], 0; add rsp, 8; pop rbx; pop rbp; ret
0x00072edd : mov [rsp + 0x18], ebx; mov [rsp + 8], rax; call rcx
0x0012af9d : mov esi, [rsp + 0x10]; mov rdi, rbp; call [rax + 8]
0x00021d62 : xor rdx, fs:[0x30]; mov rdi, [rax + 0x20]; call rdx
0x000fbed1 : mov rbx, rdi; xor esi, esi; mov r12d, edx; call rbp
0x0012c56b : mov rdi, [rsp + 0x10]; mov rcx, [rsp + 8]; call rcx
0x0010b76c : mov rdx, rax; mov edi, 0x2000005; call [r13 + 0x28]
0x000d626c : xchg eax, ebp; add [rax], 0; add [rax + 1], cl; ret
0x0012af05 : adc [rax], al; add [rax], al; pop rbx; pop rbp; ret
0x00045284 : inc [rcx]; add [rax], al; add [rax + 0x63], cl; ret
0x000e7b94 : mov eax, 5; pop rbx; pop rbp; pop r12; pop r13; ret
0x0013c2b1 : mov eax, [rdi + 8]; mov rsi, rsp; call [rax + 0x40]
0x000c3651 : add al, 0; mov eax, [rsp + 0xc]; add rsp, 0x18; ret
0x0005a1d8 : sbb [rax], dl; add [rax], al; pop rbx; pop rbp; ret
0x0015342e : add [rax], al; movzx edx, [rsi]; mov [rdi], dx; ret
0x000700e5 : mov eax, 1; pop rbx; pop rbp; pop r12; pop r13; ret
0x0012afb3 : mov rsi, rbp; mov rax, [rdi + 0x38]; call [rax + 8]
0x0010261e : dec [rax - 0x7b]; sal [rsp + rdx + 0x48], 0x89; ret
0x000226f3 : mov eax, [rax]; pop rbx; mov eax, [rax + 0x58]; ret
0x0013b0f2 : mov edx, r14d; mov rsi, rbx; mov rdi, r12; call r13
0x0010a622 : mov rdx, rax; mov edi, 0x2000003; call [rbx + 0x28]
0x0006beac : add [rax], al; add [rax], al; movzx eax, [rdx]; ret
0x000fca50 : add esp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax
0x00065042 : lea esi, [rdi + 0x58]; mov rdi, rax; call [rax + 8]
0x0009db16 : sbb al, 1; add [rax], al; add [rax - 0x7d], cl; ret
0x0013c5f6 : add [rax], al; mov rax, [rdi + 8]; jmp [rax + 0x40]
0x0007d958 : add [rax + rax], al; add [rdx + rbp - 9], dh; ret 0
0x00064401 : add [rax], al; add [rsi - 1], bh; call [r13 + 0x18]
0x000fed2a : add al, [rax]; add [rax], al; pop rbx; pop rbp; ret
0x00131f01 : mov rsi, rbx; mov rax, [rdi + 0x38]; call [rax + 8]
0x0011ffb5 : dec [rax + 0x40c60158]; add al, [rax]; pop rbx; ret
0x0012b8f1 : mov rax, [r13 + 8]; mov rdi, r13; call [rax + 0x20]
0x000fca4f : add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax
0x000fbf19 : mov eax, ebp; mov esi, 3; pop rbp; pop r12; jmp rax
0x00072fa2 : mov [rsp + 0x18], rdx; mov [rsp + 8], rax; call rcx
0x0012a7d5 : mov rax, [rsp + 8]; mov rdi, rbx; call [rax + 0x20]
0x00143ebe : movsd [rdi], [rsi]; shr bh, 0xff; call [rbx + 0x41]
0x0012b718 : mov eax, [rdi + 8]; mov rdi, r15; call [rax + 0x20]
0x000f7746 : dec [rax - 0x7b]; sal [rbp + rdx + 0x48], 0x39; ret
0x00096c44 : add ecx, [rcx + 0x357890f]; lea rax, [rdi + 6]; ret
0x0013c2fc : lea esi, [rsp + 4]; mov rdi, rbx; call [rax + 0x48]
0x000317b4 : mov [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret
0x0007007f : mov r13, [rip + 0x359a6a]; xor edi, edi; call [r13]
0x0001ee70 : add [rcx + 0x1f0fc3d0], cl; add [rax - 1], dil; ret
0x0006cbac : push r8; add [rax], al; add [rax], al; pop rbx; ret
0x0012c56c : mov edi, [rsp + 0x10]; mov rcx, [rsp + 8]; call rcx
0x00131eec : mov esi, [rsp + 0x18]; mov rdi, rbx; call [rax + 8]
0x000979ff : add [rdx + 0x48178816], cl; lea eax, [rdi + 1]; ret
0x00141d05 : add [rax - 0x75], cl; add eax, 0x289573; call [rax]
0x000b0baf : add [rax], al; mov rsi, rbp; mov rdi, r12; call rbx
0x000ee2eb : add ebp, ecx; lcall [rcx + rsi*8]; jmp [rsi + 0x2e]
0x0011084b : popfq ; clc ; dec [rbx + 0xb491]; add bh, dh; ret 0
0x0010b76d : mov edx, eax; mov edi, 0x2000005; call [r13 + 0x28]
0x00143f1b : push rcx; add [rax], eax; add [rax - 0x77], cl; ret
0x0009563d : add [rax], r8b; mov rdx, [rsi]; mov [rdi], rdx; ret
0x0013b352 : add [rbp + 0xb], esi; mov rax, [rdi + 8]; jmp [rax]
0x0009667d : add [rax], al; add bl, dh; movq [rdi - 1], mm0; ret
0x00079c7e : add [rax], al; mov rsi, rbp; mov rdi, rax; call rcx
0x0012bf0c : mov eax, [rdx + 8]; mov rdi, r10; call [rax + 0x20]
0x000955fd : add [rax], r8b; mov edx, [rsi]; mov [rdi], edx; ret
0x001375dd : mov edx, [rax + 8]; mov rdi, rax; call [rdx + 0x20]
0x0012bf0b : mov rax, [r10 + 8]; mov rdi, r10; call [rax + 0x20]
0x0013c2fb : lea rsi, [rsp + 4]; mov rdi, rbx; call [rax + 0x48]
0x0007a476 : add [rax], al; mov rsi, rbp; mov rdi, rbx; call rax
0x0007c34b : mov [rdi + 8], 0; xor eax, eax; mov [rdi], rsi; ret
0x0005dd23 : lea esi, [rsp + 8]; mov rdi, [rdi + 0xe0]; call rax
0x000fb2c7 : push rbp; add ebp, [rip + 0x5d5b5900]; pop r12; ret
0x00108e84 : mov edx, [rsp + 0x18]; mov edi, 0x2000004; call rcx
0x00097a3f : add [rbx + 0x48178916], cl; lea eax, [rdi + 4]; ret
0x00072edc : mov [rsp + 0x18], r11; mov [rsp + 8], rax; call rcx
0x000fc070 : mov rdi, [rsp + 8]; mov rax, [rsp + 0x10]; call rax
0x000fbf18 : mov rax, rbp; mov esi, 3; pop rbp; pop r12; jmp rax
0x00021ad2 : add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x00030f1a : xchg eax, esi; add rdx, rsi; cmp r9d, 0x2f; jmp rdx
0x00135821 : add [rax], 1; mov rax, [r15 + 0x60]; call [rax + 8]
0x0012af9c : mov rsi, [rsp + 0x10]; mov rdi, rbp; call [rax + 8]
0x00108e83 : mov rdx, [rsp + 0x18]; mov edi, 0x2000004; call rcx
0x001381ab : lea rsi, [r12 + 8]; mov rdi, rbx; call [rax + 0x10]
0x00137f58 : lea rsi, [r10 + 8]; mov rdi, rbx; call [rax + 0x10]
0x0012bd85 : mov eax, [rbx + 8]; mov rdi, rbx; call [rax + 0x20]
0x0012b9e8 : mov eax, [rbp + 8]; mov rdi, rbp; call [rax + 0x20]
0x0012dd66 : mov eax, 1; pop rbp; pop r12; pop r13; pop r14; ret
0x0014b4fb : movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x00142352 : add [rax - 0x75], cl; add eax, 0x288f26; call [rax]
0x0013cc4e : add [rax], al; add [rdi + 0x28], 4; mov eax, 1; ret
0x00072fa3 : mov [rsp + 0x18], edx; mov [rsp + 8], rax; call rcx
0x000317b3 : mov [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret
0x0012b8f2 : mov eax, [rbp + 8]; mov rdi, r13; call [rax + 0x20]
0x0006ccd8 : movzx eax, [rax]; add rsp, 8; pop rbx; pop rbp; ret
0x0013c2c2 : lea rsi, [rsp + 4]; mov rdi, rbx; call [rax + 0x40]
0x001600e5 : add cl, [rbx + 0x42890541]; add eax, 0x8428d48; ret
0x001381ac : lea esi, [rsp + 8]; mov rdi, rbx; call [rax + 0x10]
0x00070080 : mov ebp, [rip + 0x359a6a]; xor edi, edi; call [r13]
0x0013c2c3 : lea esi, [rsp + 4]; mov rdi, rbx; call [rax + 0x40]
0x00033a23 : mov [rdi + 8], ecx; mov [rdx], eax; mov eax, 2; ret
0x00134de8 : mov [rsp + 0x48], ebp; bswap ebp; call [rax + 0x18]
0x00021ad3 : add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0013c991 : sub [r9], r15b; sal [rbx + 9], 1; xor eax, eax; ret
0x0009c682 : lea ecx, [rsp + 0x28]; lea rcx, [rax + 4]; call rbx
0x00065041 : lea rsi, [rdi + 0x58]; mov rdi, rax; call [rax + 8]
0x000bf500 : mov rsi, [rsp + 0x60]; mov rdi, [rsp + 8]; call r12
0x0001c8c3 : adc [rip - 0x8000], cl; inc eax; shr eax, 0x1f; ret
0x00134de7 : mov [r12 + 0x48], ebp; bswap ebp; call [rax + 0x18]
0x0005dd22 : lea rsi, [rsp + 8]; mov rdi, [rdi + 0xe0]; call rax
0x00097a84 : add ecx, [rcx + 0x357890f]; lea rax, [rdi + 7]; ret
0x00062543 : add esp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax
0x00132b2f : push r8; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x001451b7 : sub [rax - 0x75], cl; add eax, 0x28a019; call [rax]
0x000fbed2 : mov ebx, edi; xor esi, esi; mov r12d, edx; call rbp
0x0001d1dc : add [rax], al; add [rax], al; addss xmm0, xmm0; ret
0x000cc8c5 : add [rax], r8b; mov [rdi + 8], 2; xor eax, eax; ret
0x000226f2 : mov rax, [rax]; pop rbx; mov eax, [rax + 0x58]; ret
0x0010a623 : mov edx, eax; mov edi, 0x2000003; call [rbx + 0x28]
0x0006d1bb : lea ebx, [rcx + 1]; mov rdi, r15; call [rax + 0x18]
0x0013b43b : lea esi, [rsp + 0x10]; mov rdi, rbx; call [rax + 8]
0x000f7a53 : add [rax], al; add [rax], al; mov [rdi + 8], 0; ret
0x00069602 : add [rax], al; mov [rdx + 0x130], rdi; pop rbx; ret
0x00072d77 : mov eax, [rip + 0x356d73]; xor edi, edi; call [rax]
0x00131f02 : mov esi, ebx; mov rax, [rdi + 0x38]; call [rax + 8]
0x000ea749 : dec [rax - 0x7b]; sal [rdx + rcx + 0x48], 0x83; ret
0x00072d76 : mov rax, [rip + 0x356d73]; xor edi, edi; call [rax]
0x0012b9e7 : mov rax, [rbp + 8]; mov rdi, rbp; call [rax + 0x20]
0x0009cfe8 : sbb [rcx + rcx*4 - 0xe], cl; mov rdi, rbp; call rbx
0x0013c2b0 : mov rax, [rdi + 8]; mov rsi, rsp; call [rax + 0x40]
0x00138fb2 : mov rax, [r15 + 8]; mov rdi, r15; call [rax + 0x28]
0x0012d2f8 : add [rax], al; lea rax, [rbx + 0x2260]; pop rbx; ret
0x00077712 : pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax
0x0010fc13 : push [rdi - 0x32]; add rsp, 8; pop rbx; pop rbp; ret
0x00000bf9 : xor [rax], al; add [rax], al; add rsp, 0x28; jmp rax
0x000633be : mov eax, [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret
0x0006f420 : mov rax, [rdi]; nop ; mov [rip + 0x35ab9d], rax; ret
0x0013b166 : add [rax], al; mov rax, [rdi + 8]; call [rax + 0x10]
0x0012b07b : mov edi, ebp; mov [rbx + 0x18], 0; call [rax + 0x28]
0x001533c4 : mov cx, [rsi]; mov [rdi + 1], dx; mov [rdi], cx; ret
0x00135822 : add [rcx], al; mov rax, [r15 + 0x60]; call [rax + 8]
0x000aff77 : mov [rbx + 0xc], edi; pop rbp; pop r12; pop r14; ret
0x0012cddb : add [rax], al; add [rax], al; add [rax + 2], bh; ret
0x0010e963 : mov edi, esp; movups xmm[rbp - 0x78], xmm0; call rax
0x00046f21 : add [rax], eax; add [rax], al; xor esi, esi; jmp rax
0x0006bdd6 : add [rax], eax; add [rsi - 1], bh; call [r14 + 0x18]
0x000f093e : add [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret
0x0011fc49 : mov [rax], edx; lea eax, [r9 + r8 + 2]; pop rbx; ret
0x00082f02 : add al, [rbx + 0x194801fa]; fisttp [rax - 0x7d]; ret
0x00094f44 : add [rax], al; nop cs:[rax + rax]; mov rax, rdi; ret
0x0001dc29 : add [rsi], dl; add [rax], al; add [rax - 1], bh; ret
0x00031245 : mov [rsi + rcx + 8], rax; xor eax, eax; pop rbx; ret
0x000f3789 : add [rsi], dl; add [rax], al; add [rax + 1], bh; ret
0x00078b4a : pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rcx
0x00069b7e : sub rdx, rsi; mov [rsp], rcx; mov rdi, rbx; call rax
0x00023666 : add bh, dh; fsub [rcx + rcx*4 + 2]; mov rax, -1; ret
0x0011be4b : xchg eax, edx; add al, [rax]; mov rdi, rbp; call r12
0x0010f8fb : add [rax], 0; add [rax], al; mov rax, fs:[0x10]; ret
0x0010e895 : mov rdx, rbx; movups xmm[rbp - 0x78], xmm0; call rax
0x0003efb4 : add edi, eax; test [rdi + rdi*8 - 1], esp; jmp [rsi]
0x000ed786 : add [rax], al; shr ecx, 3; rep stosq [rdi], rax; ret
0x0013cc4d : add [rax], r8b; add [rdi + 0x28], 4; mov eax, 1; ret
0x00131c02 : add al, [rax]; add [rax], al; add rdi, 0xc8; jmp rcx
0x0012b09a : add [rax], al; mov rsi, [rsp + 8]; call [rax + 0x18]
0x001383e7 : add [rax + 0x39], cl; sal [rbx + rax + 0x5b], 1; ret
0x000bfe03 : adc [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x00136a90 : lea rdx, [rsp + 0x18]; mov esi, 6; call [rax + 0x28]
0x00088d4f : add al, 8; movzx edx, [rdx + rcx]; sub eax, edx; ret
0x000652b6 : add [rcx], cl; add [rax], al; add [rax - 1], bh; ret
0x00139d3e : mov [rbx + 0x10], 1; mov rdi, r14; call [rax + 0x28]
0x000c0380 : add [rax], al; mov fs:[rdx], esi; add rsp, 0x18; ret
0x0012d226 : add [rax], eax; add [rax], al; pop rbp; pop r12; ret
0x0002e974 : add al, ch; xchg ah, dh; std ; dec [rax - 0x77]; ret
0x0001e21a : add [rax], al; add [rbp + 8], dh; add rsp, 0x98; ret
0x000aff76 : mov [r11 + 0xc], edi; pop rbp; pop r12; pop r14; ret
0x0010e002 : mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x00023083 : mov [rdi + 8], rcx; xor eax, eax; mov [rdi], r8; ret
0x0001cd6f : add dl, dh; mulps xmm1, xmm0; movapd xmm0, xmm1; ret
0x0013bf14 : mov [rsp + 8], r8; lea rsi, [rsp + 0x10]; call [rax]
0x00031547 : mov [rcx + rdi + 8], eax; xor eax, eax; pop rbx; ret
0x00031546 : mov [rcx + rdi + 8], rax; xor eax, eax; pop rbx; ret
0x0007416d : sbb cl, [rax + 0x29480614]; ror [rax + 0x39], 1; ret
0x00033768 : add al, [rax]; add [rax], al; add [rax + 1], bh; ret
0x0005e5a6 : add [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret
0x00031246 : mov [rsi + rcx + 8], eax; xor eax, eax; pop rbx; ret
0x0006f480 : mov rax, [rdi]; nop ; mov [rip + 0x35ab8d], rax; ret
0x00131d2b : add [rax], al; mov [rdx + 0x6c], ax; mov eax, 1; ret
0x0012eea8 : add [rax], al; add [rbp + 5], dh; add rsp, 0x58; ret
0x00142351 : add [rax], al; mov rax, [rip + 0x288f26]; call [rax]
0x00048128 : inc [rcx]; add [rax], al; add [rsi + 1], bh; jmp rax
0x000e56e7 : dec [rax - 0x77]; adc ecx, [rdi]; xchg eax, esp; ret
0x0009627f : add bl, al; nop [rax + rax]; nop cs:[rax + rax]; ret
0x000da8f1 : add [rax], al; add [rbp + 0x31], al; jmp [rsi + 0xf]
0x000fc410 : mov rsi, [rbx]; mov rdi, r12; mov r13, rbx; call rbp
0x0013c5f5 : add [rax], r8b; mov rax, [rdi + 8]; jmp [rax + 0x40]
0x000f65b2 : add [rax], al; add [rbp + 5], dh; add rsp, 0x38; ret
0x0002dd37 : xor rax, fs:[0x30]; lea rsi, [rip + 0x349]; call rax
0x0012aff4 : mov rdi, rbp; mov [rbx + 0x18], 1; call [rax + 0x28]
0x0007ba76 : div [rbp + 9]; mov rax, [rip + 0x34e1f8]; call [rax]
0x00102fb4 : mov edx, [rip + 0x2ca28e]; add [rdx + rax*2], 1; ret
0x00056465 : xor [rbx - 0x52363], cl; inc [rbp + 0x6c850fdb]; ret
0x0010d53b : add [rax], al; add [rax], al; add [rax + 7], bh; ret
0x0006f610 : mov rax, [rdi]; nop ; mov [rip + 0x35d042], eax; ret
0x00102fb3 : mov rdx, [rip + 0x2ca28e]; add [rdx + rax*2], 1; ret
0x00080615 : add [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret
0x0013552b : add bh, [rax + 1]; movups xmm[rdi + 0x30], xmm0; ret
0x00083bca : add al, [rbx + 0x194801fb]; fisttp [rax - 0x7d]; ret
0x00134b9f : add al, [rax]; add [rax], al; add rdi, 0x68; jmp rcx
0x001354cf : add al, [rax]; add [rax], al; add rdi, 0x58; jmp rcx
0x0011b127 : xor [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret
0x0009a5e8 : mov edx, edi; rep stosb [rdi], al; mov rax, rdx; ret
0x0002eaab : add [rax], al; add [rbp + 8], dh; add rsp, 0xd8; ret
0x0006f421 : mov eax, [rdi]; nop ; mov [rip + 0x35ab9d], rax; ret
0x0013b1fa : add al, [rax]; add [rax], al; mov rdi, rsp; call rdx
0x0003d48c : add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x0011bd01 : xchg eax, ebx; add al, [rax]; mov rdi, rbp; call r12
0x0009a5e7 : mov rdx, rdi; rep stosb [rdi], al; mov rax, rdx; ret
0x0001f3b8 : add [rcx], dh; imul al; or [rdx], 0; add rsp, 8; ret
0x00135804 : mov rdi, rbp; mov [r15 + 0x58], 0; call [rax + 0x28]
0x00136a91 : lea edx, [rsp + 0x18]; mov esi, 6; call [rax + 0x28]
0x000955f0 : mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; ret
0x0006dcbb : int1 ; pop rsp; or al, [rax]; nop ; mov rax, -1; ret
0x0011b126 : xor [r8 + 1], dil; add rsp, 8; pop rbx; pop rbp; ret
0x0010fbef : add bh, [rax - 1]; add rsp, 8; pop rbx; pop rbp; ret
0x00023068 : mov [rdi], r8; mov [rdi + 8], rcx; xor eax, eax; ret
0x001623f6 : lea rax, [rdx + 0xe]; cmp [rax], 1; sbb rax, -1; ret
0x0012aff5 : mov edi, ebp; mov [rbx + 0x18], 1; call [rax + 0x28]
0x0001cc61 : movsd [rdi], xmm0; and rax, rdx; movq xmm0, rax; ret
0x0006c330 : xor rax, fs:[0x30]; lea rsi, [rip - 0x100]; call rax
0x0006ddb0 : push [rbp - 0x44]; add rsp, 8; pop rbx; pop rbp; ret
0x000b3f53 : mov dh, [rcx]; add bl, ch; adc [rax - 0x7d], cl; ret
0x00135563 : add bh, [rax + 1]; movups xmm[rdi + 0x20], xmm0; ret
0x0013831a : push rdx; imul ebp, [rcx], 0; mov fs:[rax], rdx; ret
0x000625be : adc [rbx - 0x3b7cb7fa], cl; or [rbx + 0x5d], bl; ret
0x00137f33 : push r14; push r13; lea r9, [rsp + 0x3a]; call [rax]
0x000105cb : xor [rax], al; add [rax], al; mov rdi, r12; call rax
0x000ed87e : add [rax], al; mov [rdi + 4], esi; xor eax, eax; ret
0x000fc411 : mov esi, [rbx]; mov rdi, r12; mov r13, rbx; call rbp
0x0001e6d9 : add [rsi], ah; add [rax], al; add [rax - 1], bh; ret
0x0012c328 : xchg eax, esp; push rdi; std ; dec [rax + 0x39]; ret
0x000920f4 : adc al, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret
0x00078e11 : mov rax, r8; pop rbp; pop r12; pop r13; pop r14; ret
0x0007649f : pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rax
0x0001f22a : add [rax], al; add [rbp + 8], dh; add rsp, 0xa8; ret
0x0006f470 : mov rax, [rdi]; nop ; mov [rip + 0x35ab95], rax; ret
0x001743a4 : add [rax], al; nop cs:[rax + rax]; xor eax, eax; ret
0x0005f488 : xor rax, fs:[0x30]; lea rsi, [rip - 0x198]; call rax
0x000cb94a : add [rax], al; add cl, ch; idiv edi; jmp [rsi + 0xf]
0x0013b20e : add [rax], al; add [rbp + 5], dh; add rsp, 0x48; ret
0x00132b30 : push rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x0009ca0a : leave ; xor edx, edx; lea r9, [rsp + 0x20]; call rbx
0x00065c61 : push 0; lea r9, [rbp - 0x40]; mov rdi, r15; call r12
0x0001d0e5 : add bl, dh; mulps xmm1, xmm0; movaps xmm0, xmm1; ret
0x00135805 : mov edi, ebp; mov [r15 + 0x58], 0; call [rax + 0x28]
0x0006f471 : mov eax, [rdi]; nop ; mov [rip + 0x35ab95], rax; ret
0x0007bcfb : add [rax], al; add [rax], al; add [rax + 1], bh; ret
0x00139f72 : mov [rbp + 0x10], 0; mov rdi, r12; call [rax + 0x28]
0x0013cef8 : add [rbp + 8], dh; movzx eax, al; add rsp, 0x18; ret
0x00015e8a : sbb eax, [rax]; add [rbx - 0x7bf0fe02], al; ret 0x1b
0x00136a3d : add [rax], al; mov rax, [rdi + 8]; call [rax + 0x20]
0x000794f2 : xor [rip + 0x48197300], esi; lea eax, [rdx - 8]; ret
0x0006cbad : push rax; add [rax], al; add [rax], al; pop rbx; ret
0x00138ef5 : adc [rsp + 0xb8], eax; mov [rsp + 0xd0], 2; call rax
0x00102e94 : add [rax], al; mov [rip + 0x2c71ef], 2; pop rbp; ret
0x0012b07a : mov rdi, rbp; mov [rbx + 0x18], 0; call [rax + 0x28]
0x0012ca13 : adc [rax], ch; mov rax, [rdi + 8]; call [rax + 0x30]
0x00067718 : sbb [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x00152c2d : add [rax], al; add [rbx + 0x5789fc56], cl; cld ; ret
0x0010e003 : mov edx, esp; movups xmm[rbp - 0x78], xmm0; call rax
0x0012493b : push [rbp - 0x16]; add rsp, 8; pop rbx; pop rbp; ret
0x0006f481 : mov eax, [rdi]; nop ; mov [rip + 0x35ab8d], rax; ret
0x001623f7 : lea eax, [rdx + 0xe]; cmp [rax], 1; sbb rax, -1; ret
0x0010e896 : mov edx, ebx; movups xmm[rbp - 0x78], xmm0; call rax
0x00138a5e : add [rax], al; add [rbp + 5], dh; add rsp, 0x78; ret
0x00003b9d : push rdx; sbb ecx, [rcx + 0x50895048]; push rsp; ret
0x0013b196 : add [rax], al; mov rax, [rdi + 8]; call [rax + 0x18]
0x0006b246 : xor [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x0013282f : add al, [rax]; add [rax], al; add rdi, 0x10; jmp rcx
0x0005f23b : xor [rax], al; add [rax], al; mov rdi, rbp; call rax
0x00033a31 : add al, [rax]; add [rax], al; add [rax + 2], bh; ret
0x0011fc48 : mov [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret
0x0006f411 : mov eax, [rdi]; nop ; mov [rip + 0x35abb5], rax; ret
0x0015dd0e : add [rax], al; mov [rcx], dx; mov [rcx + 2], dl; ret
0x0001ee1d : add [rsi - 0x70], ah; mov eax, [rip + 0x3ab0b6]; ret
0x0006f611 : mov eax, [rdi]; nop ; mov [rip + 0x35d042], eax; ret
0x0006eacb : add [rax], al; add [rax], al; add [rax - 1], bh; ret
0x00094daf : push [rax]; leave ; mov [rax], cl; mov rax, rdi; ret
0x0002276c : add [rax], al; add [rbp + 5], dh; add rsp, 0x28; ret
0x00023084 : mov [rdi + 8], ecx; xor eax, eax; mov [rdi], r8; ret
0x0006c625 : xor rax, fs:[0x30]; lea rsi, [rip - 0x3f5]; call rax
0x000c8455 : adc al, [rbx - 0x3fcefd32]; cmp esi, 1; sete al; ret
0x00069b7f : sub edx, esi; mov [rsp], rcx; mov rdi, rbx; call rax
0x0001d88c : add [rax], al; add [rbp + 5], dh; add rsp, 0x18; ret
0x00137f34 : push rsi; push r13; lea r9, [rsp + 0x3a]; call [rax]
0x000ec32d : add al, [rax]; add [rcx - 0x80], al; jmp [rax + 0xf]
0x00022677 : inc bl; nop [rax]; mov rax, rdi; cqo ; idiv rsi; ret
0x001105db : pushfq ; clc ; dec [rbx + 0xb491]; add bh, dh; ret 0
0x0007c06e : add [rax], eax; add [rax], al; pop rbx; pop rbp; ret
0x0006f410 : mov rax, [rdi]; nop ; mov [rip + 0x35abb5], rax; ret
0x00099dfb : add [rax], al; add [rax], al; add [rcx + 1], cl; ret
0x00141d04 : add [rax], al; mov rax, [rip + 0x289573]; call [rax]
0x00063099 : add [rax], eax; add [rsi - 1], bh; call [rax + 0x18]
0x00078e12 : mov eax, eax; pop rbp; pop r12; pop r13; pop r14; ret
0x0011bd9e : add [rax], al; mov rsi, [rsp]; mov rdi, rbp; call r12
0x000b1bf4 : mov [rdi + 0x20], rcx; pop r13; pop r14; pop r15; ret
0x00042cca : mov eax, edx; pop rbx; pop rbp; pop r12; pop r13; ret
0x001450de : mov [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret
0x0003a430 : mov [rbp - 0x4e0], esi; mov [rbp - 0x4d8], 0; jmp rax
0x00145125 : mov [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret
0x0005fdfa : mov rax, rsi; pop rbx; pop rbp; pop r12; pop r13; ret
0x000f0c3b : mov rsi, r14; mov edx, [rdx + rax]; call [rbx + 0x40]
0x000ccea0 : add al, 1; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x000f0c3c : mov esi, esi; mov edx, [rdx + rax]; call [rbx + 0x40]
0x00138bed : add [rax], al; mov [rsp + 0x18], 1; call [rax + 0x18]
0x0006da4e : xor rax, fs:[0x30]; lea rsi, [rip - 0x181e]; call rax
0x000e6c5b : dec [rcx - 0x75]; push rsi; sub [rax - 0x7d], cl; ret
0x0006e76d : mov [rbx + 0x60], ebp; pop rbx; pop rbp; pop r12; ret
0x0010f401 : add [rax + 0xca], bh; syscall ; pop rdx; pop rsi; ret
0x00096594 : add [rax], al; nop cs:[rax + rax]; mov [rdi], dl; ret
0x00113aec : sbb [rip + 0xffffff], ah; or eax, edi; bswap eax; ret
0x0009adc5 : add [rbx + 0x2b], 4; mov [rsp + rbx*8 - 0xd], dh; ret
0x00133cef : adc [rax - 0x75], cl; and al, 0x48; call [rax + 0x28]
0x00138f90 : add [rax], al; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x00099698 : mov [rdi + 4], dx; xor ch, ch; mov [rdi + 6], ch; ret
0x0012dcc4 : mov [rbx + 0x68], edx; pop rbx; pop rbp; pop r12; ret
0x00131cbe : add [rax], al; add [rdi], cl; adc [rdi + 8], eax; ret
0x0013bc08 : mov rax, [rdi + 8]; lea rsi, [rsp + 0x10]; call [rax]
0x000af63c : add [rax], al; add [rax], al; lea rax, [rdi - 8]; ret
0x0015dce4 : add [rax], al; nop cs:[rax + rax]; mov [rcx], dl; ret
0x00062fd1 : mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x000cebd0 : add gs:[rdi], cl; xchg eax, ebp; rol [rcx], 0xc0; ret
0x0012dcc3 : mov [rbx + 0x68], rdx; pop rbx; pop rbp; pop r12; ret
0x000fc43d : mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret
0x0010e596 : add [rax], al; movups xmm[rbp - 0x78], xmm0; call rax
0x0015dd7e : add [rax], al; mov [rcx], rdx; mov [rcx + 8], dx; ret
0x0017258c : add [rax], al; add [rax], al; lea rax, [rdi + 5]; ret
0x0000eeea : mov rax, fs:[rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x0003a42f : mov [rbp - 0x4e0], rsi; mov [rbp - 0x4d8], 0; jmp rax
0x00103ea7 : add [rbx - 0x3fcecf11], al; cmp edi, 9; setbe al; ret
0x000fbc20 : mov [rbx], eax; setne al; movzx eax, al; pop rbx; ret
0x0015dd3e : add [rax], al; mov [rcx], edx; mov [rcx + 4], dx; ret
0x001369ac : mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x28]
0x001725bc : add [rax], al; add [rax], al; lea rax, [rdi + 9]; ret
0x0011e0d1 : xchg dl, bl; add [rax], al; add [rcx - 0x77], al; ret
0x0005dada : mov rax, rbp; pop rbp; pop r12; pop r13; pop r14; ret
0x0017125a : adc [rcx - 2], rdx; vmovups zmm[r9 - 0x40], zmm3; ret
0x001532cf : movdqu xmm[rdi + 5], xmm0; movdqu xmm[rdi], xmm1; ret
0x000955f1 : mov ecx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; ret
0x0007fa7c : add [rdi - 0x27], esi; pop rbx; pop rbp; pop r12; ret
0x00022564 : xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret
0x001712fd : add [rdx + 4], esi; mov cl, [rsi]; mov [rdi], cl; ret
0x000877e1 : movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0013cd27 : mov [rbx + 0x20], r12; pop rbx; pop rbp; pop r12; ret
0x0017125b : adc [rcx - 2], edx; vmovups zmm[r9 - 0x40], zmm3; ret
0x0017254c : add [rax], al; add [rax], al; lea rax, [rdi + 1]; ret
0x000b0a1f : lea edi, [rax + rdx]; mov [rsp + 0xb8], r15; call r13
0x001450dd : mov [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret
0x00109654 : dec [rcx - 0x75]; push rdi; sbb [rax - 0x77], cl; ret
0x000600df : pop rbx; mov eax, edx; pop rbp; pop r12; pop r13; ret
0x0017121f : adc [rcx - 2], esi; vmovups zmm[r9 - 0x40], zmm7; ret
0x0006de55 : xor rax, fs:[0x30]; lea rsi, [rip - 0x1c25]; call rax
0x0013b165 : add [rax], r8b; mov rax, [rdi + 8]; call [rax + 0x10]
0x000fbc1f : mov [rbx], rax; setne al; movzx eax, al; pop rbx; ret
0x0017257c : add [rax], al; add [rax], al; lea rax, [rdi + 4]; ret
0x0006e4be : xor rax, fs:[0x30]; lea rsi, [rip - 0x228e]; call rax
0x0015348f : movdqu xmm[rdi + 1], xmm0; movdqu xmm[rdi], xmm1; ret
0x0013cc5e : add [rax], al; add [rdi + 0x28], edx; mov eax, 1; ret
0x001533c5 : mov ecx, [rsi]; mov [rdi + 1], dx; mov [rdi], cx; ret
0x0001e584 : sub ecx, -0x80; shr ecx, 3; rep stosq [rdi], rax; ret
0x0005e151 : mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0013d138 : add [rax], al; add [rax], al; mov [rdi + 8], rax; ret
0x00142ac9 : mov [rip + 0x28c540], ax; mov eax, 1; add rsp, 8; ret
0x0005dbf2 : mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret
0x001531ef : movdqu xmm[rdi + 7], xmm0; movdqu xmm[rdi], xmm1; ret
0x00102e9b : sub al, 0; add al, [rax]; add [rax], al; pop rbp; ret
0x00103b11 : mov eax, [rip + 0x2c6071]; mov eax, [rax + 0x38]; ret
0x0010f8fc : add [rax], al; add [rax], al; mov rax, fs:[0x10]; ret
0x0000fb1f : sub eax, [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret
0x0017255c : add [rax], al; add [rax], al; lea rax, [rdi + 2]; ret
0x0013b195 : add [rax], r8b; mov rax, [rdi + 8]; call [rax + 0x18]
0x00136910 : mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x20]
0x0007d4e1 : sub eax, edi; dec [rbp - 0x7b]; test [rdi], 0x84; ret
0x00169a60 : movzx eax, [rdi]; movzx ecx, [rsi]; sub eax, ecx; ret
0x000965bc : add [rax], al; add [rax], al; mov [rdi - 1], edx; ret
0x0005e034 : mov eax, esi; pop rbx; pop rbp; pop r12; pop r13; ret
0x00136911 : mov edi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x20]
0x0009984f : adc [r8 - 0x12cfeba9], r9b; mov [rdi + 0x15], ch; ret
0x000965ee : add [rax], al; mov [rdi], edx; mov [rdi + 4], dx; ret
0x000e4a78 : mov esi, [rbp - 0x1f0]; lea r8, [rax + r13]; call r12
0x00037e3b : lea rcx, [rbx + rdx]; add rdx, r15; call [rax + r9*8]
0x00082451 : add eax, [rbx + 0x194801ff]; fisttp [rax - 0x7d]; ret
0x000fe416 : add [rax], al; lea rax, [rip + 0x960e9]; pop rbx; ret
0x00138f01 : add [rax], al; add al, [rax]; add [rax], al; call rax
0x001743a3 : add [rax], r8b; nop cs:[rax + rax]; xor eax, eax; ret
0x0012c77c : mov rdi, rbp; xor eax, eax; pop rbx; pop rbp; jmp rdx
0x000999d4 : adc [rax - 0x12cfdfb1], cl; mov [rdi + 0x21], ch; ret
0x0006e15b : xor rax, fs:[0x30]; lea rsi, [rip - 0x1f2b]; call rax
0x0007bdd9 : add [rax + rax], cl; add [rax], al; xor eax, eax; ret
0x00136adb : lea edx, [rsp + 0xc]; mov esi, 0xd; call [rax + 0x28]
0x000998d2 : adc [rax - 0x12cfe7b1], cl; mov [rdi + 0x19], ch; ret
0x0013bf15 : mov [rsp + 8], eax; lea rsi, [rsp + 0x10]; call [rax]
0x0015341f : movdqu xmm[rdi + 2], xmm0; movdqu xmm[rdi], xmm1; ret
0x00085a0e : add eax, [rbx + 0x194801fb]; fisttp [rax - 0x7d]; ret
0x00046e08 : lea r11, [rdi + 0x3e8]; mov [rbp - 0x4d0], 0; jmp rax
0x000b0a1e : lea r15, [rax + rdx]; mov [rsp + 0xb8], r15; call r13
0x0011edff : add [rbx + 0x3b83f], cl; add [rax], al; syscall ; ret
0x00102ec5 : sub al, 0; add [rax], al; add [rax], al; pop rbp; ret
0x0015333f : movdqu xmm[rdi + 4], xmm0; movdqu xmm[rdi], xmm1; ret
0x000965de : add [rax], al; mov [rdi], edx; mov [rdi + 4], dl; ret
0x000fbf1d : add [rax], al; add [rbp + 0x41], bl; pop rsp; jmp rax
0x0013bc09 : mov eax, [rdi + 8]; lea rsi, [rsp + 0x10]; call [rax]
0x0011fffc : movq mm0, [rsi]; movups xmm[rdi + rdx + 8], xmm0; ret
0x0010ab78 : int1 ; cmp dil, al; mov eax, edx; cmove eax, ecx; ret
0x000ebf76 : dec [rax - 0x7b]; sal [rbx + rbp*2 + 0x48], 0x89; ret
0x0000aa15 : add [rax], al; add [rbp + 0x31], al; leave ; call r15
0x00131d2c : add [rsi - 0x77], ah; insb [rdi], dx; mov eax, 1; ret
0x000e4a77 : mov rsi, [rbp - 0x1f0]; lea r8, [rax + r13]; call r12
0x0000eccf : mov eax, esi; pop rbp; pop r12; pop r13; pop r14; ret
0x0009662e : add [rax], al; mov [rdi], rdx; mov [rdi + 8], dx; ret
0x001369ad : mov edi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x28]
0x00094f43 : add [rax], r8b; nop cs:[rax + rax]; mov rax, rdi; ret
0x000ec205 : add [rax], eax; add [rcx - 0x80], al; jmp [rdi + rcx]
0x000e3917 : add [rcx], dh; ror [rcx - 0x7d], cl; jmp [rax + 0x74]
0x0011fd9d : xor eax, eax; rep stosq [rdi], rax; mov eax, r8d; ret
0x00088b90 : movzx ecx, [rsi]; movzx eax, [rdi]; sub eax, ecx; ret
0x001533af : movdqu xmm[rdi + 3], xmm0; movdqu xmm[rdi], xmm1; ret
0x00108c9b : add [rax], bh; cmovns rax, [rbx + 0x28]; pop rbx; ret
0x00042892 : mov cs, [rdx - 0x77000000]; ror [rcx - 0x77], cl; ret
0x0007cb2b : xor al, 0; mov [rip + 0x34fbe4], rax; add rsp, 8; ret
0x000fe37d : dec [rax - 0x7b]; sal [rsp + rdi*2 + 0x48], 0x39; ret
0x000792b6 : mov eax, ebp; pop r12; pop r13; pop r14; pop r15; ret
0x00087705 : mov eax, edi; pop rbx; pop rbp; pop r12; pop r13; ret
0x0006bed7 : adc ebx, [rbx + 0x5d]; pop r12; pop r13; pop r14; ret
0x000fc412 : xor ecx, [rcx + rcx*4 - 0x19]; mov r13, rbx; call rbp
0x00046e09 : lea ebx, [rdi + 0x3e8]; mov [rbp - 0x4d0], 0; jmp rax
0x0005bd28 : mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret
0x00108c9f : add [rax], al; cmovns rax, [rbx + 0x28]; pop rbx; ret
0x000435f5 : sub dh, al; add [rip - 0x11d17], ch; jmp [rsi - 0x70]
0x001725ac : add [rax], al; add [rax], al; lea rax, [rdi + 8]; ret
0x00002500 : pop rsp; sub edx, [rax + rax]; mov rdi, rbx; call r13
0x00099850 : adc [rax - 0x12cfeba9], cl; mov [rdi + 0x15], ch; ret
0x00023069 : mov [rdi], eax; mov [rdi + 8], rcx; xor eax, eax; ret
0x00099687 : mov [rdi + 4], dl; xor ch, ch; mov [rdi + 5], ch; ret
0x00100c51 : add [rsi], edx; add [rax], al; add [rax - 1], bh; ret
0x0015dd6e : add [rax], al; mov [rcx], rdx; mov [rcx + 8], dl; ret
0x0015325f : movdqu xmm[rdi + 6], xmm0; movdqu xmm[rdi], xmm1; ret
0x0010e962 : mov edi, r12d; movups xmm[rbp - 0x78], xmm0; call rax
0x00145126 : mov [rbx + 0x10], eax; pop rax; pop rdx; pop rbx; ret
0x0017259c : add [rax], al; add [rax], al; lea rax, [rdi + 6]; ret
0x000996d9 : mov [rdi + 8], dl; xor ch, ch; mov [rdi + 9], ch; ret
0x00099912 : adc [rcx - 0x12cfe8b1], cl; mov [rdi + 0x1b], ch; ret
0x0012c8fa : adc [rax], al; add [rax], al; mov [rsi + 8], rax; ret
0x000965fc : add [rax], al; add [rax], al; mov [rdi - 1], rdx; ret
0x00102670 : add [rcx - 0xf7a3821], cl; idiv edi; jmp [rdi + 0x6d]
0x0012c77d : mov edi, ebp; xor eax, eax; pop rbx; pop rbp; jmp rdx
0x00138c51 : add [rax], al; mov [rsp + 0x20], 5; call [rax + 0x18]
0x0012c940 : add [rax], al; add [rdi], cl; adc [rsi + 8], eax; ret
0x0006ec11 : mov [rip + 0x35d9b5], 0; mov [rip + 0x35d9b2], 0; ret
0x00136ada : lea rdx, [rsp + 0xc]; mov esi, 0xd; call [rax + 0x28]
0x0006f55d : add [rcx + rax + 0x57], al; sbb [rax + 0x39], cl; ret
0x00023564 : add [rax], al; mov [rsi + 0xe], ax; xor eax, eax; ret
0x000fd528 : add [rax], al; add [rbp + 8], dh; add rsp, 0x418; ret
0x0006499a : add cl, [rax - 0x77]; and al, 0x30; call [r13 + 0x30]
0x00110916 : add rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0000ecce : mov rax, r14; pop rbp; pop r12; pop r13; pop r14; ret
0x0017121e : adc [rcx - 2], rsi; vmovups zmm[r9 - 0x40], zmm7; ret
0x00133491 : lea rsi, [rsp + 0xc]; mov rdi, rbp; call [rax + 0x48]
0x00103b10 : mov rax, [rip + 0x2c6071]; mov eax, [rax + 0x38]; ret
0x00097a10 : mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi + 2]; ret
0x00096be0 : mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi + 1]; ret
0x0015dd54 : add eax, ebx; nop cs:[rax + rax]; mov [rcx], rdx; ret
0x0005bf8d : add [rax], eax; add [rax], al; mov rdi, rbx; call rax
0x0017256c : add [rax], al; add [rax], al; lea rax, [rdi + 3]; ret
0x000741ab : add [rax + rax], cl; add [rax], al; mov rax, rsi; ret
0x00144ace : mov rsi, rax; shr ecx, 3; rep movsq [rdi], [rsi]; ret
0x0006f580 : add [rcx + 0x4789246f], cl; adc [rbx + 0x5d], bl; ret
0x00144acf : mov esi, eax; shr ecx, 3; rep movsq [rdi], [rsi]; ret
0x0005bd27 : mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; ret
0x00046852 : mov cs, ecx; add [rax], al; add [rax + 0x63], cl; ret
0x00097a00 : mov dl, [rsi]; mov [rdi], dl; lea rax, [rdi + 1]; ret
0x00110917 : add eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret
0x000be9fa : mov rax, rdx; pop rbx; pop rbp; pop r12; pop r13; ret
0x000e1bb1 : mov [rsi + 0x2c], eax; pop r13; pop r14; pop r15; ret
0x00133492 : lea esi, [rsp + 0xc]; mov rdi, rbp; call [rax + 0x48]
0x00160060 : mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx + 1]; ret
0x0015dd2e : add [rax], al; mov [rcx], edx; mov [rcx + 4], dl; ret
0x0005dbf3 : mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret
0x0005dadb : mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret
0x000af64c : add [rax], al; add [rax], al; lea rax, [rdi - 4]; ret
0x000ed666 : mov eax, ecx; pop rbp; pop r12; pop r13; pop r14; ret
0x0005fb25 : mov rax, rsi; pop rbp; pop r12; pop r13; pop r14; ret
0x000b1bf5 : mov [rdi + 0x20], ecx; pop r13; pop r14; pop r15; ret
0x0001d9d7 : mov eax, esi; mov rsp, r8; mov rbp, r9; nop ; jmp rdx
0x000c1d08 : lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret
0x000b06c7 : add [rax], al; add [rcx + rcx*4 - 0x19], cl; call rbx
0x000c3e34 : add [rbp + 0x3a], dh; mov rbx, [rbp - 8]; leave ; ret
0x000c1d09 : lea esp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret
0x0015310f : movdqu xmm[rdi + 9], xmm0; movdqu xmm[rdi], xmm1; ret
0x00099659 : mov [rdi + 2], dl; xor ch, ch; mov [rdi + 3], ch; ret
0x0013cd28 : mov [rbx + 0x20], esp; pop rbx; pop rbp; pop r12; ret
0x0005e150 : mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0006e76c : mov [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret
0x0008b070 : movzx eax, [rdi]; movzx edx, [rsi]; sub eax, edx; ret
0x000c017b : mov eax, edx; pop rbp; pop r12; pop r13; pop r14; ret
0x000625de : adc [rax - 1], edi; add rsp, 8; pop rbx; pop rbp; ret
0x000ed870 : mov eax, [rdi + 4]; mov [rsi], eax; xor eax, eax; ret
0x00137d99 : sub al, 0; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x000105cc : add [rax], al; add [rcx + rcx*4 - 0x19], cl; call rax
0x0007f7e2 : xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret
0x00087704 : mov rax, rdi; pop rbx; pop rbp; pop r12; pop r13; ret
0x0015317f : movdqu xmm[rdi + 8], xmm0; movdqu xmm[rdi], xmm1; ret
0x00037e3c : lea ecx, [rbx + rdx]; add rdx, r15; call [rax + r9*8]
0x000afec5 : xor eax, eax; pop rbx; pop rbp; pop r12; pop r14; ret
0x00099932 : adc [rcx - 0x12cfe7b1], cl; mov [rdi + 0x1c], ch; ret
0x0009661e : add [rax], al; mov [rdi], rdx; mov [rdi + 8], dl; ret
0x0015ddce : add [rax], al; mov [rcx], rdx; mov [rcx + 7], rdx; ret
0x00090142 : add [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret
0x00004a73 : mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call rbx
0x0014399e : add [rax], 0; add [rcx + 0x415d5bd8], cl; pop rsp; ret
0x000956e7 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], cx; ret
0x00132661 : mov rax, [r14 + 0xd0]; mov rdi, r12; call [rax + 0x20]
0x0013669c : mov rax, [r14 + 0x60]; mov rdi, rbp; call [rax + 0x20]
0x0013466a : add al, 0; add [rbx + 0x5d], bl; pop r12; pop r13; ret
0x00103b6d : mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x38; ret
0x000061f7 : mov edi, [rsp + 0x40]; mov rax, [rsp + 0x20]; call rax
0x000042b5 : mov edi, [rsp + 0x38]; mov rax, [rsp + 0x18]; call rax
0x00064708 : mov rbp, [r15 + 0x98]; mov rdi, rbp; call [rbp + 0x20]
0x000792b5 : mov eax, r13d; pop r12; pop r13; pop r14; pop r15; ret
0x00004d5e : mov esi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r12
0x00005396 : mov esi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x0000835a : mov esi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r15
0x00134120 : mov rax, [rsp + 0x88]; mov rdi, rbp; call [rax + 0x20]
0x0015dd9e : add [rax], al; mov [rcx], rdx; mov [rcx + 8], edx; ret
0x0010b773 : add al, [rcx - 1]; push rbp; sub [rax - 0x77], cl; ret
0x00064956 : mov ebp, [rdi + 0x98]; mov rdi, r13; call [r13 + 0x20]
0x00063152 : mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x00036ff8 : movdqa xmm0, xmm[rsp - 0x18]; pinsrw xmm0, eax, 6; ret
0x000afbbf : add [rax - 0x39], cl; rol [rdi], 0; add [rax], al; ret
0x000067d4 : mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call r15
0x00133ea0 : mov eax, [rsp + 0x38]; mov rdi, rbp; call [rax + 0x20]
0x00133e9f : mov rax, [rsp + 0x38]; mov rdi, rbp; call [rax + 0x20]
0x000654ab : mov ebp, [rbx + 0x98]; mov rdi, rbp; call [rbp + 0x20]
0x0002e18f : inc [rbp - 0x3f6bf040]; add rsp, 8; movzx eax, al; ret
0x00095610 : mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; ret
0x000555b2 : add [rax], al; add cl, ch; sar bh, cl; jmp [rsi + 0xf]
0x000654aa : mov rbp, [rbx + 0x98]; mov rdi, rbp; call [rbp + 0x20]
0x00064955 : mov r13, [r15 + 0x98]; mov rdi, r13; call [r13 + 0x20]
0x0015bcb2 : add [rax - 0x77], ecx; add cl, [rax - 0x77]; clc ; ret
0x001244c8 : inc [rbx + 0x2aa4040d]; add [rdx], al; add rsp, 8; ret
0x000963a6 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], cl; ret
0x0012d808 : sbb [rbp + rcx*4 + 0x64], cl; and al, 0x10; call [rax]
0x0012b117 : mov esi, esp; mov rax, [rdi + 0x38]; call [rax + 0x10]
0x0005de81 : add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x0013669d : mov eax, [rsi + 0x60]; mov rdi, rbp; call [rax + 0x20]
0x00139f9b : mov eax, [rbp + 0x18]; mov rdi, r12; call [rax + 0x20]
0x00103b6e : mov ecx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x38; ret
0x000afb7f : add [rax - 0x39], cl; rol [rbx], 0; add [rax], al; ret
0x0002268d : add [rax], al; add [rax - 0x7b], cl; call [rbx + 0x74]
0x00139f9a : mov rax, [rbp + 0x18]; mov rdi, r12; call [rax + 0x20]
0x000afb6f : add [rax - 0x39], cl; rol [rdx], 0; add [rax], al; ret
0x00099699 : mov [rdi + 4], edx; xor ch, ch; mov [rdi + 6], ch; ret
0x00047df9 : add [rax], eax; add [rax], al; xor r15d, r15d; jmp rax
0x000afbaf : add [rax - 0x39], cl; rol [rsi], 0; add [rax], al; ret
0x00171459 : adc [rcx - 2], esi; vmovups zmm[r9 - 0x40], zmm15; ret
0x0012dd69 : add [rax], al; pop rbp; pop r12; pop r13; pop r14; ret
0x0013402e : mov eax, [rsp + 0x58]; mov rdi, rbp; call [rax + 0x20]
0x0012c225 : mov rax, [r15 + 0x38]; mov rdi, r15; call [rax + 0x20]
0x0010f542 : sub al, 0; add [rax], eax; add [rax], al; pop rbx; ret
0x0005e454 : add [rbx + 0x7401046e], al; mov rax, rdx; pop rbx; ret
0x000042b4 : mov rdi, [rsp + 0x38]; mov rax, [rsp + 0x18]; call rax
0x00171aa8 : adc [rsi + 2], edx; vmovups zmm[rsi + 0xc0], zmm2; ret
0x0005e4d0 : add [rip + 0x48000000], al; mov eax, edx; pop rbx; ret
0x0007d8d6 : add [r8 - 0x77], r9b; fcomp [rbx + 0x5d]; pop r12; ret
0x00095650 : mov rcx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; ret
0x0011c121 : stosd [rdi], eax; cmc ; sub al, [rax]; add rsp, 8; ret
0x0008732f : add [rcx + 0x146349c2], cl; nop ; add rdx, r8; jmp rdx
0x00132314 : mov eax, r13d; pop rbx; pop rbp; pop r12; pop r13; ret
0x0006cba3 : mov [rbx + 0x58], 0; mov [rbx + 0x50], 0; pop rbx; ret
0x00038d19 : mov rsi, r9; mov rdi, [rbp - 0x8a8]; call [rbx + 0x38]
0x000b07cf : mov edi, [rsp + 0x50]; mov rax, [rsp + 0x18]; call rax
0x00003fc0 : mov esi, [rsp + 0x28]; mov rdi, [rsp + 0x20]; call r15
0x0010e41a : mov eax, [rsp + 0x60]; mov [rbp - 0x80], eax; call rcx
0x00048120 : mov r8, rcx; mov [rbp - 0x4c0], 1; mov esi, 1; jmp rax
0x00003fbf : mov rsi, [rsp + 0x28]; mov rdi, [rsp + 0x20]; call r15
0x00142aca : mov [rip + 0x28c540], eax; mov eax, 1; add rsp, 8; ret
0x0015d938 : adc [rdi], cl; test [rcx + 5], eax; add [rax], al; ret
0x00097a11 : mov edx, [rsi]; mov [rdi], dx; lea rax, [rdi + 2]; ret
0x0013585e : mov eax, [rdi + 0x60]; mov rdi, rbp; call [rax + 0x20]
0x00096be1 : mov edx, [rsi]; mov [rdi], dx; lea rax, [rdi + 1]; ret
0x0010bfd5 : mov edx, eax; mov rsi, [rbp - 0x98]; call [r10 + 0x28]
0x001334dd : lea esi, [rsp + 0x18]; mov rdi, rbp; call [rax + 0x48]
0x0015ddbe : add [rax], al; mov [rcx], rdx; mov [rcx + 6], rdx; ret
0x0010e419 : mov eax, [r12 + 0x60]; mov [rbp - 0x80], eax; call rcx
0x00171aa7 : adc [rsi + 2], rdx; vmovups zmm[rsi + 0xc0], zmm2; ret
0x000965c2 : inc ebx; nop ; nop cs:[rax + rax]; mov [rdi], edx; ret
0x0011f76f : add [rax], eax; add [rax - 1], bh; cmove eax, edx; ret
0x001005b7 : add ebx, eax; xor ebp, ebp; pop rax; pop rdi; call rax
0x0001f0b9 : add [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret
0x0013402d : mov rax, [rsp + 0x58]; mov rdi, rbp; call [rax + 0x20]
0x0010fd0e : add [rax + 0x48c03155], dl; mov ebp, esp; pop rbp; ret
0x0005d748 : mov rax, [rbx + 0x98]; mov rdi, rax; call [rax + 0x20]
0x00064709 : mov ebp, [rdi + 0x98]; mov rdi, rbp; call [rbp + 0x20]
0x00008f80 : mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call rbx
0x000061f6 : mov rdi, [rsp + 0x40]; mov rax, [rsp + 0x20]; call rax
0x001352f0 : mov rax, [r14 + 0x70]; mov rdi, r12; call [rax + 0x20]
0x00064e0a : mov eax, [rax + 0x130]; mov rax, [rax + 0x20]; jmp rax
0x000045a3 : mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x000afb5f : add [rax - 0x39], cl; rol [rcx], 0; add [rax], al; ret
0x0012a725 : add [rsi + 0x2e], ah; nop [rax + rax]; mov eax, 1; ret
0x0011fd69 : movsxd rdx, edx; mov eax, r8d; mov [rdi + rdx], 0; ret
0x00171946 : adc [rsi - 2], rdx; vmovups zmm[rsi - 0x40], zmm2; ret
0x0001caaf : add bl, bl; insb [rdi], dx; and al, 8; fadd st(0); ret
0x00146004 : mov edi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; call rdx
0x001699e8 : movzx edx, [rsi + rcx]; sub eax, edx; vzeroupper ; ret
0x0012befa : sbb [rbp + rcx*4 + 0x4c], cl; and al, 0x40; call [rax]
0x001352f1 : mov eax, [rsi + 0x70]; mov rdi, r12; call [rax + 0x20]
0x0009615f : sbb cl, [rdi]; test [rdx + 5], ebp; add [rax], al; ret
0x0012b704 : push [rip + 0x6f856]; lea r9, [rsp + 0x2c]; call [rax]
0x0009a7af : inc [rax]; add [rax], al; cmove rax, rcx; pop rbx; ret
0x0006d1bc : pop rcx; add [rcx + rcx*4 - 1], ecx; call [rax + 0x18]
0x00141a9d : add [rax], al; add [rax - 0x77], cl; xor eax, eax; ret
0x00008f81 : mov esi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call rbx
0x0012ba9e : add [rbp + rcx*4 + 0x4c], cl; and al, 0x20; call [rax]
0x0010bfd4 : mov rdx, rax; mov rsi, [rbp - 0x98]; call [r10 + 0x28]
0x00065989 : push rax; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x000f4aa6 : add [rax], al; add [rbp + 0xc], dh; add rsp, 0x18; ret
0x000aaec7 : add [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret
0x0012c27d : mov rax, [rsp + 0xd8]; mov rdi, rbx; call [rax + 0x20]
0x000bf783 : mov edi, [rsp + 0x20]; mov rax, [rsp + 0x18]; call rax
0x0012c226 : mov eax, [rdi + 0x38]; mov rdi, r15; call [rax + 0x20]
0x00160061 : mov eax, [rcx]; mov [rdx], ax; lea rax, [rdx + 1]; ret
0x0013585d : mov rax, [r15 + 0x60]; mov rdi, rbp; call [rax + 0x20]
0x00064e09 : mov rax, [rax + 0x130]; mov rax, [rax + 0x20]; jmp rax
0x0013818b : add [rdx + 0x3c], ch; lea r9, [rsp + 0x3a]; call [rax]
0x0011d30b : add [rax], al; add [rax], al; add [rcx - 0xa], al; ret
0x00044493 : lea rcx, [rbx + rdx]; add rdx, r12; call [r10 + rax*8]
0x00003e8f : mov rdi, [rsp + 0x20]; mov rax, [rsp + 0x10]; call rax
0x00108d76 : sbb [rcx + rcx*4 - 0x12], cl; xor r15d, r15d; call rax
0x000067d5 : mov esi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call r15
0x00134121 : mov eax, [rsp + 0x88]; mov rdi, rbp; call [rax + 0x20]
0x0009665e : add [rax], al; mov [rdi], rdx; mov [rdi + 5], rdx; ret
0x0015ddae : add [rax], al; mov [rcx], rdx; mov [rcx + 5], rdx; ret
0x0012e8df : add [rax + 0x29], ecx; mov rbp, rdx; call [rbx + 0x10]
0x00008359 : mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r15
0x00005395 : mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x0000583b : mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r13
0x0012afda : mov rax, [rbx + 0x20]; mov rdi, rbp; call [rax + 0x20]
0x0015dce3 : add [rax], r8b; nop cs:[rax + rax]; mov [rcx], dl; ret
0x00020c77 : dec [rcx + rcx*4 - 0x11]; mov rax, [rsp + 8]; call rax
0x00103bce : mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x40; ret
0x000404f3 : xor edx, edx; div r8d; add r9d, eax; mov eax, r9d; ret
0x0000489b : mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call r14
0x0013867e : add [rax], al; mov rax, [rip + 0x291531]; pop rbx; ret
0x0000b9c8 : adc [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x0012b709 : add [rbp + rcx*4 + 0x4c], cl; and al, 0x2c; call [rax]
0x0004781b : mov [rbp - 0x4d8], 1; mov [rbp - 0x4f0], 0x20; jmp rax
0x0001d9d6 : sub [rcx - 0x3b76b310], cl; mov rbp, r9; nop ; jmp rdx
0x00133d98 : mov rax, [rsp + 0x78]; mov rdi, rbx; call [rax + 0x20]
0x0015ddde : add [rax], al; mov [rcx], rdx; mov [rcx + 8], rdx; ret
0x00092177 : add [rsi - 0x77], esp; add cl, [rax - 0x77]; clc ; ret
0x00004a74 : mov esi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call rbx
0x00060d1b : mov eax, r13d; pop rbp; pop r12; pop r13; pop r14; ret
0x00004d5d : mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r12
0x00138ffb : adc [rsp + 0xb8], eax; mov [rsp + 0xc8], rdx; call rax
0x000f6751 : mov [rip + 0x2d6699], eax; mov eax, 1; add rsp, 8; ret
0x0002e972 : add [rip - 0xb791800], al; std ; dec [rax - 0x77]; ret
0x00096603 : inc ebx; nop ; nop cs:[rax + rax]; mov [rdi], rdx; ret
0x000f6750 : mov [rip + 0x2d6699], rax; mov eax, 1; add rsp, 8; ret
0x00146003 : mov rdi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; call rdx
0x00096593 : add [rax], r8b; nop cs:[rax + rax]; mov [rdi], dl; ret
0x001355da : sub eax, 1; bswap eax; mov [rdx], eax; mov eax, 1; ret
0x000997b5 : movq [rdi], mm0; xor ch, ch; mov [rdi + 0x10], ch; ret
0x00044494 : lea ecx, [rbx + rdx]; add rdx, r12; call [r10 + rax*8]
0x001334dc : lea rsi, [r12 + 0x18]; mov rdi, rbp; call [rax + 0x48]
0x000996b7 : mov [rdi + 3], edx; xor ch, ch; mov [rdi + 7], ch; ret
0x000bf782 : mov rdi, [rsp + 0x20]; mov rax, [rsp + 0x18]; call rax
0x0000583c : mov esi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r13
0x000b07ce : mov rdi, [rsp + 0x50]; mov rax, [rsp + 0x18]; call rax
0x0009663e : add [rax], al; mov [rdi], rdx; mov [rdi + 7], edx; ret
0x0005d749 : mov eax, [rbx + 0x98]; mov rdi, rax; call [rax + 0x20]
0x0012afdb : mov eax, [rbx + 0x20]; mov rdi, rbp; call [rax + 0x20]
0x0009666e : add [rax], al; mov [rdi], rdx; mov [rdi + 6], rdx; ret
0x0012c5e9 : mov [rsp + 0x1a2], ax; mov rax, [rsp + 0x28]; call rax
0x001384fe : add [rax], al; mov rax, [rip + 0x291809]; pop rbx; ret
0x0012b116 : mov rsi, r12; mov rax, [rdi + 0x38]; call [rax + 0x10]
0x0000489c : mov esi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call r14
0x00103bcf : mov ecx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x40; ret
0x00146007 : sbb [rax - 0x75], cl; push rsp; and al, 0x10; call rdx
0x000904ef : add [rax - 0x7b], cl; div [rbp + 4]; xor rax, rax; ret
0x0015dd4e : add [rax], al; mov [rcx], edx; mov [rcx + 3], edx; ret
0x00061b2a : pop rbx; mov eax, r12d; pop rbp; pop r12; pop r13; ret
0x0012c27e : mov eax, [rsp + 0xd8]; mov rdi, rbx; call [rax + 0x20]
0x0012b8e4 : push [rip + 0x6f676]; lea r9, [rsp + 0x2c]; call [rax]
0x00095651 : mov ecx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; ret
0x00171458 : adc [rcx - 2], rsi; vmovups zmm[r9 - 0x40], zmm15; ret
0x0004226d : sub dh, al; add [rip - 0x119c17], ch; jmp [rsi + 0x2e]
0x000045a4 : mov esi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x0005a30e : add [rbp + 0x480d75c0], al; mov eax, ebx; pop rbx; ret
0x0009664e : add [rax], al; mov [rdi], rdx; mov [rdi + 8], edx; ret
0x00171947 : adc [rsi - 2], edx; vmovups zmm[rsi - 0x40], zmm2; ret
0x0015dd8e : add [rax], al; mov [rcx], rdx; mov [rcx + 7], edx; ret
0x00132662 : mov eax, [rsi + 0xd0]; mov rdi, r12; call [rax + 0x20]
0x001385be : add [rax], al; mov rax, [rip + 0x291659]; pop rbx; ret
0x000f5b43 : add [rax], al; add [rbp + 0xf], dh; add rsp, 0x28; ret
0x00133d99 : mov eax, [rsp + 0x78]; mov rdi, rbx; call [rax + 0x20]
0x0013cc5d : add [rax], r8b; add [rdi + 0x28], edx; mov eax, 1; ret
0x0003a84b : mov [rbp - 0x500], r8; mov rdi, r14; call [r15 + 0x38]
0x0012d166 : add [rax], al; xor eax, eax; pop rbx; pop rbp; jmp rcx
0x00003e90 : mov edi, [rsp + 0x20]; mov rax, [rsp + 0x10]; call rax
0x000fe415 : add [rax], r8b; lea rax, [rip + 0x960e9]; pop rbx; ret
0x0013b35e : add [rax], al; cmp eax, 2; sete al; movzx eax, al; ret
0x00171b44 : adc [rsi + 6], rdx; vmovups zmm[rsi + 0x1c0], zmm2; ret
0x00096edd : movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x000920f5 : add [rsi + 0xf], esp; adc eax, [rdx]; mov rax, rdi; ret
0x000000a0 : add [rax], al; add al, ch; pop rax;  add [rax], al; ret
0x0015db2e : add [rdi], ecx; test [rbx + 3], ecx; add [rax], al; ret
0x000388db : mov rsi, rbx; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x001452a4 : add [rax], al; add [rbp + 0x78], dh; add rsp, 0x68; ret
0x0003a84c : mov [rbp - 0x500], eax; mov rdi, r14; call [r15 + 0x38]
0x00136999 : add [rdi], cl; sub [rsp + 0x20], eax; call [rax + 0x28]
0x00044826 : mov [rbp - 0x950], cl; mov rdi, [rbp - 0x8d0]; call rax
0x0012bef7 : mov [rsp + 0x18], edx; lea r9, [rsp + 0x40]; call [rax]
0x000f8061 : add [rax], al; setne al; add rsp, 8; movzx eax, al; ret
0x00038d1a : mov esi, ecx; mov rdi, [rbp - 0x8a8]; call [rbx + 0x38]
0x001386ac : mov [rbx], rax; mov rax, [rip + 0x291502]; pop rbx; ret
0x00152e6f : movdqu xmm[rdi + 0xf], xmm0; movdqu xmm[rdi], xmm1; ret
0x00079c1b : add [rax], al; add [rax], al; add [rax + 0x16], bh; ret
0x00038aa6 : mov esi, ebp; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x000450c2 : mov esi, esp; mov rdi, [rbp - 0x8d0]; call [r13 + 0x38]
0x000d19b0 : mov cs, [rbx]; add al, [rax]; add [rax + 0x63], cl; ret
0x000979e3 : add bl, al; nop ; nop cs:[rax + rax]; mov rax, rdi; ret
0x00141d1b : lea rsi, [rsp + 0x190]; mov rdi, rbp; call [rax + 0x18]
0x00153045 : mov ecx, [rsi]; mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x00097d1d : movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret
0x00152f4f : movdqu xmm[rdi + 0xd], xmm0; movdqu xmm[rdi], xmm1; ret
0x001712ee : mov cx, [rcx - 2]; mov [rdi], si; mov [r9 - 2], cx; ret
0x001057f2 : add [rax], al; add [rax - 0x77], cl; fucompi st(0); ret
0x00025249 : add [rdx], ah; add [rax], al; add [rax - 0x39], cl; ret
0x00160090 : mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx + 3]; ret
0x00152e85 : mov ecx, [rsi]; mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x00097d5d : movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret
0x00096ebd : movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x000ef444 : add [rax], al; add [rbp + 0x4a], dh; add rsp, 0x68; ret
0x00096efd : movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x00030239 : neg [rbx - 0x3d]; nop [rax]; mov rax, rbx; pop rbx; ret
0x000eeaf4 : add [rax], al; add [rbp + 0x42], dh; add rsp, 0x58; ret
0x0001ccbf : movd mm1, rax; movsd [rdi], xmm1; subsd xmm0, xmm1; ret
0x00095829 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x0006ebb2 : mov [rip + 0x35da20], edx; add [rip + 0x35da15], 1; ret
0x0004584e : mov esi, esp; mov rdi, [rbp - 0x8d0]; call [rbx + 0x38]
0x001009c5 : sub al, 0; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0009a1b0 : adc [rdi], eax; movups xmm[rdi + rdx - 0x10], xmm1; ret
0x0000f3eb : add bl, al; nop [rax]; mov eax, edi; and eax, 0x7f; ret
0x000c8567 : add [rax - 0x73], cl; or [r11 + 0x5d], bl; pop r12; ret
0x0006be6c : push rbx; mov rdi, rbx; sub rdx, rsi; call [r13 + 0x70]
0x000af62c : add [rax], al; add [rax], al; lea rax, [rdi - 0xc]; ret
0x00095cfa : movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000450c1 : mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [r13 + 0x38]
0x00042eba : mov [rdi], ebp; pop rbx; pop rbp; pop r12; pop r13; ret
0x00096c00 : mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 3]; ret
0x000f8330 : add [rax], al; mov [rip + 0x2d4c43], 0; add rsp, 8; ret
0x0011a12a : add [rax], al; add [rbp + 0x59], dh; add rsp, 0x38; ret
0x00042eb9 : mov [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret
0x000996fa : mov [rdi + 8], dx; xor ch, ch; mov [rdi + 0xa], ch; ret
0x000260d1 : dec [rax - 0x77]; sbb cl, ch; idiv dil; jmp [rsi + 0xf]
0x0012c5ea : mov [rsp + 0x1a2], eax; mov rax, [rsp + 0x28]; call rax
0x0003a600 : mov esi, [rbp - 0x4f8]; mov rdi, r14; call [rax + 0x38]
0x000c49f8 : add [rax], al; add [rbp + 0x56], dh; add rsp, 0x38; ret
0x00095716 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], ecx; ret
0x0003a1a9 : xor rax, fs:[0x30]; mov rsi, [rip + 0x38fad7]; call rax
0x0011fdfd : add esp, 8; lea eax, [rbx + rbp]; pop rbx; pop rbp; ret
0x00095787 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rcx; ret
0x00046b8d : xor rax, fs:[0x30]; mov rsi, [rip + 0x3830f3]; call rax
0x00095869 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x000eed19 : add [rax], al; add [rbp + 0x45], dh; add rsp, 0x58; ret
0x0006d22a : movzx esi, [rcx]; lea rbx, [rcx + 1]; call [rax + 0x18]
0x000c540b : add [rax], al; add [rax], al; add [rax + 0x7e], bh; ret
0x00060816 : lea ecx, [rdx + 4]; mov [rax], rcx; mov eax, [rdx]; ret
0x000f7831 : add [rax], al; add [rbp + 0x3f], dh; add rsp, 0x38; ret
0x0006cad0 : sbb [r8 - 0x77], r9b; push rdi; mov [rdi + 8], rax; ret
0x0011fdfc : add rsp, 8; lea eax, [rbx + rbp]; pop rbx; pop rbp; ret
0x001386ad : mov [rbx], eax; mov rax, [rip + 0x291502]; pop rbx; ret
0x00045521 : mov edi, [rbp - 0x8d0]; mov rdx, r13; call [rbx + 0x38]
0x000f668d : add [rax], al; add [rbp + 0x3b], dh; add rsp, 0x68; ret
0x0007aafb : add [rax], al; add [rax], al; add [rax - 0x77], cl; ret
0x000921d9 : mov ax, [rcx + 4]; mov [rdx + 4], ax; mov rax, rdi; ret
0x00045520 : mov rdi, [rbp - 0x8d0]; mov rdx, r13; call [rbx + 0x38]
0x0005ab18 : add [rax], al; mov [rdx + 8], r9; add [rdx + 4], 1; ret
0x00145028 : add [rax], al; add bl, al; nop [rax]; xor eax, eax; ret
0x001530b4 : mov rcx, [rsi]; mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x000ee204 : add [rax], al; add [rbp + 0x10], dh; add rsp, 0x28; ret
0x00152fbf : movdqu xmm[rdi + 0xc], xmm0; movdqu xmm[rdi], xmm1; ret
0x00070cbb : mov [rax + 0x12], esi; add [rcx], dh; call [rax + 0x31]
0x00096580 : movdqu xmm[rdi + 0x10], xmm2; mov [rdi + 0x20], cl; ret
0x000cec0a : add al, [rbx - 0x3fe6fe06]; and eax, 2; add eax, 8; ret
0x0015302f : movdqu xmm[rdi + 0xb], xmm0; movdqu xmm[rdi], xmm1; ret
0x0014399f : add [rax], al; add [rcx + 0x415d5bd8], cl; pop rsp; ret
0x000c67ae : lea esi, [rbp - 0x2e0]; mov rdi, r13; call [r14 + 0x38]
0x00096c50 : mov rdx, [rsi]; mov [rdi], rdx; lea rax, [rdi + 7]; ret
0x001385ed : mov [rbx], eax; mov rax, [rip + 0x29162a]; pop rbx; ret
0x001725cc : add [rax], al; add [rax], al; lea rax, [rdi + 0xa]; ret
0x001530b5 : mov ecx, [rsi]; mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x0006f5f4 : mov [rip + 0x35a9e6], 1; mov [rip + 0x35a9d8], eax; ret
0x00171ece : add [rdx - 0xf], esp; dec [rax + 0x6f]; jmp [r10 - 0xf]
0x0005f6bc : adc ecx, [rax - 0x77]; fcomp [rbx + 0x5d]; pop r12; ret
0x00152fd5 : mov ecx, [rsi]; mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x000e124d : lea rsi, [rbp - 0x2e0]; mov rdi, r13; call [r14 + 0x40]
0x00152ef4 : mov rcx, [rsi]; mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x00138a49 : add [rax], al; mov [rsp + 0x38], rdx; call [rax + 0x18]
0x001715bf : adc [rcx + 6], rsi; vmovups zmm[r9 + 0x1c0], zmm15; ret
0x0013cc6b : add [rax], 0; add [rax], al; mov eax, [rdi + 0x28]; ret
0x0013852c : mov [rbx], rax; mov rax, [rip + 0x2917da]; pop rbx; ret
0x00171b45 : adc [rsi + 6], edx; vmovups zmm[rsi + 0x1c0], zmm2; ret
0x001691d1 : add [rax + 1], cl; clc ; add rax, rcx; vzeroupper ; ret
0x0001ccc0 : movd mm1, eax; movsd [rdi], xmm1; subsd xmm0, xmm1; ret
0x00153273 : mov ecx, [rsi]; mov [rdi + 2], edx; mov [rdi], ecx; ret
0x00135809 : pop r8; add [rax], al; add [rax], al; call [rax + 0x28]
0x000b4bee : add [rax], al; add [rbp + 0x22], dh; add rsp, 0x28; ret
0x00066535 : sub [rax - 0x78], al; cmp [rcx + rcx*4 - 0x30], al; ret
0x00152ef5 : mov ecx, [rsi]; mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x00153044 : mov rcx, [rsi]; mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x0015309f : movdqu xmm[rdi + 0xa], xmm0; movdqu xmm[rdi], xmm1; ret
0x0010248c : add [rax], al; add [rbp + 0x4a], dh; add rsp, 0x58; ret
0x0017682b : xchg eax, ecx; add [rax], al; add [rcx + 0x21], cl; ret
0x00171148 : add [rax], al; add [rbx + rax - 9], bh; fadd st(3); ret
0x00080613 : mov [rbp], ebp; pop rbp; pop r12; pop r13; pop r14; ret
0x00152e84 : mov rcx, [rsi]; mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x0006cad1 : sbb [rax - 0x77], cl; push rdi; mov [rdi + 8], rax; ret
0x000f597a : add [rax], al; add [rbp + 0x76], dh; add rsp, 0x38; ret
0x00102b9e : add [rax], al; mov [rip + 0x2c74e5], 0; add rsp, 8; ret
0x0005a9d0 : add [rax], al; add [rbp + 0x12], dh; add rsp, 0x18; ret
0x001725ec : add [rax], al; add [rax], al; lea rax, [rdi + 0xc]; ret
0x000e8910 : add [r8], r8b; add [rax], al; add [rax - 0x7d], cl; ret
0x00100559 : add [rax], al; add [rbp + 0x1d], dh; add rsp, 0x78; ret
0x000235ac : mov [rdi + 4], ax; xor eax, eax; mov [rdi + 2], dx; ret
0x0015ffe1 : mov eax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; ret
0x00097a90 : mov rdx, [rsi]; mov [rdi], rdx; lea rax, [rdi + 8]; ret
0x0003a5ff : mov rsi, [rbp - 0x4f8]; mov rdi, r14; call [rax + 0x38]
0x000e124e : lea esi, [rbp - 0x2e0]; mov rdi, r13; call [r14 + 0x40]
0x0014214b : add [rax], al; add [rbp + 0x2c], dh; add rsp, 0x18; ret
0x0006ebb1 : mov [rip + 0x35da20], rdx; add [rip + 0x35da15], 1; ret
0x00153203 : mov ecx, [rsi]; mov [rdi + 3], edx; mov [rdi], ecx; ret
0x00095849 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x0009788e : sbb [rdi], ecx; test [rbx + 6], ebx; add [rax], al; ret
0x00141d1c : lea esi, [rsp + 0x190]; mov rdi, rbp; call [rax + 0x18]
0x00095e60 : add ecx, [rdi]; test [rcx + 8], ebp; add [rax], al; ret
0x001046ec : mov edi, edi; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x000fccad : push [rbx + 0x20]; mov rsi, rbx; mov rdi, r13; call r14
0x000f7900 : add [rax], al; add [rbp + 0x40], dh; add rsp, 0x38; ret
0x00097d3d : movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret
0x00138d39 : add [rax], al; mov [rsp + 0x40], rdx; call [rax + 0x18]
0x0012bef6 : mov [rsp + 0x18], r10; lea r9, [rsp + 0x40]; call [rax]
0x000473bf : mov rdx, [rbp - 0x4d8]; mov rsi, r15; call [r14 + 0x38]
0x0003b924 : mov rdi, r14; mov rdx, [rbp - 0x510]; call [r15 + 0x38]
0x0009c20b : add [rcx + 0xc00f9], al; add [rsp + rcx - 0xd], dh; ret
0x0015ffe0 : mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; ret
0x00153125 : mov ecx, [rsi]; mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x001451cc : add [rax], al; add [rbp + 0x6d], dh; add rsp, 0x58; ret
0x001532e3 : mov ecx, [rsi]; mov [rdi + 1], edx; mov [rdi], ecx; ret
0x001264c2 : add al, [rax]; add al, ch; mov esi, gs; jmp [rsi + 0xf]
0x00152f64 : mov rcx, [rsi]; mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x0003ab38 : sbb edx, [rip + 0x4634800]; nop ; add rax, rsi; jmp rax
0x00038aa5 : mov rsi, r13; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x0012a724 : add [rsi + 0x2e], spl; nop [rax + rax]; mov eax, 1; ret
0x00102c8f : adc [rax], al; add [rax], al; add [rax + 0x63], cl; ret
0x000388dc : mov esi, ebx; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x00102b6d : add [rax], al; mov [rip + 0x2c7516], 3; add rsp, 8; ret
0x001450dc : add [rax - 0x77], cl; sbb [r8 + 0x5a], bl; pop rbx; ret
0x00145473 : add [rax], al; add [rbp + 0x3e], dh; add rsp, 0x78; ret
0x001385ec : mov [rbx], rax; mov rax, [rip + 0x29162a]; pop rbx; ret
0x0010fe8c : lea esi, [rbp - 0x20]; lea rdi, [rip - 0x176]; call rax
0x00152f65 : mov ecx, [rsi]; mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x0009c2ff : mov rcx, rax; add rsp, 8; sub rcx, 4; mov rax, rcx; ret
0x0009225d : mov ax, [rcx + 8]; mov [rdx + 8], ax; mov rax, rdi; ret
0x00080612 : mov [r13], rbp; pop rbp; pop r12; pop r13; pop r14; ret
0x000f4a4b : add [rax], al; add [rbp + 0x1b], dh; add rsp, 0x38; ret
0x0017260c : add [rax], al; add [rax], al; lea rax, [rdi + 0xe]; ret
0x0010ce6b : add [rbp + 0x32], dh; add rsp, 8; pop rbx; pop rbp; ret
0x00152fd4 : mov rcx, [rsi]; mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x000fe7c6 : add bl, al; nop [rax + rax]; mov rax, [rax + 0x58]; ret
0x0004a07f : xor rax, fs:[0x30]; mov rsi, [rip + 0x37fc01]; call rax
0x00069245 : push rdx; mov rdx, rbx; mov rdi, rcx; call [r13 + 0x38]
0x00038196 : dec [rcx + rcx*4 - 2]; mov rdi, [rbp - 0x8a8]; call rax
0x0001be9b : add [rax], al; add [rax], al; add [rax - 0x39], cl; ret
0x00059f74 : adc [rax + rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x000476f7 : mov [rbp - 0x500], ebx; mov rdi, r13; call [r15 + 0x38]
0x0009c300 : mov ecx, eax; add rsp, 8; sub rcx, 4; mov rax, rcx; ret
0x0001d02d : movd mm1, eax; movss [rdi], xmm1; subss xmm0, xmm1; ret
0x0011ef28 : xor eax, eax; mov [rdi + 0xc], edx; mov [rsi], rdi; ret
0x00060815 : lea rcx, [rdx + 4]; mov [rax], rcx; mov eax, [rdx]; ret
0x00145124 : add [rax - 0x77], cl; adc [r8 + 0x5a], bl; pop rbx; ret
0x001725fc : add [rax], al; add [rax], al; lea rax, [rdi + 0xd]; ret
0x0013932c : add [rax], al; add [rbp + 0x27], dh; add rsp, 0x28; ret
0x001715c0 : adc [rcx + 6], esi; vmovups zmm[r9 + 0x1c0], zmm15; ret
0x00068ef1 : add [rax], al; add [rbp + 0x11], dh; add rsp, 0x48; ret
0x0006305a : add [rax], al; add [rcx + 0x5d5b7453], cl; pop r12; ret
0x0012b067 : add [rax], al; mov rax, [rdi + 0x38]; call [rax + 0x18]
0x0009223d : mov al, [rcx + 8]; mov [rdx + 8], al; mov rax, rdi; ret
0x0006414d : push rbx; mov rdi, rbx; sub rdx, rsi; call [r14 + 0x70]
0x0013b35d : add [rax], r8b; cmp eax, 2; sete al; movzx eax, al; ret
0x0007bfcf : add [rax + rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x0013852d : mov [rbx], eax; mov rax, [rip + 0x2917da]; pop rbx; ret
0x0005ab7b : add [rax], al; add [rax], al; add [rax + 0x10], bh; ret
0x0003822b : mov edi, [rbp - 0x8a8]; sub rdx, rsi; call [rbx + 0x38]
0x0013cc72 : sub bl, al; nop ; nop cs:[rax + rax]; xor eax, eax; ret
0x0003822a : mov rdi, [rbp - 0x8a8]; sub rdx, rsi; call [rbx + 0x38]
0x00138475 : mov [rbx], eax; mov rax, [rip + 0x29183a]; pop rbx; ret
0x00052338 : xor rax, fs:[0x30]; mov rsi, [rip + 0x377948]; call rax
0x0003b3e6 : adc edx, [rip + 0x4634800]; nop ; add rax, rsi; jmp rax
0x00030c64 : add [rbx - 0x77], bl; rcr [rbp + 0x41], 1; pop rsp; ret
0x00138474 : mov [rbx], rax; mov rax, [rip + 0x29183a]; pop rbx; ret
0x000473c0 : mov edx, [rbp - 0x4d8]; mov rsi, r15; call [r14 + 0x38]
0x00096684 : inc ebx; nop cs:[rax + rax]; movdqu xmm[rdi], xmm0; ret
0x00152edf : movdqu xmm[rdi + 0xe], xmm0; movdqu xmm[rdi], xmm1; ret
0x000f4bf0 : add [rcx], al; add [rax], al; mov [rdi + 0x16], ax; ret
0x0009218b : mov al, [rcx + 2]; mov [rdx + 2], al; mov rax, rdi; ret
0x00137326 : pop rax; mov rax, [rbx + 8]; pop rdx; call [rax + 0x20]
0x000476f6 : mov [rbp - 0x500], r11; mov rdi, r13; call [r15 + 0x38]
0x0010fe8b : lea rsi, [rbp - 0x20]; lea rdi, [rip - 0x176]; call rax
0x000bfba8 : add [rax], al; add [rbp + 0x4e], dh; add rsp, 0x38; ret
0x000921b9 : mov al, [rcx + 4]; mov [rdx + 4], al; mov rax, rdi; ret
0x00153124 : mov rcx, [rsi]; mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x0003d3d6 : xor rax, fs:[0x30]; mov rsi, [rip + 0x38c8aa]; call rax
0x0005a31e : add [rax], al; xor ebx, ebx; mov rax, rbx; pop rbx; ret
0x000c67ad : lea rsi, [rbp - 0x2e0]; mov rdi, r13; call [r14 + 0x38]
0x0001417b : add [rax], al; add [rax], al; add [rax - 0x7d], cl; ret
0x0003b925 : mov edi, esi; mov rdx, [rbp - 0x510]; call [r15 + 0x38]
0x00049d4f : xor rax, fs:[0x30]; mov rsi, [rip + 0x37ff31]; call rax
0x001725dc : add [rax], al; add [rax], al; lea rax, [rdi + 0xb]; ret
0x0006f5b4 : mov [rip + 0x35aa26], 1; mov [rip + 0x35a9f3], rax; ret
0x0015db2d : add [rdi], rcx; test [rbx + 3], ecx; add [rax], al; ret
0x0006f594 : mov [rip + 0x35aa46], 1; mov [rip + 0x35aa0b], rax; ret
0x001454fa : add [rax], al; add [rbp + 0x64], dh; add rsp, 0x38; ret
0x000f4dc5 : add [rsi], dl; add [rax], al; add [rax - 0x39], cl; ret
0x00096c51 : mov edx, [rsi]; mov [rdi], rdx; lea rax, [rdi + 7]; ret
0x00048121 : mov eax, ecx; mov [rbp - 0x4c0], 1; mov esi, 1; jmp rax
0x00097a40 : mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 4]; ret
0x0004584d : mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [rbx + 0x38]
0x000f6d03 : add [rax], al; mov [rip + 0x2d60e0], 0; add rsp, 8; ret
0x000afb33 : add ebx, eax; nop ; nop cs:[rax + rax]; add rax, 3; ret
0x0011fb8c : add edi, [rax + 2]; sub esi, 1; mov [rdi + 1], sil; ret
0x00097a91 : mov edx, [rsi]; mov [rdi], rdx; lea rax, [rdi + 8]; ret
0x0009a28f : add [rax], al; mov rcx, rdx; rep movsb [rdi], [rsi]; ret
0x0004703f : sub r14, r8; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x00135b93 : mov edi, [rsp]; mov rax, [rdi + 0x38]; call [rax + 0x18]
0x00099719 : mov [rdi + 7], edx; xor ch, ch; mov [rdi + 0xb], ch; ret
0x000fcd3c : sub ecx, [rax - 0x77]; fimul [rcx + rcx*4 - 9]; call r13
0x000871e2 : add al, bl; nop [rax]; mov [rdi], r8d; add rax, rdi; ret
0x0009a3ea : movups xmm[rcx - 0x30], xmm8; movups xmm[r11], xmm4; ret
0x001423ee : sub [rax], al; mov rdi, rdx; mov rsi, r8; call [rax + 8]
0x000b004b : add [rbx], cl; add [rax], al; mov rax, rbx; pop rbx; ret
0x0016e8f4 : add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper ; ret
0x00002198 : adc al, 0; mov rdi, r15; mov rsi, [rbp - 0x70]; call rsi
0x000921da : mov eax, [rcx + 4]; mov [rdx + 4], ax; mov rax, rdi; ret
0x001383b1 : mov [rip + 0x296a95], 2; mov fs:[rbx], rax; pop rbx; ret
0x00046f18 : mov r8, rcx; mov [rbp - 0x4c0], 1; xor esi, esi; jmp rax
0x000e0728 : mov [rsi], 0; mov [rsi + 0x10], 0; mov [rsi + 8], 0; ret
0x000ed895 : add al, ch; mov ch, 7; add [rax], al; add rsp, 0x18; ret
0x00097fe3 : movdqu xmm[rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret
0x0009a5c5 : movq [rdi + rdx - 0x10], mm0; movdqu xmm[rdi], xmm0; ret
0x00153271 : push rsi; add cl, [rbx + 0x257890e]; mov [rdi], ecx; ret
0x001719bf : add dh, [rdx + 8]; mov [rdi], cx; mov [rsi - 2], cx; ret
0x000963a5 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], cl; ret
0x0011edfe : add [rax], al; mov edi, [rdi]; mov eax, 3; syscall ; ret
0x00128afa : mov rsi, r15; mov rdi, rbx; mov [rsp + 8], rcx; call r12
0x0012d8ca : int1 ; mov [rdx + 0x58], rdi; mov [rdx + 0x68], rcx; ret
0x000871b0 : mov rdx, [rsp + 0x18]; add rax, rdi; mov [rdi], rdx; ret
0x0009977b : mov [rdi + 6], edx; xor ch, ch; mov [rdi + 0xe], ch; ret
0x00063309 : mov [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret
0x00102ba5 : sub al, 0; add [rax], al; add [rax], al; add rsp, 8; ret
0x0001dde4 : add [rax], al; add [rbp + 0x4a], dh; add rsp, 0x148; ret
0x000235ad : mov [rdi + 4], eax; xor eax, eax; mov [rdi + 2], dx; ret
0x0012b429 : mov edx, [rsp + 0x18]; mov rsi, [rsp + 0x10]; call [rax]
0x0009a7bb : add [rax], 0; add [rax], al; movzx eax, cl; pop rbx; ret
0x0014b5cf : movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00044fe7 : xchg edi, ebx; sbb [rax], eax; add [rax - 0x7d], cl; ret
0x000f3cbc : add [rax], al; add [rax], al; xor eax, eax; pop rbx; ret
0x0013552e : add [rax], al; add [rdi], cl; adc [rdi + 0x30], eax; ret
0x0001012d : dec [rcx + 0x63]; test [rax], r8d; add rax, r13; jmp rax
0x0013580a : pop rax; add [rax], al; add [rax], al; call [rax + 0x28]
0x00096683 : inc r11d; nop cs:[rax + rax]; movdqu xmm[rdi], xmm0; ret
0x000c63cf : add [rbx - 0x2ef73], cl; inc [rbx - 0x2ff73]; call [rax]
0x0001d36c : mov [rsp - 0x20], edx; movdqa xmm0, xmm[rsp - 0x28]; ret
0x0000f2be : movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x0013b34f : add [rbx + 0xb7501f8], al; mov rax, [rdi + 8]; jmp [rax]
0x000665fe : add [rax], 0; add [rcx + rcx*4 - 0x30], al; pop rbx; ret
0x0006148b : add [rax], 0; add [rcx + rcx*4 - 0x40], al; pop rbx; ret
0x00066534 : sub [rax - 0x78], r8b; cmp [rcx + rcx*4 - 0x30], al; ret
0x0012d217 : mov rax, [rbx + 0x23b8]; mov rdi, rbp; call [rax + 0x20]
0x0012b428 : mov rdx, [rsp + 0x18]; mov rsi, [rsp + 0x10]; call [rax]
0x00087280 : mov rax, [rsp + 0x10]; mov [rdi], rax; mov rax, rdi; ret
0x000956e6 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], cx; ret
0x0006138d : mov [rdx + 0x20], rax; mov [rcx], edi; mov eax, edi; ret
0x000780df : add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; jmp rax
0x000fe7cc : add [rax], al; add [rax], al; mov rax, [rax + 0x58]; ret
0x000226f1 : add [rax - 0x75], cl; add [rbx - 0x75], bl; pop rax; ret
0x0016211c : mov al, 1; add [rax], al; cmp [rax], 1; sbb rax, -1; ret
0x00161fc8 : add al, 3; add [rax], al; cmp [rax], 1; sbb rax, -1; ret
0x000ed512 : adc [rdi + 0x30], eax; movups xmm[rdi + 0x40], xmm0; ret
0x00095889 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0009977a : mov [rdi + 6], rdx; xor ch, ch; mov [rdi + 0xe], ch; ret
0x0006eb3c : add [rax], al; add [rax], al; mov rax, [rdi + 0x68]; ret
0x000962c3 : mov dl, [rsi + 2]; mov [rdi], cx; mov [rdi + 2], dl; ret
0x0000ddea : lea eax, [rip + 0x3bdac0]; mov [rip + 0x3bdb17], dl; ret
0x00008415 : xchg [rsi], bl; add al, [rax]; add [rax + 0x39], cl; ret
0x0009979a : mov [rdi + 7], rdx; xor ch, ch; mov [rdi + 0xf], ch; ret
0x000bbb58 : add ecx, [rdx]; add [rax], al; add [rax - 0x7d], cl; ret
0x0000dde9 : lea rax, [rip + 0x3bdac0]; mov [rip + 0x3bdb17], dl; ret
0x0006caa0 : push rdi; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x00134cb2 : bswap rax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0013202d : mov edi, [rdi]; mov rax, [rdi + 0x38]; call [rax + 0x18]
0x00087281 : mov eax, [rsp + 0x10]; mov [rdi], rax; mov rax, rdi; ret
0x00020c76 : mov esi, edi; mov rdi, r13; mov rax, [rsp + 8]; call rax
0x0009a472 : movups xmm[rdi + 0x30], xmm7; movups xmm[r11], xmm8; ret
0x0006ae62 : mov [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret
0x000c5597 : add [rcx - 0x48], dh; add [rax], eax; add [rax], al; ret
0x0012c9ca : add [rax], al; add [rax], al; mov [rsi + 0x10], rax; ret
0x00131d5b : add bl, al; nop [rax]; mov [rdi + 4], 0; mov eax, 1; ret
0x00032057 : mov [rdi - 8], r8; shl r9, cl; mov [rdi - 0x10], r9; ret
0x00168ec7 : movsxd rcx, ecx; lea rax, [rdi + rcx]; sub rax, rsi; ret
0x0009a3eb : movups xmm[rcx - 0x30], xmm0; movups xmm[r11], xmm4; ret
0x0000aae7 : adc [rax], al; nop [rax]; mov rax, [rip + 0x3c0c69]; ret
0x00097d7d : movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret
0x000c8677 : add [rax - 0x73], cl; add bl, [r11 + 0x5d]; pop r12; ret
0x0000f5c4 : movsd [rdi], [rsi]; cmp eax, [rax]; add rax, fs:[0]; ret
0x000c652a : adc [rbp + rcx*4 + 0x4b], cl; add [rcx - 0x77], ecx; ret
0x00171721 : adc [rdi - 7], rsi; vmovups zmm[rdi - 0x200], zmm15; ret
0x000c53ed : adc eax, [rax]; add [rbp - 0x20], dh; mov eax, 0xfa; ret
0x00020c75 : mov rsi, r15; mov rdi, r13; mov rax, [rsp + 8]; call rax
0x0005ab68 : add [rax], al; mov [rdx + 8], rcx; mov [rdx + 4], 1; ret
0x00169707 : add [rax], al; add [rax + 1], cl; clc ; vzeroupper ; ret
0x0001d02c : movd xmm1, eax; movss [rdi], xmm1; subss xmm0, xmm1; ret
0x0006138e : mov [rdx + 0x20], eax; mov [rcx], edi; mov eax, edi; ret
0x0001d36b : mov [rsp - 0x20], rdx; movdqa xmm0, xmm[rsp - 0x28]; ret
0x0008aeb5 : add [rsi + 0x2e], ah; nop [rax + rax]; xor eax, eax; ret
0x00142c22 : add [rax], al; add al, ch; or eax, r15d; jmp [rsi + 0xf]
0x00068687 : mov [rdi + 0x18], eax; mov [rsi], rax; xor eax, eax; ret
0x00039c51 : lea ebp, [rdx]; add al, [rax]; add [rax + 0x63], cl; ret
0x00044825 : mov [rbp - 0x950], r9b; mov rdi, [rbp - 0x8d0]; call rax
0x0001e10f : add [rax], al; add [rbp + 0x13], dh; add rsp, 0x118; ret
0x00002514 : add eax, [rax]; add [rax], al; add [rax - 0x7d], cl; ret
0x0016e83c : add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper ; ret
0x0009225e : mov eax, [rcx + 8]; mov [rdx + 8], ax; mov rax, rdi; ret
0x00135b92 : mov rdi, [r12]; mov rax, [rdi + 0x38]; call [rax + 0x18]
0x0009975b : mov [rdi + 5], edx; xor ch, ch; mov [rdi + 0xd], ch; ret
0x0001d72c : add [rax], al; nop ; movmskps eax, xmm0; and eax, 8; ret
0x0009975a : mov [rdi + 5], rdx; xor ch, ch; mov [rdi + 0xd], ch; ret
0x00161f1a : mov dl, 3; add [rax], al; cmp [rax], 1; sbb rax, -1; ret
0x000f6425 : add eax, esi; add eax, [rax]; mov rax, rbx; pop rbx; ret
0x000bb67a : add ecx, [rcx]; add [rax], al; add [rax - 0x7d], cl; ret
0x000af5f5 : add [rax + rbp*2 + 0x48], dh; lea eax, [rdi - 0x10]; ret
0x000fecd4 : mov [rbx + 0x38], rcx; add rsp, 8; pop rbx; pop rbp; ret
0x0000f21e : movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x0006487b : sub edx, esi; mov [rsp + 8], rcx; mov rdi, r15; call rax
0x0013202c : mov rdi, [r15]; mov rax, [rdi + 0x38]; call [rax + 0x18]
0x00096f1d : movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x0013cc6c : add [rax], al; add [rax], al; mov eax, [rdi + 0x28]; ret
0x0001e663 : dec [rax - 0x2d]; ror [rax + 0x21], 7; xor eax, eax; ret
0x0001ccbe : movq xmm1, rax; movsd [rdi], xmm1; subsd xmm0, xmm1; ret
0x0002e9e1 : neg edx; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x0006330a : mov [rbx + 0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret
0x000996fb : mov [rdi + 8], edx; xor ch, ch; mov [rdi + 0xa], ch; ret
0x000cebe8 : mov eax, [rdi + 0x4c]; add rsp, 8; pop rbx; pop rbp; ret
0x000871b1 : mov edx, [rsp + 0x18]; add rax, rdi; mov [rdi], rdx; ret
0x0001e08c : add [rax], al; add [rbp + 0x16], dh; add rsp, 0x118; ret
0x001327e8 : add [rax], al; add [rax], al; nop [rax]; mov eax, 2; ret
0x00136d1c : add [rcx + 0x481375d0], cl; sub esp, -0x80; pop rbx; ret
0x0012d218 : mov eax, [rbx + 0x23b8]; mov rdi, rbp; call [rax + 0x20]
0x000fecd5 : mov [rbx + 0x38], ecx; add rsp, 8; pop rbx; pop rbp; ret
0x001712ef : mov ecx, [rcx - 2]; mov [rdi], si; mov [r9 - 2], cx; ret
0x0006487a : sub rdx, rsi; mov [rsp + 8], rcx; mov rdi, r15; call rax
0x000fbf1c : add eax, [rax]; add [rax], al; pop rbp; pop r12; jmp rax
0x00166d71 : xchg eax, ecx; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x000bb778 : add ebp, [rbx]; add [rax], al; add [rax - 0x7d], cl; ret
0x0006f4d2 : push rax; or [rax - 0x75], cl; adc [rcx - 0x7d], al; ret
0x00102dcd : movsxd rbx, ebx; mov [rip + 0x2c72ba], rbx; pop rbx; ret
0x00001294 : mov [rax + rax], edi; mov fs:[rax], 9; mov eax, edi; ret
0x0016eb61 : add [rax], al; mov rax, r8; shr rax, 2; vzeroupper ; ret
0x00171722 : adc [rdi - 7], esi; vmovups zmm[rdi - 0x200], zmm15; ret
0x00099739 : mov [rdi + 8], edx; xor ch, ch; mov [rdi + 0xc], ch; ret
0x000680de : add [rax], al; xor eax, eax; test [rdi], 8; sete al; ret
0x000e2d5e : add [rax], al; mov rax, [rdi]; or [rax + 8], 0x2000; ret
0x00068686 : mov [rdi + 0x18], rax; mov [rsi], rax; xor eax, eax; ret
0x00131d76 : bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0012cc8a : add [rax], al; add cl, ch; sar ch, 0xff; jmp [rsi + 0xf]
0x00094f45 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rax, rdi; ret
0x00095489 : movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0001d1ed : add [rax], al; nop ; pmovmskb eax, xmm0; and eax, 8; ret
0x0016e83d : add eax, ecx; sub rax, rdx; shr rax, 2; vzeroupper ; ret
0x001693bf : add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper ; ret
0x000dc3b9 : mov [rax + rdx*4], fs; add [rax], al; add [rcx], al; ret
0x0001cc62 : movups xmm[rdi], xmm0; and rax, rdx; movq xmm0, rax; ret
0x00025fa9 : add [rbp + 0x31], al; inc [rax - 0x80]; jmp [rbp + 0x49]
0x000ee0da : add [rax], al; add [rdi], cl; adc [rsi + 0x70], eax; ret
0x0000f1de : movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x0009668c : add [rax], al; add [rax], al; movdqu xmm[rdi], xmm0; ret
0x0011fd56 : xor edx, edx; mov [rcx + rax - 2], dx; mov eax, r8d; ret
0x0012d804 : lea rsi, [rsp + 0x18]; lea r12, [rsp + 0x10]; call [rax]
0x00032167 : mov [rdi + 8], r8; shr r9, cl; mov [rdi + 0x10], r9; ret
0x0016dd7f : mov [rdi + rdx - 2], cx; mov [rdi], cx; vzeroupper ; ret
0x0009979b : mov [rdi + 7], edx; xor ch, ch; mov [rdi + 0xf], ch; ret
0x00135566 : add [rax], al; add [rdi], cl; adc [rdi + 0x20], eax; ret
0x0012d805 : lea esi, [rsp + 0x18]; lea r12, [rsp + 0x10]; call [rax]
0x00136907 : mov edi, [rax]; mov rax, [rdi + 0x38]; call [rax + 0x20]
0x0016e8f5 : add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper ; ret
0x00136906 : mov rdi, [rax]; mov rax, [rdi + 0x38]; call [rax + 0x20]
0x000af345 : add [rsi + 0x2e], ah; nop [rax + rax]; xor rax, rax; ret
0x000c3fde : lea rsp, cs:[rbp - 0x10]; pop rbx; pop r12; pop rbp; ret
0x000680ce : add [rax], al; xor eax, eax; test [rdi], 4; sete al; ret
0x00125432 : add [rax], al; add cl, ch; cmp dh, 0xff; jmp [rsi + 0xf]
0x00128afb : mov esi, edi; mov rdi, rbx; mov [rsp + 8], rcx; call r12
0x0001e5e0 : adc [rdi + 0x60], eax; movups xmm[rdi + 0x70], xmm0; ret
0x0015bdf7 : mov eax, [rcx + 6]; mov [rdx + 6], rax; mov rax, rdi; ret
0x0015bdd6 : mov rax, [rcx + 5]; mov [rdx + 5], rax; mov rax, rdi; ret
0x001421a3 : sub [rax], al; mov [rip + 0x2890d4], rdx; add rsp, 8; ret
0x00152897 : movq [rdi - 0x1b], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0015bd07 : mov eax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x00152997 : movq [rdi - 0x19], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00144a2c : add [rax], al; add [rax - 0x292417], dl; jmp [rsi + 0x2e]
0x000de667 : mov [rax + rax*8], fs; add [rax], eax; add [rcx], al; ret
0x000965a5 : add [rsi + 0x2e], ah; nop [rax + rax]; mov [rdi], dx; ret
0x000920f2 : movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret
0x00152667 : movq [rdi - 0x1f], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00137c7a : int1 ; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax
0x00144a4c : add [rax], al; add [rax - 0x24d417], dl; jmp [rsi + 0x2e]
0x0015dce5 : add [rsi + 0x2e], ah; nop [rax + rax]; mov [rcx], dl; ret
0x0015dcf5 : add [rsi + 0x2e], ah; nop [rax + rax]; mov [rcx], dx; ret
0x00022e26 : add edx, eax; xor eax, eax; mov [rsi], r10d; pop rbp; ret
0x0014bac8 : pop rdi; adc [rdx + 8], dh; movaps xmm[rdi], xmm4; jmp r9
0x0009229d : mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x000fcf8d : sub dh, al; add [rdx], cl; pop rbx; pop rbp; pop r12; ret
0x00102b74 : sub al, 0; add eax, [rax]; add [rax], al; add rsp, 8; ret
0x0012ba99 : lea edx, [rip + 0xf781]; lea r9, [rsp + 0x20]; call [rax]
0x0003bd10 : dec [rcx + rcx*4 - 0x3a]; mov rdi, r14; call [r15 + 0x38]
0x000f6be6 : mov [rip + 0x2d6268], eax; lea rax, [rip + 0x2d6235]; ret
0x000798ee : adc [rip - 0x137eb800], dh; add [rax], 0; add al, ch; ret
0x000025bb : adc [rax], eax; nop [rax]; mov rax, [rip + 0x3ccc51]; ret
0x000e072c : add [rax], al; mov [rsi + 0x10], 0; mov [rsi + 8], 0; ret
0x00046f19 : mov eax, ecx; mov [rbp - 0x4c0], 1; xor esi, esi; jmp rax
0x00037b1b : pop rsp; movsxd rbp, ebp; mov rdx, rbp; call [r13 + 0x38]
0x0008aeb4 : add [rsi + 0x2e], spl; nop [rax + rax]; xor eax, eax; ret
0x0007ad8d : add [rax], eax; add [rax], al; mov eax, ebx; pop rbx; ret
0x00094dac : sbb rax, -1; xor cl, cl; mov [rax], cl; mov rax, rdi; ret
0x0007c34f : add [rax], al; add [rcx], dh; ror [rax - 0x77], 0x37; ret
0x0013c6a8 : mov [rsp + 4], eax; mov rax, [rdi + 8]; call [rax + 0x48]
0x0013282a : mov esi, edx; mov [rdi + 0x10], 2; add rdi, 0x10; jmp rcx
0x00095663 : mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; ret
0x000fab04 : add [rax], al; lea rax, [rip + 0x2d2553]; add rsp, 8; ret
0x00045e33 : inc [rbx + rcx*4 - 0x63]; idiv edi; dec [rax - 0x77]; ret
0x00144a3c : add [rax], al; add [rax - 0x256417], dl; jmp [rsi + 0x2e]
0x00043adf : add [rax], al; or eax, 7; mov [rdx], eax; mov eax, 1; ret
0x0000007b : mov [rip + 0x3cf17f], edx; pop rax; pop rbx; pop rbp; ret
0x0013cc52 : sub [rax + rdi*4], al; add [rax], eax; add [rax], al; ret
0x00066dd9 : add [rax], al; mov [rdx], rax; xor eax, eax; pop rbx; ret
0x0015bdf6 : mov rax, [rcx + 6]; mov [rdx + 6], rax; mov rax, rdi; ret
0x00144a6c : add [rax], al; add [rax - 0x263417], dl; jmp [rsi + 0x2e]
0x0005bf88 : lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax
0x000fe52c : mov eax, [rax + 0x38]; test eax, eax; cmove eax, edx; ret
0x0015be17 : mov eax, [rcx + 7]; mov [rdx + 7], rax; mov rax, rdi; ret
0x0009214a : adc eax, [rdx]; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x0015bd96 : mov eax, [rcx + 5]; mov [rdx + 5], eax; mov rax, rdi; ret
0x00152b97 : movq [rdi - 0x15], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00066532 : mov [rsi + 0x28], rcx; mov [rax], dil; mov eax, r10d; ret
0x0006148c : add [rax], al; add [rcx + rcx*4 - 0x40], al; pop rbx; ret
0x00047b3a : add [rax], al; mov r8, rdx; mov [rbp - 0x4f8], 1; jmp rax
0x000fb2f9 : pop rbx; lea rax, [rip + 0x2d1def]; pop rbp; pop r12; ret
0x00095786 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rcx; ret
0x00131cd6 : add [rax], eax; add [rax], al; movups xmm[rdx], xmm0; ret
0x00144a5c : add [rax], al; add [rax - 0x246417], dl; jmp [rsi + 0x2e]
0x000665ff : add [rax], al; add [rcx + rcx*4 - 0x30], al; pop rbx; ret
0x00000ecb : pop rbx; pop r12; pop r13; pop r14; pop r15; pop rbp; ret
0x000f6a06 : mov [rip + 0x2d6448], eax; lea rax, [rip + 0x2d6415]; ret
0x0002332e : add [rax], al; lea rax, [rip + 0x3ac03f]; add rsp, 8; ret
0x00134b99 : mov rsi, rdx; mov [rdi + 0x68], 2; add rdi, 0x68; jmp rcx
0x0009a7bc : add [rax], al; add [rax], al; movzx eax, cl; pop rbx; ret
0x00066533 : mov [rsi + 0x28], ecx; mov [rax], dil; mov eax, r10d; ret
0x0009227d : mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x00132806 : int1 ; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx
0x0016ec1d : add [rax], r8b; mov rax, r8; shr rax, 2; vzeroupper ; ret
0x00046c42 : mov r15, r14; sar r15, 2; mov rdx, r15; call [rax + 0x38]
0x000ed561 : int1 ; dec [rbx + 0x438d0455]; add [rax - 0x7d], ecx; ret
0x000ee1a0 : mov eax, [rsi]; mov [rdi + 0x108], eax; xor eax, eax; ret
0x000c543b : add [rax], al; add [rax], al; add [rax + 0xfc17], bh; ret
0x0013bbc8 : mov [rsp + 0x10], eax; mov rax, [rdi + 8]; call [rax + 8]
0x000225d4 : xor [rax], al; add [rax], al; mov fs:[rbp], rdx; call rax
0x0013bbc7 : mov [rsp + 0x10], rax; mov rax, [rdi + 8]; call [rax + 8]
0x00144a8c : add [rax], al; add [rax - 0x10c417], dl; jmp [rsi + 0x2e]
0x00080160 : add edi, 1; test al, al; mov eax, 0; cmovne rax, rdi; ret
0x0013cc51 : sub [r8 + r15*4], r8b; add [rax], eax; add [rax], al; ret
0x000abdac : add [rax], al; add al, ch; xor r14, rsi; jmp [rsi + 0x2e]
0x0001e61d : mov eax, 1; shl rax, cl; or [rdi], rax; xor eax, eax; ret
0x00049f3f : adc eax, [rax - 0x78]; sub [rbx + 0x5d], bl; pop r12; ret
0x0013c680 : mov rax, [rdi + 8]; lea rsi, [rsp + 4]; call [rax + 0x40]
0x000ed831 : movq mm0, [rsi + 0x70]; movups xmm[rdi + 0x78], xmm0; ret
0x00131bf9 : mov rsi, rdx; mov [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx
0x00095622 : mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; ret
0x00096323 : mov dl, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dl; ret
0x0000f3e0 : add [rax - 0x75], cl; mov rax, [rax + rdi*4 + 0x200]; ret
0x0009a290 : add [rax - 0x77], cl; sal ebx, 1; movsb [rdi], [rsi]; ret
0x00152da7 : movq [rdi - 0x11], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0000007a : mov [rip + 0x3cf17f], rdx; pop rax; pop rbx; pop rbp; ret
0x001420a0 : inc [rbp + 0x480b78c0]; add esp, 8; pop rbx; pop rbp; ret
0x0006be9d : pop rbp; movzx eax, [rax]; pop r12; pop r13; pop r14; ret
0x0007cb40 : lea rax, [rip + 0x34fbe9]; mov [rip + 0x34fbca], rax; ret
0x0001d72d : add [rsi - 0x70], ah; movmskps eax, xmm0; and eax, 8; ret
0x00152917 : movq [rdi - 0x1a], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x001354ca : mov esi, edx; mov [rdi + 0x58], 2; add rdi, 0x58; jmp rcx
0x0009a0b2 : add [rcx], dh; ror [rax], cl; leave ; cmove rax, rdx; ret
0x0012615c : add [rax - 0x75], cl; push rax; sbb [rax - 0x77], cl; ret
0x00152a97 : movq [rdi - 0x17], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00144a7c : add [rax], al; add [rax - 0x11d417], dl; jmp [rsi + 0x2e]
0x00152b17 : movq [rdi - 0x16], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x000921f9 : mov eax, [rcx + 3]; mov [rdx + 3], eax; mov rax, rdi; ret
0x00132829 : mov rsi, rdx; mov [rdi + 0x10], 2; add rdi, 0x10; jmp rcx
0x000faaa7 : lea rax, [rip + 0x2d25d2]; pop rbx; pop rbp; pop r12; ret
0x000ed7e1 : movq mm0, [rdi + 0x78]; movups xmm[rsi + 0x70], xmm0; ret
0x00152a17 : movq [rdi - 0x18], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x000ee0f0 : mov eax, [rdi + 0x10c]; mov [rsi], eax; xor eax, eax; ret
0x0012d271 : add [rcx], dh; test [rax - 0x77], 0xdf; call [rax + 0x28]
0x00152d27 : movq [rdi - 0x12], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0005dccf : mov ebx, edi; sub rsp, 8; mov rdi, [rdi + 0xe0]; call rax
0x00152817 : movq [rdi - 0x1c], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x001354c9 : mov rsi, rdx; mov [rdi + 0x58], 2; add rdi, 0x58; jmp rcx
0x00094dad : sbb eax, -1; xor cl, cl; mov [rax], cl; mov rax, rdi; ret
0x00045ba0 : add al, ch; pop rdx; mov ah, 1; add [rax + 0x39], cl; ret
0x0005bf89 : lea edx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax
0x0015bd06 : mov rax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x000faaa8 : lea eax, [rip + 0x2d25d2]; pop rbx; pop rbp; pop r12; ret
0x0015bdd7 : mov eax, [rcx + 5]; mov [rdx + 5], rax; mov rax, rdi; ret
0x001526f7 : movq [rdi - 0x1e], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0015bda6 : mov eax, [rcx + 6]; mov [rdx + 6], eax; mov rax, rdi; ret
0x0014559f : add [rax - 0x77], cl; add ebx, [rax + 0x5a]; pop rbx; ret
0x00046c43 : mov edi, esi; sar r15, 2; mov rdx, r15; call [rax + 0x38]
0x00153201 : push rsi; add ecx, [rbx + 0x357890e]; mov [rdi], ecx; ret
0x0013d8cf : pop rcx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0000f39b : mov rax, [rax]; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x00097a26 : mov [rdi], cx; mov [rdi + 2], dl; lea rax, [rdi + 3]; ret
0x0013c681 : mov eax, [rdi + 8]; lea rsi, [rsp + 4]; call [rax + 0x40]
0x001532e1 : push rsi; add [rbx + 0x157890e], ecx; mov [rdi], ecx; ret
0x00096595 : add [rsi + 0x2e], ah; nop [rax + rax]; mov [rdi], dl; ret
0x00078602 : mov esi, ebp; pop rbp; pop r12; pop r13; pop r14; jmp rax
0x000962e2 : mov dl, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dl; ret
0x0012c92a : add [rax], eax; add [rax], al; mov [rsi + 0x10], rax; ret
0x0012ba98 : lea rdx, [rip + 0xf781]; lea r9, [rsp + 0x20]; call [rax]
0x001458b2 : mov r9d, [rdx]; mov rdx, r14; add r9, [rsp + 8]; call rax
0x000c53fb : add [rax], al; add [rax], al; add [rax + 0x7d00], bh; ret
0x00047040 : sub esi, eax; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x00122a4e : movzx eax, bl; neg eax; add rsp, 8; pop rbx; pop rbp; ret
0x00131bfa : mov esi, edx; mov [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx
0x000af270 : add [rax], al; add [rax + 1], cl; clc ; add rax, rcx; ret
0x000b4c82 : add [rax], al; add cl, ch; mov sil, 0xff; jmp [rsi + 0xf]
0x000138ce : call rax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x0000f39c : mov eax, [rax]; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x0009c442 : sbb cl, [rdx + rcx - 0xc49f100]; mov rdi, [r12]; call rbp
0x00078601 : mov rsi, r13; pop rbp; pop r12; pop r13; pop r14; jmp rax
0x00075d8b : add [rax], 0; add [rax], al; mov [rip + 0x35689e], 0; ret
0x00096bf3 : mov [rdi], cx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x00134b9a : mov esi, edx; mov [rdi + 0x68], 2; add rdi, 0x68; jmp rcx
0x0006aa3c : mov al, 0; add [rax], al; mov rdi, rbx; call [r13 + 0x20]
0x00032168 : mov [rdi + 8], eax; shr r9, cl; mov [rdi + 0x10], r9; ret
0x0005d965 : add [rbx + 0x48], bl; mov eax, esi; pop rbp; pop r12; ret
0x000afb43 : add eax, ebx; nop ; nop cs:[rax + rax]; xor rax, rax; ret
0x0008a722 : add al, [rax]; add [rax + 1], cl; clc ; add rax, rcx; ret
0x0008015f : add rdi, 1; test al, al; mov eax, 0; cmovne rax, rdi; ret
0x0007cb41 : lea eax, [rip + 0x34fbe9]; mov [rip + 0x34fbca], rax; ret
0x001458b3 : mov ecx, [rdx]; mov rdx, r14; add r9, [rsp + 8]; call rax
0x000af52b : add [rcx], eax; add [rax], al; lea rax, [rdi - 0x10]; ret
0x000ee0d6 : movq mm0, [rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x000ee100 : mov eax, [rdi + 0x108]; mov [rsi], eax; xor eax, eax; ret
0x0015be16 : mov rax, [rcx + 7]; mov [rdx + 7], rax; mov rax, rdi; ret
0x000d8ee1 : add bh, al; add [rsi], al; add [rax], al; add cl, ch; ret
0x00032058 : mov [rdi - 8], eax; shl r9, cl; mov [rdi - 0x10], r9; ret
0x000920f3 : movlps xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret
0x00152787 : movq [rdi - 0x1d], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x001249c3 : push rcx; push rbx; sub al, [rax]; mov rax, fs:[rax]; ret
0x000ee166 : movq mm0, [rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x00000286 : pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret
0x00152c17 : movq [rdi - 0x14], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0007eb04 : add al, ch; xchg [rax + rdi*8], dl; dec [rax - 0x77]; ret
0x00068f2d : add [rax], al; add [rbx + 0x5e8c107], cl; and eax, 1; ret
0x00095715 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], ecx; ret
0x000ccc09 : pop rbp; neg eax; pop r12; pop r13; pop r14; pop r15; ret
0x0016dd80 : mov [rdi + rdx - 2], ecx; mov [rdi], cx; vzeroupper ; ret
0x001423ef : add [rax - 0x77], cl; xlatb ; mov rsi, r8; call [rax + 8]
0x00152c97 : movq [rdi - 0x13], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x000f52a3 : mov rbx, -1; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0005dcce : mov rbx, rdi; sub rsp, 8; mov rdi, [rdi + 0xe0]; call rax
0x0010f53b : add [rax + rax], ch; mov [rip + 0x2c00d0], 1; pop rbx; ret
0x0000b86e : pushfq ; adc eax, [rax]; mov [rbx + 0x10], 0; pop rbx; ret
0x000e7d21 : sub [rax + 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret
0x0006bed5 : add [rcx + 0x415d5b13], cl; pop rsp; pop r13; pop r14; ret
0x001334c2 : add [rax], al; mov esi, 8; mov rdi, rbp; call [rax + 0x30]
0x00142486 : mov rax, [rip + 0x288df3]; mov rdi, rdx; call [rax + 0x20]
0x00022e25 : add r10d, eax; xor eax, eax; mov [rsi], r10d; pop rbp; ret
0x0011b77c : mov edx, [rsp + 8]; mov rsi, [rsp]; mov rdi, r13; call r12
0x00095664 : mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; ret
0x0009cd6c : mov rsi, [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx
0x0009a86b : add ah, bh; inc [rbx]; div ecx; pop rbx; mov eax, eax; ret
0x00043ade : add [rax], eax; add [rbx + 0x28907c8], al; mov eax, 1; ret
0x00097a55 : mov [rdi], ecx; mov [rdi + 4], dl; lea rax, [rdi + 5]; ret
0x000691e0 : mov rbx, r12; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x000b01d4 : add [rax - 0x77], cl; sal [rbp + 5], 1; add rsp, 0x28; ret
0x0009cd6d : mov esi, [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx
0x0013704f : mov esi, 6; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x00103205 : add al, [rbx + 0x574fff8]; add eax, 1; mov [rdx], eax; ret
0x0009cf13 : mov rdx, r14; lea r9, [rsp + 0x28]; mov rdi, rbp; call rbx
0x0009214b : add ah, [rsi + 0xf]; adc ecx, [rdx + 8]; mov rax, rdi; ret
0x0013cc71 : sub r11b, r8b; nop ; nop cs:[rax + rax]; xor eax, eax; ret
0x0016dd75 : mov [rdi + rdx - 4], ecx; mov [rdi], ecx; vzeroupper ; ret
0x0016dd69 : mov [rdi + rdx - 8], rcx; mov [rdi], rcx; vzeroupper ; ret
0x0011f1f2 : add [rax], al; add [rax + 0x63], cl; fisttp [rax + 1]; ret
0x0008733e : add [rax], al; mov [rdi], 0; lea rax, [rdi + rax - 1]; ret
0x0005d99d : add [rax], al; add [rcx], dh; test [rax - 0x77], 0xf0; ret
0x0001f794 : lea r14, [rdi + rax]; mov rbx, rax; mov rdi, r14; call rbp
0x00075d8c : add [rax], al; add [rax], al; mov [rip + 0x35689e], 0; ret
0x000cced4 : mov [rax], ebp; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x000962cb : add al, bl; nop [rax]; mov edx, [rsi]; mov [rdi], edx; ret
0x0008fc7b : lea rax, [rdi + rax]; cmp [rax], sil; cmovne rax, rdx; ret
0x001712ca : mov ecx, [rcx - 8]; mov [rdi], rsi; mov [r9 - 8], rcx; ret
0x0009cc19 : mov edx, esi; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x0009229c : add cl, [rbx + 0x42890841]; or [rax - 0x77], cl; clc ; ret
0x001712ed : mov cx, ss:[rcx - 2]; mov [rdi], si; mov [r9 - 2], cx; ret
0x0000ba46 : xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0013bfcd : mov rax, [rbp + 8]; mov rsi, rsp; mov rdi, rbp; call [rax]
0x00047df0 : mov r8, rcx; mov [rbp - 0x510], 1; xor r15d, r15d; jmp rax
0x00096c77 : mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 9]; ret
0x0000f3c2 : mov eax, [rax + 0x58]; mov eax, [rax + rdi*4 + 0x200]; ret
0x0014cefe : add [rax], al; mov rdx, [rsi - 8]; mov [rdi - 8], rdx; ret
0x00068127 : mov rdx, [rax + 0x18]; mov [rax + 0x20], rdx; pop rbx; ret
0x0006d770 : mov [rbx], edx; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x001426de : sub [rax], al; mov rsi, r9; mov rdi, r8; call [rax + 0x10]
0x00083b9c : dec [rdi]; test [rsi], al; sub [rax], eax; add bh, dh; ret
0x0002200a : add [rip + 0x3ad33f], 1; add rsp, 8; pop rbx; pop rbp; ret
0x000703ef : add [rbx + 0x359b9e05], cl; add [rbp - 0xcf98740], al; ret
0x00111f54 : div ebp; mov rbx, rax; mov rax, rbx; pop rbx; pop rbp; ret
0x0006e840 : lea rdx, [rax + 0x60]; mov rax, [rdi]; mov [rdx], rax; ret
0x0016dd6a : mov [rdi + rdx - 8], ecx; mov [rdi], rcx; vzeroupper ; ret
0x0013638f : dec [rcx - 0x77]; xor [r9 - 0x77], r9b; cmp r8b, r13b; ret
0x0001d1ec : add [rax], al; add [rax - 0x3f28f09a], dl; and eax, 8; ret
0x001371bf : mov esi, 7; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0006a5cf : sub rbp, rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret
0x000e4bf2 : mov edi, [rbp - 0x190]; push rax; mov rcx, [r14]; call r12
0x0009223c : add cl, [rdx + 0x42880841]; or [rax - 0x77], cl; clc ; ret
0x0009c010 : mov rax, rbx; mov [r12], 0; pop rbx; pop rbp; pop r12; ret
0x00168d64 : mov [rip + 0xc8b0001], bh; mov cl, [rbx - 0x37d67dfc]; ret
0x00061cc9 : add al, [rax]; add [rbx + 0x5d], bl; pop r12; pop r13; ret
0x000872a8 : movzx eax, [rsp - 6]; mov [rdi + 2], al; mov rax, rdi; ret
0x0007b40f : add [rax - 0x77], cl; fimul [rcx + rcx*4 - 0x19]; call rax
0x0012dda0 : bswap eax; mov [rdx], eax; mov edx, ebx; call [r13 + 0x10]
0x00138de0 : mov rax, [r15 + 8]; mov rsi, rbp; mov rdi, r15; call [rax]
0x0012b50f : add [rbx + 0x2a377605], cl; add [rbp - 0xcf98b40], al; ret
0x000e4bf1 : mov rdi, [rbp - 0x190]; push rax; mov rcx, [r14]; call r12
0x0014279e : sub [rax], al; mov rsi, r9; mov rdi, r8; call [rax + 0x18]
0x00097a27 : mov [rdi], ecx; mov [rdi + 2], dl; lea rax, [rdi + 3]; ret
0x000ed83f : add [rdi], cl; mov bh, 7; mov [rsi], ax; xor eax, eax; ret
0x00068f2e : add [rax], al; mov eax, [rdi]; shr eax, 5; and eax, 1; ret
0x000b225a : mov ah, [rsi + 0x5d5b0031]; pop r12; pop r13; pop r14; ret
0x0008fc7c : lea eax, [rdi + rax]; cmp [rax], sil; cmovne rax, rdx; ret
0x00118656 : xor eax, eax; mov [rdx], 0; pop rbp; pop r12; pop r13; ret
0x0000f3e2 : mov eax, [rax + 0x48]; mov eax, [rax + rdi*4 + 0x200]; ret
0x0012d815 : mov eax, [rbx + 8]; mov rsi, r12; mov rdi, rbx; call [rax]
0x0009c011 : mov eax, ebx; mov [r12], 0; pop rbx; pop rbp; pop r12; ret
0x000c023a : add [rcx + 0x415d5bd0], cl; pop rsp; pop r13; pop r14; ret
0x00152c2e : add [rax], al; mov edx, [rsi - 4]; mov [rdi - 4], edx; ret
0x00142522 : add [rax - 0x75], cl; add eax, 0x288d56; call [rax + 0x28]
0x00086f16 : add esi, eax; add [rax], eax; pop rbx; mov [rdi], rdx; ret
0x0009cf14 : mov edx, esi; lea r9, [rsp + 0x28]; mov rdi, rbp; call rbx
0x0007103c : xor edi, edi; pop rbx; mov rax, rdi; pop rbp; pop r12; ret
0x000f6455 : add [rax], al; add [rax], al; cmove rax, rbx; pop rbx; ret
0x0009ca09 : xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx
0x000018b3 : mov edx, ebp; mov rsi, [rsp + 0x18]; mov r9, r13; call rbx
0x0000de79 : mov eax, [rax]; mov rax, [rax]; mov eax, [rax + 0xa8]; ret
0x00096c63 : mov [rdi + 8], dh; mov [rdi], rcx; lea rax, [rdi + 8]; ret
0x0012d814 : mov rax, [rbx + 8]; mov rsi, r12; mov rdi, rbx; call [rax]
0x0015dd14 : push rcx; add al, bl; nop [rax + rax]; mov [rcx], edx; ret
0x000691ce : mov rbx, rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0012da87 : add r14, r8; sub edx, r8d; mov rsi, r14; call [r15 + 0x40]
0x0001f795 : lea esi, [rdi + rax]; mov rbx, rax; mov rdi, r14; call rbp
0x0013852b : mov fs:[rbx], rax; mov rax, [rip + 0x2917da]; pop rbx; ret
0x00138de1 : mov eax, [rdi + 8]; mov rsi, rbp; mov rdi, r15; call [rax]
0x0011b77b : mov rdx, [rsp + 8]; mov rsi, [rsp]; mov rdi, r13; call r12
0x00138473 : mov fs:[rbx], rax; mov rax, [rip + 0x29183a]; pop rbx; ret
0x00096bf4 : mov [rdi], ecx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x0000f3c1 : mov rax, [rax + 0x58]; mov eax, [rax + rdi*4 + 0x200]; ret
0x0012d9b3 : mov [rax], edx; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x0013bfce : mov eax, [rbp + 8]; mov rsi, rsp; mov rdi, rbp; call [rax]
0x000691cf : mov ebx, eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x00096c78 : mov [rdi], ecx; mov [rdi + 8], dx; lea rax, [rdi + 9]; ret
0x0006a5d0 : sub ebp, eax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret
0x000018b2 : mov rdx, rbp; mov rsi, [rsp + 0x18]; mov r9, r13; call rbx
0x001373f1 : mov esi, 8; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0010261d : int1 ; dec [rax - 0x7b]; sal [rsp + rdx + 0x48], 0x89; ret
0x000e7b93 : sub [rax + 5], bh; pop rbx; pop rbp; pop r12; pop r13; ret
0x0011f7b4 : add [rax], al; add [rax + 0x102], bh; cmovne eax, edx; ret
0x0013ed1f : mov [rip + 0x290ab7], 0; add rsp, 8; pop rbx; pop rbp; ret
0x00095623 : mov edx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; ret
0x00096c12 : mov [rdi + 4], dh; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x00112048 : add ch, cl; xchg eax, edx; fucompi st(6); jmp [rsi - 0x70]
0x000aa94c : sub ebx, eax; mov eax, ebx; pop rbx; pop rbp; pop r12; ret
0x000691e1 : mov ebx, esp; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x001712c9 : mov rcx, [rcx - 8]; mov [rdi], rsi; mov [r9 - 8], rcx; ret
0x0009a777 : add [rax], al; add [rax], al; cmove rax, rdx; pop rbx; ret
0x0000f668 : movsd [rdi], [rsi]; cmp eax, [rax]; mov fs:[rdx], rax; ret
0x0012f988 : add [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; ret
0x00096c26 : mov [rdi], ecx; mov [rdi + 4], dx; lea rax, [rdi + 5]; ret
0x0012b9d2 : mov esi, 4; mov rdi, rbp; lea r9, [rsp + 0x20]; call [rax]
0x0000f3e1 : mov rax, [rax + 0x48]; mov eax, [rax + rdi*4 + 0x200]; ret
0x0006ec17 : add [rax], al; add [rax], al; mov [rip + 0x35d9b2], 0; ret
0x0006814d : mov eax, [rbx + 0x20]; mov [rbx + 0x28], rax; pop rbx; ret
0x00097a66 : mov [rdi], ecx; mov [rdi + 4], dx; lea rax, [rdi + 6]; ret
0x001438f5 : add [rax - 0x75], cl; add eax, 0x287983; call [rax + 0x28]
0x0006e841 : lea edx, [rax + 0x60]; mov rax, [rdi]; mov [rdx], rax; ret
0x0009cc18 : mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x0000de78 : mov rax, [rax]; mov rax, [rax]; mov eax, [rax + 0xa8]; ret
0x000cc959 : add esi, eax; or [r9], r8b; mov [rdi], al; mov eax, 1; ret
0x00097aa6 : mov [rdi], rcx; mov [rdi + 8], dl; lea rax, [rdi + 9]; ret
0x00111f53 : div rbp; mov rbx, rax; mov rax, rbx; pop rbx; pop rbp; ret
0x0007f671 : xor esp, esp; mov rax, r12; pop rbx; pop rbp; pop r12; ret
0x00136f02 : mov esi, 3; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0000728b : xor [rdi], cl; test [rdi + rdi*8 - 1], al; jmp [rsi + 0xf]
0x0016d309 : add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper ; ret
0x0012cdcd : adc cl, [rax - 0x73]; adc eax, 0x29cabb; jmp [rdx + rax*8]
0x00136dd2 : mov esi, 2; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x000ea748 : int1 ; dec [rax - 0x7b]; sal [rdx + rcx + 0x48], 0x83; ret
0x00139017 : add [rcx + rcx*4 - 2], cl; mov rdi, r14; call [rax + 0x18]
0x0012d9e6 : bswap edx; mov [rcx], edx; mov edx, eax; call [rbx + 0x10]
0x0001f0b8 : add [rax], al; add [rbx + 0x5d], bl; pop r12; pop r13; ret
0x00068128 : mov edx, [rax + 0x18]; mov [rax + 0x20], rdx; pop rbx; ret
0x0009ca83 : push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx
0x001327da : add bl, ch; sub eax, -0x32; adc esi, edi; jmp [rsi + 0x2e]
0x00142487 : mov eax, [rip + 0x288df3]; mov rdi, rdx; call [rax + 0x20]
0x001386ab : mov fs:[rbx], rax; mov rax, [rip + 0x291502]; pop rbx; ret
0x00128afc : dec [rax - 0x77]; fisttp [rax - 0x77]; and al, 8; call r12
0x001712dc : mov ecx, [rcx - 4]; mov [rdi], esi; mov [r9 - 4], ecx; ret
0x0016d30a : add eax, edi; add rax, rcx; sub rax, rdx; vzeroupper ; ret
0x0006814c : mov rax, [rbx + 0x20]; mov [rbx + 0x28], rax; pop rbx; ret
0x0009bb06 : add dh, bh; fadd st(3); nop [rax + rax]; xor rax, rax; ret
0x00097aa7 : mov [rdi], ecx; mov [rdi + 8], dl; lea rax, [rdi + 9]; ret
0x00102ebc : mov [r8], rax; nop ; mov [rip + 0x2c71c5], 0; pop rbp; ret
0x00002199 : add [rcx + rcx*4 - 1], cl; mov rsi, [rbp - 0x70]; call rsi
0x001385eb : mov fs:[rbx], rax; mov rax, [rip + 0x29162a]; pop rbx; ret
0x0016eb62 : add [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper ; ret
0x000c84b9 : stosd [rdi], eax; add [rax], al; add [rax - 0x7d], cl; ret
0x000318f1 : push rdi; or [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret
0x0000f415 : movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x0007b99c : mov [rbx + 0x48], r9; mov [rbx], rsi; mov rdi, r9; call rcx
0x00001930 : movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx
0x0005ff32 : mov edx, ebp; mov rsi, r12; mov rdi, rbx; call [r13 + 0x58]
0x000c0448 : add [rax], 0; add [rcx + rcx*4 + 0x32], ah; add rsp, 8; ret
0x0007d92c : add [rax], al; lea rax, [rip + 0xcd6b]; cmove rax, rdx; ret
0x0001f7a8 : mov rdx, r12; mov rsi, r14; mov rdi, [rsp + 0x18]; call rbp
0x000009bd : add [rax], al; add [rax - 0x73], cl; add eax, 0x191b34; ret
0x00060cc1 : mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [r14 + 0x38]
0x000b06bf : mov rsi, rbp; mov [rsp + 0xa8], r13; mov rdi, r12; call rbx
0x00033780 : adc [rax], al; or rsi, rax; mov eax, 1; mov [rdi], rsi; ret
0x00102ebd : mov [rax], eax; nop ; mov [rip + 0x2c71c5], 0; pop rbp; ret
0x000b0139 : add [rbx], cl; add [rax], al; xor eax, eax; add rsp, 8; ret
0x000e540a : add eax, [rax]; add [rcx], dh; fild [rbx - 0x6af0fd08]; ret
0x000956a4 : mov edx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; ret
0x0011b77d : push rsp; and al, 8; mov rsi, [rsp]; mov rdi, r13; call r12
0x00168e52 : add [rax + rbx*4 - 0x17], dh; adc ebx, esi; jmp [rsi + 0xf]
0x000956b3 : mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; ret
0x0001ee25 : add bl, al; nop [rax + rax]; mov eax, [rip + 0x3ab0a2]; ret
0x0012e736 : add r14, rbx; sub edx, ebx; mov rsi, r14; call [r13 + 0x40]
0x001439a0 : add [rax], al; mov eax, ebx; pop rbx; pop rbp; pop r12; ret
0x00030c63 : add [rax], al; pop rbx; mov eax, edx; pop rbp; pop r12; ret
0x000f7a40 : mov [rax + 8], rdi; mov [rdi], rax; mov [rdi + 8], rsi; ret
0x0005d964 : add [rax], al; pop rbx; mov rax, rsi; pop rbp; pop r12; ret
0x00141c1e : sub [rax], al; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret
0x00102171 : add edx, eax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret
0x000fca1c : pop rbx; mov rbx, rdi; xor edx, edx; xor esi, esi; call rbp
0x0016eb94 : sub ecx, [rcx + rcx*4 - 0x40]; shr rax, 2; vzeroupper ; ret
0x001438f4 : add [rax], al; mov rax, [rip + 0x287983]; call [rax + 0x28]
0x00095683 : mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; ret
0x0012c924 : add [rax], al; mov [rsi + 8], 1; mov [rsi + 0x10], rax; ret
0x0003f6fe : mov edx, ebp; mov rsi, r14; mov rdi, [rbp - 0xc0]; call rax
0x00080081 : add [rax], al; add [rax], al; cmovne rax, rdx; pop rbx; ret
0x0006a08d : mov rdx, r15; mov rsi, r14; mov rdi, rbx; call [rax + 0x40]
0x000afb94 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, 5; ret
0x000b050b : mov [rsp + 0x40], eax; mov rsi, rbp; mov rdi, r12; call rbx
0x0009988c : mov [rdi + 0xf], rcx; xor ch, ch; mov [rdi + 0x17], ch; ret
0x0007c7f4 : add cl, ch; cmpsb [rsi], [rdi]; xor bh, cl; jmp [rsi + 0xf]
0x0009218a : add cl, [rdx + 0x42880241]; add cl, [rax - 0x77]; clc ; ret
0x000ee342 : pop rbp; xor edx, edx; xor esi, esi; mov rdi, rbx; call rax
0x0006beab : add [rax], al; add [rax], al; add [rdi], cl; mov dh, 2; ret
0x0009cfe4 : mov rsi, [rsp + 0x18]; mov rdx, r14; mov rdi, rbp; call rbx
0x0012afc5 : xor eax, eax; mov rsi, [rsp + 0x18]; mov rdi, rbp; call r14
0x000956b4 : mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; ret
0x0009980b : mov [rdi + 0xf], ecx; xor ch, ch; mov [rdi + 0x13], ch; ret
0x001355d9 : add [rbx - 0x37f0fe18], al; mov [rdx], eax; mov eax, 1; ret
0x0003cc20 : adc al, 0; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x00138f87 : mov [rsp + 0xb0], 1; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x0006e299 : xor edx, edx; xor esi, esi; mov rdi, rbx; call [rax + 0x58]
0x0012e737 : add esi, ebx; sub edx, ebx; mov rsi, r14; call [r13 + 0x40]
0x0006f55a : adc dh, [rbp + rsi + 0x57014400]; sbb [rax + 0x39], cl; ret
0x000871d8 : mov [rdi], dx; movzx edx, [rsp - 6]; mov [rdi + 2], dl; ret
0x000ac054 : add al, ch; cmpsb [rsi], [rdi]; xor dh, dh; jmp [rsi + 0xf]
0x00161ffb : add al, [rax]; add [rax - 0x7cb7fec8], al; fdivr st(7); ret
0x0006a5b4 : add [rax], al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret
0x0003b1ec : add [rax], al; add [rax], al; mov [rbp - 0x528], 1; jmp rax
0x000997ec : mov [rdi + 0x10], cx; xor ch, ch; mov [rdi + 0x12], ch; ret
0x0006bc74 : mov rdx, r12; mov rsi, r13; mov rdi, rbx; call [r14 + 0x78]
0x00172373 : adc [rsi - 0x70], ah; nop cs:[rax + rax]; xor rax, rax; ret
0x0009986d : mov [rdi + 0xe], ecx; xor ch, ch; mov [rdi + 0x16], ch; ret
0x000f521c : mov rax, [rip + 0x2d49c5]; mov [rax], -1; xor eax, eax; ret
0x0012db7a : add esi, eax; sub edx, eax; mov rsi, r14; call [r15 + 0x40]
0x0002039b : mov rdx, r12; mov rsi, [rsp + 0x10]; mov rdi, r14; call rbp
0x0006976b : mov edx, esi; mov rsi, r13; mov rdi, rbx; call [r15 + 0x40]
0x00138ef4 : movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xd0], 2; call rax
0x00060ded : mov rdx, r13; mov rsi, r12; mov rdi, rbx; call [r14 + 0x38]
0x0006ac78 : adc [r8], al; add [rax], al; add [rbp + 0x58d48c0], al; ret
0x001113a4 : add [rax], al; pop rbx; mov eax, esi; pop rbp; pop r12; ret
0x000998f4 : mov [rdi + 0x18], cx; xor ch, ch; mov [rdi + 0x1a], ch; ret
0x0006ccd7 : add [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret
0x00095693 : mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; ret
0x000ed73d : inc [rbp + 0x480e78db]; cmp eax, ebx; seta al; pop rbx; ret
0x0003a257 : mov rdi, r14; sub r13, rbx; mov rdx, r13; call [r15 + 0x38]
0x00099851 : mov [rdi + 0x14], dl; xor ch, ch; mov [rdi + 0x15], ch; ret
0x0012c9c4 : add [rax], al; mov [rsi + 8], 0; mov [rsi + 0x10], rax; ret
0x0005dfd3 : mov edx, esp; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x38]
0x00065a6d : add [rax], al; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx
0x00131cd1 : movq mm0, [rdi + 8]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x0005de80 : add [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0009a0b1 : add [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret
0x0002039c : mov edx, esp; mov rsi, [rsp + 0x10]; mov rdi, r14; call rbp
0x00060cc2 : mov edx, esp; mov rsi, rbp; mov rdi, rbx; call [r14 + 0x38]
0x000b06c0 : mov esi, ebp; mov [rsp + 0xa8], r13; mov rdi, r12; call rbx
0x00021f0c : add [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x000afbb4 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, 7; ret
0x000025cd : add [rax], al; add [rax - 0x75], cl; add eax, 0x3ccc31; ret
0x0003a6cf : sub edi, ebx; mov rdi, r14; mov rdx, r15; call [rax + 0x38]
0x0008733d : add [rax], r8b; mov [rdi], 0; lea rax, [rdi + rax - 1]; ret
0x0014633c : sub [rax], al; mov [rip + 0x28631b], rsi; xor eax, eax; ret
0x000ee2a9 : xor esp, esp; mov eax, r12d; pop rbx; pop rbp; pop r12; ret
0x00138be7 : mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; call [rax + 0x18]
0x0001f7a9 : mov edx, esp; mov rsi, r14; mov rdi, [rsp + 0x18]; call rbp
0x0013d132 : add [rax], al; mov [rdi + 0x20], 0; mov [rdi + 8], rax; ret
0x0003a258 : mov edi, esi; sub r13, rbx; mov rdx, r13; call [r15 + 0x38]
0x0006eb1d : add [rax], al; add [rax - 0x75], cl; add eax, 0x35c869; ret
0x000695fd : mov [rbx + 0xd8], rcx; mov [rdx + 0x130], rdi; pop rbx; ret
0x000cc958 : add al, 1; mov [rdi + 8], 1; mov [rdi], al; mov eax, 1; ret
0x0003b130 : add rax, rdi; mov r11, rdx; mov r9d, 1; mov r8d, 1; jmp rax
0x00095694 : mov edx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; ret
0x0003b131 : add eax, edi; mov r11, rdx; mov r9d, 1; mov r8d, 1; jmp rax
0x000009c6 : add bl, al; nop [rax + rax]; lea rax, [rip + 0x193971]; ret
0x000afb64 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, 2; ret
0x0016d6bc : add [rax], al; add [rax], al; mov rax, r8; vzeroupper ; ret
0x000474f9 : adc al, 0; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x0006f5bb : add [rax], al; add [rax - 0x77], cl; add eax, 0x35a9f3; ret
0x00064d3b : mov rcx, [rsp + 0x20]; lea r8, [rsp + 0x38]; call [r13 + 8]
0x0005face : mov edx, ebp; mov rsi, r13; mov rdi, rbx; call [r14 + 0x48]
0x0006bc75 : mov edx, esp; mov rsi, r13; mov rdi, rbx; call [r14 + 0x78]
0x0000aaed : add [rax], al; add [rax - 0x75], cl; add eax, 0x3c0c69; ret
0x000d229d : add [r8], r8d; add [rax - 0x77], cl; fmul [rax - 0x7d]; ret
0x0005dfd2 : mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x38]
0x000afb74 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, 3; ret
0x0005e69a : mov rdx, rbp; mov rsi, r14; mov rdi, r12; call [r15 + 0x38]
0x000f7a41 : mov [rax + 8], edi; mov [rdi], rax; mov [rdi + 8], rsi; ret
0x00135849 : xor eax, eax; mov rsi, [rsp + 0x10]; mov rdi, rbp; call rbx
0x0012da88 : add esi, eax; sub edx, r8d; mov rsi, r14; call [r15 + 0x40]
0x0011fe5b : add rax, 2; mov [r8], ecx; mov [r9], rax; mov eax, edx; ret
0x00060128 : mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x58]
0x0012def6 : add ebp, ecx; sub edx, ecx; mov rsi, r13; call [rbx + 0x40]
0x000b0c34 : mov [rsp + 0xa8], r14; mov rsi, rbp; mov rdi, r12; call rbx
0x0005b369 : add [rax], eax; add [rbx + 0x5d], bl; pop r12; pop r13; ret
0x0001e65d : mov rax, -2; rol rax, cl; and [rdi], rax; xor eax, eax; ret
0x000998d3 : mov [rdi + 0x18], cl; xor ch, ch; mov [rdi + 0x19], ch; ret
0x00150a79 : add [rax], al; movsxd r9, [r11 + r9*4]; add r9, r11; jmp r9
0x000488ff : mov edx, esi; mov rsi, r11; mov rdi, r13; call [r15 + 0x38]
0x00152dbe : add [rax], al; movzx edx, [rsi - 1]; mov [rdi - 1], dl; ret
0x00065b67 : add [rax], al; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x000afb84 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, 4; ret
0x00047df1 : mov eax, ecx; mov [rbp - 0x510], 1; xor r15d, r15d; jmp rax
0x0009cfe5 : mov esi, [rsp + 0x18]; mov rdx, r14; mov rdi, rbp; call rbx
0x0007f50c : add [rax], al; lea rax, [rip + 0xb4bb]; cmove rax, rdx; ret
0x00060129 : mov edx, esp; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x58]
0x0005fda0 : xor edx, edx; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x48]
0x000956a3 : mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; ret
0x0006a08e : mov edx, edi; mov rsi, r14; mov rdi, rbx; call [rax + 0x40]
0x0010e591 : mov [rbp - 0x80], 0; movups xmm[rbp - 0x78], xmm0; call rax
0x001368a0 : add al, ch; stosb [rdi], al; mov ch, 0xee; jmp [rsi + 0x2e]
0x00064e0b : xor [rax], 1; add [rax], al; mov rax, [rax + 0x20]; jmp rax
0x0011fffb : movdqu xmm0, xmm[rsi]; movups xmm[rdi + rdx + 8], xmm0; ret
0x000695fe : mov [rbx + 0xd8], ecx; mov [rdx + 0x130], rdi; pop rbx; ret
0x00096c45 : mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x000009cd : add [rax], al; add [rax - 0x73], cl; add eax, 0x193971; ret
0x0003a6ce : sub r15, r11; mov rdi, r14; mov rdx, r15; call [rax + 0x38]
0x0009988d : mov [rdi + 0xf], ecx; xor ch, ch; mov [rdi + 0x17], ch; ret
0x000025c6 : add bl, al; nop [rax + rax]; mov rax, [rip + 0x3ccc31]; ret
0x00102170 : add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret
0x000482f7 : mov rdx, r14; mov rsi, r15; mov rdi, r13; call [rax + 0x38]
0x00063e8c : mov rcx, [rbx + 8]; mov r9, [rax + 0x10]; call [rbp + 0x18]
0x0013b946 : add [rax], al; mov rax, [rdi + 8]; mov rsi, rsp; call [rax]
0x0014ba1f : sub [rdi - 0x20], esp; movaps xmm[rdi - 0x10], xmm5; jmp r9
0x00060dee : mov edx, ebp; mov rsi, r12; mov rdi, rbx; call [r14 + 0x38]
0x0012bd93 : mov esp, eax; mov rdi, rbx; xor eax, eax; call [rbp + 0x28]
0x0003f6fd : mov rdx, r13; mov rsi, r14; mov rdi, [rbp - 0xc0]; call rax
0x00131cb9 : movq mm0, [rdx]; mov eax, 1; movups xmm[rdi + 8], xmm0; ret
0x000997cb : mov [rdi + 0x10], cl; xor ch, ch; mov [rdi + 0x11], ch; ret
0x00097a85 : mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 7]; ret
0x000f521d : mov eax, [rip + 0x2d49c5]; mov [rax], -1; xor eax, eax; ret
0x0011fe5c : add eax, 2; mov [r8], ecx; mov [r9], rax; mov eax, edx; ret
0x0008740c : add [rax], al; lea rax, [rip + 0x37bb]; cmove rax, rdx; ret
0x00138c4b : mov [rsp + 0x18], 1; mov [rsp + 0x20], 5; call [rax + 0x18]
0x0000aaeb : add [rax], 0; add [rax], al; mov rax, [rip + 0x3c0c69]; ret
0x0006f59b : add [rax], al; add [rax - 0x77], cl; add eax, 0x35aa0b; ret
0x000b0ba9 : mov [rsp + 0xa8], rdx; mov rsi, rbp; mov rdi, r12; call rbx
0x000482f8 : mov edx, esi; mov rsi, r15; mov rdi, r13; call [rax + 0x38]
0x001225a9 : inc [r9 + rcx*8 - 0x3c0c1d8b]; nop [rax]; xor eax, eax; ret
0x0009986c : mov [rdi + 0xe], rcx; xor ch, ch; mov [rdi + 0x16], ch; ret
0x001691d0 : add [rax], al; add rax, rdi; add rax, rcx; vzeroupper ; ret
0x000b0c35 : mov [rsp + 0xa8], esi; mov rsi, rbp; mov rdi, r12; call rbx
0x00000ab7 : add [rdi], cl; test [rdi + rdi*8 - 1], ch; jmp [rsi - 0x70]
0x00142521 : add [rax], al; mov rax, [rip + 0x288d56]; call [rax + 0x28]
0x000b0baa : mov [rsp + 0xa8], edx; mov rsi, rbp; mov rdi, r12; call rbx
0x0016976e : add [rax], al; bsr eax, eax; add rax, rdi; vzeroupper ; ret
0x0012def5 : add r13, rcx; sub edx, ecx; mov rsi, r13; call [rbx + 0x40]
0x0005ff31 : mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [r13 + 0x58]
0x0014d0c5 : push rsi; cld ; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x000c0962 : xor [rax], al; add ecx, ebp; cmp esp, 0xff; jmp [rsi + 0xf]
0x0006976a : mov rdx, r14; mov rsi, r13; mov rdi, rbx; call [r15 + 0x40]
0x000999d5 : mov [rdi + 0x20], cl; xor ch, ch; mov [rdi + 0x21], ch; ret
0x00152d3e : add [rax], al; movzx edx, [rsi - 2]; mov [rdi - 2], dx; ret
0x0005ff5b : mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x58]
0x00095632 : mov edx, [rsi + 3]; mov [rdi], ecx; mov [rdi + 3], edx; ret
0x001451b5 : add [rbp + 0x28], dh; mov rax, [rip + 0x28a019]; call [rax]
0x0005e69b : mov edx, ebp; mov rsi, r14; mov rdi, r12; call [r15 + 0x38]
0x00064d3c : mov ecx, [rsp + 0x20]; lea r8, [rsp + 0x38]; call [r13 + 8]
0x00139d42 : add [rax], al; add [rcx + rcx*4 - 9], cl; call [rax + 0x28]
0x00063e8d : mov ecx, [rbx + 8]; mov r9, [rax + 0x10]; call [rbp + 0x18]
0x00064b44 : add [rax], al; add [rcx + 0x2b], cl; and [r8 + 1], r9b; ret
0x00095673 : mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; ret
0x000488fe : mov rdx, r14; mov rsi, r11; mov rdi, r13; call [r15 + 0x38]
0x0005ff5c : mov edx, ebp; mov rsi, r12; mov rdi, rbx; call [rax + 0x58]
0x000afba4 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, 6; ret
0x000e29f0 : add [rbx + 0x2ea3410d], cl; add [rcx + 0x5b595a0a], cl; ret
0x0012db79 : add r14, rax; sub edx, eax; mov rsi, r14; call [r15 + 0x40]
0x0001dab9 : add [rax - 0x77], cl; sal [rbp + 8], 1; add rsp, 0x148; ret
0x000f7b63 : mov [rip + 0x2d53f7], cl; mov rax, rdi; mov [r8 - 1], 0; ret
0x000998ac : mov [rdi + 0x10], rcx; xor ch, ch; mov [rdi + 0x18], ch; ret
0x0009996e : movq [rdi + 0xe], mm2; xor ch, ch; mov [rdi + 0x1e], ch; ret
0x0005f023 : add [rax], al; mov rsi, r14; mov rdi, rbp; call [rax + 0x38]
0x000ebf75 : int1 ; dec [rax - 0x7b]; sal [rbx + rbp*2 + 0x48], 0x89; ret
0x00087330 : mov edx, eax; movsxd rdx, [r8 + rdx*4]; add rdx, r8; jmp rdx
0x0009982b : mov [rdi + 0x10], ecx; xor ch, ch; mov [rdi + 0x14], ch; ret
0x00111a7b : add [rax], 0; add [rax], al; xor esi, esi; mov rax, rsi; ret
0x0006ac79 : adc [rax], al; add [rax], al; add [rbp + 0x58d48c0], al; ret
0x000d229e : add [rax], eax; add [rax - 0x77], cl; fmul [rax - 0x7d]; ret
0x0005f7b3 : add [rax], al; mov rdx, rbx; mov rsi, r12; call [r13 + 0x38]
0x00136ca7 : lea r8, [rip - 0x707e]; mov esi, 9; mov rdi, rax; call [r10]
0x000fb34c : add [rax], al; lea rax, [rip + 0x2d1d5b]; add rsp, 0x18; ret
0x0012d270 : add [rax], al; xor esi, esi; mov rdi, rbx; call [rax + 0x28]
0x00107e05 : adc [rax + rax*8 + 0x3c68674], al; add [rax - 0x7d], cl; ret
0x0006a852 : mov [rsp], r8; mov rsi, r13; mov rdi, rbx; call [rax + 0x78]
0x000680bd : add [rax], al; add [rbx + 0x8042507], cl; add [rax], al; ret
0x001620bc : adc [rdx], al; add [rax], al; cmp [rax], 1; sbb rax, -1; ret
0x0008aeb0 : xor bl, al; nop [rax]; nop cs:[rax + rax]; xor eax, eax; ret
0x0014279f : add [rcx + rcx*4 - 0x32], cl; mov rdi, r8; call [rax + 0x18]
0x001620ed : add [rax], eax; add [rax - 0x7cb7fec8], al; fdivr st(7); ret
0x0010ab77 : sub ecx, esi; cmp dil, al; mov eax, edx; cmove eax, ecx; ret
0x000fbf17 : pop rbx; mov rax, rbp; mov esi, 3; pop rbp; pop r12; jmp rax
0x0007f53c : add [rax], al; lea rax, [rip + 0x1090b]; cmove rax, rdx; ret
0x000d2f65 : add [rax], r8b; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x00086dcf : add dh, al; add [rax], eax; mov rcx, r8; mov [rdx], rcx; ret
0x00099913 : mov [rdi + 0x17], ecx; xor ch, ch; mov [rdi + 0x1b], ch; ret
0x001376a7 : adc [rcx], al; add [rax], al; pop rbx; pop rbp; pop r12; ret
0x00138fb1 : dec [rcx - 0x75]; or [r9 + r9*4 - 1], r9b; call [rax + 0x28]
0x0009667c : add [rax], al; add [rax], al; movdqu xmm[rdi - 1], xmm0; ret
0x0007c9ec : add [rax], al; lea rax, [rip + 0x13afb]; cmove rax, rdx; ret
0x0015dd2b : add [rax], al; add [rax], al; add [rcx + 0x4518811], cl; ret
0x0009a82e : add [rax], 0; add [rbx - 0x3d], bl; mov eax, 8; pop rbx; ret
0x00134573 : mov rax, [rdi + 8]; lea rsi, [rsp + 0x10]; call [rax + 0x10]
0x00064ea9 : adc [r13 + r9*4 + 0x44], cl; and al, 0x10; call [rbp + 0x18]
0x00107e04 : adc [rax + r8*8 + 0x3c68674], r8b; add [rax - 0x7d], cl; ret
0x0001ce8f : add [rcx], dh; leave ; addsd xmm0, xmm0; mov [rdi], ecx; ret
0x000921f8 : add cl, [rbx + 0x42890341]; add ecx, [rax - 0x77]; clc ; ret
0x0013b1c5 : mov eax, [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x0012bdbd : mov [rbp + 0x18], rax; mov rax, [rbx + 8]; call [rax + 0x28]
0x0006eb1c : add [rax], al; add [rax], al; mov rax, [rip + 0x35c869]; ret
0x0008a94b : add [rax], 0; add [rax], al; bsf eax, eax; add rax, rdi; ret
0x0009c231 : add [rax], al; lea rdx, [rip + 0xd5ec6]; cmove rax, rdx; ret
0x0012e02e : add ebp, edi; sub edx, r15d; mov rsi, r13; call [rbx + 0x40]
0x000998f5 : mov [rdi + 0x18], ecx; xor ch, ch; mov [rdi + 0x1a], ch; ret
0x00060beb : add [rax], 0; add [rax], al; mov [rdi], 0; mov rax, rdi; ret
0x0007cabc : add [rax], al; lea rax, [rip + 0x1359b]; cmove rax, rdx; ret
0x00131d4f : add bh, al; add al, 1; add [rax], al; add [rax + 1], bh; ret
0x0011febd : add eax, 2; mov [r8], r10d; mov [r9], rax; mov eax, edx; ret
0x001122f1 : add [rax], al; lea rdx, [rip + 0x5fdf6]; cmove rax, rdx; ret
0x00134574 : mov eax, [rdi + 8]; lea rsi, [rsp + 0x10]; call [rax + 0x10]
0x00097fe2 : push rbx; movq [rdi + 0x30], mm7; lea rax, [rdi + 0x40]; ret
0x0000f39a : mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x00097ac7 : mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 0xa]; ret
0x0007ab45 : add [rbp - 0x7ad98140], al; fisttp [rdi]; xchg eax, esp; ret
0x0015dd4b : add [rax], al; add [rax], al; add [rcx + 0x3518911], cl; ret
0x0012c95c : mov ecx, eax; movsxd rdx, [r8 + rcx*4]; add rdx, r8; jmp rdx
0x000997b4 : movdqu xmm[rdi], xmm0; xor ch, ch; mov [rdi + 0x10], ch; ret
0x000cce9e : add [rdi + 4], 1; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x0005e5a5 : add [rax], al; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret
0x0005f024 : add [rcx + rcx*4 - 0xa], cl; mov rdi, rbp; call [rax + 0x38]
0x000009bc : add [rax], al; add [rax], al; lea rax, [rip + 0x191b34]; ret
0x0006a397 : add [rax], al; mov rsi, r12; mov rdi, rbx; call [rbp + 0x70]
0x0005f2ab : add [rax], al; add [rax], al; add [rax - 0x7f], cl; ret 0xe8
0x0015bd1d : add [rax], al; add [rdx + 0x48028801], cl; mov eax, edi; ret
0x0013b945 : add [rax], r8b; mov rax, [rdi + 8]; mov rsi, rsp; call [rax]
0x00086dbe : xor [rax - 0x7c], eax; div [rbp - 0x14]; mov [rdx], rcx; ret
0x0007d8d5 : mov [rbp], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x00129e9e : add [rax], al; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret
0x0012e02d : add r13, r15; sub edx, r15d; mov rsi, r13; call [rbx + 0x40]
0x000a575a : add al, al; clc ; dec [rax - 0x7b]; ror [rdi], 0x84; ret 0xb
0x0007beaf : mov eax, 1; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00131d5f : add bh, al; add al, 0; add [rax], al; add [rax + 1], bh; ret
0x000922ff : adc cl, [rcx + 7]; movlpd [rdx + 7], xmm1; mov rax, rdi; ret
0x000fbf01 : mov rax, rbp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax
0x00161f9a : xor al, [rbx]; add [rax], al; cmp [rax], 1; sbb rax, -1; ret
0x00075c69 : adc [rdi - 0x7eb7fff7], -0x3c; add [rax], 0; add bl, dh; ret
0x0012dd65 : pop rbx; mov eax, 1; pop rbp; pop r12; pop r13; pop r14; ret
0x0009c835 : mov rcx, r13; mov rdi, [r14]; lea r9, [rsp + 0x28]; call r12
0x00045686 : add [rax], al; add dh, al; test esp, esp; idiv bh; jmp [rax]
0x000872ff : movzx eax, [rsp + 0xe]; mov [rdi + 6], al; mov rax, rdi; ret
0x0009bfe2 : mov [rsp], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0007dff1 : mov [rdx], esp; mov rax, r11; pop rbx; pop rbp; pop r12; ret
0x0014d494 : mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x0013b187 : mov rax, [rax + 0x10]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x00094e4f : adc cl, [rcx + 8]; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x00060bc2 : mov rax, rdi; mov [rbx], ebp; pop rbx; pop rbp; pop r12; ret
0x000922df : adc cl, [rcx + 6]; movlpd [rdx + 6], xmm1; mov rax, rdi; ret
0x000871d9 : mov [rdi], edx; movzx edx, [rsp - 6]; mov [rdi + 2], dl; ret
0x0010d196 : add [rax], al; add rsp, 8; mov eax, 7; pop rbx; pop rbp; ret
0x0012bdbe : mov [rbp + 0x18], eax; mov rax, [rbx + 8]; call [rax + 0x28]
0x000872c6 : movzx eax, [rsp - 0xc]; mov [rdi + 4], al; mov rax, rdi; ret
0x0004889b : xchg [rip + 0x4cfffff4], dh; mov eax, [rbp - 0x520]; jmp rax
0x001354cd : pop r8; add al, [rax]; add [rax], al; add rdi, 0x58; jmp rcx
0x00105632 : neg eax; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0007f670 : xor r12d, r12d; mov rax, r12; pop rbx; pop rbp; pop r12; ret
0x0008718b : mov ecx, eax; movsxd rcx, [r9 + rcx*4]; add rcx, r9; jmp rcx
0x0011c0b0 : add al, [rax]; mov rdi, rbp; mov rax, [rsp + 0x30]; call rax
0x0008a720 : xchg [rbx + 0x48000002], bl; add eax, edi; add rax, rcx; ret
0x000680ed : add [rax], al; add [rbx + 0x2002507], cl; add [rax], al; ret
0x00113a59 : add [rax], al; nop [rax + rax]; mov eax, edi; bswap eax; ret
0x0009961c : add [rax], al; add [rax], al; xor ch, ch; mov [rdi], ch; ret
0x0000aaec : add [rax], al; add [rax], al; mov rax, [rip + 0x3c0c69]; ret
0x0009c15c : add [rax], al; lea rax, [rip + 0x12d0b]; cmove rax, rdx; ret
0x00165499 : add [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret
0x00068827 : sbb [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret
0x00161ccc : add [rsi], al; add [rax], al; cmp [rax], 1; sbb rax, -1; ret
0x0009c836 : mov ecx, ebp; mov rdi, [r14]; lea r9, [rsp + 0x28]; call r12
0x0016343d : add [rax], al; add [rbx + 0x48028901], cl; mov eax, edi; ret
0x0008738e : add [rax], al; mov [rdi], ecx; lea rax, [rdi + rax - 1]; ret
0x0009998e : movq [rdi + 0xf], mm2; xor ch, ch; mov [rdi + 0x1f], ch; ret
0x00096bcb : add [rax], al; add [rax], al; add [rax + 0x78d4837], cl; ret
0x0009ae3c : add [rax], al; lea rax, [rip + 0x1438b]; cmove rax, rdx; ret
0x0007d863 : add [rax], dl; lea rax, [rip + 0x1c274]; cmove rax, rdx; ret
0x00118350 : int 0xeb; cwde ; nop [rax + rax]; xor eax, eax; pop rbx; ret
0x0007ba66 : add [rax], al; mov rdi, [rdi + 0x48]; mov rsi, rbp; call rax
0x000922bf : adc cl, [rcx + 5]; movlpd [rdx + 5], xmm1; mov rax, rdi; ret
0x000965db : add [rax], al; add [rax], al; add [rcx + 0x4578817], cl; ret
0x00139016 : add [rax], al; mov rsi, r15; mov rdi, r14; call [rax + 0x18]
0x0001ee2c : add [rax], al; add [rax], al; mov eax, [rip + 0x3ab0a2]; ret
0x000fbf02 : mov eax, ebp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax
0x00097ac8 : mov [rdi], ecx; mov [rdi + 8], dx; lea rax, [rdi + 0xa]; ret
0x000c0449 : add [rax], al; add [rcx + rcx*4 + 0x32], ah; add rsp, 8; ret
0x0003b13b : add [rcx - 0x48], al; add [rax], eax; add [rax], al; jmp rax
0x001225aa : inc [rcx + rcx*8 - 0x3c0c1d8b]; nop [rax]; xor eax, eax; ret
0x000009cc : add [rax], al; add [rax], al; lea rax, [rip + 0x193971]; ret
0x00152363 : xchg eax, esi; add [rax], al; add [rax - 0x7f], cl; ret 0x80
0x0014501f : adc [rax + 0x3b], cl; sub [rbx - 0x26], sil; mov eax, 1; ret
0x0001cc5f : add [rax + 0x7110ff2], al; and rax, rdx; movq xmm0, rax; ret
0x0007b99d : mov [rbx + 0x48], ecx; mov [rbx], rsi; mov rdi, r9; call rcx
0x00161ed2 : add eax, [rax]; add [rax - 0x7cb7fec8], al; fdivr st(7); ret
0x000c5434 : inc [rax]; add bl, al; nop [rax + rax]; mov eax, 0xfc17; ret
0x0012c5ee : add [rax], eax; add [rax - 0x75], cl; and al, 0x28; call rax
0x0012bd92 : mov r12d, eax; mov rdi, rbx; xor eax, eax; call [rbp + 0x28]
0x0009994e : movq [rdi + 0xd], mm2; xor ch, ch; mov [rdi + 0x1d], ch; ret
0x0007db5c : mov [rcx], 0; lea rax, [rip + 0x1c60a]; cmovne rax, rdx; ret
0x000f0005 : adc [rax], dl; add [rax], al; pop rbx; pop rbp; pop r12; ret
0x0012a5e5 : movsxd rax, [rcx + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax
0x0012d71b : add bl, ch; mov al, ch; lea esp, [rdx - 2]; jmp [rsi + 0x2e]
0x0006804e : add [rax - 0x77], cl; imul eax; mov rdi, r9; jmp [rsi + 0xf]
0x0007f8bd : add [rax], al; add [rax], al; pop rbx; pop rbp; pop r12; ret
0x0003966b : xor al, 6; add [rax - 0x7d], cl; clc ; dec [rax - 0x77]; ret
0x000998ad : mov [rdi + 0x10], ecx; xor ch, ch; mov [rdi + 0x18], ch; ret
0x0016cd4e : add al, 7; cmp sil, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x0001e620 : add [rax], al; shl rax, cl; or [rdi], rax; xor eax, eax; ret
0x0009bfe1 : mov [r12], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x001693ac : add [rax], al; add [rax], al; vzeroupper ; xor eax, eax; ret
0x0013b1c4 : mov rax, [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x00020be5 : mov rsi, [r15]; mov rdi, [r13]; mov rax, [rsp + 8]; call rax
0x00161f42 : mov al, [rbx]; add [rax], al; cmp [rax], 1; sbb rax, -1; ret
0x000abc35 : mov ecx, ebp; mov rdi, [r14]; lea r9, [rsp + 0x30]; call r12
0x00020be6 : mov esi, [rdi]; mov rdi, [r13]; mov rax, [rsp + 8]; call rax
0x0016e44e : add al, 7; cmp esi, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x000abc34 : mov rcx, r13; mov rdi, [r14]; lea r9, [rsp + 0x30]; call r12
0x0009bbfc : add [rax], al; lea rax, [rip + 0x13d2b]; cmove rax, rdx; ret
0x0007dff0 : mov [rdx], r12; mov rax, r11; pop rbx; pop rbp; pop r12; ret
0x0008b093 : movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret
0x000997ed : mov [rdi + 0x10], ecx; xor ch, ch; mov [rdi + 0x12], ch; ret
0x00111bad : sub eax, [rax]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x001426df : add [rcx + rcx*4 - 0x32], cl; mov rdi, r8; call [rax + 0x10]
0x00175808 : add [rax + 0x63], cl; test [rax], r8d; add rbp, rax; jmp rbp
0x000b08d5 : add [rax], al; lea rdi, [rsp + 0xb0]; mov rsi, rbp; call rbx
0x0007c1ba : mov eax, 1; pop rbp; pop r12; pop r13; pop r14; pop r15; ret
0x0016d2ac : add [rax], al; add [rax], al; xor eax, eax; vzeroupper ; ret
0x000228a4 : mov [rip + 0x3acab2], 0; pop rbx; mov eax, [rax + 0x58]; ret
0x0012c8e8 : mov eax, [rdi + 0x20]; mov [rsi], 7; mov [rsi + 8], eax; ret
0x0009bf3c : add [rax], al; lea rax, [rip + 0x1341b]; cmove rax, rdx; ret
0x0007d8d4 : mov [rbp], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x00099933 : mov [rdi + 0x18], ecx; xor ch, ch; mov [rdi + 0x1c], ch; ret
0x0011febc : add rax, 2; mov [r8], r10d; mov [r9], rax; mov eax, edx; ret
0x00060bc3 : mov eax, edi; mov [rbx], ebp; pop rbx; pop rbp; pop r12; ret
0x000025cc : add [rax], al; add [rax], al; mov rax, [rip + 0x3ccc31]; ret
0x0000cfae : add [rax], al; movsxd rsi, [r8 + r9*4]; add rsi, r8; jmp rsi
0x0013b188 : mov eax, [rax + 0x10]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x001523f6 : add [rdi], cl; cmp [rbx - 1], -1; dec [rax - 0x7f]; ret 0x80
0x0007c9bc : add [rax], al; lea rax, [rip + 0x1398b]; cmove rax, rdx; ret
0x00064e0c : xor [rcx], al; add [rax], al; mov rax, [rax + 0x20]; jmp rax
0x001712c8 : mov rcx, ss:[rcx - 8]; mov [rdi], rsi; mov [r9 - 8], rcx; ret
0x0012e8de : mov [rcx], eax; sub rdx, rsi; mov rbp, rdx; call [rbx + 0x10]
0x0001cbeb : movd rax, mm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret
0x0010abeb : sub esi, r8d; sub eax, edx; cmp dil, cl; cmovne eax, esi; ret
0x00173827 : movzx eax, [rdi - 9]; movzx edx, [rsi - 9]; sub eax, edx; ret
0x0014616b : add [rax - 0x77], cl; sal [rbp + 0x13], 1; add rsp, 0x38; ret
0x0014dc56 : push rsi; clc ; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00134cc3 : sub eax, 1; bswap eax; mov [rdi + 0x48], eax; mov eax, 1; ret
0x0009a2c3 : mov esi, [rsi]; mov [rdi + rdx - 4], ecx; mov [rdi], esi; ret
0x000c32fa : add [rax], al; add [rax], al; add [rax + 0x21058d48], dl; ret
0x00078e10 : pop rbx; mov rax, r8; pop rbp; pop r12; pop r13; pop r14; ret
0x00136dd5 : add [rax], al; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x00064eaa : adc [rbp + rcx*4 + 0x44], cl; and al, 0x10; call [rbp + 0x18]
0x0009a2d1 : movzx esi, [rsi]; mov [rdi + rdx - 2], cx; mov [rdi], si; ret
0x000872de : movzx eax, [rsp - 0x14]; mov [rdi + 4], ax; mov rax, rdi; ret
0x0008ae2e : add [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret
0x0008ae1e : add [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret
0x0011f7b0 : inc [rip + 0xba]; add [rax + 0x102], bh; cmovne eax, edx; ret
0x00131cbd : add [rax], eax; add [rax], al; movups xmm[rdi + 8], xmm0; ret
0x00068072 : mov eax, [rdx + 0x38]; sub rax, [rdx + 0x30]; sar rax, 2; ret
0x00096c43 : push rsi; add ecx, [rcx + 0x357890f]; lea rax, [rdi + 6]; ret
0x0009a2b3 : mov rsi, [rsi]; mov [rdi + rdx - 8], rcx; mov [rdi], rsi; ret
0x000f6532 : add [rax], al; add [rcx + 0x480575d0], cl; add esp, 0x58; ret
0x0002dd3d : add [rax], al; add [rax - 0x73], cl; xor eax, 0x349; call rax
0x00030996 : xor [rax], al; add [rax], al; mov edi, [rsp + 0x24]; call rax
0x00138f9f : sbb [rcx - 0x75], cl; or [r9 + r9*4 - 1], r9b; call [rax + 8]
0x0012d221 : call [rax + 0x20]; pop rbx; mov eax, 1; pop rbp; pop r12; ret
0x00031428 : add [rax], eax; add [rax], al; pop rbx; pop rbp; pop r12; ret
0x000dc9ce : add [rax], al; add [rax], al; add [rbp - 0x7cb7febd], cl; ret
0x00169c79 : movzx edx, [rsi + rcx + 0x20]; sub eax, edx; vzeroupper ; ret
0x000af64b : add [rax], al; add [rax], al; add [rax - 0x73], cl; cld ; ret
0x00160076 : mov al, [rcx + 2]; mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x00074b4f : add [rax], al; add [rbp + rcx*4 + 0x46], cl; jmp [rsi + 0x2e]
0x0016f973 : movzx eax, [rdi - 1]; movzx edx, [rsi - 1]; sub eax, edx; ret
0x00086dce : add [rax], al; mov [rcx], 0; mov rcx, r8; mov [rdx], rcx; ret
0x0009a2b4 : mov esi, [rsi]; mov [rdi + rdx - 8], rcx; mov [rdi], rsi; ret
0x00134124 : mov [rax], al; add [rax], al; mov rdi, rbp; call [rax + 0x20]
0x0006f5fa : add [rax], eax; add [rax], al; mov [rip + 0x35a9d8], eax; ret
0x000ed5cc : xor edx, edx; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x001354ce : pop rax; add al, [rax]; add [rax], al; add rdi, 0x58; jmp rcx
0x00044827 : lea esi, [rax + 0x48fffff6]; mov edi, [rbp - 0x8d0]; call rax
0x00138ffa : movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xc8], rdx; call rax
0x0001bfe9 : add [rcx], cl; add [rax], al; add [rax - 1], bh; pop rbx; ret
0x00097b48 : mov [rdi], ecx; mov [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret
0x00001291 : mov eax, [rip + 0x3c8901]; mov fs:[rax], 9; mov eax, edi; ret
0x0014d665 : push rsi; cld ; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0007b763 : add [rbp + 0x484874c0], al; add esp, 8; pop rbx; pop rbp; ret
0x0006c08e : add [rax], al; movzx eax, bpl; pop rbx; pop rbp; pop r12; ret
0x00021d67 : xor [rax], al; add [rax], al; mov rdi, [rax + 0x20]; call rdx
0x0014d2a5 : push rsi; cld ; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0012bcd0 : mov rdi, rbp; mov [rbx], rax; xor eax, eax; call [rbx + 0x18]
0x0014d856 : push rsi; clc ; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x000f461d : add [rax], al; nop ; mov eax, [rdi + 8]; and eax, 0x100f; ret
0x001017c4 : sub [rax + rax], -9; fsub [rcx + rcx*4 + 2]; mov rax, -1; ret
0x000632b6 : add [rax], al; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret
0x0012c993 : add [rax], al; add bl, al; nop [rax + rax]; mov [rsi], 8; ret
0x001693be : add [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper ; ret
0x000741a8 : mul [rdi + rax*8]; or al, 0; add [rax], al; mov rax, rsi; ret
0x00169c99 : movzx edx, [rsi + rcx + 0x40]; sub eax, edx; vzeroupper ; ret
0x00092149 : movlps [rdx], xmm0; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x00097b07 : mov [rdi], ecx; mov [rdi + 8], edx; lea rax, [rdi + 0xc]; ret
0x0016fbc0 : movzx eax, [rdi - 1]; movzx ecx, [rsi - 1]; sub eax, ecx; ret
0x0000b6e7 : adc eax, [rax]; mov rdx, [rbp - 0x98]; mov rdi, r14; call rdx
0x0014d495 : mov ecx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x00145047 : mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax + 0x170]; jmp rax
0x00096d17 : mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x00097a83 : push rsi; add ecx, [rcx + 0x357890f]; lea rax, [rdi + 7]; ret
0x0006a398 : add [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; call [rbp + 0x70]
0x000fe7d9 : mov eax, [rip + 0x2cb3b9]; mov fs:[rax], 2; xor eax, eax; ret
0x00096d18 : mov [rdi], ecx; mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x00096cd7 : mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x00138f0f : add [rcx + rcx*4 - 1], cl; mov rax, [r15 + 8]; call [rax + 8]
0x0011bd00 : pop rsp; xchg eax, ebx; add al, [rax]; mov rdi, rbp; call r12
0x00169c5f : movzx edx, [rsi + rcx + 0x60]; sub eax, edx; vzeroupper ; ret
0x0010ea35 : lea edx, [rcx + 0x70]; movups xmm[rbp - 0x78], xmm0; call rax
0x0006eb4b : add [rax], al; add [rax], al; add [rax - 0x77], cl; clc ; ret
0x0010e595 : add [rax], al; add [rdi], cl; adc [rbp - 0x78], eax; call rax
0x00131ddf : add [rax], al; add bl, al; nop [rax + rax]; xor eax, eax; ret
0x00097b67 : mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret
0x0007c1be : add [rbp + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret
0x00096cf7 : mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x0003a511 : add eax, edi; mov r11, rdx; xor r8d, r8d; mov r9d, 1; jmp rax
0x00068071 : mov rax, [rdx + 0x38]; sub rax, [rdx + 0x30]; sar rax, 2; ret
0x00172563 : add al, bl; nop ; nop cs:[rax + rax]; lea rax, [rdi + 3]; ret
0x0014559e : add [rax], al; mov [rbx], rax; pop rax; pop rdx; pop rbx; ret
0x000cc85f : add [rax], eax; add al, ch; cdq ; sub ah, dh; jmp [rsi + 0xf]
0x00067d4c : add [rax - 0x77], cl; imul eax; mov dr1, r9; jmp [rsi + 0x2e]
0x00092148 : movlpd [rdx], xmm0; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x0012d95f : sub esi, eax; mov eax, esi; add rsp, 8; pop rbx; pop rbp; ret
0x00108d73 : mov edx, [rsp + 0x18]; mov rsi, r13; xor r15d, r15d; call rax
0x0003100e : sub [rsi], ecx; add [rcx - 0x77], cl; fimul [rax - 0x7d]; ret
0x000057c7 : add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x0014d485 : push rsi; cld ; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0006a853 : mov [rsp], eax; mov rsi, r13; mov rdi, rbx; call [rax + 0x78]
0x00145048 : mov esi, edi; mov rdi, [rsp]; mov rax, [rax + 0x170]; jmp rax
0x00096c97 : mov [rdi], ecx; mov [rdi + 7], edx; lea rax, [rdi + 0xa]; ret
0x00068f7b : lea edx, [rax + 1]; mov [rdi + 8], rdx; movzx eax, [rax]; ret
0x0003bcbc : add [rax], al; add [rax], al; mov r11, [rbp - 0x530]; jmp rax
0x0009560d : add [rax], al; add [rbx + 0x477880e], cl; mov [rdi], ecx; ret
0x0007524e : add [rax], al; shr ecx, 3; rep stosq [rdi], rax; pop rbx; ret
0x001787ca : add [rax], al; add [rax], al; add [rax - 0x7ab80000], al; ret
0x000ed87b : add [rax], al; add [rax], al; add [rcx - 0x3fcefb89], cl; ret
0x0005f124 : add [rax], al; lea rsi, [rip + 0x1d3]; mov rdi, rbp; call rax
0x0008ab8e : add [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret
0x0009a82f : add [rax], al; add [rbx - 0x3d], bl; mov eax, 8; pop rbx; ret
0x00097ae7 : mov [rdi], ecx; mov [rdi + 7], edx; lea rax, [rdi + 0xb]; ret
0x0007a55f : add [rax], al; add cl, ch; imul edi, esi, -1; jmp [rsi + 0xf]
0x0013e1ec : xor [rax], eax; add [rbx - 0xb343], cl; dec [rax - 0x77]; ret
0x0007df02 : mov [rbp], 0; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x00001290 : mov rax, [rip + 0x3c8901]; mov fs:[rax], 9; mov eax, edi; ret
0x00068181 : mov rax, [rdx + 0x20]; sub rax, [rdx + 0x18]; sar rax, 2; ret
0x000aff75 : pop rbx; mov [r11 + 0xc], edi; pop rbp; pop r12; pop r14; ret
0x00068f7d : add [rax - 0x77], ecx; push rdi; or [rdi], cl; mov dh, 0; ret
0x001383b7 : add al, [rax]; add [rax], al; mov fs:[rbx], rax; pop rbx; ret
0x0008a95e : add [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret
0x000fe7d8 : mov rax, [rip + 0x2cb3b9]; mov fs:[rax], 2; xor eax, eax; ret
0x00129e9d : add [rax], r8b; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret
0x0006f59a : add [rax], eax; add [rax], al; mov [rip + 0x35aa0b], rax; ret
0x00138a43 : mov [rsp + 0x30], 0; mov [rsp + 0x38], rdx; call [rax + 0x18]
0x00096cf8 : mov [rdi], ecx; mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x0010ac22 : sub edx, eax; sub eax, r9d; cmp sil, cl; cmovne eax, edx; ret
0x0014ceff : add [rax - 0x75], cl; push rsi; clc ; mov [rdi - 8], rdx; ret
0x00097ae6 : mov [rdi], rcx; mov [rdi + 7], edx; lea rax, [rdi + 0xb]; ret
0x0014da56 : push rsi; clc ; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x000e728f : add [rax], al; add cl, ch; maskmovq mm7, mm7; jmp [rsi + 0xf]
0x000759b3 : sbb [rcx], dh; ror [rax - 0x77], cl; rcr [rbx + 0x5d], 1; ret
0x001600a4 : mov al, [rcx + 4]; mov [rdx + 4], al; lea rax, [rdx + 4]; ret
0x000999ae : movq [rdi + 0x10], mm2; xor ch, ch; mov [rdi + 0x20], ch; ret
0x00097b68 : mov [rdi], ecx; mov [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret
0x0006f5ba : add [rax], eax; add [rax], al; mov [rip + 0x35a9f3], rax; ret
0x00096c96 : mov [rdi], rcx; mov [rdi + 7], edx; lea rax, [rdi + 0xa]; ret
0x001216b6 : add [rax], al; add [rcx + 0x480575d0], cl; add esp, 0x18; ret
0x0001d5a3 : mov [rsp + 8], edx; movdqa xmm0, xmm[rsp]; add rsp, 0x28; ret
0x00137310 : mov esi, 4; lea rdx, [rip + 0x3f04]; mov rdi, rbx; call [rax]
0x000cb949 : pop rbx; add [rax], al; add cl, ch; idiv edi; jmp [rsi + 0xf]
0x0013be9a : dec [rcx + rcx*4 - 0x12]; mov rdi, rbp; xor eax, eax; call r8
0x00131d8b : sub eax, 1; bswap eax; mov [rdi + 0xa8], eax; mov eax, 1; ret
0x00086e31 : mov [rbx], 0; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret
0x0011aa99 : mov eax, [rdx + rax*8 + 4]; add rsp, 8; pop rbx; pop rbp; ret
0x00097b47 : mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret
0x00138d33 : mov [rsp + 0x30], 2; mov [rsp + 0x40], rdx; call [rax + 0x18]
0x0008a96e : add [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret
0x00096cd8 : mov [rdi], ecx; mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x0010abec : sub esi, eax; sub eax, edx; cmp dil, cl; cmovne eax, esi; ret
0x00139f75 : add [rax], al; add [rax], al; mov rdi, r12; call [rax + 0x28]
0x00108d72 : mov rdx, [rsp + 0x18]; mov rsi, r13; xor r15d, r15d; call rax
0x00097b06 : mov [rdi], rcx; mov [rdi + 8], edx; lea rax, [rdi + 0xc]; ret
0x000e074d : mov [rsi], edx; mov [rsi + 8], rcx; mov [rsi + 0x10], r8; ret
0x0012d1fe : add [rax], al; add [rax], al; mov rdi, rbp; call [rax + 0x28]
0x00169a5f : add [rdi], cl; mov dh, 7; movzx ecx, [rsi]; sub eax, ecx; ret
0x00122e3a : add [rax], al; add [rax - 0x73], cl; and [r8 - 0x7d], cl; ret
0x000af63b : add [rax], al; add [rax], al; add [rax - 0x73], cl; clc ; ret
0x0000eecb : add [rax], al; mov rax, [rip + 0x3bac3c]; mov [rax], rdx; ret
0x00096cb7 : mov [rdi], ecx; mov [rdi + 8], edx; lea rax, [rdi + 0xb]; ret
0x0016d5fd : add [rax], al; add [rcx + rcx*4 - 0x40], cl; vzeroupper ; ret
0x0006ddad : xor [rbx - 0x438a0008], al; add rsp, 8; pop rbx; pop rbp; ret
0x0000de77 : mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax + 0xa8]; ret
0x00136ca8 : lea eax, [rip - 0x707e]; mov esi, 9; mov rdi, rax; call [r10]
0x00077711 : pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax
0x000ec58b : add [rax], al; add [rax], al; add [rcx - 0x80], al; jmp [rdx]
0x00000285 : sbb [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x00086e19 : mov [rax], 0; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret
0x0001cbec : movd eax, mm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret
0x0012b9d5 : add [rax], al; mov rdi, rbp; lea r9, [rsp + 0x20]; call [rax]
0x00097b27 : mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret
0x0008a94c : add [rax], al; add [rax], al; bsf eax, eax; add rax, rdi; ret
0x00096cb6 : mov [rdi], rcx; mov [rdi + 8], edx; lea rax, [rdi + 0xb]; ret
0x00137518 : add [rax], al; mov rdi, rax; lea r9, [rsp + 0x1c]; call [r10]
0x0012c224 : dec [rcx - 0x75]; cmp [r9 + r9*4 - 1], r9b; call [rax + 0x20]
0x0003b442 : adc edx, [rip + 0x4634800]; xchg [rax + 1], cl; clc ; jmp rax
0x0001d5a2 : mov [rsp + 8], rdx; movdqa xmm0, xmm[rsp]; add rsp, 0x28; ret
0x00099a24 : movq [rdi + 0x30], mm7; xor ch, ch; mov [rdi + 0x40], ch; ret
0x0013c890 : mov [rdi + 0x18], esi; mov [rdi + 0x28], edx; mov eax, 1; ret
0x0012bcd1 : mov edi, ebp; mov [rbx], rax; xor eax, eax; call [rbx + 0x18]
0x001712db : mov ecx, ss:[rcx - 4]; mov [rdi], esi; mov [r9 - 4], ecx; ret
0x00068f7a : lea rdx, [rax + 1]; mov [rdi + 8], rdx; movzx eax, [rax]; ret
0x0003a510 : add rax, rdi; mov r11, rdx; xor r8d, r8d; mov r9d, 1; jmp rax
0x000018ed : sub [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x0008b06f : add [rdi], cl; mov dh, 7; movzx edx, [rsi]; sub eax, edx; ret
0x000e55bf : add r9, rax; add rax, [rip + 0x2e45cf]; mov r8, rax; call r12
0x0008ae3e : add [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret
0x0010ea34 : lea rdx, [rcx + 0x70]; movups xmm[rbp - 0x78], xmm0; call rax
0x000c052a : add [rsp + rax*2 - 0x77], ah; add cl, [rcx - 0x3b7cb710]; ret
0x0010ac21 : sub edx, r8d; sub eax, r9d; cmp sil, cl; cmovne eax, edx; ret
0x00060bec : add [rax], al; add [rax], al; mov [rdi], 0; mov rax, rdi; ret
0x001600b4 : mov ax, [rcx + 4]; mov [rdx + 4], ax; lea rax, [rdx + 5]; ret
0x00068182 : mov eax, [rdx + 0x20]; sub rax, [rdx + 0x18]; sar rax, 2; ret
0x0005d99c : add [rax], al; add [rax], al; xor esi, esi; mov rax, rsi; ret
0x000ee2a8 : xor r12d, r12d; mov eax, r12d; pop rbx; pop rbp; pop r12; ret
0x0003b441 : adc rdx, [rip + 0x4634800]; xchg [rax + 1], cl; clc ; jmp rax
0x00097b28 : mov [rdi], ecx; mov [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret
0x0013c88f : mov [rdi + 0x18], rsi; mov [rdi + 0x28], edx; mov eax, 1; ret
0x00070d6d : add [rax], al; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret
0x0007bf6f : mov [rbx + 8], ebp; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x0001e84d : mov edx, [rdi]; test edx, edx; mov edx, 1; cmove eax, edx; ret
0x00131d26 : movzx eax, [rdi + 0x88]; mov [rdx + 0x6c], ax; mov eax, 1; ret
0x00078a4e : mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00021591 : lea esp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret
0x000e29ef : add cs:[rbx + 0x2ea3410d], cl; add [rcx + 0x5b595a0a], cl; ret
0x00131d3f : add [rbx - 0x47fd76f9], cl; add [rax], eax; add [rax], al; ret
0x00031145 : mov r9, [rsi + 0x30]; mov rsi, [rsi + 0x70]; xor eax, eax; ret
0x000c037e : add [rax], 0; add [rcx + rcx*4 + 0x32], ah; add rsp, 0x18; ret
0x0014b493 : xchg eax, ebx; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9
0x00113dfe : add [rax], al; mov rax, [rip + 0x2b5d79]; add rax, fs:[0]; ret
0x0013d09f : add [rbp - 0x47f38a2e], al; add [rax], eax; add [rax], al; ret
0x0007de5d : add [rax], eax; lea rax, [rip + 0x1c32a]; cmovne rax, rdx; ret
0x00069b7c : push rbx; sub rdx, rsi; mov [rsp], rcx; mov rdi, rbx; call rax
0x000996b4 : add ecx, [rcx + 0x357890f]; xor ch, ch; mov [rdi + 7], ch; ret
0x0009a5c4 : movdqu xmm[rdi + rdx - 0x10], xmm0; movdqu xmm[rdi], xmm0; ret
0x00002620 : add [rax], al; mov [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret
0x00139704 : mov [rbx + 8], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x000dfed0 : mov rdx, [rip + 0x2e9e01]; mov rax, [rdx]; mov [rdx], rdi; ret
0x0006243c : mov esi, esp; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax
0x00070bee : add [rax], al; mov fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret
0x000632b5 : add [rax], r8b; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret
0x0007df9d : add [rax], al; add [rbp + 0x31], al; ror [rcx - 0x39], cl; ret
0x000c4f49 : mov esi, esi; movsxd rax, [rdx + rsi*4]; add rax, rdx; jmp rax
0x0011feea : mov [r8], 0; movsxd rdx, eax; add rdi, rdx; mov [r9], rdi; ret
0x000bb1e0 : mov edx, esi; movsxd rax, [rdi + rdx*4]; add rax, rdi; jmp rax
0x000e55c0 : add ecx, eax; add rax, [rip + 0x2e45cf]; mov r8, rax; call r12
0x0009668b : add [rax], al; add [rax], al; add bl, dh; movq [rdi], mm0; ret
0x00052222 : mov [rbx], edx; mov [rax], ebp; pop rbx; pop rbp; pop r12; ret
0x000f376f : inc [rbx + 0xb7704fa]; mov [rsi + 0x66], dx; xor eax, eax; ret
0x00131c94 : mov esi, esi; movsxd rax, [rcx + rsi*4]; add rax, rcx; jmp rax
0x00078a4d : mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0012b4e7 : push [rdi + rax + 0x48]; mov eax, [rdi + 8]; call [rax + 0x20]
0x000226be : add [rdx - 1], bh; test eax, eax; cmovs eax, edx; pop rbx; ret
0x0005db12 : mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x000fab1b : add [rax], al; add [rax], al; add [rbx - 0x7d], dl; call [rcx]
0x00064959 : add [rax], al; add [rcx + rcx*4 - 0x11], cl; call [r13 + 0x20]
0x0005fc94 : mov edi, ebx; xor edx, edx; pop rbx; pop rbp; pop r12; jmp rax
0x0005fb24 : pop rbx; mov rax, rsi; pop rbp; pop r12; pop r13; pop r14; ret
0x000c023b : mov eax, edx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00135571 : movq mm0, [rdi + 0x20]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x0002dd3c : xor [rax], al; add [rax], al; lea rsi, [rip + 0x349]; call rax
0x00137d97 : mov [rsp + rbp], 0; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x000339d9 : add [rax + 9], cl; ror [rax - 0x77], 1; or [r8 + 2], r15b; ret
0x00086f14 : lea edx, [rcx + 1]; mov [rcx], 0; pop rbx; mov [rdi], rdx; ret
0x0002267d : add [rax], al; add [rax - 0x77], cl; clc ; cqo ; idiv rsi; ret
0x0007df07 : add [rax], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x00002b91 : xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0005ab13 : mov rdx, [r8 + 0x88]; mov [rdx + 8], r9; add [rdx + 4], 1; ret
0x00063bfc : mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00131d48 : add bl, al; nop [rax + rax]; mov [rdi + 4], 1; mov eax, 1; ret
0x0009a1af : movups xmm[rdi], xmm0; movups xmm[rdi + rdx - 0x10], xmm1; ret
0x0001d5a4 : push rsp; and al, 8; movdqa xmm0, xmm[rsp]; add rsp, 0x28; ret
0x0012d102 : add [rax], al; add bl, al; nop cs:[rax + rax]; mov eax, 2; ret
0x000cd088 : xor eax, eax; pop rbp; pop r12; pop r13; pop r14; pop r15; ret
0x0016004d : add [rax], al; add [rdx + 0x48028801], cl; lea eax, [rdx]; ret
0x00095888 : adc bl, dh; movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x000f14ef : add al, [rax]; add al, ch; or esp, ebx; int1 ; jmp [rsi + 0xf]
0x0003d665 : add [rax], al; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x00049f3e : mov [rbx], edx; mov [rax], bpl; pop rbx; pop rbp; pop r12; ret
0x00033a2a : add [rax], al; add bl, al; nop ; mov [rdx], 0; mov eax, 2; ret
0x000ed560 : sub dh, cl; dec [rbx + 0x438d0455]; add [rax - 0x7d], ecx; ret
0x000e1baf : pop r12; mov [rsi + 0x2c], eax; pop r13; pop r14; pop r15; ret
0x00052221 : mov [rbx], rdx; mov [rax], ebp; pop rbx; pop rbp; pop r12; ret
0x0012aeee : lea rdi, [rax + 0x18]; xor eax, eax; pop rbx; pop rbp; jmp rcx
0x000481ba : add [rax], al; add [rax - 0x7b], cl; ror [rdi], 0x84; ret 0x11
0x00061695 : lea rsi, [rcx + 1]; mov [rdx + 0x28], rsi; mov [rcx], dil; ret
0x000744d7 : mov eax, esi; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0014c43d : div [rdx + 7]; lea r9, [r9 - 7]; lea rdx, [rdx - 0x40]; jmp r9
0x00063bfd : mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0012b096 : mov edx, [rbx + 0x22c0]; mov rsi, [rsp + 8]; call [rax + 0x18]
0x000d6e4e : mov rbp, rsi; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0005d5fb : add [rax], al; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x0000eccd : pop rbx; mov rax, r14; pop rbp; pop r12; pop r13; pop r14; ret
0x00021590 : lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret
0x00132665 : add [rax], al; add [rcx + rcx*4 - 0x19], cl; call [rax + 0x20]
0x00064ea8 : mov ecx, [rbx + 0x10]; lea r8, [rsp + 0x10]; call [rbp + 0x18]
0x000744d6 : mov rax, r14; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00135529 : movq mm0, [rdx]; mov eax, 1; movups xmm[rdi + 0x30], xmm0; ret
0x000871f7 : mov [rdi], edx; movzx edx, [rsp - 0xc]; mov [rdi + 4], dl; ret
0x0007a05d : mov rax, rcx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0015bd2e : add [rax], al; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret
0x00061520 : lea esi, [rcx + 4]; mov [rdx + 0x20], rsi; mov [rcx], eax; ret
0x000f51c6 : add [rax], al; mov fs:[rbx], 1; pop rbx; pop rbp; pop r12; ret
0x0007c706 : add [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x00060dff : pop rbx; mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret
0x000d6e4f : mov ebp, esi; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x00135541 : movq mm0, [rdi + 0x30]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x0007a05e : mov eax, ecx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0013cc4f : add [rbx - 0x47fbd7b9], al; add [rax], eax; add [rax], al; ret
0x0005dad9 : pop rbx; mov rax, rbp; pop rbp; pop r12; pop r13; pop r14; ret
0x00075d7b : mov [rax], rsi; mov rax, [rip + 0x353e7b]; mov [rax], rdi; ret
0x00135561 : movq mm0, [rdx]; mov eax, 1; movups xmm[rdi + 0x20], xmm0; ret
0x0005f48d : xor [rax], al; add [rax], al; lea rsi, [rip - 0x198]; call rax
0x000b1bf2 : pop r12; mov [rdi + 0x20], rcx; pop r13; pop r14; pop r15; ret
0x000c012d : add [rax], al; add [rax - 0x75], cl; sbb [r8 - 0x7d], r9b; ret
0x0000f5de : add [rax], al; mov rax, [rip + 0x3ba621]; add rax, fs:[0]; ret
0x00049f3d : mov [rbx], rdx; mov [rax], bpl; pop rbx; pop rbp; pop r12; ret
0x0000eddd : mov [rcx], rsi; cmp rax, rdx; mov rdx, -1; cmove rax, rdx; ret
0x0007d9ed : add [rax], eax; lea rax, [rip + 0x1c79a]; cmovne rax, rdx; ret
0x0016f321 : mov [rdx], 0; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000c017a : pop rbx; mov eax, edx; pop rbp; pop r12; pop r13; pop r14; ret
0x00131d3e : add [rax], al; mov eax, [rdi]; mov [rdx], eax; mov eax, 1; ret
0x0012aeef : lea edi, [rax + 0x18]; xor eax, eax; pop rbx; pop rbp; jmp rcx
0x0005aea7 : add [rax], al; add rsp, 8; mov eax, esi; pop rbx; pop rbp; ret
0x000bb16d : mov edx, ecx; movsxd rax, [rsi + rdx*4]; add rax, rsi; jmp rax
0x0006774c : mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00139f76 : add [rax], al; add [rcx + rcx*4 - 0x19], cl; call [rax + 0x28]
0x0007f75e : mov [rbp], 0; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00134c71 : movq mm0, [rdi + 0x1c]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x001600b5 : mov eax, [rcx + 4]; mov [rdx + 4], ax; lea rax, [rdx + 5]; ret
0x00001139 : mov eax, eax; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x000b1bf3 : pop rsp; mov [rdi + 0x20], rcx; pop r13; pop r14; pop r15; ret
0x0013c5e6 : adc [rdx + 0x17], esi; cmp eax, 2; sete al; movzx eax, al; ret
0x00137d96 : mov [r12 + rbp], 0; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x0001cbea : movq rax, xmm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret
0x0005db11 : mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00075d7c : mov [rax], esi; mov rax, [rip + 0x353e7b]; mov [rax], rdi; ret
0x000fe529 : add [rax], al; add [rbx - 0x3f7ac7c0], cl; cmove eax, edx; ret
0x0002267b : add [rax], 0; add [rax], al; mov rax, rdi; cqo ; idiv rsi; ret
0x0008599b : dec [rax - 0x976b]; dec [rdi]; test [rbx - 0x8fffff3], dl; ret
0x00086f13 : lea rdx, [rcx + 1]; mov [rcx], 0; pop rbx; mov [rdi], rdx; ret
0x0010d130 : add [rax], al; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x0012b352 : push [rdi + rcx + 0x48]; mov eax, [rdi + 8]; call [rax + 0x20]
0x0007db5d : add [rax], eax; lea rax, [rip + 0x1c60a]; cmovne rax, rdx; ret
0x000e456a : add [rax], al; add cl, ch; push rsp; idiv edi; jmp [rsi + 0xf]
0x000cebcc : xor eax, eax; cmp [rdi + 0x65], 0; setne al; add eax, eax; ret
0x0007bf6e : mov [rbx + 8], rbp; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x000e1bb0 : pop rsp; mov [rsi + 0x2c], eax; pop r13; pop r14; pop r15; ret
0x0014ded0 : add al, 0; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0015bd1e : add [rax], al; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret
0x00141c21 : add [rax], al; add [rax], al; cmovne rax, rdx; add rsp, 8; ret
0x0005fc93 : mov rdi, rbx; xor edx, edx; pop rbx; pop rbp; pop r12; jmp rax
0x0000f5fe : add [rax], al; mov rax, [rip + 0x3ba649]; add rax, fs:[0]; ret
0x000ceb19 : pop rbx; xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret
0x000ed665 : pop rbx; mov eax, ecx; pop rbp; pop r12; pop r13; pop r14; ret
0x00030e15 : mov r9, [rdi + 0x30]; mov rdi, [rdi + 0x68]; xor eax, eax; ret
0x000dbdea : add [rax], al; add [rax + 0x63], cl; add cl, [rax - 0x77]; ret
0x0006151f : lea rsi, [rcx + 4]; mov [rdx + 0x20], rsi; mov [rcx], eax; ret
0x0007cc2f : add [rax], al; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret
0x00146212 : div [rbx + rcx - 0x17]; xchg [rdi - 0x12], bh; jmp [rsi + 0xf]
0x0007f75d : mov [r13], 0; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00061696 : lea esi, [rcx + 1]; mov [rdx + 0x28], rsi; mov [rcx], dil; ret
0x0006dcb7 : push -0xe173515; pop rsp; or al, [rax]; nop ; mov rax, -1; ret
0x00065c60 : push rax; push 0; lea r9, [rbp - 0x40]; mov rdi, r15; call r12
0x0008720f : mov [rdi], edx; movzx edx, [rsp + 0xc]; mov [rdi + 4], dx; ret
0x0006c335 : xor [rax], al; add [rax], al; lea rsi, [rip - 0x100]; call rax
0x00061109 : movsxd rdx, esp; mov rsi, r14; mov rdi, rbp; call [r13 + 0x38]
0x00064ea7 : mov rcx, [rbx + 0x10]; lea r8, [rsp + 0x10]; call [rbp + 0x18]
0x00139d41 : add [rax], eax; add [rax], al; mov rdi, r14; call [rax + 0x28]
0x00139705 : mov [rbx + 8], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x000dfed1 : mov edx, [rip + 0x2e9e01]; mov rax, [rdx]; mov [rdx], rdi; ret
0x0013befc : dec [rcx + rcx*4 - 0x12]; mov rdi, rbp; xor eax, eax; call rcx
0x0006c62a : xor [rax], al; add [rax], al; lea rsi, [rip - 0x3f5]; call rax
0x0014cee6 : push rsi; clc ; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0000edde : mov [rcx], esi; cmp rax, rdx; mov rdx, -1; cmove rax, rdx; ret
0x0011b9e6 : mov edx, edi; mov rsi, r14; lea rdi, [rip + 0x2b2b1e]; call r12
0x0014dc73 : mov ecx, [rsi - 4]; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x001600d4 : mov eax, [rcx + 3]; mov [rdx + 3], eax; lea rax, [rdx + 6]; ret
0x00064e08 : pop rbx; mov rax, [rax + 0x130]; mov rax, [rax + 0x20]; jmp rax
0x00022fed : mov [rsi + 0x10], edx; mov [rsi + 0x28], rax; xor eax, eax; ret
0x000cae71 : movzx eax, al; movsxd rax, [rdi + rax*4]; add rax, rdi; jmp rax
0x000ee0d5 : movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x000da200 : movzx edx, cl; movsxd rdx, [rbp + rdx*4]; add rdx, rbp; jmp rdx
0x000873c1 : mov [rdi], edx; movzx edx, [rsp - 0x14]; mov [rdi + 4], dx; ret
0x000ef33a : add [rdi], cl; test [rax + 0x48000000], ebp; add esp, 0x78; ret
0x00152786 : movdqu xmm[rdi - 0x1d], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x000b8cbf : movzx eax, cl; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x0004ab46 : movzx esp, ah; movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x00134c44 : mov eax, 1; mov [rdi + 0x18], 1; movups xmm[rdi + 8], xmm0; ret
0x0013c8af : mov eax, [rdi + 0x18]; add rsi, rax; mov [rdi + 0x18], rsi; ret
0x0002342b : mov [rbx], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x00135f17 : mov rax, [rdi + 0x38]; lea rsi, [rbp + 0x18]; call [rax + 0x10]
0x0010331e : add [rax - 0x75], cl; sbb [rsi - 0x7d], spl; add [rcx], al; ret
0x000ee165 : movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x0001edf5 : mov eax, [rsi]; or rax, [r8]; mov [rdi], rax; xor eax, eax; ret
0x000ee9d7 : add [rdi], cl; test [rbx + 0x48000000], edi; add esp, 0x68; ret
0x00060d1a : pop rbx; mov eax, r13d; pop rbp; pop r12; pop r13; pop r14; ret
0x00108b8d : mov [rax], bl; movsx eax, bl; add rsp, 8; pop rbx; pop rbp; ret
0x0011d1eb : dec [rdi]; test cl, dh; add [rax], al; add [rcx - 0xa], al; ret
0x000d050e : movzx esi, dh; movsxd rax, [rcx + r14*4]; add rax, rcx; jmp rax
0x0012fc8d : add [rax], r8b; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x00172573 : add eax, ebx; nop ; nop cs:[rax + rax]; lea rax, [rdi + 4]; ret
0x0016debd : add [rax], al; add [rcx], dh; ror [rbx + 0x75163b17], 0xe4; ret
0x0007df1f : mov [rbp], rax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x000eebfc : add [rdi], cl; test [rsi + 0x48000000], edi; add esp, 0x78; ret
0x00099931 : push rdi; adc [rcx - 0x12cfe7b1], cl; mov [rdi + 0x1c], ch; ret
0x0007c34e : add [rax], al; add [rax], al; xor eax, eax; mov [rdi], rsi; ret
0x0000f3fd : add [rax], al; add [rcx], dh; rol [rbx - 0x6bf07f19], 0xc0; ret
0x0005c144 : add [rax], al; movsxd rax, [rdi + rax*4]; add rax, rdi; jmp rax
0x00070d6e : add [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret
0x0011feeb : mov [rax], 0; movsxd rdx, eax; add rdi, rdx; mov [r9], rdi; ret
0x00022fec : mov [rsi + 0x10], r10; mov [rsi + 0x28], rax; xor eax, eax; ret
0x00138d3a : add [rax - 0x77], cl; push rsp; and al, 0x40; call [rax + 0x18]
0x00099911 : push rdi; adc [rcx - 0x12cfe8b1], cl; mov [rdi + 0x1b], ch; ret
0x00152b96 : movdqu xmm[rdi - 0x15], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152896 : movdqu xmm[rdi - 0x1b], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00061108 : movsxd rdx, r12d; mov rsi, r14; mov rdi, rbp; call [r13 + 0x38]
0x000fc4a8 : mov rsi, [rax]; mov rdi, [rbp - 0x58]; mov r12d, r14d; call r15
0x000ed4d7 : mov [rbp], ebx; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x0015dcf1 : adc ebx, eax; nop [rax]; nop cs:[rax + rax]; mov [rcx], dx; ret
0x00152a16 : movdqu xmm[rdi - 0x18], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0009bdbd : mov edx, 1; setl al; neg eax; cmp ecx, r8d; cmovg eax, edx; ret
0x0012b8ef : call [rax]; mov rax, [r13 + 8]; mov rdi, r13; call [rax + 0x20]
0x0016ed0b : add al, [rax]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0006cba6 : add [rax], al; add [rax], al; mov [rbx + 0x50], 0; pop rbx; ret
0x0014d0c4 : mov edx, [rsi - 4]; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00175807 : add al, [rax]; movsxd rax, [rbp + rax*4]; add rbp, rax; jmp rbp
0x0012c983 : add [rax], al; add bl, al; nop [rax + rax]; mov [rsi], 0xa; ret
0x0014b9bd : push [rdx + 7]; lea r9, [r9 - 7]; lea rdx, [rdx - 0x40]; jmp r9
0x0000a3eb : add [rax], al; add [rax - 0x73], cl; add [rax + 0x39], r9d; ret
0x0005ab14 : mov edx, [rax + 0x88]; mov [rdx + 8], r9; add [rdx + 4], 1; ret
0x0006243b : mov esi, r12d; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax
0x000ed7e0 : movdqu xmm0, xmm[rdi + 0x78]; movups xmm[rsi + 0x70], xmm0; ret
0x000f71b9 : add al, 0; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x0006da53 : xor [rax], al; add [rax], al; lea rsi, [rip - 0x181e]; call rax
0x00152c16 : movdqu xmm[rdi - 0x14], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0003d42b : add [rax], al; movsxd rdx, ebp; mov rdi, rbx; call [r14 + 0x38]
0x0000a409 : add [rax], al; add [rax - 0x73], cl; add r9b, [rax + 0x39]; ret
0x001320f8 : lea esi, [rax + 0x18]; mov rax, [rdi + 0x38]; call [rax + 0x10]
0x000998d1 : push rdi; adc [rax - 0x12cfe7b1], cl; mov [rdi + 0x19], ch; ret
0x0010d9f7 : add [rax], eax; add [rax - 0x75], cl; add cl, [rax - 0x7d]; ret
0x0014da73 : mov ecx, [rsi - 4]; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x0007df20 : mov [rbp], eax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x0004a288 : movzx eax, al; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00135f18 : mov eax, [rdi + 0x38]; lea rsi, [rbp + 0x18]; call [rax + 0x10]
0x00133ceb : mov [rsp + 0x10], rax; mov rax, [rsp + 0x48]; call [rax + 0x28]
0x00172553 : add ebx, eax; nop ; nop cs:[rax + rax]; lea rax, [rdi + 2]; ret
0x00135518 : add [rax], al; bswap eax; mov [rdx + 0xc], eax; mov eax, 1; ret
0x000700e2 : add esp, 8; mov eax, 1; pop rbx; pop rbp; pop r12; pop r13; ret
0x00047821 : add [rax], eax; add [rax], al; mov [rbp - 0x4f0], 0x20; jmp rax
0x001183ed : add [rcx + rcx*4 - 6], cl; mov rsi, r14; mov rdi, r13; call rax
0x0006e880 : sub edx, [rax + 0x10]; mov eax, [rdi + 0x10]; sub eax, edx; ret
0x0008a930 : adc [rsi + 0xf], ah; xlatb ; rol [rbp + 0x315775c0], -0x40; ret
0x00152666 : movdqu xmm[rdi - 0x1f], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152c96 : movdqu xmm[rdi - 0x13], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0007a732 : add al, [rax]; add [rcx + rcx*4 - 6], cl; mov rdi, r8; call rax
0x001600e6 : mov eax, [rcx + 5]; mov [rdx + 5], eax; lea rax, [rdx + 8]; ret
0x000b2be5 : sub [rbx + 0x5d], r11b; pop r12; pop r13; pop r14; pop r15; ret
0x00057ad9 : add esp, [rdi + 0x7de9ffff]; fdiv st(7), st(0); jmp [rsi + 0xf]
0x0009627d : add al, 0; add bl, al; nop [rax + rax]; nop cs:[rax + rax]; ret
0x00160106 : mov eax, [rcx + 6]; mov [rdx + 6], eax; lea rax, [rdx + 9]; ret
0x0006e160 : xor [rax], al; add [rax], al; lea rsi, [rip - 0x1f2b]; call rax
0x000999d3 : push rdi; adc [rax - 0x12cfdfb1], cl; mov [rdi + 0x21], ch; ret
0x0012caeb : mov rax, [rbp + 8]; mov esi, 8; mov rdi, rbp; call [rax + 0x30]
0x0007c705 : add [rax], r8b; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x0014d873 : mov ecx, [rsi - 4]; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x0012d8c9 : sub ecx, esi; mov [rdx + 0x58], rdi; mov [rdx + 0x68], rcx; ret
0x0008725f : adc [rax], al; movsxd rdx, [rax + rdx*4]; add rdx, rax; jmp rdx
0x00152816 : movdqu xmm[rdi - 0x1c], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0009dcb2 : dec [rbx + 0xeb80853]; add [rax], al; add [rax - 0x7d], cl; ret
0x00141a9c : add [rax], al; add [rax], al; mov [rsi], rdi; xor eax, eax; ret
0x0002342a : mov [rbx], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x000630d6 : sub [rax - 0x77], cl; push rax; sbb [rcx + 0x5bc0310b], cl; ret
0x0012c95b : add [rcx + 0x146349c1], cl; mov [rcx + rax - 0x3e], cl; jmp rdx
0x0014528c : xor [rbp + 0x21], dh; mov rax, [rip + 0x289f42]; call [rax + 8]
0x00133cec : mov [rsp + 0x10], eax; mov rax, [rsp + 0x48]; call [rax + 0x28]
0x00030f17 : movsxd rdx, [rsi + rdx*4]; add rdx, rsi; cmp r9d, 0x2f; jmp rdx
0x0008719c : add [rax], al; add [rax], al; mov [rdi], sil; add rax, rdi; ret
0x00161f68 : add eax, fs:[rax]; add [rax - 0x7cb7fec8], al; fdivr st(7); ret
0x0001edf4 : mov rax, [rsi]; or rax, [r8]; mov [rdi], rax; xor eax, eax; ret
0x0011b9e5 : mov rdx, r15; mov rsi, r14; lea rdi, [rip + 0x2b2b1e]; call r12
0x00138f97 : add [rax], al; add [rax], eax; add [rax], al; call [rax + 0x18]
0x00152d26 : movdqu xmm[rdi - 0x12], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x001529b4 : mov ecx, [rsi - 4]; mov [rdi - 9], rdx; mov [rdi - 4], ecx; ret
0x00152916 : movdqu xmm[rdi - 0x1a], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0005b9a7 : movzx eax, al; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x001393fe : call [rax + 0x8c48348]; pop rbx; pop rbp; pop r12; pop r13; ret
0x0014248a : lea ebp, [rax]; add [rax - 0x77], cl; xlatb ; call [rax + 0x20]
0x0006cb52 : mov [rbx], edx; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x000ab109 : mov r9, r15; mov rcx, rbx; mov rdx, r14; mov rsi, r13; call rbp
0x000658fd : add [rax], al; add [rax - 0x75], cl; mov rax, [rax + 0x4c]; ret
0x0009629c : add [rax], al; add [rax], al; mov dl, [rsi]; mov [rdi], dl; ret
0x00008268 : add [rax], eax; add [rax - 0x73], cl; add cl, [rax + 0x39]; ret
0x001412fc : add [rax], al; add al, ch; cld ; fucomp st(4); jmp [rsi - 0x70]
0x0006e875 : sub edx, [rax + 0x18]; mov eax, [rdi + 0x10]; sub eax, edx; ret
0x00152a96 : movdqu xmm[rdi - 0x17], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0001e5df : movups xmm[rdi + 0x60], xmm0; movups xmm[rdi + 0x70], xmm0; ret
0x000c0ac9 : sub [rax], al; add [rax], al; add [rbx + rcx*4 + 0x25], cl; ret
0x000bfcae : add [rax], al; mov fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret
0x000792b4 : pop rbp; mov eax, r13d; pop r12; pop r13; pop r14; pop r15; ret
0x0001b774 : movzx edi, dl; movsxd rdi, [r10 + rdi*4]; add rdi, r10; jmp rdi
0x00002625 : add [rax], al; add [rax], al; add rsp, 8; pop rbx; pop rbp; ret
0x0003d48b : add [rax], al; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0007c1bd : add [rax], al; pop rbp; pop r12; pop r13; pop r14; pop r15; ret
0x001320f7 : lea rsi, [rax + 0x18]; mov rax, [rdi + 0x38]; call [rax + 0x10]
0x0001e6d6 : add [rdi + rax*8], ah; add es:[rax], al; add [rax - 1], bh; ret
0x0006e4c3 : xor [rax], al; add [rax], al; lea rsi, [rip - 0x228e]; call rax
0x000fc4a9 : mov esi, [rax]; mov rdi, [rbp - 0x58]; mov r12d, r14d; call r15
0x000f6451 : inc [rbp + 0xb8c0]; add [rax], al; cmove rax, rbx; pop rbx; ret
0x0006de5a : xor [rax], al; add [rax], al; lea rsi, [rip - 0x1c25]; call rax
0x00138a4a : add [rax - 0x77], cl; push rsp; and al, 0x38; call [rax + 0x18]
0x0008718a : add [rcx + 0xc6349c1], cl; mov [rcx + rax - 0x37], ecx; jmp rcx
0x00138f0e : add [rax], al; mov rdi, r15; mov rax, [r15 + 8]; call [rax + 8]
0x000ed511 : movups xmm[rdi + 0x30], xmm0; movups xmm[rdi + 0x40], xmm0; ret
0x00069266 : sbb [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; pop r13; ret
0x0015dd53 : push rcx; add eax, ebx; nop cs:[rax + rax]; mov [rcx], rdx; ret
0x000955dc : add [rax], al; add [rax], al; mov dx, [rsi]; mov [rdi], dx; ret
0x0002348a : mov [rbp], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x0000d4ad : add [rax], al; movsxd rdi, [r11 + rsi*4]; add rdi, r11; jmp rdi
0x000700e1 : add rsp, 8; mov eax, 1; pop rbx; pop rbp; pop r12; pop r13; ret
0x0011ef25 : add [rax], al; add [rcx], dh; ror [rcx - 0x76b7f3a9], 0x3e; ret
0x0010fd73 : adc [rax + rdx + 0x5b], dh; xor eax, eax; pop r12; pop rbp; ret
0x0012caec : mov eax, [rbp + 8]; mov esi, 8; mov rdi, rbp; call [rax + 0x30]
0x00152da6 : movdqu xmm[rdi - 0x11], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0010fec9 : add [rax], al; add [rdi], cl; test [rbx - 0x37000000], esp; ret
0x0000a427 : add [rax], al; add [rax - 0x73], cl; add r9d, [rax + 0x39]; ret
0x0013c8ae : mov rax, [rdi + 0x18]; add rsi, rax; mov [rdi + 0x18], rsi; ret
0x0012c9a3 : add [rax], al; add bl, al; nop [rax + rax]; mov [rsi], 0xc; ret
0x0003751b : adc [rax - 0x7b], cl; dec [rax + 0x48e57506]; mov eax, esi; ret
0x000bb1df : add [rcx + 0x46348f2], cl; xchg eax, edi; add rax, rdi; jmp rax
0x00031146 : mov ecx, [rsi + 0x30]; mov rsi, [rsi + 0x70]; xor eax, eax; ret
0x00152996 : movdqu xmm[rdi - 0x19], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x000623dc : mov edx, [rax]; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x00152b16 : movdqu xmm[rdi - 0x16], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00023489 : mov [rbp], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x0012d8c8 : sub rcx, rsi; mov [rdx + 0x58], rdi; mov [rdx + 0x68], rcx; ret
0x00030e16 : mov ecx, [rdi + 0x30]; mov rdi, [rdi + 0x68]; xor eax, eax; ret
0x0002267c : add [rax], al; add [rax], al; mov rax, rdi; cqo ; idiv rsi; ret
0x0005dd32 : push [rbx + rcx + 0x48]; mov eax, [rsp + 8]; add rsp, 0x18; ret
0x000d045e : movzx esp, ah; movsxd rax, [rsi + r12*4]; add rax, rsi; jmp rax
0x00063155 : add [rax], al; add [rax], al; mov [rax + 0x48], 0; pop rbx; ret
0x0011fd9a : add ecx, [rcx - 0xc3fce3f]; stosq [rdi], rax; mov eax, r8d; ret
0x000bb16c : add [rcx + 0x46348ca], cl; xchg eax, esi; add rax, rsi; jmp rax
0x000ed830 : movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0x78], xmm0; ret
0x0007ac7a : add [rdi], cl; test [rcx + 0x48000000], esi; add esp, 0x18; ret
0x00139834 : add ebp, [rcx]; add [rbx + rax*4 + 0x38], ah; add al, 0x75; ret
0x001526f6 : movdqu xmm[rdi - 0x1e], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x000c037f : add [rax], al; add [rcx + rcx*4 + 0x32], ah; add rsp, 0x18; ret
0x000693d1 : mov eax, 1; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x000435f4 : push rbp; sub dh, al; add [rip - 0x11d17], ch; jmp [rsi - 0x70]
0x0017645a : add al, [rax]; movsxd r12, [rdx + r12*4]; add rdx, r12; jmp rdx
0x00131dbe : xchg [rax - 0x48000000], edi; add [rax], eax; add [rax], al; ret
0x00169758 : add [rax], al; add [rbx + 0x14840c0], al; clc ; vzeroupper ; ret
0x0010f537 : lea rax, [rip + 0x2c00ea]; mov [rip + 0x2c00d0], 1; pop rbx; ret
0x0003b923 : dec [rcx + rcx*4 - 9]; mov rdx, [rbp - 0x510]; call [r15 + 0x38]
0x00100d28 : add esi, ebp; lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret
0x000219cb : add [rax], al; add [rax - 1], bh; pop rbx; pop rbp; pop r12; ret
0x000cc8c1 : add bl, al; nop [rax + rax]; mov [rdi + 8], 2; xor eax, eax; ret
0x0012c326 : add al, ch; xchg eax, esp; push rdi; std ; dec [rax + 0x39]; ret
0x0013cd26 : sub [rcx + rcx*4 + 0x63], cl; and [rbx + 0x5d], bl; pop r12; ret
0x0005c2c9 : adc eax, [rax]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00172572 : add r8d, r11d; nop ; nop cs:[rax + rax]; lea rax, [rdi + 4]; ret
0x00094ecc : adc eax, [rdx]; xor ah, ah; mov [rdx + 8], ah; mov rax, rdi; ret
0x0001f7e9 : add ebx, edi; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call rbp
0x00172562 : add r8b, r11b; nop ; nop cs:[rax + rax]; lea rax, [rdi + 3]; ret
0x0012d793 : mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0007dbef : add [rdx - 1], bh; bsf eax, edi; cmove eax, edx; add eax, 1; ret
0x0006bed6 : mov [rbx], edx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00020d0e : mov edi, ebp; lea rbx, [r15 + rax]; mov rax, [rsp + 8]; call rax
0x00099640 : mov dx, [rsi]; mov [rdi], dx; xor ch, ch; mov [rdi + 2], ch; ret
0x0009c5c3 : sub esp, -0x80; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0013ce97 : add [rax], al; add [rax], al; nop [rax + rax]; xor eax, eax; ret
0x00142e67 : add [rax], al; add al, ch; add [rdi], eax; clc ; jmp [rsi + 0xf]
0x00052500 : adc eax, [rax]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x00132804 : mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx
0x0012161d : add [rax], al; add [rax - 0x7c], al; div [rsp + rdx + 0x78]; ret
0x00038e86 : add [rax], al; add bh, al; test [rax], eax; idiv edi; call [rax]
0x00134a9d : sub [rax + rax], al; add [rbx + 0x5d], bl; pop r12; pop r13; ret
0x0006a00e : add [rax - 0x7bf10000], al; nop ; add [rax], al; add al, ch; ret
0x000921b6 : add [rcx + 0x4418a02], ecx; mov [rdx + 4], al; mov rax, rdi; ret
0x0009c67e : mov rsi, r13; lea r9, [rsp + 0x28]; lea rcx, [rax + 4]; call rbx
0x00096bcc : add [rax], al; add [rax], al; mov [rdi], dh; lea rax, [rdi]; ret
0x00063158 : add [rax - 0x39], cl; add [rax], al; add [rax], al; pop rbx; ret
0x00128d02 : xor edx, edx; mov rsi, r12; mov rdi, rbx; mov rcx, r13; call r10
0x001355b6 : add [rbx - 0x7637f100], cl; ror [rax - 0x77], 2; mov eax, 1; ret
0x0013b8d9 : mov eax, [rdi + 8]; mov [rsp], rbp; mov rsi, rsp; call [rax + 8]
0x00046b93 : add [rax], al; add [rax - 0x75], cl; xor eax, 0x3830f3; call rax
0x00066c50 : mov [rbx + 8], rdx; movzx edx, [rax]; mov eax, edx; pop rbx; ret
0x0005233e : add [rax], al; add [rax - 0x75], cl; xor eax, 0x377948; call rax
0x0016004e : add [rax], al; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret
0x0011fc45 : add edx, 2; mov [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret
0x00049d55 : add [rax], al; add [rax - 0x75], cl; xor eax, 0x37ff31; call rax
0x0012a7d4 : add [rax - 0x75], cl; and al, 8; mov rdi, rbx; call [rax + 0x20]
0x0015318b : add [rax], 0; add [rax], al; mov rdx, [rsi]; mov [rdi], rdx; ret
0x0007f846 : add [rax], al; test rsi, rsi; mov rax, rdx; cmovne rax, rdi; ret
0x000e267c : add [rcx - 0x77], dh; xor r9b, bpl; sar esi, -1; jmp [rsi + 0xf]
0x0010edcf : mov edx, [rdi + 0x28]; xor eax, eax; test edx, edx; sete al; ret
0x00172552 : add r11d, r8d; nop ; nop cs:[rax + rax]; lea rax, [rdi + 2]; ret
0x000d32eb : add [rax], eax; add [rbx - 0x7af7db8c], cl; div [rdx - 0xa]; ret
0x0015334b : add [rax], 0; add [rax], al; mov edx, [rsi]; mov [rdi], edx; ret
0x00134cd9 : pop r8; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x000ed6f5 : mov [rbx + 4], edx; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x0005c25b : adc eax, [rax]; movsxd rax, [rdi + rax*4]; add rax, rdi; jmp rax
0x0006473a : mov rax, [rsi + 8]; sar r8, 2; mov [rsi], rax; call [rbp + 0x30]
0x00137c78 : mov rcx, r14; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax
0x000bf1c6 : mov [rbp], esi; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0006e84e : add [rax], al; mov eax, [rdi + 0x10]; sub eax, [rsi + 0x10]; ret
0x00132805 : mov ecx, esi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx
0x0003d3dc : add [rax], al; add [rax - 0x75], cl; xor eax, 0x38c8aa; call rax
0x0007ea74 : adc edi, eax; dec [rax - 0x7d]; clc ; add [rax - 0x77], ecx; ret
0x0008015e : int1 ; add rdi, 1; test al, al; mov eax, 0; cmovne rax, rdi; ret
0x0010fca5 : add [rax], al; add [rax], al; cmova eax, edx; add rsp, 0x28; ret
0x00023067 : adc [rcx + rcx*4 + 7], cl; mov [rdi + 8], rcx; xor eax, eax; ret
0x0012d794 : mov esi, esp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0005aa46 : add [rbp - 0x3f6af040], al; movzx eax, al; neg eax; pop rbx; ret
0x0001ceca : add [rax], al; nop [rax]; pmovmskb eax, xmm0; and eax, 0x80; ret
0x0001ee68 : lea eax, [rdx + 1]; mov [rip + 0x3ab06b], eax; mov eax, edx; ret
0x00099630 : mov dl, [rsi]; mov [rdi], dl; xor ch, ch; mov [rdi + 1], ch; ret
0x00137c79 : mov ecx, esi; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax
0x0011feef : add [rax], al; movsxd rdx, eax; add rdi, rdx; mov [r9], rdi; ret
0x00101a93 : add [rcx - 0x2708ffd4], eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0003a1af : add [rax], al; add [rax - 0x75], cl; xor eax, 0x38fad7; call rax
0x0013c84e : add [rax], al; mov rax, [rdi + 0x18]; sub rax, [rdi + 0x20]; ret
0x00131d91 : xchg [rax - 0x48000000], ebp; add [rax], eax; add [rax], al; ret
0x000fe7cb : add [rax], al; add [rax], al; add [rax - 0x75], cl; pop rax; ret
0x0013c036 : mov rdi, rbp; mov [rsp], rax; mov rax, [rbp + 8]; call [rax + 8]
0x001200d6 : movzx eax, [rdi + 1]; shl eax, 3; shr rax, 4; and eax, 0x7f; ret
0x00020d0d : mov rdi, r13; lea rbx, [r15 + rax]; mov rax, [rsp + 8]; call rax
0x0010f541 : add [rax + rax], ch; add [rax], eax; add [rax], al; pop rbx; ret
0x0005ab63 : mov rdx, [rdi + 0x88]; mov [rdx + 8], rcx; mov [rdx + 4], 1; ret
0x0013552d : add [rax], eax; add [rax], al; movups xmm[rdi + 0x30], xmm0; ret
0x000339d8 : add [rax], eax; or rax, rdx; mov [rdi + 8], rax; mov eax, 2; ret
0x0010aa85 : add [rax], r8b; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x000bf1c5 : mov [r13], r14; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x000c32bd : add [rax], al; add [rax], al; cmovne rdx, rax; mov rax, rdx; ret
0x00066adc : mov [rdi + 8], rcx; movzx edx, [rax]; mov eax, edx; pop rbx; ret
0x0006473b : mov eax, [rsi + 8]; sar r8, 2; mov [rsi], rax; call [rbp + 0x30]
0x0004a085 : add [rax], al; add [rax - 0x75], cl; xor eax, 0x37fc01; call rax
0x0005e5a8 : add [rax], eax; add [rax], al; add rsp, 8; pop rbx; pop rbp; ret
0x0013cc65 : add [rax], al; add bl, al; nop [rax]; mov eax, [rdi + 0x28]; ret
0x0007f8bc : add [rax], al; add [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x00128e9d : xor edx, edx; mov rsi, r13; mov rdi, rbp; mov rcx, r14; call r10
0x00066c51 : mov [rbx + 8], edx; movzx edx, [rax]; mov eax, edx; pop rbx; ret
0x0007b8e3 : movsxd rdi, esi; mov [rbx + 0x30], eax; mov [rbx], rdi; call rcx
0x000965c1 : push rdi; inc ebx; nop ; nop cs:[rax + rax]; mov [rdi], edx; ret
0x0013c037 : mov edi, ebp; mov [rsp], rax; mov rax, [rbp + 8]; call [rax + 8]
0x0016343e : add [rax], al; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret
0x0001eb24 : mov rax, [rsi]; and rax, [r8]; mov [rdi], rax; xor eax, eax; ret
0x0010f751 : add [rax], eax; add [rax - 0x75], cl; pop rbp; clc ; leave ; ret
0x000f5102 : add [rax], al; sub edx, eax; test eax, eax; cmovns eax, edx; ret
0x0012a732 : add [rax], al; add bl, al; nop cs:[rax + rax]; xor eax, eax; ret
0x0011fc44 : add r10, 2; mov [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret
0x00135618 : add [rax], al; bswap eax; mov [rdx + 0x10], eax; mov eax, 1; ret
0x0001eb25 : mov eax, [rsi]; and rax, [r8]; mov [rdi], rax; xor eax, eax; ret
0x00068f1c : add [rax], al; nop ; mov eax, [rdi]; shr eax, 4; and eax, 1; ret
0x00137f32 : xor [rcx + 0x56], al; push r13; lea r9, [rsp + 0x3a]; call [rax]
0x0007f8bb : add [r8], r8b; add [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x0010f538 : lea eax, [rip + 0x2c00ea]; mov [rip + 0x2c00d0], 1; pop rbx; ret
0x000680eb : add [rax], 0; add [rax], al; mov eax, [rdi]; and eax, 0x200; ret
0x0015bcae : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x00080611 : pop rbx; mov [r13], rbp; pop rbp; pop r12; pop r13; pop r14; ret
0x000955f8 : add al, bl; nop [rax + rax]; mov edx, [rsi]; mov [rdi], edx; ret
0x00096602 : push rdi; inc ebx; nop ; nop cs:[rax + rax]; mov [rdi], rdx; ret
0x00173c00 : dec [rdi]; test [rsi + 1], ebp; add [rax], al; xor eax, eax; ret
0x0006fd1f : adc [rcx - 0x75], cl; sbb [rax - 0x7b], cl; ror [rdi], 0x84; ret
0x00137313 : add [rax], al; lea rdx, [rip + 0x3f04]; mov rdi, rbx; call [rax]
0x00113a6b : add [rax], al; add [rax], al; nop ; mov eax, edi; ror ax, 8; ret
0x0013b8d8 : mov rax, [rdi + 8]; mov [rsp], rbp; mov rsi, rsp; call [rax + 8]
0x000b225c : xor [rax], eax; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00135565 : add [rax], eax; add [rax], al; movups xmm[rdi + 0x20], xmm0; ret
0x00079922 : adc [rax], eax; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0005ab64 : mov edx, [rdi + 0x88]; mov [rdx + 8], rcx; mov [rdx + 4], 1; ret
0x00066add : mov [rdi + 8], ecx; movzx edx, [rax]; mov eax, edx; pop rbx; ret
0x0001fbf1 : add ebp, edi; mov rdx, r12; mov rsi, r13; mov rdi, rbx; call rbp
0x00113924 : add eax, [rax]; add [rdi + 8], dh; mov rax, rdi; sar rax, 6; ret
0x000c53cc : add [rcx], al; sbb [rsp + rsi*2 + 0x2e], edx; mov eax, 0x7f; ret
0x00148b0f : add al, 0; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00033a20 : sub eax, esi; mov [rdi + 8], r9; mov [rdx], eax; mov eax, 2; ret
0x000c53f4 : add [rax], al; add bl, al; nop [rax + rax]; mov eax, 0x7d00; ret
0x00042dea : mov [rdi], esi; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x000ab10a : mov ecx, edi; mov rcx, rbx; mov rdx, r14; mov rsi, r13; call rbp
0x0001fbf0 : add r13, r15; mov rdx, r12; mov rsi, r13; mov rdi, rbx; call rbp
0x00175d9c : dec [rbp - 0x73]; nop ; add [rax], al; add [rcx + 0x21], cl; ret
0x0001f7e8 : add rbx, r15; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call rbp
0x0009c67f : mov esi, ebp; lea r9, [rsp + 0x28]; lea rcx, [rax + 4]; call rbx
0x0009c5c2 : sub rsp, -0x80; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00042de9 : mov [rdi], r14; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x000228a9 : add [rax], al; add [rax], al; add [rbx - 0x75], bl; pop rax; ret
0x00079921 : adc [rax], r8d; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x000658fe : add [rax], al; mov rax, [rdi + 0x48]; mov eax, [rax + 0x4c]; ret
0x000922dd : movlpd xmm1, [rcx + 6]; movlpd [rdx + 6], xmm1; mov rax, rdi; ret
0x000963fb : movq [rdi], mm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; ret
0x0009a20e : lea rsi, [rsi + rcx - 1]; std ; rep movsb [rdi], [rsi]; cld ; ret
0x0012bd60 : mov rax, [rbx + 8]; mov rdi, rbx; mov [rsp], 0; call [rax + 0x20]
0x001528b4 : mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x0005fdf7 : add esp, 8; mov rax, rsi; pop rbx; pop rbp; pop r12; pop r13; ret
0x00138315 : sub [rax], eax; lea rdx, [rip + 0x296b52]; mov fs:[rax], rdx; ret
0x000922de : movlps xmm1, [rcx + 6]; movlpd [rdx + 6], xmm1; mov rax, rdi; ret
0x000aa9ac : mov eax, ebx; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x000625bd : mov [rax], edx; mov eax, [rsi]; add rsp, 8; pop rbx; pop rbp; ret
0x0000eddc : mov fs:[rcx], rsi; cmp rax, rdx; mov rdx, -1; cmove rax, rdx; ret
0x001369a7 : mov esi, 6; mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x28]
0x00152685 : mov ecx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x00087701 : add esp, 8; mov rax, rdi; pop rbx; pop rbp; pop r12; pop r13; ret
0x0006e84d : add [rax], r8b; mov eax, [rdi + 0x10]; sub eax, [rsi + 0x10]; ret
0x0005ab8c : add [rax], al; add [rax], al; add [rdx + 4], 1; xor eax, eax; ret
0x00068f1d : add [rsi - 0x70], ah; mov eax, [rdi]; shr eax, 4; and eax, 1; ret
0x000fca4d : mov edi, ebx; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax
0x0014dc54 : mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0012bd61 : mov eax, [rbx + 8]; mov rdi, rbx; mov [rsp], 0; call [rax + 0x20]
0x0000f662 : mov [rcx], edx; mov rdx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x0014d855 : mov edx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00096d78 : movq [rdi], mm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x001601a6 : mov rax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x001738a0 : movzx eax, [rdi - 0xa]; movzx edx, [rsi - 0xa]; sub eax, edx; ret
0x0006b191 : adc al, 0; add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x0001ee12 : inc ebx; nop cs:[rax + rax]; nop ; mov eax, [rip + 0x3ab0b6]; ret
0x000922fd : movlpd xmm1, [rcx + 7]; movlpd [rdx + 7], xmm1; mov rax, rdi; ret
0x000957a9 : movq [rdi], mm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x000339be : mov [rdi + 8], r9; sub eax, r10d; mov [rdx], eax; mov eax, 2; ret
0x0005dbef : add esp, 8; mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret
0x00046b92 : xor [rax], al; add [rax], al; mov rsi, [rip + 0x3830f3]; call rax
0x00131db8 : mov rax, [rdx]; bswap eax; mov [rdi + 0xb8], eax; mov eax, 1; ret
0x00131bdd : adc [rsi], eax; mov rax, [rax + 0xa0]; mov [rsi + 0x10], rax; ret
0x00131f19 : xor [rax - 0x77], cl; fisttp [rax - 0x75]; and al, 0x28; call rcx
0x0005fdf6 : add rsp, 8; mov rax, rsi; pop rbx; pop rbp; pop r12; pop r13; ret
0x00128993 : mov [rbx], rax; mov r8, rbp; mov rcx, r14; mov rdi, r13; call r12
0x00066dd4 : mov rdx, [rbx + 0xf8]; mov [rdx], rax; xor eax, eax; pop rbx; ret
0x001226d5 : mov [rax], 0; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x000fca4c : mov rdi, rbx; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax
0x00160146 : mov eax, [rcx + 8]; mov [rdx + 8], eax; lea rax, [rdx + 0xb]; ret
0x00022561 : add esp, 8; xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret
0x0009a20f : lea esi, [rsi + rcx - 1]; std ; rep movsb [rdi], [rsi]; cld ; ret
0x000873e0 : mov [rdi + 4], dx; movzx edx, [rsp + 0xe]; mov [rdi + 6], dl; ret
0x00088bdf : movzx eax, [rdi + rdx]; movzx edx, [rsi + rdx]; sub eax, edx; ret
0x00160186 : mov rax, [rcx + 6]; mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x0005e14c : add rsp, 8; mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0014d2a4 : mov edx, [rsi - 4]; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x000957cd : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x000a375e : call [rax + 0x31d18948]; shr cl, cl; fdivp st(7); jmp [rsi + 0xf]
0x0014d484 : mov edx, [rsi - 4]; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00072e62 : mov ch, [rbp + rsi]; mov [rsp + 8], rsi; xor edi, edi; call [rax]
0x00097bd8 : movq [rdi], mm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret
0x00062086 : mov [rax], edx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x000fcbed : adc [rax - 0x7b], cl; push [rbp + 0x5f]; mov rdi, [r13]; call r12
0x0006e65d : add [rax], al; add [rsi - 1], bh; mov rdi, rbx; call [r15 + 0x18]
0x000922fe : movlps xmm1, [rcx + 7]; movlpd [rdx + 7], xmm1; mov rax, rdi; ret
0x0013581e : mov rdi, rbp; add [rax], 1; mov rax, [r15 + 0x60]; call [rax + 8]
0x000620c6 : mov [rax], edx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x0012c778 : add rsp, 8; mov rdi, rbp; xor eax, eax; pop rbx; pop rbp; jmp rdx
0x000962df : add [rbx + 0x4568a0e], cl; mov [rdi], ecx; mov [rdi + 4], dl; ret
0x00066dd5 : mov edx, [rbx + 0xf8]; mov [rdx], rax; xor eax, eax; pop rbx; ret
0x00160036 : mov rax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x00072ad1 : add [rcx + rcx*4 + 0x5c], cl; and al, 8; mov rdi, r12; call [rax]
0x000c7de8 : lea esi, [rbp - 0x450]; mov rdi, [rbp - 0x4c8]; call [rbx + 0x40]
0x00160037 : mov eax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x00042cc6 : add rsp, 8; mov eax, edx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0007c348 : xor esi, esi; mov [rdi + 8], 0; xor eax, eax; mov [rdi], rsi; ret
0x00095728 : movq [rdi], mm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x000b169b : add [rax], al; add [rax], al; add [rax + 0xc9], bh; syscall ; ret
0x001635ab : movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; sub eax, edx; ret
0x000c465b : add [rax], al; add [rax], al; add [rax + 0x6c], bh; syscall ; ret
0x0012bf09 : mov ebp, eax; mov rax, [r10 + 8]; mov rdi, r10; call [rax + 0x20]
0x0014cf47 : mov [rdi - 0x11], r11; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x00096dd9 : movq [rdi], mm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x00087700 : add rsp, 8; mov rax, rdi; pop rbx; pop rbp; pop r12; pop r13; ret
0x0014d664 : mov edx, [rsi - 4]; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00160187 : mov eax, [rcx + 6]; mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x00096d45 : movq [rdi], mm0; mov [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret
0x000555b0 : inc [rdx]; add [rax], al; add cl, ch; sar bh, cl; jmp [rsi + 0xf]
0x0010a61f : mov rsi, r13; mov rdx, rax; mov edi, 0x2000003; call [rbx + 0x28]
0x0004a084 : xor [rax], al; add [rax], al; mov rsi, [rip + 0x37fc01]; call rax
0x00152834 : mov ecx, [rsi - 4]; mov [rdi - 0xc], rdx; mov [rdi - 4], ecx; ret
0x001527a5 : mov ecx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x0015342b : add [rax], 0; add [rax], al; movzx edx, [rsi]; mov [rdi], dx; ret
0x0003ab37 : push rbp; sbb edx, [rip + 0x4634800]; nop ; add rax, rsi; jmp rax
0x00081ea8 : dec [rdi]; test bl, cl; add [rax], eax; add [rax + 0x63], cl; ret
0x000680ec : add [rax], al; add [rax], al; mov eax, [rdi]; and eax, 0x200; ret
0x00134b7a : adc [rsi], eax; mov rax, [rax + 0x40]; mov [rsi + 0x10], rax; ret
0x00128994 : mov [rbx], eax; mov r8, rbp; mov rcx, r14; mov rdi, r13; call r12
0x00042cc7 : add esp, 8; mov eax, edx; pop rbx; pop rbp; pop r12; pop r13; ret
0x00110913 : add esp, 8; add rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret
0x000c7de7 : lea rsi, [rbp - 0x450]; mov rdi, [rbp - 0x4c8]; call [rbx + 0x40]
0x0013d60d : dec [rdi]; test dh, ah; add [rax], eax; add [rax - 0x39], cl; ret
0x00172532 : movnti [rsi - 0x70], esp; nop cs:[rax + rax]; lea rax, [rdi]; ret
0x00133478 : mov rax, [rbp + 8]; mov rsi, r12; mov rdi, rbp; call [rax + 0x48]
0x00134c31 : mov eax, [rdx]; bswap eax; mov [rdi + 0x54], eax; mov eax, 1; ret
0x0014da54 : mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00173860 : movzx eax, [rdi - 0xe]; movzx edx, [rsi - 0xe]; sub eax, edx; ret
0x000be9f6 : add rsp, 8; mov rax, rdx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0003a1ae : xor [rax], al; add [rax], al; mov rsi, [rip + 0x38fad7]; call rax
0x0005ab72 : add [rax], al; add bl, al; nop cs:[rax + rax]; mov eax, 0x10; ret
0x000f51ca : add eax, [rcx]; add [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x000335d0 : sbb r10, r11; mov [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret
0x0005dbee : add rsp, 8; mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret
0x00097c59 : movq [rdi], mm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret
0x000fcb94 : dec [rdi]; test [rax + 0x49000000], edx; mov edi, [rbp]; call r12
0x00131ca1 : mov eax, [rdx]; bswap eax; mov [rdi + 0xb4], eax; mov eax, 1; ret
0x00134cf0 : mov rax, [rdx]; bswap eax; mov [rdi + 0x58], eax; mov eax, 1; ret
0x0001d041 : add [rax], al; add [rax - 0x3791f09a], al; movss [rdi], xmm1; ret
0x0001e61c : adc edi, [rax + 1]; shl rax, cl; or [rdi], rax; xor eax, eax; ret
0x0015dd12 : adc [rax + 0x66c30251], ecx; nop [rax + rax]; mov [rcx], edx; ret
0x0006a49b : mov edx, [rsp + 8]; mov rsi, r12; mov rdi, rbx; call [rbp + 0x70]
0x0005f845 : add esp, 8; mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0013b0f0 : xor eax, eax; mov edx, r14d; mov rsi, rbx; mov rdi, r12; call r13
0x000620c5 : mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x000393f9 : inc [rbp + 0x78850fc9]; add eax, [rax]; add [rcx - 0x77], al; ret
0x00134cf1 : mov eax, [rdx]; bswap eax; mov [rdi + 0x58], eax; mov eax, 1; ret
0x0001ccd8 : add [rax + 0x66d02148], al; movd mm1, rax; movsd [rdi], xmm1; ret
0x00160126 : mov eax, [rcx + 7]; mov [rdx + 7], eax; lea rax, [rdx + 0xa]; ret
0x0010b76a : mov esi, esi; mov rdx, rax; mov edi, 0x2000005; call [r13 + 0x28]
0x0006eb35 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rax, [rdi + 0x68]; ret
0x00141a95 : sub [rax], al; nop [rax + rax]; mov [rsi], rdi; xor eax, eax; ret
0x00160167 : mov eax, [rcx + 5]; mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x0014d854 : mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00134c7c : add al, bl; nop ; mov eax, [rdi]; mov [rdx], eax; mov eax, 1; ret
0x000fbc8e : add [rax], al; mov rax, [rip + 0x2cdf01]; mov fs:[rax], 0x16; ret
0x00062085 : mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x00090140 : sub al, 1; add [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret
0x00063058 : mov eax, 1; mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x0013d12d : mov [rdi + 0x28], 0; mov [rdi + 0x20], 0; mov [rdi + 8], rax; ret
0x000be9f7 : add esp, 8; mov rax, rdx; pop rbx; pop rbp; pop r12; pop r13; ret
0x00131cd0 : movdqu xmm0, xmm[rdi + 8]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x000922bd : movlpd xmm1, [rcx + 5]; movlpd [rdx + 5], xmm1; mov rax, rdi; ret
0x0003aeac : mov edx, [rbp - 0x510]; mov rsi, [rbp - 0x528]; call [rax + 0x38]
0x000bb678 : inc edi; add ecx, [rcx]; add [rax], al; add [rax - 0x7d], cl; ret
0x0007bdd6 : add [rdi + rax*8], ah; or al, 0; add [rax], al; xor eax, eax; ret
0x0014cf48 : mov [rdi - 0x11], ebx; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x00022560 : add rsp, 8; xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret
0x00133479 : mov eax, [rbp + 8]; mov rsi, r12; mov rdi, rbp; call [rax + 0x48]
0x00096df9 : movq [rdi], mm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x0007aff4 : add [rax], al; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax
0x00166d6f : mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0017440d : add [rcx], eax; add [rcx], eax; imul rax, rdx; shr rax, 0x38; ret
0x000c461b : add [rax], al; add [rax], al; add [rax + 0x6e], bh; syscall ; ret
0x00096d31 : movq mm0, [rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x00141d02 : add [rax], 0; add [rax - 0x75], cl; add eax, 0x289573; call [rax]
0x00097c39 : movq [rdi], mm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret
0x000f8328 : mov [rip + 0x2d4c3e], 0; mov [rip + 0x2d4c43], 0; add rsp, 8; ret
0x000c8566 : add [rax], al; lea rax, [rbx + 8]; pop rbx; pop rbp; pop r12; ret
0x001183ec : add [rax], al; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax
0x000658db : mov ecx, [rdx + 0x48]; cmp ecx, [rdx + 0x4c]; cmove eax, ecx; ret
0x0012c779 : add esp, 8; mov rdi, rbp; xor eax, eax; pop rbx; pop rbp; jmp rdx
0x000c464b : add [rax], al; add [rax], al; add [rax + 0x68], bh; syscall ; ret
0x0009647c : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; ret
0x00100460 : mov edx, [rbx]; mov [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret
0x0015318c : add [rax], al; add [rax], al; mov rdx, [rsi]; mov [rdi], rdx; ret
0x000625bc : mov [rax], rdx; mov eax, [rsi]; add rsp, 8; pop rbx; pop rbp; ret
0x0010b769 : mov rsi, r14; mov rdx, rax; mov edi, 0x2000005; call [r13 + 0x28]
0x00131ca0 : mov rax, [rdx]; bswap eax; mov [rdi + 0xb4], eax; mov eax, 1; ret
0x00134c30 : mov rax, [rdx]; bswap eax; mov [rdi + 0x54], eax; mov eax, 1; ret
0x0003d3db : xor [rax], al; add [rax], al; mov rsi, [rip + 0x38c8aa]; call rax
0x00094e4e : movlps xmm1, [rcx + 8]; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x00099641 : mov edx, [rsi]; mov [rdi], dx; xor ch, ch; mov [rdi + 2], ch; ret
0x000c5401 : add [rbp], bh; add bl, al; nop cs:[rax + rax]; mov eax, 0x7e; ret
0x00152934 : mov ecx, [rsi - 4]; mov [rdi - 0xa], rdx; mov [rdi - 4], ecx; ret
0x0000f661 : mov [rcx], rdx; mov rdx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x00152714 : mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x0006a49a : mov rdx, [rsp + 8]; mov rsi, r12; mov rdi, rbx; call [rbp + 0x70]
0x00088d4d : movzx eax, [rax + rcx]; movzx edx, [rdx + rcx]; sub eax, edx; ret
0x001527a4 : mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x000c462b : add [rax], al; add [rax], al; add [rax + 0x66], bh; syscall ; ret
0x00068b87 : sbb [rdi + 0xe], dh; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x000fcbbd : adc [rax - 0x7b], cl; push [rbp + 0x5e]; mov rdi, [r13]; call r12
0x0007b583 : add [rax], al; mov rdi, r13; mov rdx, rbx; mov rsi, r12; call rax
0x00047b36 : lea eax, [rip + 0x14]; mov r8, rdx; mov [rbp - 0x4f8], 1; jmp rax
0x00063dfe : mov [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call [rbp + 0x20]
0x001375cf : push [rdx + rcx + 0x48]; mov eax, [rdi + 0x38]; call [rax + 0x20]
0x0014234f : add [rax], 0; add [rax - 0x75], cl; add eax, 0x288f26; call [rax]
0x0014da55 : mov edx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0011f7c2 : add [rax], eax; add bl, al; nop cs:[rax + rax]; xor eax, eax; ret
0x0014d044 : mov [rdi - 0x11], ebx; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x0008a92f : adc [r14 + 0xf], r12b; xlatb ; rol [rbp + 0x315775c0], -0x40; ret
0x0005f844 : add rsp, 8; mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret
0x000fe528 : add fs:[rax], al; add [rbx - 0x3f7ac7c0], cl; cmove eax, edx; ret
0x0012dcbe : mov eax, 1; mov [rbx + 0x68], rdx; pop rbx; pop rbp; pop r12; ret
0x000680bc : add [rax], al; add [rax], al; mov eax, [rdi]; and eax, 0x804; ret
0x00137d77 : add [rsi + 0xe], bh; pop rbx; xor eax, eax; pop rbp; pop r12; ret
0x00049d54 : xor [rax], al; add [rax], al; mov rsi, [rip + 0x37ff31]; call rax
0x0003aeab : mov rdx, [rbp - 0x510]; mov rsi, [rbp - 0x528]; call [rax + 0x38]
0x00023080 : mov r8, rdx; mov [rdi + 8], rcx; xor eax, eax; mov [rdi], r8; ret
0x001354aa : adc [rsi], eax; mov rax, [rax + 0x50]; mov [rsi + 0x10], rax; ret
0x000335d1 : sbb edx, ebx; mov [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret
0x00134cda : pop rax; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0013581f : mov edi, ebp; add [rax], 1; mov rax, [r15 + 0x60]; call [rax + 8]
0x000922be : movlps xmm1, [rcx + 5]; movlpd [rdx + 5], xmm1; mov rax, rdi; ret
0x0003b1e4 : mov ebx, edx; mov [rbp - 0x518], 0; mov [rbp - 0x528], 1; jmp rax
0x00160166 : mov rax, [rcx + 5]; mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x0005e14d : add esp, 8; mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret
0x000c463b : add [rax], al; add [rax], al; add [rax + 0x6b], bh; syscall ; ret
0x00077c18 : sbb [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; jmp rax
0x000317b0 : adc r10, r11; mov [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret
0x00152715 : mov ecx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x000fc439 : add rsp, 8; mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret
0x00131db9 : mov eax, [rdx]; bswap eax; mov [rdi + 0xb8], eax; mov eax, 1; ret
0x00108e81 : xor esi, esi; mov rdx, [rsp + 0x18]; mov edi, 0x2000004; call rcx
0x0014dc55 : mov edx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x000f8059 : mov [rip + 0x2d4ef5], 0; setne al; add rsp, 8; movzx eax, al; ret
0x0008d5b3 : mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000630d7 : mov [rax + 0x18], rdx; mov [rbx], ecx; xor eax, eax; pop rbx; ret
0x00173870 : movzx eax, [rdi - 0xd]; movzx edx, [rsi - 0xd]; sub eax, edx; ret
0x00132b2d : mov [rbp + 0x50], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x000bbb56 : inc edi; add ecx, [rdx]; add [rax], al; add [rax - 0x7d], cl; ret
0x0016549a : mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x000bb776 : inc edi; add ebp, [rbx]; add [rax], al; add [rax - 0x7d], cl; ret
0x0015334c : add [rax], al; add [rax], al; mov edx, [rsi]; mov [rdi], edx; ret
0x00047b35 : lea rax, [rip + 0x14]; mov r8, rdx; mov [rbp - 0x4f8], 1; jmp rax
0x000ed83e : add [rax], al; movzx eax, [rdi]; mov [rsi], ax; xor eax, eax; ret
0x00097bb9 : movq [rdi], mm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret
0x000fbf8d : adc [rax - 0x7b], cl; push [rbp + 0x3d]; mov rdi, [rbp]; call r12
0x0007b99a : xor [r9 + r9*4 + 0x4b], cl; mov [rbx], rsi; mov rdi, r9; call rcx
0x0005233d : xor [rax], al; add [rax], al; mov rsi, [rip + 0x377948]; call rax
0x0005e031 : add esp, 8; mov eax, esi; pop rbx; pop rbp; pop r12; pop r13; ret
0x00132afe : add eax, [rax]; add [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x0012b9d1 : add [rsi + 4], bh; mov rdi, rbp; lea r9, [rsp + 0x20]; call [rax]
0x000228aa : add [rax], al; add [rax], al; pop rbx; mov eax, [rax + 0x58]; ret
0x0015349b : add [rax], 0; add [rax], al; movzx edx, [rsi]; mov [rdi], dl; ret
0x00132b2e : mov [rbp + 0x50], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x000c8676 : add [rax], al; lea rax, [rbx + 2]; pop rbx; pop rbp; pop r12; ret
0x00063dff : mov [rsp + 8], eax; xor eax, eax; mov rdi, rbp; call [rbp + 0x20]
0x0006cd2e : add [rax], al; add [rsi - 1], bh; mov rdi, rbx; call [rbp + 0x18]
0x000630d8 : mov [rax + 0x18], edx; mov [rbx], ecx; xor eax, eax; pop rbx; ret
0x001334c1 : add [rax], al; add [rsi + 8], bh; mov rdi, rbp; call [rax + 0x30]
0x0005e030 : add rsp, 8; mov eax, esi; pop rbx; pop rbp; pop r12; pop r13; ret
0x00096d59 : movq [rdi], mm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x000921f6 : add [rcx + 0x3418b02], ecx; mov [rdx + 3], eax; mov rax, rdi; ret
0x00173850 : movzx eax, [rdi - 0xf]; movzx edx, [rsi - 0xf]; sub eax, edx; ret
0x0010a620 : mov esi, ebp; mov rdx, rax; mov edi, 0x2000003; call [rbx + 0x28]
0x00097b98 : movq [rdi], mm0; mov [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret
0x00152684 : mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x00131cb8 : movdqu xmm0, xmm[rdx]; mov eax, 1; movups xmm[rdi + 8], xmm0; ret
0x0011fb8e : add al, [rax]; add [rax], al; sub esi, 1; mov [rdi + 1], sil; ret
0x00110912 : add rsp, 8; add rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret
0x00173890 : movzx eax, [rdi - 0xb]; movzx edx, [rsi - 0xb]; sub eax, edx; ret
0x00108c9a : sub [rax], al; mov eax, 0; cmovns rax, [rbx + 0x28]; pop rbx; ret
0x0007f845 : add [rax], r8b; test rsi, rsi; mov rax, rdx; cmovne rax, rdi; ret
0x00173880 : movzx eax, [rdi - 0xc]; movzx edx, [rsi - 0xc]; sub eax, edx; ret
0x0010045f : mov rdx, [rbx]; mov [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret
0x0003b1e3 : mov r11, rdx; mov [rbp - 0x518], 0; mov [rbp - 0x528], 1; jmp rax
0x0001d1ce : add [rax], al; add [rdi], bh; movd xmm0, eax; mov [rdi], edx; ret
0x00094e4d : movlpd xmm1, [rcx + 8]; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x00021ad0 : xor eax, eax; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0014d043 : mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x000317b1 : adc edx, ebx; mov [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret
0x00088b74 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x000fbfb5 : adc [rax - 0x7b], cl; push [rbp + 0x35]; mov rdi, [rbp]; call r12
0x000fc43a : add esp, 8; mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret
0x000956d1 : movq mm0, [rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x001601a7 : mov eax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x0001ee1a : add [rax], al; add [rax], al; nop ; mov eax, [rip + 0x3ab0b6]; ret
0x000f7f36 : sub eax, 0; add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x0000f3c0 : add [rax - 0x75], cl; pop rax; mov eax, [rax + rdi*4 + 0x200]; ret
0x0007b584 : add [rcx + rcx*4 - 0x11], cl; mov rdx, rbx; mov rsi, r12; call rax
0x001289f3 : mov [rbx], rax; xor r8d, r8d; mov rcx, r14; mov rdi, r13; call r12
0x00139d3c : xor esi, esi; mov [rbx + 0x10], 1; mov rdi, r14; call [rax + 0x28]
0x0014cf90 : mov [rdi - 0x11], ebx; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0009bdc0 : add [rax], al; setl al; neg eax; cmp ecx, r8d; cmovg eax, edx; ret
0x000c8675 : add [rax], r8b; lea rax, [rbx + 2]; pop rbx; pop rbp; pop r12; ret
0x0012ce44 : mov rax, [rsp + 8]; mov esi, r12d; mov rdi, rbp; call [rax + 0x30]
0x00097c79 : movq [rdi], mm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret
0x00099670 : mov edx, [rsi]; mov [rdi], edx; xor ch, ch; mov [rdi + 4], ch; ret
0x00078600 : pop rbx; mov rsi, r13; pop rbp; pop r12; pop r13; pop r14; jmp rax
0x000f7b65 : not [rbx + 0x2d]; add [rax - 0x77], cl; clc ; mov [r8 - 1], 0; ret
0x00172531 : movnti [r14 - 0x70], r12d; nop cs:[rax + rax]; lea rax, [rdi]; ret
0x0006be9c : pop rbx; pop rbp; movzx eax, [rax]; pop r12; pop r13; pop r14; ret
0x000957ec : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x0016008d : add [rax], al; add [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret
0x000f6be4 : pop r12; mov [rip + 0x2d6268], eax; lea rax, [rip + 0x2d6235]; ret
0x0016249f : mov [rdx], eax; lea rax, [rdx + 7]; cmp [rax], 1; sbb rax, -1; ret
0x00131eca : add [rax], al; mov [r12 + 0xa8], ebp; bswap ebp; call [rax + 0x18]
0x000ed83d : add [rax], r8b; movzx eax, [rdi]; mov [rsi], ax; xor eax, eax; ret
0x00131ee9 : add [rax], al; mov rsi, [rsp + 0x18]; mov rdi, rbx; call [rax + 8]
0x0012bddd : mov eax, [rbx + 8]; mov esi, r14d; mov rdi, rbx; call [rax + 0x28]
0x0014cf8f : mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0012a7d3 : add [rax], al; mov rax, [rsp + 8]; mov rdi, rbx; call [rax + 0x20]
0x0005ffac : add [rax], al; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0001f89f : add [rcx + rcx*4 - 0x12], cl; mov rdi, r14; mov rdx, r12; call rbp
0x00061b27 : add esp, 8; pop rbx; mov eax, r12d; pop rbp; pop r12; pop r13; ret
0x0014cee5 : mov edx, [rsi - 8]; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x000339bf : mov [rdi + 8], ecx; sub eax, r10d; mov [rdx], eax; mov eax, 2; ret
0x0012ca11 : lea esi, [rax + rdx + 0x28]; mov rax, [rdi + 8]; call [rax + 0x30]
0x00092162 : mov [rdx + 1], ah; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret
0x0009c512 : mov edi, [rsp]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx
0x000714cb : add [rax], 0; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x0015349c : add [rax], al; add [rax], al; movzx edx, [rsi]; mov [rdi], dl; ret
0x0011fef0 : add [rax + 0x63], cl; ror [rax + 1], 1; xlatb ; mov [r9], rdi; ret
0x00072d74 : add [rax], al; mov rax, [rip + 0x356d73]; xor edi, edi; call [rax]
0x000996c1 : mov edx, [rsi]; mov [rdi], rdx; xor ch, ch; mov [rdi + 8], ch; ret
0x001454e2 : add [rbp + 0x23], dh; mov rax, [rip + 0x289cec]; call [rax + 0x10]
0x000f2653 : push [rcx]; sal [rcx], cl; div [rcx]; push [rcx]; shr al, 0xf; ret
0x0017439f : add bl, al; nop [rax + rax]; nop cs:[rax + rax]; xor eax, eax; ret
0x0006a49c : push rsp; and al, 8; mov rsi, r12; mov rdi, rbx; call [rbp + 0x70]
0x000d050d : movzx r14d, r14b; movsxd rax, [rcx + r14*4]; add rax, rcx; jmp rax
0x0012aff2 : xor esi, esi; mov rdi, rbp; mov [rbx + 0x18], 1; call [rax + 0x28]
0x000f6421 : inc [rbp - 0x39fc8640]; add eax, [rax]; mov rax, rbx; pop rbx; ret
0x0011aa7f : push [rbp + 0x3e]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x001289f4 : mov [rbx], eax; xor r8d, r8d; mov rcx, r14; mov rdi, r13; call r12
0x00022692 : call [rbx + 0x74]; cmp dh, [rcx]; rol [rax + 0x375003f], 0x5b; ret
0x00024dc8 : add ecx, [rax - 0x73]; lodsq rax, [rsi]; add [rax - 0x7d], cl; ret
0x00171e6d : dec [rax + 0x7f]; std ; vmovdqu64 zmm[r11], zmm4; vzeroupper ; ret
0x0016249e : mov [rdx], rax; lea rax, [rdx + 7]; cmp [rax], 1; sbb rax, -1; ret
0x0007be2f : mov [rbx + 8], ebp; mov [rbx], rdx; pop rbx; pop rbp; pop r12; ret
0x001381a9 : add [rax], al; lea rsi, [r12 + 8]; mov rdi, rbx; call [rax + 0x10]
0x00096e19 : movq [rdi], mm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x00023081 : mov eax, edx; mov [rdi + 8], rcx; xor eax, eax; mov [rdi], r8; ret
0x0011153b : add [rax - 0x77], cl; imul eax; pop rsp; imul dh; jmp [rsi + 0x2e]
0x0009998d : movdqu xmm[rdi + 0xf], xmm2; xor ch, ch; mov [rdi + 0x1f], ch; ret
0x00078b48 : mov edi, eax; pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rcx
0x0012b078 : xor esi, esi; mov rdi, rbp; mov [rbx + 0x18], 0; call [rax + 0x28]
0x000f6be5 : pop rsp; mov [rip + 0x2d6268], eax; lea rax, [rip + 0x2d6235]; ret
0x0012d76d : adc [rbx - 0x3d], bl; mov rax, [rdi + 8]; mov rsi, rsp; call [rax]
0x0012bd83 : xchg eax, edi; mov rax, [rbx + 8]; mov rdi, rbx; call [rax + 0x20]
0x00097a3d : add [rax], al; add [rbx + 0x48178916], cl; lea eax, [rdi + 4]; ret
0x0006d42d : add [rax], eax; add [rsi - 1], bh; mov rdi, rbx; call [r15 + 0x18]
0x0014ba1e : movaps xmm[rdi - 0x20], xmm4; movaps xmm[rdi - 0x10], xmm5; jmp r9
0x00134d02 : push rsp; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x000979fd : add [rax], al; add [rdx + 0x48178816], cl; lea eax, [rdi + 1]; ret
0x0009562f : add [rbx + 0x3568b0e], cl; mov [rdi], ecx; mov [rdi + 3], edx; ret
0x00134cc2 : add al, [rbx - 0x37f0fe18]; mov [rdi + 0x48], eax; mov eax, 1; ret
0x00142350 : add [rax], al; add [rax - 0x75], cl; add eax, 0x288f26; call [rax]
0x00097bf8 : movq [rdi], mm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret
0x0012bddc : mov rax, [rbx + 8]; mov esi, r14d; mov rdi, rbx; call [rax + 0x28]
0x000fb2c5 : mov eax, [rip + 0x2d0355]; pop rcx; pop rbx; pop rbp; pop r12; ret
0x0013cd4c : add [rax], al; add [rax], al; add [rdi + 0x28], 4; mov eax, 1; ret
0x001531ff : add [rbx + 0xe8b0356], cl; mov [rdi + 3], edx; mov [rdi], ecx; ret
0x00176459 : add al, gs:[rax]; movsxd r12, [rdx + r12*4]; add rdx, r12; jmp rdx
0x000226f0 : add [rax], al; mov rax, [rax]; pop rbx; mov eax, [rax + 0x58]; ret
0x0008adf1 : stosd [rdi], eax; add [rax], al; add [rbx - 0x79f0ef06], al; ret 0
0x0007be2e : mov [rbx + 8], rbp; mov [rbx], rdx; pop rbx; pop rbp; pop r12; ret
0x00132311 : add esp, 8; mov eax, r13d; pop rbx; pop rbp; pop r12; pop r13; ret
0x000fbc8d : add [rax], r8b; mov rax, [rip + 0x2cdf01]; mov fs:[rax], 0x16; ret
0x0006255e : add [rax], eax; add [rsi - 1], bh; mov rdi, rbx; call [rax + 0x18]
0x000996c0 : mov rdx, [rsi]; mov [rdi], rdx; xor ch, ch; mov [rdi + 8], ch; ret
0x00096d98 : movq [rdi], mm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x00132310 : add rsp, 8; mov eax, r13d; pop rbx; pop rbp; pop r12; pop r13; ret
0x000d045d : movzx r12d, r12b; movsxd rax, [rsi + r12*4]; add rax, rsi; jmp rax
0x0009996d : movdqu xmm[rdi + 0xe], xmm2; xor ch, ch; mov [rdi + 0x1e], ch; ret
0x0006acb1 : xchg [rdx + 1], bl; add [rax], al; mov rdi, rbx; call [r13 + 0x20]
0x000f6a05 : pop rsp; mov [rip + 0x2d6448], eax; lea rax, [rip + 0x2d6415]; ret
0x0009994d : movdqu xmm[rdi + 0xd], xmm2; xor ch, ch; mov [rdi + 0x1d], ch; ret
0x00141d03 : add [rax], al; add [rax - 0x75], cl; add eax, 0x289573; call [rax]
0x00092172 : mov [rdx + 2], ah; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret
0x000018b0 : push 0; mov rdx, rbp; mov rsi, [rsp + 0x18]; mov r9, r13; call rbx
0x0006d873 : add [rax - 0x39], cl; or [rax], al; add [rax], al; add bl, dh; ret
0x000871e1 : push rdi; add al, bl; nop [rax]; mov [rdi], r8d; add rax, rdi; ret
0x0003aac6 : lea eax, [rip - 0xbc]; mov r11, rdx; mov [rbp - 0x500], 1; jmp rax
0x000c8565 : add [rax], r8b; lea rax, [rbx + 8]; pop rbx; pop rbp; pop r12; ret
0x00033766 : sub edi, eax; add al, [rax]; add [rax], al; add [rax + 1], bh; ret
0x001113fa : add [rax - 0x77], cl; imul eax; popfq ; imul esi; jmp [rsi + 0x2e]
0x00142738 : add al, [rax]; add [rax], al; add [rdx - 1], bh; mov eax, edx; ret
0x00078b47 : mov rdi, rax; pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rcx
0x00137f56 : add [rax], al; lea rsi, [r10 + 8]; mov rdi, rbx; call [rax + 0x10]
0x00061b26 : add rsp, 8; pop rbx; mov eax, r12d; pop rbp; pop r12; pop r13; ret
0x0014cee4 : mov rdx, [rsi - 8]; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0009667b : add [rax], al; add [rax], al; add bl, dh; movq [rdi - 1], mm0; ret
0x0001d03f : add [rip - 0x80000000], ah; movd xmm1, eax; movss [rdi], xmm1; ret
0x0013c2ae : add [rax], al; mov rax, [rdi + 8]; mov rsi, rsp; call [rax + 0x40]
0x000326fc : mov [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret
0x0014559a : call [rax + 0x178]; mov [rbx], rax; pop rax; pop rdx; pop rbx; ret
0x0011fc47 : add cl, [rcx + rcx*4 + 0x10]; lea eax, [r9 + r8 + 2]; pop rbx; ret
0x00132abc : inc [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; add eax, 1; ret
0x0009580c : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x00134d01 : push r12; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x00131d8a : add al, [rbx - 0x37f0fe18]; mov [rdi + 0xa8], eax; mov eax, 1; ret
0x0004ab45 : movzx r12d, r12b; movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x00095639 : add eax, ebx; nop [rax + rax]; mov rdx, [rsi]; mov [rdi], rdx; ret
0x000fb2c4 : mov rax, [rip + 0x2d0355]; pop rcx; pop rbx; pop rbp; pop r12; ret
0x00079c7c : add [rax], al; add [rax], al; mov rsi, rbp; mov rdi, rax; call rcx
0x0015326f : add [rbx + 0xe8b0256], cl; mov [rdi + 2], edx; mov [rdi], ecx; ret
0x00096c0f : add [rbx + 0x477880e], cl; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x0010e592 : add [r8], 0; add [rax], al; movups xmm[rbp - 0x78], xmm0; call rax
0x0007649c : mov rsi, r13; pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rax
0x000f6a04 : pop r12; mov [rip + 0x2d6448], eax; lea rax, [rip + 0x2d6415]; ret
0x0008722e : mov [rdi + 4], dx; movzx edx, [rsp + 0x16]; mov [rdi + 6], dl; ret
0x0008ad70 : add [rax], al; pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret
0x000873e1 : mov [rdi + 4], edx; movzx edx, [rsp + 0xe]; mov [rdi + 6], dl; ret
0x0003aac5 : lea rax, [rip - 0xbc]; mov r11, rdx; mov [rbp - 0x500], 1; jmp rax
0x00097b81 : movq mm0, [rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0x10]; ret
0x0000b2b7 : movsd [rdi], [rsi]; popfq ; adc eax, [rax]; mov rdi, r13; call r12
0x001532df : add [rbx + 0xe8b0156], cl; mov [rdi + 1], edx; mov [rdi], ecx; ret
0x0005f11d : xor rax, fs:[0x30]; lea rsi, [rip + 0x1d3]; mov rdi, rbp; call rax
0x00064878 : push rdi; sub rdx, rsi; mov [rsp + 8], rcx; mov rdi, r15; call rax
0x0007649d : mov esi, ebp; pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rax
0x0015342c : add [rax], al; add [rax], al; movzx edx, [rsi]; mov [rdi], dx; ret
0x000c0529 : add [rax], al; mov fs:[rdx], r8d; mov eax, esi; add rsp, 0x48; ret
0x000f7744 : pop rbx; clc ; dec [rax - 0x7b]; sal [rbp + rdx + 0x48], 0x39; ret
0x00134c47 : add [rax], al; mov [rdi + 0x18], 1; movups xmm[rdi + 8], xmm0; ret
0x0009c511 : mov rdi, [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx
0x0012ce45 : mov eax, [rsp + 8]; mov esi, r12d; mov rdi, rbp; call [rax + 0x30]
0x00138f9d : call [rax + 0x18]; mov rax, [r15 + 8]; mov rdi, r15; call [rax + 8]
0x0006a5b0 : mov [rbx + 0x90], eax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret
0x0006e8e8 : mov [rbp + 8], rax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x00108b5b : add [rbp + 0x38], rbx; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x000999ad : movdqu xmm[rdi + 0x10], xmm2; xor ch, ch; mov [rdi + 0x20], ch; ret
0x000fc40e : add [rax], al; mov rsi, [rbx]; mov rdi, r12; mov r13, rbx; call rbp
0x0001ee1b : add [rax], al; add [rsi - 0x70], ah; mov eax, [rip + 0x3ab0b6]; ret
0x00103219 : mov eax, [rip + 0x2ca049]; mov rax, [rax + 0x18]; add [rax], 1; ret
0x0012afb0 : mov edi, [rbp]; mov rsi, rbp; mov rax, [rdi + 0x38]; call [rax + 8]
0x00131eff : mov edi, [rdi]; mov rsi, rbx; mov rax, [rdi + 0x38]; call [rax + 8]
0x0001f3b6 : add [rax], al; add [rcx], dh; imul al; or [rdx], 0; add rsp, 8; ret
0x0000f591 : mov eax, [rsi + 0x78]; movsxd rdi, edi; mov eax, [rax + rdi*4]; ret
0x0016212f : add bl, al; nop [rax + rax]; nop cs:[rax + rax]; mov [rcx], dl; ret
0x00065986 : lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x0006ef4d : sub [rcx + 0x415d5be8], cl; pop rsp; pop r13; pop r14; pop r15; ret
0x0006f46e : add [rax], al; mov rax, [rdi]; nop ; mov [rip + 0x35ab95], rax; ret
0x0013cef6 : add [rax], al; add [rbp + 8], dh; movzx eax, al; add rsp, 0x18; ret
0x0006f581 : mov [rdi + 0x24], ebp; mov [rdi + 0x10], eax; pop rbx; pop rbp; ret
0x000691cc : div ebp; mov rbx, rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x00087408 : add [rip + 0xc00], bh; lea rax, [rip + 0x37bb]; cmove rax, rdx; ret
0x000f093c : add [rax], al; add [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret
0x00068824 : add [rbx + 0x18], rbp; mov rax, r12; pop rbx; pop rbp; pop r12; ret
0x00108aee : add [rbx + 0x38], ebp; mov rax, rbp; pop rbx; pop rbp; pop r12; ret
0x0013b47c : mov rax, [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call [rax]
0x0012c567 : mov rsi, [rsp]; mov rdi, [rsp + 0x10]; mov rcx, [rsp + 8]; call rcx
0x0012afaf : mov rdi, [r13]; mov rsi, rbp; mov rax, [rdi + 0x38]; call [rax + 8]
0x0015dd0c : add [rax], al; add [rax], al; mov [rcx], dx; mov [rcx + 2], dl; ret
0x00065a68 : lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx
0x00080969 : sub [rdi], cl; test [rax], dh; add al, 0; add [rcx - 0x77], cl; ret
0x00065b63 : lea esi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x0000aa0c : mov edi, [rsp + 0x30]; lea r8, [rsp + 0xb0]; xor r9d, r9d; call r15
0x00135834 : mov edi, [rsp]; mov rsi, rbp; mov rax, [rdi + 0x38]; call [rax + 8]
0x0000084b : mov esi, [rsp + 8]; mov edi, [rsp + 0x14]; mov rdx, [rax]; call rbp
0x0007cc2c : mov [rbp + rax], 0; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret
0x0006e8c1 : mov [rbp + 8], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x0012c568 : mov esi, [rsp]; mov rdi, [rsp + 0x10]; mov rcx, [rsp + 8]; call rcx
0x00138aad : mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x00065b62 : lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x0005ab84 : add bl, al; nop cs:[rax + rax]; add [rdx + 4], 1; xor eax, eax; ret
0x0005e1c5 : mov ebx, esp; mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret
0x000326fd : mov [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret
0x000955ee : add [rax], al; mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; ret
0x0000192f : leave ; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx
0x00103318 : mov rax, [rip + 0x2c9f49]; mov rax, [rax + 0x18]; add [rax], 1; ret
0x000fcf8c : push rdi; sub dh, al; add [rdx], cl; pop rbx; pop rbp; pop r12; ret
0x0009658f : add bl, al; nop [rax + rax]; nop cs:[rax + rax]; mov [rdi], dl; ret
0x00103319 : mov eax, [rip + 0x2c9f49]; mov rax, [rax + 0x18]; add [rax], 1; ret
0x0012a6ff : lea rsi, [rdi + 0x48]; mov rdi, rax; mov rcx, [rcx + 0x18]; jmp rcx
0x00065987 : lea esi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x00146000 : mov r11, r8; mov rdi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; call rdx
0x000beb47 : sbb [rcx + 0x415d5bd0], cl; pop rsp; pop r13; pop r14; pop r15; ret
0x00135833 : mov rdi, [r12]; mov rsi, rbp; mov rax, [rdi + 0x38]; call [rax + 8]
0x0006917e : add [rax - 0x77], cl; imul eax; sbb [rdx - 7], edi; jmp [rsi + 0xf]
0x0011fffa : add esi, ebx; movq mm0, [rsi]; movups xmm[rdi + rdx + 8], xmm0; ret
0x00065a69 : lea esi, [rbp + 0x90]; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx
0x0006e8e9 : mov [rbp + 8], eax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x00075d18 : sub [rcx + 0x35], ch; add [rax], al; add [rax], al; add bl, dh; ret
0x0007b99b : xor [rcx + rcx*4 + 0x4b], cl; mov [rbx], rsi; mov rdi, r9; call rcx
0x00131d29 : mov [rax], al; add [rax], al; mov [rdx + 0x6c], ax; mov eax, 1; ret
0x0013badc : add [rax], al; add [rax], al; mov rax, [rdi + 8]; call [rax + 0x10]
0x00111b4d : mov [rbx], ebp; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x000691cb : div rbp; mov rbx, rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0011fff9 : add r14, r11; movq mm0, [rsi]; movups xmm[rdi + rdx + 8], xmm0; ret
0x0000084a : mov rsi, [rsp + 8]; mov edi, [rsp + 0x14]; mov rdx, [rax]; call rbp
0x000fc06e : mov esi, [rbx]; mov rdi, [rsp + 8]; mov rax, [rsp + 0x10]; call rax
0x0011fd9b : mov ecx, eax; xor eax, eax; rep stosq [rdi], rax; mov eax, r8d; ret
0x00138aae : mov eax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x000448c5 : mov edi, [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call [rbx + 0x38]
0x0006f60e : add [rax], al; mov rax, [rdi]; nop ; mov [rip + 0x35d042], eax; ret
0x00099a23 : movdqu xmm[rdi + 0x30], xmm7; xor ch, ch; mov [rdi + 0x40], ch; ret
0x0006818c : add al, bl; nop ; mov rax, [rdi + 0x28]; sub rax, [rdi + 0x20]; ret
0x00103b6c : adc [rax - 0x75], cl; and al, 8; mov rax, [rsp]; add rsp, 0x38; ret
0x0012cdcb : add esi, [rdi + 0x12]; lea rdx, [rip + 0x29cabb]; jmp [rdx + rax*8]
0x00108b5c : add [rbp + 0x38], ebx; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x0005b4ea : add al, [rax]; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x0000f581 : mov eax, [rsi + 0x70]; movsxd rdi, edi; mov eax, [rax + rdi*4]; ret
0x0001e582 : sub ecx, edi; sub ecx, -0x80; shr ecx, 3; rep stosq [rdi], rax; ret
0x00068b86 : sbb [r15 + 0xe], r14b; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x00069281 : xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret
0x000d2d4e : mov [rbx + 0x30], eax; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x0010e593 : add [rax], 0; add [rax], al; movups xmm[rbp - 0x78], xmm0; call rax
0x001694fd : add bl, ch; sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper ; ret
0x0005f7b4 : add [rax - 0x77], cl; fimul [rcx + rcx*4 - 0x1a]; call [r13 + 0x38]
0x0000f590 : mov rax, [rsi + 0x78]; movsxd rdi, edi; mov eax, [rax + rdi*4]; ret
0x001375da : mov eax, [rbx]; mov rdx, [rax + 8]; mov rdi, rax; call [rdx + 0x20]
0x0001e581 : sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq [rdi], rax; ret
0x00068825 : add [rbx + 0x18], ebp; mov rax, r12; pop rbx; pop rbp; pop r12; ret
0x00173840 : movzx eax, [rdi - 0x10]; movzx edx, [rsi - 0x10]; sub eax, edx; ret
0x0006e8c0 : mov [rbp + 8], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x0014bc35 : add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00072d5d : add [rax - 0x77], cl; push rsp; and al, 8; mov rdi, r15; call [rax]
0x0013cc58 : add bl, al; nop [rax + rax]; add [rdi + 0x28], edx; mov eax, 1; ret
0x00022e24 : pop rbx; add r10d, eax; xor eax, eax; mov [rsi], r10d; pop rbp; ret
0x00131efe : mov rdi, [r15]; mov rsi, rbx; mov rax, [rdi + 0x38]; call [rax + 8]
0x001350d5 : mov edx, ebp; pop rbx; mov eax, edx; pop rbp; pop r12; pop r13; ret
0x0009a5e4 : movzx eax, dh; mov rdx, rdi; rep stosb [rdi], al; mov rax, rdx; ret
0x000668b8 : add [rax], al; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x00108aed : add [rbx + 0x38], rbp; mov rax, rbp; pop rbx; pop rbp; pop r12; ret
0x00131c00 : add [rax], al; add al, [rax]; add [rax], al; add rdi, 0xc8; jmp rcx
0x0013b47d : mov eax, [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call [rax]
0x000fc06d : mov rsi, [rbx]; mov rdi, [rsp + 8]; mov rax, [rsp + 0x10]; call rax
0x000e05a9 : sbb [rcx + 0x415d5bd8], cl; pop rsp; pop r13; pop r14; pop r15; ret
0x0012a700 : lea esi, [rdi + 0x48]; mov rdi, rax; mov rcx, [rcx + 0x18]; jmp rcx
0x00047818 : mov r8, rcx; mov [rbp - 0x4d8], 1; mov [rbp - 0x4f0], 0x20; jmp rax
0x000ed87c : add [rax], al; add [rax], al; mov [rdi + 4], esi; xor eax, eax; ret
0x00103bcd : adc [rax - 0x75], cl; and al, 8; mov rax, [rsp]; add rsp, 0x40; ret
0x0000f580 : mov rax, [rsi + 0x70]; movsxd rdi, edi; mov eax, [rax + rdi*4]; ret
0x000448c4 : mov rdi, [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call [rbx + 0x38]
0x0005f01f : add [rdx + 0x10], bh; mov rsi, r14; mov rdi, rbp; call [rax + 0x38]
0x0007cb29 : add edi, esp; xor al, 0; mov [rip + 0x34fbe4], rax; add rsp, 8; ret
0x0006807c : add al, bl; nop ; mov rax, [rdi + 0x40]; sub rax, [rdi + 0x38]; ret
0x00118655 : pop rbx; xor eax, eax; mov [rdx], 0; pop rbp; pop r12; pop r13; ret
0x0007f508 : add [rip + 0xc00], bh; lea rax, [rip + 0xb4bb]; cmove rax, rdx; ret
0x00103218 : mov rax, [rip + 0x2ca049]; mov rax, [rax + 0x18]; add [rax], 1; ret
0x0006a5af : mov [rbx + 0x90], rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret
0x00169a50 : mov al, [rdi + rdx - 1]; mov cl, [rsi + rdx - 1]; sub eax, ecx; ret
0x0000aa0b : mov rdi, [rsp + 0x30]; lea r8, [rsp + 0xb0]; xor r9d, r9d; call r15
0x0012dd68 : add [rax], al; add [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret
0x00135802 : add [rax], al; mov rdi, rbp; mov [r15 + 0x58], 0; call [rax + 0x28]
0x0005e1c4 : mov rbx, r12; mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0003a848 : mov rsi, r8; mov [rbp - 0x500], r8; mov rdi, r14; call [r15 + 0x38]
0x0001cfb5 : add [rax], al; cmp [rdi + 0x2d], 0; add [rax + 0x1fe8c17f], al; ret
0x0001bf72 : mov ecx, [r8 + rax*4 + 8]; add rcx, [rdi + 0x20]; mov rax, rcx; ret
0x001375d9 : mov rax, [rbx]; mov rdx, [rax + 8]; mov rdi, rax; call [rdx + 0x20]
0x0008722f : mov [rdi + 4], edx; movzx edx, [rsp + 0x16]; mov [rdi + 6], dl; ret
0x0007d928 : add [rip + 0xc00], bh; lea rax, [rip + 0xcd6b]; cmove rax, rdx; ret
0x00152c2b : add [rax], al; add [rax], al; add [rbx + 0x5789fc56], cl; cld ; ret
0x000ee74f : add [rbp + 0x15], dh; sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret
0x0009a5e3 : movzx eax, sil; mov rdx, rdi; rep stosb [rdi], al; mov rax, rdx; ret
0x0003bd0b : mov [rbp - 0x4e0], ebx; mov rsi, r8; mov rdi, r14; call [r15 + 0x38]
0x0009be8f : mov eax, [rsi + 8]; mov [rdi + 0xc], eax; mov rax, rbx; pop rbx; ret
0x0013c9bc : add [rbp + 0x18], rbx; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret
0x0012d3bd : mov esi, [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call [rax + 0x10]
0x0009661c : add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi + 8], dl; ret
0x000ab988 : add [rax - 0x77], cl; imul eax; rsqrtps xmm6, xmm5; jmp [rsi + 0x2e]
0x00097a0e : add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi + 2]; ret
0x0010ebe0 : mov edx, [rbp + 0x60]; mov [rbp - 0x80], edx; mov rdx, r12; call rax
0x000e2c9e : add [rcx - 9], al; fsub [rsp + rax*2 - 0x77]; add [rax - 1], bh; ret
0x000f0c3a : sbb [rcx + rcx*4 - 0xa], cl; mov edx, [rdx + rax]; call [rbx + 0x40]
0x0011edfd : add [rax], al; add [rbx + 0x3b83f], cl; add [rax], al; syscall ; ret
0x0003bd0a : mov [rbp - 0x4e0], r11; mov rsi, r8; mov rdi, r14; call [r15 + 0x38]
0x00047819 : mov eax, ecx; mov [rbp - 0x4d8], 1; mov [rbp - 0x4f0], 0x20; jmp rax
0x000ca89c : push rax; or al, 0; movsxd rax, [rdx + r15*4]; add rax, rdx; jmp rax
0x001088ce : mov [rbx + 0x40], rbp; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret
0x0012b8f0 : adc [rcx - 0x75], cl; or [r9 + rcx*4 - 0x11], r9b; call [rax + 0x20]
0x000afec3 : add [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; pop r14; ret
0x000979fe : add [rax], al; mov dl, [rsi]; mov [rdi], dl; lea rax, [rdi + 1]; ret
0x000d2d5f : add [rbx - 0x48], bl; or al, 0; add [rax], al; pop rbp; pop r12; ret
0x00145123 : add [rax], al; mov [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret
0x0012d3fa : mov rsi, [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call [rax + 0x20]
0x0011efae : add [rbp - 0x2e7af025], al; add [rax], al; add [rax + 0x63], cl; ret
0x0016005e : add [rax], al; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx + 1]; ret
0x00135528 : movdqu xmm0, xmm[rdx]; mov eax, 1; movups xmm[rdi + 0x30], xmm0; ret
0x00135540 : movdqu xmm0, xmm[rdi + 0x30]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x00038d17 : mov edx, ebp; mov rsi, r9; mov rdi, [rbp - 0x8a8]; call [rbx + 0x38]
0x0006ceae : push rbx; or [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret
0x0014dab9 : mov [rdi - 0x17], ebx; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00067336 : add [rax], eax; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x0010f3ff : add [rax], al; add [rax + 0xca], bh; syscall ; pop rdx; pop rsi; ret
0x00096bde : add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi + 1]; ret
0x0010e4a6 : mov edx, [r12 + 0x60]; mov [rbp - 0x80], edx; mov rdx, rbx; call rax
0x000feccf : mov eax, 4; mov [rbx + 0x38], rcx; add rsp, 8; pop rbx; pop rbp; ret
0x00146001 : mov ebx, eax; mov rdi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; call rdx
0x000e3915 : add al, [rax]; add [rcx], dh; ror [rcx - 0x7d], cl; jmp [rax + 0x74]
0x0011b125 : mov [rbx + 0x30], eax; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret
0x0010bfd2 : mov edi, esp; mov rdx, rax; mov rsi, [rbp - 0x98]; call [r10 + 0x28]
0x000962ca : push rdi; add al, bl; nop [rax]; mov edx, [rsi]; mov [rdi], edx; ret
0x000fed21 : mov [rbx + 0x20], rax; add rsp, 8; mov eax, 2; pop rbx; pop rbp; ret
0x00020de7 : add cl, [rcx - 0x77]; add [rcx - 0x73], ecx; or [r8 + 0x39], cl; ret
0x00094ecb : movlps [rdx], xmm0; xor ah, ah; mov [rdx + 8], ah; mov rax, rdi; ret
0x001369aa : add [rax], al; mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x28]
0x0012c939 : movq mm0, [rdi + 0x20]; mov [rsi], 6; movups xmm[rsi + 8], xmm0; ret
0x0014d4e7 : mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0005eec0 : add [rax], 0; add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x0014d117 : mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x000b08d0 : mov [rsp + 0xb0], eax; lea rdi, [rsp + 0xb0]; mov rsi, rbp; call rbx
0x00131f15 : mov rsi, [rsp + 0x30]; mov rdi, rbx; mov rcx, [rsp + 0x28]; call rcx
0x00043a0c : add [rax - 0x77], ecx; sub [r8 + 0x468b4102], r9b; add al, 0x39; ret
0x00066d9a : add [rax - 0x77], cl; imul eax; std ; popfq ; stc ; jmp [rsi + 0x2e]
0x00131f16 : mov esi, [rsp + 0x30]; mov rdi, rbx; mov rcx, [rsp + 0x28]; call rcx
0x0003f9d1 : dec [rbx - 0x1237b]; inc edi; test [rdi + rdi*8 - 1], esp; jmp [rsi]
0x0000f660 : mov fs:[rcx], rdx; mov rdx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x0006be6a : mov rdx, [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call [r13 + 0x70]
0x0014d6b8 : mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0009a355 : adc [rdi + rdx - 0x10], edx; movups xmm[rdi + rdx - 0x20], xmm3; ret
0x0004811e : add eax, edi; mov r8, rcx; mov [rbp - 0x4c0], 1; mov esi, 1; jmp rax
0x0007c9b8 : add [rip + 0xc00], bh; lea rax, [rip + 0x1398b]; cmove rax, rdx; ret
0x0007f538 : add [rip + 0xc00], bh; lea rax, [rip + 0x1090b]; cmove rax, rdx; ret
0x0009a332 : adc [rdi + rdx - 0x30], esi; movups xmm[rdi + rdx - 0x40], xmm7; ret
0x0000ba45 : adc [rcx], dh; fisttp [rax - 0x77]; fcomp [rbx + 0x5d]; pop r12; ret
0x0014d8b9 : mov [rdi - 0x16], ebx; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00132109 : mov esi, [rsp + 0x40]; mov rdi, rbx; mov rdx, [rsp + 0x20]; call rdx
0x0015dd7c : add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx + 8], dx; ret
0x0012d3fb : mov esi, [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call [rax + 0x20]
0x0001bf73 : mov ecx, [rax + rax*4 + 8]; add rcx, [rdi + 0x20]; mov rax, rcx; ret
0x000b08cf : mov [rsp + 0xb0], rax; lea rdi, [rsp + 0xb0]; mov rsi, rbp; call rbx
0x0015dd6c : add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx + 8], dl; ret
0x0014d2f8 : mov [rdi - 0x13], ebx; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00047b38 : adc al, 0; add [rax], al; mov r8, rdx; mov [rbp - 0x4f8], 1; jmp rax
0x00087351 : mov edx, [rsp + 0x10]; lea rax, [rdi + rax - 1]; mov [rdi], rdx; ret
0x0012d3bc : mov rsi, [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call [rax + 0x10]
0x000f52c0 : inc [rbp + 0x48de78c0]; mov eax, ebx; pop rbx; pop rbp; pop r12; ret
0x0006f57e : add [rax], al; add [rcx + 0x4789246f], cl; adc [rbx + 0x5d], bl; ret
0x000965ec : add [rax], al; add [rax], al; mov [rdi], edx; mov [rdi + 4], dx; ret
0x000877de : adc [eax], al; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0004811d : add rax, rdi; mov r8, rcx; mov [rbp - 0x4c0], 1; mov esi, 1; jmp rax
0x0015dd3c : add [rax], al; add [rax], al; mov [rcx], edx; mov [rcx + 4], dx; ret
0x0014d4e8 : mov [rdi - 0x14], ebx; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0012d853 : movhps xmm0, [rsp + 8]; movaps xmm[rsp + 0x10], xmm0; call [rax + 8]
0x00142ac7 : add [rax], al; mov [rip + 0x28c540], ax; mov eax, 1; add rsp, 8; ret
0x0012d865 : mov eax, [rbx + 8]; lea rsi, [rbp + 8]; mov rdi, rbx; call [rax + 8]
0x0006305b : add [rax], al; mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x000564c9 : xor [rbx - 0x5237b], cl; inc [rbp + 0xfc389c0]; test [rsi], eax; ret
0x0012c971 : movq mm0, [rdi + 0x38]; mov [rsi], 9; movups xmm[rsi + 8], xmm0; ret
0x0003a849 : mov esi, eax; mov [rbp - 0x500], r8; mov rdi, r14; call [r15 + 0x38]
0x0007c9e8 : add [rip + 0xc00], bh; lea rax, [rip + 0x13afb]; cmove rax, rdx; ret
0x000ea746 : not [rsi - 0xf]; dec [rax - 0x7b]; sal [rdx + rcx + 0x48], 0x83; ret
0x0014d118 : mov [rdi - 0x12], ebx; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0001ee56 : push [rbp + 0xf]; lea edx, [rax - 1]; mov [rip + 0x3ab076], edx; ret
0x0011b124 : mov [rbx + 0x30], rax; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret
0x0009ae38 : add [rip + 0xc00], bh; lea rax, [rip + 0x1438b]; cmove rax, rdx; ret
0x001384fb : add [rax], 0; add [rax], al; mov rax, [rip + 0x291809]; pop rbx; ret
0x000c3e32 : add [rax], al; add [rbp + 0x3a], dh; mov rbx, [rbp - 8]; leave ; ret
0x0001cb60 : add [rdi + rax*8], ah; and al, [rax]; add [rax], al; add rsp, 8; ret
0x00096294 : add [rax], al; nop cs:[rax + rax]; mov dl, [rsi]; mov [rdi], dl; ret
0x0009bbf8 : add [rip + 0xc00], bh; lea rax, [rip + 0x13d2b]; cmove rax, rdx; ret
0x00139b21 : dec [rax - 0x77]; fcomp [rbx + 0x5d]; pop r12; pop r13; pop r14; ret
0x00099656 : mov [rdi], cx; mov [rdi + 2], dl; xor ch, ch; mov [rdi + 3], ch; ret
0x001383ec : add ebx, [rbx - 0x3d]; nop ; mov rax, [rip + 0x2918c1]; pop rbx; ret
0x0010ebdf : mov edx, [r13 + 0x60]; mov [rbp - 0x80], edx; mov rdx, r12; call rax
0x00088b8e : add [rax], al; movzx ecx, [rsi]; movzx eax, [rdi]; sub eax, ecx; ret
0x00066062 : mov rax, rdx; sar rax, 2; mov [rcx], rax; xor eax, eax; pop rbx; ret
0x0003d660 : mov [rbx + 0x18], 1; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x000cc96f : add dh, al; or [r8 + r15*4], r11b; add al, [rax]; add [rax], al; ret
0x0009bf38 : add [rip + 0xc00], bh; lea rax, [rip + 0x1341b]; cmove rax, rdx; ret
0x00131d2a : add [rax], al; add [rsi - 0x77], ah; insb [rdi], dx; mov eax, 1; ret
0x001423e9 : mov rax, [rip + 0x288e90]; mov rdi, rdx; mov rsi, r8; call [rax + 8]
0x0007d8eb : add [rcx], dh; fisttp [rax - 0x77]; fcomp [rbx + 0x5d]; pop r12; ret
0x00094eca : movlpd [rdx], xmm0; xor ah, ah; mov [rdx + 8], ah; mov rax, rdi; ret
0x000118cf : add [rbx + rcx*4 + 0xd], al; fnstsw [r11]; add [rax - 0x77], cl; ret
0x00134c70 : movdqu xmm0, xmm[rdi + 0x1c]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x00046e06 : add [rax], al; lea r11, [rdi + 0x3e8]; mov [rbp - 0x4d0], 0; jmp rax
0x00108c9d : add [rax], al; add [rax], al; cmovns rax, [rbx + 0x28]; pop rbx; ret
0x000ee7ba : add [rbp + 0x1a], dh; sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret
0x00131d28 : xchg [rax + 0x66000000], ecx; mov [rdx + 0x6c], eax; mov eax, 1; ret
0x00135560 : movdqu xmm0, xmm[rdx]; mov eax, 1; movups xmm[rdi + 0x20], xmm0; ret
0x0006be6b : mov edx, [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call [r13 + 0x70]
0x0014d2f7 : mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x000965dc : add [rax], al; add [rax], al; mov [rdi], edx; mov [rdi + 4], dl; ret
0x001385bb : add [rax], 0; add [rax], al; mov rax, [rip + 0x291659]; pop rbx; ret
0x0006414b : mov rdx, [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call [r14 + 0x70]
0x0015dd51 : adc [rcx + 0x66c30351], ecx; nop cs:[rax + rax]; mov [rcx], rdx; ret
0x001350d4 : mov edx, r13d; pop rbx; mov eax, edx; pop rbp; pop r12; pop r13; ret
0x0015dd2c : add [rax], al; add [rax], al; mov [rcx], edx; mov [rcx + 4], dl; ret
0x00066063 : mov eax, edx; sar rax, 2; mov [rcx], rax; xor eax, eax; pop rbx; ret
0x000877df : adc [rax], al; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0007de02 : mov ah, [rax]; clc ; lcall [rbx + 0x31]; rcr [rbp + 0x41], 0x5c; ret
0x00038d16 : mov rdx, r13; mov rsi, r9; mov rdi, [rbp - 0x8a8]; call [rbx + 0x38]
0x00061c0f : add eax, [rax]; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x000343d9 : add [rcx], dh; fisttp [rax - 0x7b]; ror [rdi], 1; xchg eax, ebp; ret
0x0012dcc1 : add [rax], al; mov [rbx + 0x68], rdx; pop rbx; pop rbp; pop r12; ret
0x000ea747 : push rsi; int1 ; dec [rax - 0x7b]; sal [rdx + rcx + 0x48], 0x83; ret
0x00000a54 : add [rbx - 0x7bf00008], al; int 0; add [rax], al; add rsp, 0x98; ret
0x0014dab8 : mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0014d6b9 : mov [rdi - 0x15], ebx; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00144acc : add [rax], al; mov rsi, rax; shr ecx, 3; rep movsq [rdi], [rsi]; ret
0x001450db : add [rax], al; mov [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret
0x00169a5e : add [rax], al; movzx eax, [rdi]; movzx ecx, [rsi]; sub eax, ecx; ret
0x00086f15 : push rcx; add esi, eax; add [rax], eax; pop rbx; mov [rdi], rdx; ret
0x001105da : add bl, [rax + rdi*8 - 0x4b6e7401]; add [rax], al; add bh, dh; ret 0
0x0013867b : add [rax], 0; add [rax], al; mov rax, [rip + 0x291531]; pop rbx; ret
0x0013c9bd : add [rbp + 0x18], ebx; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret
0x0007cab8 : add [rip + 0xc00], bh; lea rax, [rip + 0x1359b]; cmove rax, rdx; ret
0x00068f27 : add ebx, eax; nop [rax]; mov eax, [rdi]; shr eax, 5; and eax, 1; ret
0x0006414c : mov edx, [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call [r14 + 0x70]
0x0012d864 : mov rax, [rbx + 8]; lea rsi, [rbp + 8]; mov rdi, rbx; call [rax + 8]
0x0010e4a7 : mov edx, [rsp + 0x60]; mov [rbp - 0x80], edx; mov rdx, rbx; call rax
0x000921a2 : mov [rdx + 4], ah; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret
0x00134c4b : sbb [rcx], al; add [rax], al; add [rdi], cl; adc [rdi + 8], eax; ret
0x00134c4a : sbb [r9], r8b; add [rax], al; add [rdi], cl; adc [rdi + 8], eax; ret
0x0009c158 : add [rip + 0xc00], bh; lea rax, [rip + 0x12d0b]; cmove rax, rdx; ret
0x00135570 : movdqu xmm0, xmm[rdi + 0x20]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x001690d9 : adc dh, [rbx - 0xc]; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret
0x0010e594 : add [rax], al; add [rax], al; movups xmm[rbp - 0x78], xmm0; call rax
0x0014d8b8 : mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0006f46d : add [rax], r8b; mov rax, [rdi]; nop ; mov [rip + 0x35ab95], rax; ret
0x00132108 : mov rsi, [rsp + 0x40]; mov rdi, rbx; mov rdx, [rsp + 0x20]; call rdx
0x000404ef : add [rbp - 0x2dce00b9], cl; div r8d; add r9d, eax; mov eax, r9d; ret
0x0009662c : add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi + 8], dx; ret
0x00087350 : mov rdx, [rsp + 0x10]; lea rax, [rdi + rax - 1]; mov [rdi], rdx; ret
0x0010266e : add [rax], al; add [rcx - 0xf7a3821], cl; idiv edi; jmp [rdi + 0x6d]
0x001088cf : mov [rbx + 0x40], ebp; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret
0x000fed22 : mov [rbx + 0x20], eax; add rsp, 8; mov eax, 2; pop rbx; pop rbp; ret
0x001423ea : mov eax, [rip + 0x288e90]; mov rdi, rdx; mov rsi, r8; call [rax + 8]
0x00141a9b : add [rax], al; add [rax], al; add [rax - 0x77], cl; xor eax, eax; ret
0x0010bfd1 : mov edi, r12d; mov rdx, rax; mov rsi, [rbp - 0x98]; call [r10 + 0x28]
0x00020c74 : adc [rcx + rcx*4 - 2], cl; mov rdi, r13; mov rax, [rsp + 8]; call rax
0x0014219e : lea rdx, [rip + 0x2872ab]; mov [rip + 0x2890d4], rdx; add rsp, 8; ret
0x00138ff9 : add [rdi], cl; adc [rsp + 0xb8], eax; mov [rsp + 0xc8], rdx; call rax
0x0000eec7 : mov edx, [rax + 0xc0]; mov rax, [rip + 0x3bac3c]; mov [rax], rdx; ret
0x0013ca2d : mov [rdi + 0x18], rsi; mov [rdi + 0x28], edx; mov [rdi + 8], rax; ret
0x0013bad4 : add bl, al; nop cs:[rax + rax]; mov rax, [rdi + 8]; call [rax + 0x10]
0x000996d6 : mov [rdi], rcx; mov [rdi + 8], dl; xor ch, ch; mov [rdi + 9], ch; ret
0x000474f8 : push rbp; adc al, 0; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x00169705 : mov esi, fs; add [rax], al; add [rax + 1], cl; clc ; vzeroupper ; ret
0x000450be : mov rdx, rbx; mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [r13 + 0x38]
0x000e4a74 : mov rdx, [r14]; mov rsi, [rbp - 0x1f0]; lea r8, [rax + r13]; call r12
0x0006d227 : mov rdi, r15; movzx esi, [rcx]; lea rbx, [rcx + 1]; call [rax + 0x18]
0x0013265f : add [rax], al; mov rax, [r14 + 0xd0]; mov rdi, r12; call [rax + 0x20]
0x001384fc : add [rax], al; add [rax], al; mov rax, [rip + 0x291809]; pop rbx; ret
0x0004749b : push rbp; adc al, 0; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x0006968b : mov [rbx + 8], eax; mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x00137324 : mov edi, ebx; pop rax; mov rax, [rbx + 8]; pop rdx; call [rax + 0x20]
0x0016d4d1 : add [rax + 1], cl; clc ; add rax, rcx; sub rax, rdx; vzeroupper ; ret
0x00064d3a : push rbx; mov rcx, [rsp + 0x20]; lea r8, [rsp + 0x38]; call [r13 + 8]
0x0014cdcf : mov [rdi - 0x18], edx; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0004551d : mov rsi, r12; mov rdi, [rbp - 0x8d0]; mov rdx, r13; call [rbx + 0x38]
0x0005a30c : add al, [rax]; add [rbp + 0x480d75c0], al; mov eax, ebx; pop rbx; ret
0x0006e768 : mov [rbp], rax; mov [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret
0x0013585b : add [rax], al; mov rax, [r15 + 0x60]; mov rdi, rbp; call [rax + 0x20]
0x000afb5d : add [rax], al; add [rax - 0x39], cl; rol [rcx], 0; add [rax], al; ret
0x000e4a75 : mov edx, [rsi]; mov rsi, [rbp - 0x1f0]; lea r8, [rax + r13]; call r12
0x0008a967 : adc bl, al; nop [rax]; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret
0x000afb7d : add [rax], al; add [rax - 0x39], cl; rol [rbx], 0; add [rax], al; ret
0x000318f0 : mov [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret
0x0006e769 : mov [rbp], eax; mov [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret
0x0007b3cb : adc esi, [rip - 0x14f48b00]; and ecx, [rdi]; mov cl, 0x35; call [rdx]
0x0006cacf : mov [rdi + 0x18], ecx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x0007f7de : mov [r13], rbp; xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret
0x0004551e : mov esi, esp; mov rdi, [rbp - 0x8d0]; mov rdx, r13; call [rbx + 0x38]
0x00099685 : mov [rdi], ecx; mov [rdi + 4], dl; xor ch, ch; mov [rdi + 5], ch; ret
0x0006968a : mov [rbx + 8], rax; mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x0015dddc : add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx + 8], rdx; ret
0x0007f7df : mov [rbp], ebp; xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret
0x001005b5 : adc esi, [rcx + rax - 0x3d]; xor ebp, ebp; pop rax; pop rdi; call rax
0x0006cace : mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x00099615 : add [rsi + 0x2e], ah; nop [rax + rax]; xor ch, ch; mov [rdi], ch; ret
0x0003381a : add [rax - 0x3ffe], bh; sub eax, ecx; mov [rdx], eax; mov eax, 1; ret
0x0009664c : add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi + 8], edx; ret
0x0006ca9f : mov [rdi + 0x48], edx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x0006d06d : mov [rbx + 0x40], esp; mov [rbx], eax; pop rbx; pop rbp; pop r12; ret
0x0015dd9c : add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx + 8], edx; ret
0x0009564e : add [rax], al; mov rcx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; ret
0x001560df : add eax, [rax]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0009a648 : movq [rdi + rdx - 0x10], mm0; movdqu xmm[rdi + rdx - 0x20], xmm0; ret
0x00023562 : add [rax], eax; add [rax], al; mov [rsi + 0xe], ax; xor eax, eax; ret
0x000ee164 : add bl, dh; movq mm0, [rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x000318ef : mov [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret
0x000996d7 : mov [rdi], ecx; mov [rdi + 8], dl; xor ch, ch; mov [rdi + 9], ch; ret
0x0006eb15 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rax, [rip + 0x35c869]; ret
0x00099657 : mov [rdi], ecx; mov [rdi + 2], dl; xor ch, ch; mov [rdi + 3], ch; ret
0x000674d7 : sub [rdx], al; add [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret
0x0004584b : mov edx, ebp; mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [rbx + 0x38]
0x0005bd26 : sbb [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret
0x0012afd8 : add [rax], al; mov rax, [rbx + 0x20]; mov rdi, rbp; call [rax + 0x20]
0x0014cd91 : mov [rdi - 0x18], edx; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x0006cba0 : add [rax], al; mov [rbx + 0x58], 0; mov [rbx + 0x50], 0; pop rbx; ret
0x000009b5 : add [rsi + 0x2e], ah; nop [rax + rax]; lea rax, [rip + 0x191b34]; ret
0x00139f99 : add [rax - 0x75], cl; sbb [r9 + rcx*4 - 0x19], r9b; call [rax + 0x20]
0x00038aa2 : mov rdx, rbx; mov rsi, r13; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x0015dd8c : add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx + 7], edx; ret
0x0012d9b1 : bswap edx; mov [rax], edx; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x0012ebeb : sbb [rbp - 0x4a], dh; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x0006ca9e : mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x0015ddcc : add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx + 7], rdx; ret
0x0010fd0c : add [rax], al; add [rax + 0x48c03155], dl; mov ebp, esp; pop rbp; ret
0x00122686 : lea rax, [rax + rdx*8]; add rdx, 1; mov [rdi], rdx; mov [rax], 0; ret
0x00038191 : mov [rbp - 0x920], al; mov rsi, r15; mov rdi, [rbp - 0x8a8]; call rax
0x0009663c : add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi + 7], edx; ret
0x0008ae27 : adc bl, al; nop [rax]; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret
0x0015dd4c : add [rax], al; add [rax], al; mov [rcx], edx; mov [rcx + 3], edx; ret
0x000afb6d : add [rax], al; add [rax - 0x39], cl; rol [rdx], 0; add [rax], al; ret
0x0009560e : add [rax], al; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; ret
0x000654a8 : add [rax], al; mov rbp, [rbx + 0x98]; mov rdi, rbp; call [rbp + 0x20]
0x000afbbd : add [rax], al; add [rax - 0x39], cl; rol [rdi], 0; add [rax], al; ret
0x0007cb26 : lea rax, [rip + 0x34fc03]; mov [rip + 0x34fbe4], rax; add rsp, 8; ret
0x0006314f : add [rax], al; mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x001352ee : add [rax], al; mov rax, [r14 + 0x70]; mov rdi, r12; call [rax + 0x20]
0x00064706 : add [rax], al; mov rbp, [r15 + 0x98]; mov rdi, rbp; call [rbp + 0x20]
0x00138beb : add [rax], eax; add [rax], al; mov [rsp + 0x18], 1; call [rax + 0x18]
0x000ee8c6 : add [rdi + rax*8], ah; pop rdi; add [rax], al; add [rax - 1], bh; ret
0x0006d06c : mov [rbx + 0x40], r12; mov [rbx], eax; pop rbx; pop rbp; pop r12; ret
0x000f7f32 : mov [rip + 0x2d501c], 0; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0005e452 : add [rax], al; add [rbx + 0x7401046e], al; mov rax, rdx; pop rbx; ret
0x0014cdce : mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0013402b : add [rax], al; mov rax, [rsp + 0x58]; mov rdi, rbp; call [rax + 0x20]
0x0004584a : mov rdx, r13; mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [rbx + 0x38]
0x000cc957 : mov dh, 4; add esi, eax; or [r9], r8b; mov [rdi], al; mov eax, 1; ret
0x00138f8e : add [rax], eax; add [rax], al; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x0015ddac : add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx + 5], rdx; ret
0x00030c61 : add [rax], 0; add [rbx - 0x77], bl; rcr [rbp + 0x41], 1; pop rsp; ret
0x0007cb27 : lea eax, [rip + 0x34fc03]; mov [rip + 0x34fbe4], rax; add rsp, 8; ret
0x00169a5d : add [rax], r8b; movzx eax, [rdi]; movzx ecx, [rsi]; sub eax, ecx; ret
0x0000eec6 : mov rdx, [rax + 0xc0]; mov rax, [rip + 0x3bac3c]; mov [rax], rdx; ret
0x0011fd66 : add [rax], al; movsxd rdx, edx; mov eax, r8d; mov [rdi + rdx], 0; ret
0x0010e417 : xchg eax, r8d; mov eax, [r12 + 0x60]; mov [rbp - 0x80], eax; call rcx
0x000476f4 : mov esi, ebx; mov [rbp - 0x500], r11; mov rdi, r13; call [r15 + 0x38]
0x00099696 : mov [rdi], ecx; mov [rdi + 4], dx; xor ch, ch; mov [rdi + 6], ch; ret
0x00096293 : add [rax], r8b; nop cs:[rax + rax]; mov dl, [rsi]; mov [rdi], dl; ret
0x0013ca2e : mov [rdi + 0x18], esi; mov [rdi + 0x28], edx; mov [rdi + 8], rax; ret
0x00137323 : mov rdi, rbx; pop rax; mov rax, [rbx + 8]; pop rdx; call [rax + 0x20]
0x000d7e0f : popfq ; or [rbx], 0; movsxd rax, [rdi + rax*4]; add rax, rdi; jmp rax
0x000476f3 : mov rsi, r11; mov [rbp - 0x500], r11; mov rdi, r13; call [r15 + 0x38]
0x0006d228 : mov edi, edi; movzx esi, [rcx]; lea rbx, [rcx + 1]; call [rax + 0x18]
0x0014cd90 : mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x00038aa3 : mov edx, ebx; mov rsi, r13; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x000fb385 : mov esp, esi; lcall [rax + 0x48]; mov eax, ebx; pop rdx; pop rbx; ret
0x0009666c : add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi + 6], rdx; ret
0x00113b73 : add ebx, esi; lcall [rax + 0x48]; mov eax, ebx; pop rdx; pop rbx; ret
0x000388d8 : mov rdx, r13; mov rsi, rbx; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x0016d2a5 : add [rsi + 0x2e], ah; nop [rax + rax]; xor eax, eax; vzeroupper ; ret
0x0013bef7 : add [rdx - 1], bh; mov rsi, r13; mov rdi, rbp; xor eax, eax; call rcx
0x001355d8 : add [rax], al; sub eax, 1; bswap eax; mov [rdx], eax; mov eax, 1; ret
0x000695a3 : mov [rbx + 8], eax; mov [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret
0x000388d9 : mov edx, ebp; mov rsi, rbx; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x0010b771 : add [rax], al; add al, [rcx - 1]; push rbp; sub [rax - 0x77], cl; ret
0x00122687 : lea eax, [rax + rdx*8]; add rdx, 1; mov [rdi], rdx; mov [rax], 0; ret
0x00138f07 : call rax; nop [rax]; mov rdi, r15; mov rax, [r15 + 8]; call [rax + 8]
0x000f6808 : mov [rip + 0x2d6646], eax; lea rax, [rip + 0x2d6613]; add rsp, 8; ret
0x000afbad : add [rax], al; add [rax - 0x39], cl; rol [rsi], 0; add [rax], al; ret
0x0008fc7a : add [rax - 0x73], cl; add al, 7; cmp [rax], sil; cmovne rax, rdx; ret
0x001385bc : add [rax], al; add [rax], al; mov rax, [rip + 0x291659]; pop rbx; ret
0x0009665c : add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi + 5], rdx; ret
0x00138c4f : add [rax], eax; add [rax], al; mov [rsp + 0x20], 5; call [rax + 0x18]
0x0005de7f : add [rax], al; add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x0006d1b7 : movzx esi, [rcx]; lea rbx, [rcx + 1]; mov rdi, r15; call [rax + 0x18]
0x0014219f : lea edx, [rip + 0x2872ab]; mov [rip + 0x2890d4], rdx; add rsp, 8; ret
0x000450bf : mov edx, ebx; mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [r13 + 0x38]
0x00139f98 : add [rax], al; mov rax, [rbp + 0x18]; mov rdi, r12; call [rax + 0x20]
0x0015ddbc : add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx + 6], rdx; ret
0x00042eb7 : xor eax, eax; mov [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret
0x0013867c : add [rax], al; add [rax], al; mov rax, [rip + 0x291531]; pop rbx; ret
0x000695a2 : mov [rbx + 8], rax; mov [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret
0x0004703c : mov rdi, r13; sub r14, r8; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x0016d2a4 : add [rsi + 0x2e], spl; nop [rax + rax]; xor eax, eax; vzeroupper ; ret
0x00136b7f : lea r8, [rip - 0x7206]; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0012e8c3 : mov [rbx + 0x20], rsi; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x000963a4 : mov cl, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; ret
0x0014279a : mov eax, [rip + 0x288ae0]; mov rsi, r9; mov rdi, r8; call [rax + 0x18]
0x000996b5 : mov [rdi], ecx; mov [rdi + 3], edx; xor ch, ch; mov [rdi + 7], ch; ret
0x00138d37 : add al, [rax]; add [rax], al; mov [rsp + 0x40], rdx; call [rax + 0x18]
0x001387df : mov [rcx + 4], si; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0012dd67 : add [rax], eax; add [rax], al; pop rbp; pop r12; pop r13; pop r14; ret
0x0005a31c : add [rax], al; add [rax], al; xor ebx, ebx; mov rax, rbx; pop rbx; ret
0x0013ce4c : add [rax], al; pxor xmm0, xmm0; movups xmm[rsp + 0x28], xmm0; call rdx
0x0008fc76 : mov edx, 0; lea rax, [rdi + rax]; cmp [rax], sil; cmovne rax, rdx; ret
0x001384f8 : movsb [rdi], [rsi]; nop [rax]; mov rax, [rip + 0x291809]; pop rbx; ret
0x001251f4 : add [rbp - 0x27], dh; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0012d26c : mov eax, [rax + 0x23b8]; xor esi, esi; mov rdi, rbx; call [rax + 0x28]
0x0016e839 : add rax, rdi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper ; ret
0x000dac33 : movzx edx, [rax + 8]; movsxd rdx, [r10 + rdx*4]; add rdx, r10; jmp rdx
0x001458b1 : sub [rbx + rcx*4 + 0xa], al; mov rdx, r14; add r9, [rsp + 8]; call rax
0x00068c3a : mov [rbp + 0x20], rax; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret
0x00046f16 : add eax, edi; mov r8, rcx; mov [rbp - 0x4c0], 1; xor esi, esi; jmp rax
0x0006ebaf : add [rax], al; mov [rip + 0x35da20], rdx; add [rip + 0x35da15], 1; ret
0x0012eac5 : mov rcx, [rsp + 8]; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax
0x0012f987 : add [rax], al; test eax, eax; setne al; add rsp, 8; movzx eax, al; ret
0x001009c4 : xchg eax, ecx; sub al, 0; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0012c5e5 : mov rdi, [rsp]; mov [rsp + 0x1a2], ax; mov rax, [rsp + 0x28]; call rax
0x0004703d : mov edi, ebp; sub r14, r8; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x0001bf86 : add [rdi + rax*8], ah; sub al, [rax]; add [rax], al; mov rax, rcx; ret
0x000700e6 : add [rax], eax; add [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret
0x0001e69d : mov eax, 1; shl rax, cl; test [rdi], rax; setne al; movzx eax, al; ret
0x0007524a : lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq [rdi], rax; pop rbx; ret
0x0016d3bf : add bl, dh; bsf eax, eax; add rax, rdi; sub rax, rdx; vzeroupper ; ret
0x00100b3b : pop rcx; nop ; sub al, 0; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x001600a1 : add [rcx + 0x4418a02], ecx; mov [rdx + 4], al; lea rax, [rdx + 4]; ret
0x00092188 : mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; mov rax, rdi; ret
0x00134c43 : add bh, [rax + 1]; mov [rdi + 0x18], 1; movups xmm[rdi + 8], xmm0; ret
0x0012c5e6 : mov edi, [rsp]; mov [rsp + 0x1a2], ax; mov rax, [rsp + 0x28]; call rax
0x0011ef26 : add [rax], al; xor eax, eax; mov [rdi + 0xc], edx; mov [rsi], rdi; ret
0x0012b112 : mov rdi, [r13]; mov rsi, r12; mov rax, [rdi + 0x38]; call [rax + 0x10]
0x0012e901 : mov [rbx + 0x20], eax; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x00095744 : mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x00001296 : add [rdi + rax*8], ah; or [rax], eax; add [rax], al; mov eax, edi; ret
0x0000f3e9 : add al, [rax]; add bl, al; nop [rax]; mov eax, edi; and eax, 0x7f; ret
0x0012bef4 : add [rax], al; mov [rsp + 0x18], r10; lea r9, [rsp + 0x40]; call [rax]
0x0015ffde : add [rax], al; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; ret
0x0012d974 : sub rax, [rbx + 0x18]; add rsp, 8; pop rbx; pop rbp; add eax, edx; ret
0x0016e83a : add eax, edi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper ; ret
0x0005ab16 : mov [rax], al; add [rax], al; mov [rdx + 8], r9; add [rdx + 4], 1; ret
0x0012dd9d : sub eax, 4; bswap eax; mov [rdx], eax; mov edx, ebx; call [r13 + 0x10]
0x000680c6 : add bl, al; nop [rax + rax]; xor eax, eax; test [rdi], 4; sete al; ret
0x00142799 : mov rax, [rip + 0x288ae0]; mov rsi, r9; mov rdi, r8; call [rax + 0x18]
0x00095764 : mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x000680db : add [rax], 0; add [rax], al; xor eax, eax; test [rdi], 8; sete al; ret
0x00064705 : add [rax], r8b; mov rbp, [r15 + 0x98]; mov rdi, rbp; call [rbp + 0x20]
0x0012b113 : mov edi, [rbp]; mov rsi, r12; mov rax, [rdi + 0x38]; call [rax + 0x10]
0x0012b115 : add [rcx + rcx*4 - 0x1a], cl; mov rax, [rdi + 0x38]; call [rax + 0x10]
0x00021e23 : sub rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop ; call [rbx]
0x00030c62 : add [rax], al; add [rbx - 0x77], bl; rcr [rbp + 0x41], 1; pop rsp; ret
0x00095704 : mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x00044823 : mov esi, esi; mov [rbp - 0x950], r9b; mov rdi, [rbp - 0x8d0]; call rax
0x000cced3 : add [rcx + 0x1b828], cl; add [rax], al; pop rbx; pop rbp; pop r12; ret
0x00038190 : mov [rbp - 0x920], r8b; mov rsi, r15; mov rdi, [rbp - 0x8a8]; call rax
0x00138678 : movsb [rdi], [rsi]; nop [rax]; mov rax, [rip + 0x291531]; pop rbx; ret
0x001250d5 : mov [rbx + 0x20], rdx; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x000dd98b : add [rdi], ecx; test [rax - 0x72000004], cl; add [r8 - 0x7d], ecx; ret
0x00095745 : mov ecx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x000f805f : add [rax], al; add [rax], al; setne al; add rsp, 8; movzx eax, al; ret
0x0012e900 : mov [rbx + 0x20], rax; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x0006eb14 : add [rsi + 0x2e], spl; nop [rax + rax]; mov rax, [rip + 0x35c869]; ret
0x00068c3b : mov [rbp + 0x20], eax; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret
0x0010476c : mov edi, edi; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x000008b9 : mov edi, [rsp + 0x14]; mov rdx, [rax]; mov rax, [rsp + 0x18]; call rax
0x00021e24 : sub eax, edx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop ; call [rbx]
0x001250d6 : mov [rbx + 0x20], edx; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x001426da : mov eax, [rip + 0x288ba0]; mov rsi, r9; mov rdi, r8; call [rax + 0x10]
0x0000eee8 : movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x000956e4 : mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x0012e8c4 : mov [rbx + 0x20], esi; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x00062fcc : xor [rcx + rcx*4 + 0x60], cl; cmp [rcx + 0x5d5b7453], cl; pop r12; ret
0x00044822 : mov rsi, r14; mov [rbp - 0x950], r9b; mov rdi, [rbp - 0x8d0]; call rax
0x00137f5f : call [rax + 0x10]; mov rax, [rbx + 8]; mov rdi, rbx; call [rax + 0x20]
0x00038593 : add [rax - 0x77], ecx; push rcx; sub dh, al; add [rcx - 0x7d], cl; ret
0x0012dd9c : sub rax, 4; bswap eax; mov [rdx], eax; mov edx, ebx; call [r13 + 0x10]
0x000482f6 : dec [rcx + rcx*4 - 0xe]; mov rsi, r15; mov rdi, r13; call [rax + 0x38]
0x001049ec : mov edi, edi; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x00097a3e : add [rax], al; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 4]; ret
0x00083b9a : add bh, bh; dec [rdi]; test [rsi], al; sub [rax], eax; add bh, dh; ret
0x00046f15 : add rax, rdi; mov r8, rcx; mov [rbp - 0x4c0], 1; xor esi, esi; jmp rax
0x0012d26b : mov rax, [rax + 0x23b8]; xor esi, esi; mov rdi, rbx; call [rax + 0x28]
0x00146337 : mov [rip + 0x28632a], r8; mov [rip + 0x28631b], rsi; xor eax, eax; ret
0x000c08ef : add [rdi], cl; test [rsi + rdi*8 + 0x3d80ffff], ch; push rbx; ret 0x30
0x000f832e : add [rax], al; add [rax], al; mov [rip + 0x2d4c43], 0; add rsp, 8; ret
0x00138a47 : add [rax], al; add [rax], al; mov [rsp + 0x38], rdx; call [rax + 0x18]
0x0012d975 : sub eax, [rbx + 0x18]; add rsp, 8; pop rbx; pop rbp; add eax, edx; ret
0x0016ed0a : int3 ; add al, [rax]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0010ce69 : add al, [rax]; add [rbp + 0x32], dh; add rsp, 8; pop rbx; pop rbp; ret
0x000488fd : dec [rcx + rcx*4 - 0xe]; mov rsi, r11; mov rdi, r13; call [r15 + 0x38]
0x001385b8 : movsb [rdi], [rsi]; nop [rax]; mov rax, [rip + 0x291659]; pop rbx; ret
0x00068bba : sbb al, 0; add [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x00018e40 : add cl, [rdi]; test dl, ch; add al, 0; add [rbx - 0x7bf0fc08], al; ret
0x00095765 : mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x0006809e : add [rbp + 0x14], dh; xor eax, eax; cmp [rdi + 0x18], 0; setne al; ret
0x0016008e : add [rax], al; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx + 3]; ret
0x001045ec : mov edi, edi; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x000fe7de : add [rdi + rax*8], ah; add al, [rax]; add [rax], al; xor eax, eax; ret
0x001712eb : mov si, [rsi]; mov cx, [rcx - 2]; mov [rdi], si; mov [r9 - 2], cx; ret
0x0012eac6 : mov ecx, [rsp + 8]; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax
0x00128af8 : xor edx, edx; mov rsi, r15; mov rdi, rbx; mov [rsp + 8], rcx; call r12
0x001426d9 : mov rax, [rip + 0x288ba0]; mov rsi, r9; mov rdi, r8; call [rax + 0x10]
0x000680cc : add [rax], al; add [rax], al; xor eax, eax; test [rdi], 4; sete al; ret
0x0003d698 : mov [rcx + rdx*8], eax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x000962c0 : mov cx, [rsi]; mov dl, [rsi + 2]; mov [rdi], cx; mov [rdi + 2], dl; ret
0x00096e61 : mov [rdi + 0x10], edx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x00072e60 : mov eax, [rip + 0x356c8a]; mov [rsp + 8], rsi; xor edi, edi; call [rax]
0x000956e5 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x0003b12f : xchg [rax + 1], cl; clc ; mov r11, rdx; mov r9d, 1; mov r8d, 1; jmp rax
0x0013cc6f : add [rbx + 0x66c32847], cl; nop ; nop cs:[rax + rax]; xor eax, eax; ret
0x0009647b : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; ret
0x000fecd2 : add [rax], al; mov [rbx + 0x38], rcx; add rsp, 8; pop rbx; pop rbp; ret
0x001691cf : add [rax], eax; add [rax + 1], cl; clc ; add rax, rcx; vzeroupper ; ret
0x000eee50 : mov rdx, [rip + 0x2dad41]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000eee51 : mov edx, [rip + 0x2dad41]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0013b34d : add [rax], al; add [rbx + 0xb7501f8], al; mov rax, [rdi + 8]; jmp [rax]
0x001600d1 : add [rcx + 0x3418b02], ecx; mov [rdx + 3], eax; lea rax, [rdx + 6]; ret
0x000ee0d8 : xchg eax, edi; add [rax], al; add [rdi], cl; adc [rsi + 0x70], eax; ret
0x001017c0 : mov rdx, [rip + 0x2c83d1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000921d7 : mov [rdx], eax; mov ax, [rcx + 4]; mov [rdx + 4], ax; mov rax, rdi; ret
0x0009223b : adc eax, [rdx]; mov al, [rcx + 8]; mov [rdx + 8], al; mov rax, rdi; ret
0x0011edfc : add [rax], al; add [rax], al; mov edi, [rdi]; mov eax, 3; syscall ; ret
0x000e2c9d : add cs:[rcx - 9], al; fsub [rsp + rax*2 - 0x77]; add [rax - 1], bh; ret
0x000ed481 : mov edx, [rip + 0x2dc711]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000eab7f : add [rdi], cl; test [rbx], dl; or [rax], eax; add [rax - 0x7d], cl; ret
0x00096d58 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x00097c58 : movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret
0x0007aff5 : add [rax - 0x77], cl; fimul [rcx + rcx*4 - 0xa]; mov rdi, r13; call rax
0x000af5f3 : add [rax], al; add [rax + rbp*2 + 0x48], dh; lea eax, [rdi - 0x10]; ret
0x0013c2bf : mov eax, [rbx + 8]; lea rsi, [rsp + 4]; mov rdi, rbx; call [rax + 0x40]
0x00102351 : mov edx, [rip + 0x2c7841]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00100a70 : mov rdx, [rip + 0x2c9121]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0016cd4d : lea eax, [rdi + rax]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x00134b97 : xor eax, eax; mov rsi, rdx; mov [rdi + 0x68], 2; add rdi, 0x68; jmp rcx
0x0005dccc : mov ebp, edx; mov rbx, rdi; sub rsp, 8; mov rdi, [rdi + 0xe0]; call rax
0x0003f6fc : dec [rcx + rcx*4 - 0x16]; mov rsi, r14; mov rdi, [rbp - 0xc0]; call rax
0x000eac4f : pop rdx; or al, [rax]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00067715 : mov [rsp + 0x18], ebx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00132827 : xor eax, eax; mov rsi, rdx; mov [rdi + 0x10], 2; add rdi, 0x10; jmp rcx
0x0007103b : mov dr0, [rcx]; lcall [rbx + 0x48]; mov eax, edi; pop rbp; pop r12; ret
0x00097c1e : mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret
0x000c63cd : add [rax], al; add [rbx - 0x2ef73], cl; inc [rbx - 0x2ff73]; call [rax]
0x000957cc : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x000f384f : mov [rbp + 8], eax; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x00099a22 : push rbx; movq [rdi + 0x30], mm7; xor ch, ch; mov [rdi + 0x40], ch; ret
0x000e1bae : pop rbp; pop r12; mov [rsi + 0x2c], eax; pop r13; pop r14; pop r15; ret
0x000eee11 : mov edx, [rip + 0x2dad81]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00097bd7 : movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret
0x0013c2f7 : mov rax, [rbx + 8]; lea rsi, [rsp + 4]; mov rdi, rbx; call [rax + 0x48]
0x000ed480 : mov rdx, [rip + 0x2dc711]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00102350 : mov rdx, [rip + 0x2c7841]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00068f7c : push rax; add [rax - 0x77], ecx; push rdi; or [rdi], cl; mov dh, 0; ret
0x00023661 : mov edx, [rip + 0x3a6531]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00138497 : add [rax + 0x39], cl; sal [rbx + 0x48], 1; sub eax, -0x80; pop rbx; ret
0x00135514 : mov edx, [rdi + 0x90]; bswap eax; mov [rdx + 0xc], eax; mov eax, 1; ret
0x00101888 : mov rdx, [rip + 0x2c8309]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000956d0 : movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x0005ca54 : lea rsp, [rbp - 0x20]; pop rbx; pop r12; pop r13; pop r14; pop rbp; ret
0x000ea963 : pop rsp; or al, [rax]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00125430 : adc [rax], al; add [rax], al; add cl, ch; cmp dh, 0xff; jmp [rsi + 0xf]
0x0006ceac : mov [rbx + 8], rdx; movzx eax, [rax]; add rsp, 8; pop rbx; pop rbp; ret
0x000eef59 : mov edx, [rip + 0x2dac39]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00100b38 : mov rdx, [rip + 0x2c9059]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x001017c1 : mov edx, [rip + 0x2c83d1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0001d1eb : add [rax], al; add [rax], al; nop ; pmovmskb eax, xmm0; and eax, 8; ret
0x000963fa : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; ret
0x00102528 : mov rdx, [rip + 0x2c7669]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x001712ec : mov esi, [rsi]; mov cx, [rcx - 2]; mov [rdi], si; mov [r9 - 2], cx; ret
0x0001f678 : mov edi, ebx; imul r15, r13; add r15, [rsp + 8]; mov rsi, r15; call r14
0x000f55a1 : mov edx, [rip + 0x2d45f1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0006cead : mov [rbx + 8], edx; movzx eax, [rax]; add rsp, 8; pop rbx; pop rbp; ret
0x0010fd0d : add [rax], al; nop ; push rbp; xor eax, eax; mov rbp, rsp; pop rbp; ret
0x00072e5f : mov rax, [rip + 0x356c8a]; mov [rsp + 8], rsi; xor edi, edi; call [rax]
0x0002355d : mov [rsi + 0xc], ax; mov eax, 1; mov [rsi + 0xe], ax; xor eax, eax; ret
0x001009c1 : mov edx, [rip + 0x2c91d1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00101931 : mov edx, [rip + 0x2c8261]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00101b58 : mov rdx, [rip + 0x2c8039]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00101a91 : mov edx, [rip + 0x2c8101]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00096d30 : movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x00101889 : mov edx, [rip + 0x2c8309]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000871ae : add [rax], al; mov rdx, [rsp + 0x18]; add rax, rdi; mov [rdi], rdx; ret
0x00131d59 : add [rax], al; add bl, al; nop [rax]; mov [rdi + 4], 0; mov eax, 1; ret
0x0011aa7c : inc [rbx + 0x3e75fff8]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x00044fe5 : add [rdi], cl; xchg edi, ebx; sbb [rax], eax; add [rax - 0x7d], cl; ret
0x00045cea : inc [rax]; add [rax], al; add dh, al; test esp, esp; idiv bh; jmp [rax]
0x00111ba9 : mov edx, [rip + 0x2b7fe9]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000f384e : mov [rbp + 8], rax; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x00111ba8 : mov rdx, [rip + 0x2b7fe9]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0001f677 : mov r15, rbx; imul r15, r13; add r15, [rsp + 8]; mov rsi, r15; call r14
0x0005dccb : mov rbp, rdx; mov rbx, rdi; sub rsp, 8; mov rdi, [rdi + 0xe0]; call rax
0x0008ad71 : add [rsi + 0xf], ah; xlatb ; ror [rdi], -0x43; ror [rax + 1], 0xf8; ret
0x0006ae60 : add [rax], al; mov [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret
0x001533c0 : mov dx, [rsi + 1]; mov cx, [rsi]; mov [rdi + 1], dx; mov [rdi], cx; ret
0x000eeee1 : mov edx, [rip + 0x2dacb1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00102529 : mov edx, [rip + 0x2c7669]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000921b7 : mov [rdx], eax; mov al, [rcx + 4]; mov [rdx + 4], al; mov rax, rdi; ret
0x00136b80 : lea eax, [rip - 0x7206]; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x00046c40 : sub esi, ebx; mov r15, r14; sar r15, 2; mov rdx, r15; call [rax + 0x38]
0x000f54f0 : mov rdx, [rip + 0x2d46a1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x001387e0 : mov [rcx + 4], esi; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0016cd4c : lea rax, [rdi + rax]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x0006ddac : push rbp; xor [rbx - 0x438a0008], al; add rsp, 8; pop rbx; pop rbp; ret
0x00092189 : mov [rdx], eax; mov al, [rcx + 2]; mov [rdx + 2], al; mov rax, rdi; ret
0x00100a71 : mov edx, [rip + 0x2c9121]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000f54f1 : mov edx, [rip + 0x2d46a1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00097ca0 : mov [rdi + 0x10], edx; mov [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret
0x000957a8 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x0006cba4 : pop r8; add [rax], al; add [rax], al; mov [rbx + 0x50], 0; pop rbx; ret
0x00101930 : mov rdx, [rip + 0x2c8261]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00096dd8 : movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x0007bc53 : mov [rbx + 0x18], ebp; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00096df8 : movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x00096e3d : mov [rdi + 0x10], ecx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x00097cc1 : mov [rdi + 0x10], edx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret
0x000f4be8 : inc [rbx + 0x478930c8]; or [rax + 0x100], bh; mov [rdi + 0x16], ax; ret
0x00072d58 : mov eax, [rip + 0x356d92]; mov [rsp + 8], rdx; mov rdi, r15; call [rax]
0x00097b97 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret
0x00096dbb : mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x000464e9 : inc [rcx]; add [rax], al; add dh, al; test esp, esp; idiv bh; jmp [rax]
0x0016e44d : lea eax, [rdi + rax]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x00067714 : mov [r12 + 0x18], rbx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0013c2be : mov rax, [rbx + 8]; lea rsi, [rsp + 4]; mov rdi, rbx; call [rax + 0x40]
0x0016e44c : lea rax, [rdi + rax]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x00046c3f : sub r14, rbx; mov r15, r14; sar r15, 2; mov rdx, r15; call [rax + 0x38]
0x000e2d5c : add [rax], al; add [rax], al; mov rax, [rdi]; or [rax + 8], 0x2000; ret
0x000eef28 : mov rdx, [rip + 0x2dac69]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x001450da : add [rax], eax; add [rax - 0x77], cl; sbb [r8 + 0x5a], bl; pop rbx; ret
0x000f6d01 : sub eax, [rdx]; add [rax], al; mov [rip + 0x2d60e0], 0; add rsp, 8; ret
0x0013b437 : mov eax, [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call [rax + 8]
0x00095727 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x0005d962 : add [rax], 0; add [rbx + 0x48], bl; mov eax, esi; pop rbp; pop r12; ret
0x00094f35 : adc ecx, [rdx + 8]; xor ah, ah; mov [rdx + 0x10], ah; mov rax, rdi; ret
0x000c8453 : add [rbp + 0x12], dh; or esi, 2; xor eax, eax; cmp esi, 1; sete al; ret
0x00111c81 : mov edx, [rip + 0x2b7f11]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00072acb : mov rax, [rip + 0x35701e]; mov [rsp + 8], r11; mov rdi, r12; call [rax]
0x00072acc : mov eax, [rip + 0x35701e]; mov [rsp + 8], r11; mov rdi, r12; call [rax]
0x00135513 : mov rdx, [rdi + 0x90]; bswap eax; mov [rdx + 0xc], eax; mov eax, 1; ret
0x000eef58 : mov rdx, [rip + 0x2dac39]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00096e3c : mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x001693bd : add [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper ; ret
0x001019f1 : mov edx, [rip + 0x2c81a1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00097cc0 : mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret
0x00131ccf : add bl, dh; movq mm0, [rdi + 8]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x00100b39 : mov edx, [rip + 0x2c9059]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000f55a0 : mov rdx, [rip + 0x2d45f1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00111c80 : mov rdx, [rip + 0x2b7f11]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000eee10 : mov rdx, [rip + 0x2dad81]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0008727e : add [rax], al; mov rax, [rsp + 0x10]; mov [rdi], rax; mov rax, rdi; ret
0x000ed3d1 : mov edx, [rip + 0x2dc7c1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00141d40 : add ecx, [rdi]; fmul [rax - 0x75]; add eax, 0x289535; call [rax + 0x28]
0x0010d9f6 : popfq ; add [rax], eax; add [rax - 0x75], cl; add cl, [rax - 0x7d]; ret
0x00072d57 : mov rax, [rip + 0x356d92]; mov [rsp + 8], rdx; mov rdi, r15; call [rax]
0x000fe7c4 : add [rax], eax; add bl, al; nop [rax + rax]; mov rax, [rax + 0x58]; ret
0x000ed3d0 : mov rdx, [rip + 0x2dc7c1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00141c19 : lea rax, [rip + 0x28d3b0]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret
0x000996f7 : mov [rdi], rcx; mov [rdi + 8], dx; xor ch, ch; mov [rdi + 0xa], ch; ret
0x00141c1a : lea eax, [rip + 0x28d3b0]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret
0x00097bb8 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret
0x00131bf7 : xor eax, eax; mov rsi, rdx; mov [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx
0x00169756 : mov [rbp - 0x7d000000], ss; rol [rax + 0x48], 1; clc ; vzeroupper ; ret
0x00097c9f : mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret
0x0013b436 : mov rax, [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call [rax + 8]
0x000226ef : add [rax], al; add [rax - 0x75], cl; add [rbx - 0x75], bl; pop rax; ret
0x000f53a0 : mov rdx, [rip + 0x2d47f1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000680dc : add [rax], al; add [rax], al; xor eax, eax; test [rdi], 8; sete al; ret
0x00131cb7 : add bl, dh; movq mm0, [rdx]; mov eax, 1; movups xmm[rdi + 8], xmm0; ret
0x00169ea7 : sub al, 1; add [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret
0x000b08d3 : mov al, 0; add [rax], al; lea rdi, [rsp + 0xb0]; mov rsi, rbp; call rbx
0x0001d72a : add [rax], al; add [rax], al; nop ; movmskps eax, xmm0; and eax, 8; ret
0x00096e60 : mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x0005ca55 : lea esp, [rbp - 0x20]; pop rbx; pop r12; pop r13; pop r14; pop rbp; ret
0x00097c38 : movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret
0x001019f0 : mov rdx, [rip + 0x2c81a1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00131d74 : add [rax], al; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x00108b8b : push rbp; cmp [rax - 0x3c41f0e8], cl; add rsp, 8; pop rbx; pop rbp; ret
0x000eef29 : mov edx, [rip + 0x2dac69]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00138f9e : push rax; sbb [rcx - 0x75], cl; or [r9 + r9*4 - 1], r9b; call [rax + 8]
0x000eeee0 : mov rdx, [rip + 0x2dacb1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00096d77 : movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x000f53a1 : mov edx, [rip + 0x2d47f1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00145122 : add [rax], eax; add [rax - 0x77], cl; adc [r8 + 0x5a], bl; pop rbx; ret
0x00136d1a : add [rax], al; add [rcx + 0x481375d0], cl; sub esp, -0x80; pop rbx; ret
0x0009225b : adc eax, [rdx]; mov ax, [rcx + 8]; mov [rdx + 8], ax; mov rax, rdi; ret
0x001354c7 : xor eax, eax; mov rsi, rdx; mov [rdi + 0x58], 2; add rdi, 0x58; jmp rcx
0x000f5441 : mov edx, [rip + 0x2d4751]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00023660 : mov rdx, [rip + 0x3a6531]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00101a90 : mov rdx, [rip + 0x2c8101]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0003d697 : mov [rcx + rdx*8], rax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x00101b59 : mov edx, [rip + 0x2c8039]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000f5440 : mov rdx, [rip + 0x2d4751]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0005ab66 : mov [rax], al; add [rax], al; mov [rdx + 8], rcx; mov [rdx + 4], 1; ret
0x00146338 : mov [rip + 0x28632a], eax; mov [rip + 0x28631b], rsi; xor eax, eax; ret
0x0001cf4a : add [rdi + rax*8], ah; and al, [rax]; add [rax], al; add rsp, 0x28; ret
0x001009c0 : mov rdx, [rip + 0x2c91d1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00096d44 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret
0x0012e984 : adc [rax - 0x77], cl; fimul [rcx + rcx*4 - 0xa]; mov rdi, r13; call rax
0x000441c0 : sub cl, [rcx - 0x3b7cb718]; sbb [rbx + 0x5d], bl; pop r12; pop r13; ret
0x000cc955 : movzx eax, [r9 + rax]; mov [rdi + 8], 1; mov [rdi], al; mov eax, 1; ret
0x0013c2f8 : mov eax, [rbx + 8]; lea rsi, [rsp + 4]; mov rdi, rbx; call [rax + 0x48]
0x000996f8 : mov [rdi], ecx; mov [rdi + 8], dx; xor ch, ch; mov [rdi + 0xa], ch; ret
0x000ee0f1 : xchg [rcx + rax], ecx; add [rax], al; mov [rsi], eax; xor eax, eax; ret
0x0007bc52 : mov [rbx + 0x18], rbp; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00152e12 : movq [rdi + 0x10], mm0; lddqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; ret
0x0006e298 : add [rcx], dh; sal [rcx], cl; test [rax - 0x77], 0xdf; call [rax + 0x58]
0x0013690d : call [rax + 0x20]; mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x20]
0x000eb451 : push rbp; or al, [rax]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0004798d : movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x1b8]; add rax, rdi; jmp rax
0x0009bfdd : add rax, 4; mov [r12], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x00075c67 : add al, ch; adc [rdi - 0x7eb7fff7], -0x3c; add [rax], 0; add bl, dh; ret
0x0009ca80 : xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx
0x00110619 : lea edx, [rip - 0x763df]; lea rax, [rip - 0x764a6]; cmovne rax, rdx; ret
0x0006cba5 : pop rax; add [rax], al; add [rax], al; mov [rbx + 0x50], 0; pop rbx; ret
0x0007dba7 : lea edx, [rip + 0xf4023]; lea rax, [rip + 0xf3fac]; cmovne rax, rdx; ret
0x0000f2bb : mov rax, [rax]; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x00133101 : add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; pop r13; pop r14; ret
0x000cc956 : movzx eax, [rcx + rax]; mov [rdi + 8], 1; mov [rdi], al; mov eax, 1; ret
0x0007eb02 : add [rax], al; add al, ch; xchg [rax + rdi*8], dl; dec [rax - 0x77]; ret
0x000407ff : mov eax, [rip + 0x38ad9b]; mov rdi, rbp; mov rcx, r14; call [rax + r8*8]
0x00097c78 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret
0x00096e18 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x0002355e : mov [rsi + 0xc], eax; mov eax, 1; mov [rsi + 0xe], ax; xor eax, eax; ret
0x0007dea6 : lea rdx, [rip + 0xf3d43]; lea rax, [rip + 0xf3ccc]; cmovne rax, rdx; ret
0x00152683 : int1 ; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x0009cf11 : mov ecx, esp; mov rdx, r14; lea r9, [rsp + 0x28]; mov rdi, rbp; call rbx
0x000ab28d : mov ecx, [rsp + 0x20]; mov r9, r15; mov rsi, r13; mov rdi, r12; call rbp
0x00022003 : mov [rax], 1; add [rip + 0x3ad33f], 1; add rsp, 8; pop rbx; pop rbp; ret
0x00095887 : push rsi; adc bl, dh; movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x00099778 : mov [rdi], ecx; mov [rdi + 6], rdx; xor ch, ch; mov [rdi + 0xe], ch; ret
0x0013bf11 : mov eax, [rdi + 8]; mov [rsp + 8], r8; lea rsi, [rsp + 0x10]; call [rax]
0x00047ded : add rax, rdi; mov r8, rcx; mov [rbp - 0x510], 1; xor r15d, r15d; jmp rax
0x00110828 : lea edx, [rip + 0x5cfa2]; lea rax, [rip + 0x5cf3b]; cmovne rax, rdx; ret
0x00136904 : mov eax, [rbx]; mov rdi, [rax]; mov rax, [rdi + 0x38]; call [rax + 0x20]
0x0007daad : lea edx, [rip + 0xf01cd]; lea rax, [rip + 0xf0166]; cmovne rax, rdx; ret
0x00144a7a : add [rax], al; add [rax], al; add [rax - 0x11d417], dl; jmp [rsi + 0x2e]
0x0007fffa : add [rdi + rcx - 0x4a], eax; adc [rbp - 0x7c], eax; ror [rdi], 0x95; ret
0x00110827 : lea rdx, [rip + 0x5cfa2]; lea rax, [rip + 0x5cf3b]; cmovne rax, rdx; ret
0x000b1806 : lea rdx, [rip - 0xad]; test rax, rax; cmove rax, rdx; add rsp, 0x28; ret
0x00099716 : mov [rdi], rcx; mov [rdi + 7], edx; xor ch, ch; mov [rdi + 0xb], ch; ret
0x0009cc15 : xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x0007d8d1 : add eax, 1; mov [rbp], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x00095785 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x0007dbc8 : lea edx, [rip + 0xefc12]; lea rax, [rip + 0xefbab]; cmovne rax, rdx; ret
0x0007cb3e : add [rax], al; lea rax, [rip + 0x34fbe9]; mov [rip + 0x34fbca], rax; ret
0x0000f21c : mov eax, [rax]; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x0001fc8a : add al, 0; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x001355b7 : mov eax, [rax]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0007426f : add [rax - 0x77], cl; or [r8 - 0x75], cl; or [rbx + 0x94807e0], r8b; ret
0x00135614 : mov edx, [rdi + 0x90]; bswap eax; mov [rdx + 0x10], eax; mov eax, 1; ret
0x000920f0 : add [rax], al; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret
0x00097cff : mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret
0x0009cc16 : xor eax, eax; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x001106e9 : lea edx, [rip - 0x764af]; lea rax, [rip - 0x76576]; cmovne rax, rdx; ret
0x00047dee : add eax, edi; mov r8, rcx; mov [rbp - 0x510], 1; xor r15d, r15d; jmp rax
0x0001f791 : mov rsi, rdi; lea r14, [rdi + rax]; mov rbx, rax; mov rdi, r14; call rbp
0x00110687 : lea rdx, [rip + 0x5d162]; lea rax, [rip + 0x5d0fb]; cmovne rax, rdx; ret
0x001383af : sub [rax], eax; mov [rip + 0x296a95], 2; mov fs:[rbx], rax; pop rbx; ret
0x00099717 : mov [rdi], ecx; mov [rdi + 7], edx; xor ch, ch; mov [rdi + 0xb], ch; ret
0x0014251f : add [rax], 0; add [rax - 0x75], cl; add eax, 0x288d56; call [rax + 0x28]
0x00144a3a : add [rax], al; add [rax], al; add [rax - 0x256417], dl; jmp [rsi + 0x2e]
0x0007d8d0 : add rax, 1; mov [rbp], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0007de58 : lea rdx, [rip + 0x1c3f1]; lea rax, [rip + 0x1c32a]; cmovne rax, rdx; ret
0x0012cdc8 : sbb [rbx + 0x127703f8], al; lea rdx, [rip + 0x29cabb]; jmp [rdx + rax*8]
0x00097d5a : movq [rdi], mm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret
0x000957eb : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x0005d963 : add [rax], al; add [rbx + 0x48], bl; mov eax, esi; pop rbp; pop r12; ret
0x0007daac : lea rdx, [rip + 0xf01cd]; lea rax, [rip + 0xf0166]; cmovne rax, rdx; ret
0x00099757 : mov [rdi], rcx; mov [rdi + 5], rdx; xor ch, ch; mov [rdi + 0xd], ch; ret
0x00110618 : lea rdx, [rip - 0x763df]; lea rax, [rip - 0x764a6]; cmovne rax, rdx; ret
0x0003b246 : movsxd rax, [rax + rsi*4]; lea rsi, [rip - 0x841]; add rax, rsi; jmp rax
0x000962c1 : mov ecx, [rsi]; mov dl, [rsi + 2]; mov [rdi], cx; mov [rdi + 2], dl; ret
0x00131bdc : movups xmm[rsi], xmm0; mov rax, [rax + 0xa0]; mov [rsi + 0x10], rax; ret
0x0007d9e8 : lea rdx, [rip + 0x1c861]; lea rax, [rip + 0x1c79a]; cmovne rax, rdx; ret
0x000633d1 : sub edx, [rcx + 8]; mov eax, [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret
0x000138cc : add [rax], al; call rax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x001423ed : mov gs, [rax]; add [rax - 0x77], cl; xlatb ; mov rsi, r8; call [rax + 8]
0x0014b99a : add al, [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx
0x000fab02 : sub al, [rbx]; add [rax], al; lea rax, [rip + 0x2d2553]; add rsp, 8; ret
0x000f52a1 : add [rax], al; mov rbx, -1; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x00044d75 : movsxd rax, [rax + rdx*4]; lea rdx, [rip - 0x2fe]; add rax, rdx; jmp rax
0x001623f2 : mov [rdx + 7], rax; lea rax, [rdx + 0xe]; cmp [rax], 1; sbb rax, -1; ret
0x00095714 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; ret
0x00135613 : mov rdx, [rdi + 0x90]; bswap eax; mov [rdx + 0x10], eax; mov eax, 1; ret
0x00043add : add [rcx], al; add [rax], al; or eax, 7; mov [rdx], eax; mov eax, 1; ret
0x0007dec8 : lea edx, [rip + 0xef932]; lea rax, [rip + 0xef8cb]; cmovne rax, rdx; ret
0x0007da57 : lea rdx, [rip + 0xefda2]; lea rax, [rip + 0xefd3b]; cmovne rax, rdx; ret
0x000ee0fe : add [rax], al; mov eax, [rdi + 0x108]; mov [rsi], eax; xor eax, eax; ret
0x00136a8c : mov rax, [rdi + 8]; lea rdx, [rsp + 0x18]; mov esi, 6; call [rax + 0x28]
0x00097bf7 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret
0x000f8822 : push rsp; lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret
0x00110807 : lea edx, [rip + 0x613b3]; lea rax, [rip + 0x6133c]; cmovne rax, rdx; ret
0x0011b779 : mov ecx, edi; mov rdx, [rsp + 8]; mov rsi, [rsp]; mov rdi, r13; call r12
0x001369a6 : sbb [rsi + 6], bh; mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x28]
0x001107b8 : lea rdx, [rip - 0x7659f]; lea rax, [rip - 0x76666]; cmovne rax, rdx; ret
0x001108c7 : lea edx, [rip + 0x618c3]; lea rax, [rip + 0x6184c]; cmovne rax, rdx; ret
0x001438f2 : add [rax], 0; add [rax - 0x75], cl; add eax, 0x287983; call [rax + 0x28]
0x00144a4a : add [rax], al; add [rax], al; add [rax - 0x24d417], dl; jmp [rsi + 0x2e]
0x000955d5 : add [rsi + 0x2e], ah; nop [rax + rax]; mov dx, [rsi]; mov [rdi], dx; ret
0x00099777 : mov [rdi], rcx; mov [rdi + 6], rdx; xor ch, ch; mov [rdi + 0xe], ch; ret
0x001533c1 : mov edx, [rsi + 1]; mov cx, [rsi]; mov [rdi + 1], dx; mov [rdi], cx; ret
0x0007dbc7 : lea rdx, [rip + 0xefc12]; lea rax, [rip + 0xefbab]; cmovne rax, rdx; ret
0x0007dba6 : lea rdx, [rip + 0xf4023]; lea rax, [rip + 0xf3fac]; cmovne rax, rdx; ret
0x0006d63b : mov [rbx + 0x18], 0; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x00047929 : movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x21c]; add rax, rdi; jmp rax
0x00144a8a : add [rax], al; add [rax], al; add [rax - 0x10c417], dl; jmp [rsi + 0x2e]
0x000ab28c : mov rcx, [rsp + 0x20]; mov r9, r15; mov rsi, r13; mov rdi, r12; call rbp
0x0016340b : add [rbp + 0x32], esi; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x00099797 : mov [rdi], rcx; mov [rdi + 7], rdx; xor ch, ch; mov [rdi + 0xf], ch; ret
0x000e072a : add [rax], al; add [rax], al; mov [rsi + 0x10], 0; mov [rsi + 8], 0; ret
0x0007dec7 : lea rdx, [rip + 0xef932]; lea rax, [rip + 0xef8cb]; cmovne rax, rdx; ret
0x0002158f : push rcx; lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret
0x0007de59 : lea edx, [rip + 0x1c3f1]; lea rax, [rip + 0x1c32a]; cmovne rax, rdx; ret
0x0012d284 : inc [rbp - 0x3f6af040]; movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret
0x00096e80 : mov [rdi + 0x10], edx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x0001c8e2 : add [rcx], cl; ror [rcx - 0x24efdbbc], 1; insb [rdi], dx; and al, 8; ret
0x0014bb96 : add [rip + 0x14634900], al; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx
0x000b1726 : lea rdx, [rip - 0x8d]; test rax, rax; cmove rax, rdx; add rsp, 0x28; ret
0x00097d00 : mov [rdi + 0x10], edx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret
0x0015bd05 : add cl, [rax - 0x75]; or [r8 - 0x77], cl; or [rax - 0x77], cl; clc ; ret
0x000eb191 : push r14; or al, [rax]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0004a538 : mov r11, [rbp - 0x630]; movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x00047873 : movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x2d2]; add rax, rdi; jmp rax
0x000407fe : mov rax, [rip + 0x38ad9b]; mov rdi, rbp; mov rcx, r14; call [rax + r8*8]
0x0001f7cc : lea rbx, [rax + r15]; mov rdx, r12; mov rsi, r14; mov rdi, r13; call rbp
0x00096e7f : mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x001354a9 : movups xmm[rsi], xmm0; mov rax, [rax + 0x50]; mov [rsi + 0x10], rax; ret
0x0001d72b : add [rax], al; add [rsi - 0x70], ah; movmskps eax, xmm0; and eax, 8; ret
0x000386fb : lea edx, [rip - 0x2a5]; movsxd rax, [rsi + rax*4]; add rax, rdx; jmp rax
0x00136a8d : mov eax, [rdi + 8]; lea rdx, [rsp + 0x18]; mov esi, 6; call [rax + 0x28]
0x00110736 : lea rdx, [rip + 0x614a3]; lea rax, [rip + 0x6142c]; cmovne rax, rdx; ret
0x00110757 : lea rdx, [rip + 0x5d092]; lea rax, [rip + 0x5d02b]; cmovne rax, rdx; ret
0x000633d0 : sub rdx, [rcx + 8]; mov eax, [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret
0x000f50fe : adc [rdx + 0x14], edi; sub edx, eax; test eax, eax; cmovns eax, edx; ret
0x000e4bef : add eax, ebx; mov rdi, [rbp - 0x190]; push rax; mov rcx, [r14]; call r12
0x001107b9 : lea edx, [rip - 0x7659f]; lea rax, [rip - 0x76666]; cmovne rax, rdx; ret
0x00144a2a : add [rax], al; add [rax], al; add [rax - 0x292417], dl; jmp [rsi + 0x2e]
0x00068f2b : add [rax], 0; add [rax], al; mov eax, [rdi]; shr eax, 5; and eax, 1; ret
0x00097b80 : movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0x10]; ret
0x0009bfde : add eax, 4; mov [r12], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x000234d0 : movabs rax, -0x21131992fffefff5; mov [rsi + 0xc], rax; xor eax, eax; ret
0x000e4bee : add rax, rbx; mov rdi, [rbp - 0x190]; push rax; mov rcx, [r14]; call r12
0x001108c6 : lea rdx, [rip + 0x618c3]; lea rax, [rip + 0x6184c]; cmovne rax, rdx; ret
0x00097d1a : movq [rdi], mm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret
0x00060698 : mov [rdx + 0x20], rsi; mov [rcx], ebp; add rsp, 8; pop rbx; pop rbp; ret
0x000479db : movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x16a]; add rax, rdi; jmp rax
0x000fe52a : add [rax], al; mov eax, [rax + 0x38]; test eax, eax; cmove eax, edx; ret
0x0000f1db : mov rax, [rax]; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x0007d9e9 : lea edx, [rip + 0x1c861]; lea rax, [rip + 0x1c79a]; cmovne rax, rdx; ret
0x0000f21b : mov rax, [rax]; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x00060699 : mov [rdx + 0x20], esi; mov [rcx], ebp; add rsp, 8; pop rbx; pop rbp; ret
0x00144a6a : add [rax], al; add [rax], al; add [rax - 0x263417], dl; jmp [rsi + 0x2e]
0x000996b3 : push rsi; add ecx, [rcx + 0x357890f]; xor ch, ch; mov [rdi + 7], ch; ret
0x0001e5dd : push r8; movups xmm[rdi + 0x60], xmm0; movups xmm[rdi + 0x70], xmm0; ret
0x0009d1ef : mov rcx, r12; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x0011087d : lea edx, [rip + 0x5d3ed]; lea rax, [rip + 0x5d386]; cmovne rax, rdx; ret
0x00052af3 : mov ebx, [rbp - 0x5a0]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x00097ce0 : mov [rdi + 0x10], edx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret
0x0012fa63 : inc [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; pop rbx; pop rbp; ret
0x0009d1f0 : mov ecx, esp; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x00045b9e : add [rax], al; add al, ch; pop rdx; mov ah, 1; add [rax + 0x39], cl; ret
0x00099798 : mov [rdi], ecx; mov [rdi + 7], rdx; xor ch, ch; mov [rdi + 0xf], ch; ret
0x00063305 : mov [rbp], rax; mov [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret
0x00110666 : lea rdx, [rip + 0x61573]; lea rax, [rip + 0x614fc]; cmovne rax, rdx; ret
0x001623f3 : mov [rdx + 7], eax; lea rax, [rdx + 0xe]; cmp [rax], 1; sbb rax, -1; ret
0x00110737 : lea edx, [rip + 0x614a3]; lea rax, [rip + 0x6142c]; cmovne rax, rdx; ret
0x0012d9e3 : mov rbp, rax; bswap edx; mov [rcx], edx; mov edx, eax; call [rbx + 0x10]
0x0007da37 : lea edx, [rip + 0xf41b3]; lea rax, [rip + 0xf413c]; cmovne rax, rdx; ret
0x0009cf10 : mov rcx, r12; mov rdx, r14; lea r9, [rsp + 0x28]; mov rdi, rbp; call rbx
0x000386fa : lea rdx, [rip - 0x2a5]; movsxd rax, [rsi + rax*4]; add rax, rdx; jmp rax
0x00097cdf : mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret
0x0014dc53 : int1 ; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0007db59 : lea edx, [rip + 0x1c6d1]; lea rax, [rip + 0x1c60a]; cmovne rax, rdx; ret
0x0007db58 : lea rdx, [rip + 0x1c6d1]; lea rax, [rip + 0x1c60a]; cmovne rax, rdx; ret
0x00096eda : movq [rdi], mm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x00096bf0 : mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x0007da36 : lea rdx, [rip + 0xf41b3]; lea rax, [rip + 0xf413c]; cmovne rax, rdx; ret
0x0012b9d3 : add al, 0; add [rax], al; mov rdi, rbp; lea r9, [rsp + 0x20]; call [rax]
0x0011087c : lea rdx, [rip + 0x5d3ed]; lea rax, [rip + 0x5d386]; cmovne rax, rdx; ret
0x00099736 : mov [rdi], rcx; mov [rdi + 8], edx; xor ch, ch; mov [rdi + 0xc], ch; ret
0x0011b778 : mov rcx, r15; mov rdx, [rsp + 8]; mov rsi, [rsp]; mov rdi, r13; call r12
0x00110806 : lea rdx, [rip + 0x613b3]; lea rax, [rip + 0x6133c]; cmovne rax, rdx; ret
0x00097d3a : movq [rdi], mm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret
0x000af26e : xchg ebp, ebx; add [rax], al; add [rax + 1], cl; clc ; add rax, rcx; ret
0x00122a4c : add [rax], al; movzx eax, bl; neg eax; add rsp, 8; pop rbx; pop rbp; ret
0x000f6f1f : add [rbp + 9], dh; lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret
0x0007daf7 : lea edx, [rip + 0xf46a3]; lea rax, [rip + 0xf462c]; cmovne rax, rdx; ret
0x00063215 : push [rbx + rax - 0x7d]; and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret
0x0007daf6 : lea rdx, [rip + 0xf46a3]; lea rax, [rip + 0xf462c]; cmovne rax, rdx; ret
0x0004a539 : mov ebx, [rbp - 0x630]; movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x00110758 : lea edx, [rip + 0x5d092]; lea rax, [rip + 0x5d02b]; cmovne rax, rdx; ret
0x0001f7cd : lea ebx, [rax + rdi]; mov rdx, r12; mov rsi, r14; mov rdi, r13; call rbp
0x00099758 : mov [rdi], ecx; mov [rdi + 5], rdx; xor ch, ch; mov [rdi + 0xd], ch; ret
0x00096e9f : mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x0012ba96 : add [rax], al; lea rdx, [rip + 0xf781]; lea r9, [rsp + 0x20]; call [rax]
0x00096ea0 : mov [rdi + 0x10], edx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x0012d9e4 : mov ebp, eax; bswap edx; mov [rcx], edx; mov edx, eax; call [rbx + 0x10]
0x0005d845 : add [rax - 0x77], cl; imul eax; push rdx; xor edi, edx; jmp [rsi - 0x70]
0x00110688 : lea edx, [rip + 0x5d162]; lea rax, [rip + 0x5d0fb]; cmovne rax, rdx; ret
0x00096efa : movq [rdi], mm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x0000f1dc : mov eax, [rax]; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x00063bfb : adc [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; pop r13; pop r14; ret
0x0009ca81 : xor eax, eax; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx
0x000b1807 : lea edx, [rip - 0xad]; test rax, rax; cmove rax, rdx; add rsp, 0x28; ret
0x00099737 : mov [rdi], ecx; mov [rdi + 8], edx; xor ch, ch; mov [rdi + 0xc], ch; ret
0x000d8edf : add [rax], al; add bh, al; add [rsi], al; add [rax], al; add cl, ch; ret
0x0001f792 : mov esi, edi; lea r14, [rdi + rax]; mov rbx, rax; mov rdi, r14; call rbp
0x00110667 : lea edx, [rip + 0x61573]; lea rax, [rip + 0x614fc]; cmovne rax, rdx; ret
0x001106e8 : lea rdx, [rip - 0x764af]; lea rax, [rip - 0x76576]; cmovne rax, rdx; ret
0x00063306 : mov [rbp], eax; mov [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret
0x00096d97 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x00136903 : mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi + 0x38]; call [rax + 0x20]
0x0009ca06 : xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx
0x0009580b : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x000eb192 : push rsi; or al, [rax]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0007dea7 : lea edx, [rip + 0xf3d43]; lea rax, [rip + 0xf3ccc]; cmovne rax, rdx; ret
0x0009ca07 : xor eax, eax; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx
0x00096eba : movq [rdi], mm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x0007da58 : lea edx, [rip + 0xefda2]; lea rax, [rip + 0xefd3b]; cmovne rax, rdx; ret
0x0015e03a : dec [rax - 0x75]; add [rax - 0x77], ecx; add cl, [rax - 0x77]; clc ; ret
0x0009657d : movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; mov [rdi + 0x20], cl; ret
0x00144a5a : add [rax], al; add [rax], al; add [rax - 0x246417], dl; jmp [rsi + 0x2e]
0x00134b79 : movups xmm[rsi], xmm0; mov rax, [rax + 0x40]; mov [rsi + 0x10], rax; ret
0x00095784 : mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x0000f2bc : mov eax, [rax]; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x00096295 : add [rsi + 0x2e], ah; nop [rax + rax]; mov dl, [rsi]; mov [rdi], dl; ret
0x0013bf10 : mov rax, [rdi + 8]; mov [rsp + 8], r8; lea rsi, [rsp + 0x10]; call [rax]
0x00169464 : sbb esi, ebx; bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper ; ret
0x000478cb : movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x27a]; add rax, rdi; jmp rax
0x00171c44 : add al, [rax]; add [rax - 0x77], cl; sal ebx, 1; movsb [rdi], [rsi]; ret
0x000b1727 : lea edx, [rip - 0x8d]; test rax, rax; cmove rax, rdx; add rsp, 0x28; ret
0x000921f7 : mov [rdx], eax; mov eax, [rcx + 3]; mov [rdx + 3], eax; mov rax, rdi; ret
0x0013348e : mov eax, [rbp + 8]; lea rsi, [rsp + 0xc]; mov rdi, rbp; call [rax + 0x48]
0x00088d4c : leave ; movzx eax, [rax + rcx]; movzx edx, [rdx + rcx]; sub eax, edx; ret
0x0001e5de : push rax; movups xmm[rdi + 0x60], xmm0; movups xmm[rdi + 0x70], xmm0; ret
0x0013b1f0 : mov [rsp + 0x38], rax; xor eax, eax; mov [rsp], 2; mov rdi, rsp; call rdx
0x000cec07 : add [rbx - 0x57cfd1e], al; add [rcx], ebx; rol [rbx - 0x3f7cfd20], 8; ret
0x0015bd93 : mov [rdx], rax; mov eax, [rcx + 5]; mov [rdx + 5], eax; mov rax, rdi; ret
0x000872a5 : mov [rdi], ax; movzx eax, [rsp - 6]; mov [rdi + 2], al; mov rax, rdi; ret
0x000ee0fd : add [rax], r8b; mov eax, [rdi + 0x108]; mov [rsi], eax; xor eax, eax; ret
0x0006a84f : mov rdx, r8; mov [rsp], r8; mov rsi, r13; mov rdi, rbx; call [rax + 0x78]
0x0006503c : mov r8, [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call [rax + 8]
0x0015be14 : mov [rdx], eax; mov rax, [rcx + 7]; mov [rdx + 7], rax; mov rax, rdi; ret
0x0014b490 : movsxd r9, [r11 + rdx*4]; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9
0x00128e9c : pop rax; xor edx, edx; mov rsi, r13; mov rdi, rbp; mov rcx, r14; call r10
0x0005d99b : add [rax], al; add [rax], al; add [rcx], dh; test [rax - 0x77], 0xf0; ret
0x0014511f : call [rax + 0x178]; mov [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret
0x000962e0 : mov ecx, [rsi]; mov dl, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dl; ret
0x0015bdf3 : mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; mov rax, rdi; ret
0x0007aff2 : push 1; add [rax], al; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax
0x0012dcbc : pop r8; mov eax, 1; mov [rbx + 0x68], rdx; pop rbx; pop rbp; pop r12; ret
0x00048c39 : lea rcx, [rip - 0x10f0]; movsxd rax, [rdi + rax*4]; add rax, rcx; jmp rax
0x0015bdc4 : mov [rdx], eax; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x0016351d : movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x001386a9 : add [rax], al; mov fs:[rbx], rax; mov rax, [rip + 0x291502]; pop rbx; ret
0x00138ef1 : mov rsi, r13; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xd0], 2; call rax
0x0007bd79 : mov [rbx + 0x20], eax; mov [rbx + 8], rsi; pop rbx; pop rbp; pop r12; ret
0x0015bdc3 : mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x00132b2c : add [rax - 0x77], cl; push r8; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x000c0238 : add [rax], al; add [rcx + 0x415d5bd0], cl; pop rsp; pop r13; pop r14; ret
0x00136ca4 : mov r9, rbx; lea r8, [rip - 0x707e]; mov esi, 9; mov rdi, rax; call [r10]
0x0014b8a9 : add eax, [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx
0x00060bdd : mov rax, rdi; or ebp, edx; mov [rbx], ebp; pop rbx; pop rbp; pop r12; ret
0x0012e980 : mov rax, [rsp + 0x10]; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax
0x0010fd72 : push rbx; adc [rax + rdx + 0x5b], dh; xor eax, eax; pop r12; pop rbp; ret
0x00136ad6 : mov rax, [rdi + 8]; lea rdx, [rsp + 0xc]; mov esi, 0xd; call [rax + 0x28]
0x00138529 : add [rax], al; mov fs:[rbx], rax; mov rax, [rip + 0x2917da]; pop rbx; ret
0x0009c00e : add [rax], al; mov rax, rbx; mov [r12], 0; pop rbx; pop rbp; pop r12; ret
0x0009a28e : add [rax], eax; add [rax - 0x77], cl; sal ebx, 1; movsb [rdi], [rsi]; ret
0x001450d7 : call [rax + 0x188]; mov [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret
0x0016eb60 : add [rax], al; add [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper ; ret
0x00139d3f : adc [r9], al; add [rax], al; add [rcx + rcx*4 - 9], cl; call [rax + 0x28]
0x00142520 : add [rax], al; add [rax - 0x75], cl; add eax, 0x288d56; call [rax + 0x28]
0x001385e9 : add [rax], al; mov fs:[rbx], rax; mov rax, [rip + 0x29162a]; pop rbx; ret
0x0015bdf4 : mov [rdx], eax; mov rax, [rcx + 6]; mov [rdx + 6], rax; mov rax, rdi; ret
0x0012cdc7 : sbb [r11 + 0x127703f8], r8b; lea rdx, [rip + 0x29cabb]; jmp [rdx + rax*8]
0x0003a254 : mov rsi, rbx; mov rdi, r14; sub r13, rbx; mov rdx, r13; call [r15 + 0x38]
0x0003f6fb : mov esi, edi; mov rdx, r13; mov rsi, r14; mov rdi, [rbp - 0xc0]; call rax
0x0007b40d : add [rax], al; add [rax - 0x77], cl; fimul [rcx + rcx*4 - 0x19]; call rax
0x00138ef2 : mov esi, ebp; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xd0], 2; call rax
0x001438f3 : add [rax], al; add [rax - 0x75], cl; add eax, 0x287983; call [rax + 0x28]
0x0005facc : mov ecx, esp; mov edx, ebp; mov rsi, r13; mov rdi, rbx; call [r14 + 0x48]
0x00068f2c : add [rax], al; add [rax], al; mov eax, [rdi]; shr eax, 5; and eax, 1; ret
0x0015bdd4 : mov [rdx], eax; mov rax, [rcx + 5]; mov [rdx + 5], rax; mov rax, rdi; ret
0x0014cefc : add [rax], al; add [rax], al; mov rdx, [rsi - 8]; mov [rdi - 8], rdx; ret
0x000b0509 : add eax, ecx; mov [rsp + 0x40], eax; mov rsi, rbp; mov rdi, r12; call rbx
0x0006bed3 : add [rax], al; add [rcx + 0x415d5b13], cl; pop rsp; pop r13; pop r14; ret
0x0000f465 : movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x00095661 : mov ecx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; ret
0x0014b8a8 : add r8d, [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx
0x0000fb1c : mov eax, [rbp + 8]; sub eax, [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret
0x000cced2 : add [rax], al; mov [rax], ebp; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x0008fc79 : add [rax], al; lea rax, [rdi + rax]; cmp [rax], sil; cmovne rax, rdx; ret
0x0014bc34 : inc [rax + rax]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099611 : adc bl, al; nop [rax]; nop cs:[rax + rax]; xor ch, ch; mov [rdi], ch; ret
0x0006a08a : sub r12, r14; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call [rax + 0x40]
0x0011f24a : mov [rbp + 0x11], bl; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0009627c : push rax; add al, 0; add bl, al; nop [rax + rax]; nop cs:[rax + rax]; ret
0x0000f5b0 : add [rax - 0x75], cl; movzx eax, [rax + rdi*2 + 0x100]; and eax, esi; ret
0x0015bdb3 : mov [rdx], rax; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x00102fb0 : add [rbx + 0xc], dh; mov rdx, [rip + 0x2ca28e]; add [rdx + rax*2], 1; ret
0x00000c4a : add [rax], al; nop [rax]; mov rax, [rip + 0x3c8f41]; add rax, fs:[0]; ret
0x00142484 : add [rax], al; mov rax, [rip + 0x288df3]; mov rdi, rdx; call [rax + 0x20]
0x0005fd9e : mov ecx, esp; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x48]
0x0000f505 : movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x00097d7a : movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret
0x000c0217 : add [rbx - 0x77], bl; rcr [rbp + 0x41], 1; pop rsp; pop r13; pop r14; ret
0x00152c2c : add [rax], al; add [rax], al; mov edx, [rsi - 4]; mov [rdi - 4], edx; ret
0x0015be13 : mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; mov rax, rdi; ret
0x000630d5 : push rax; sub [rax - 0x77], cl; push rax; sbb [rcx + 0x5bc0310b], cl; ret
0x0015bd94 : mov [rdx], eax; mov eax, [rcx + 5]; mov [rdx + 5], eax; mov rax, rdi; ret
0x0012caea : add [rax - 0x75], cl; or [r14 + 8], r15b; mov rdi, rbp; call [rax + 0x30]
0x0013b1f1 : mov [rsp + 0x38], eax; xor eax, eax; mov [rsp], 2; mov rdi, rsp; call rdx
0x0009229b : adc eax, [rdx]; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x00177bdc : dec [rdi]; test ah, dl; add eax, [rax]; add [rcx], dh; dec [rax + 9]; ret
0x0015bda4 : mov [rdx], eax; mov eax, [rcx + 6]; mov [rdx + 6], eax; mov rax, rdi; ret
0x00063154 : push rax; add [rax], al; add [rax], al; mov [rax + 0x48], 0; pop rbx; ret
0x000aff72 : add edi, 1; pop rbx; mov [r11 + 0xc], edi; pop rbp; pop r12; pop r14; ret
0x0000f425 : movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x000871d5 : add rax, rdi; mov [rdi], dx; movzx edx, [rsp - 6]; mov [rdi + 2], dl; ret
0x000e29f1 : mov ecx, [rip + 0x2ea341]; mov [rdx], ecx; pop rdx; pop rcx; pop rbx; ret
0x00096321 : mov ecx, [rsi]; mov dl, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dl; ret
0x00095620 : mov ecx, [rsi]; mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; ret
0x00048c3a : lea ecx, [rip - 0x10f0]; movsxd rax, [rdi + rax*4]; add rax, rcx; jmp rax
0x00022007 : add [rax], al; add [rip + 0x3ad33f], 1; add rsp, 8; pop rbx; pop rbp; ret
0x0015bd04 : mov [rdx], eax; mov rax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x001355f6 : add [rbx - 0x37f0efc0], cl; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0001e6a0 : add [rax], al; shl rax, cl; test [rdi], rax; setne al; movzx eax, al; ret
0x0003f6fa : mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, [rbp - 0xc0]; call rax
0x0013562e : add [rbx - 0x37f0f3c0], cl; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x00064739 : pop rax; mov rax, [rsi + 8]; sar r8, 2; mov [rsi], rax; call [rbp + 0x30]
0x0003a6cb : mov rsi, r11; sub r15, r11; mov rdi, r14; mov rdx, r15; call [rax + 0x38]
0x0012d813 : adc [rax - 0x75], cl; or [r9 + r9*4 - 0x1a], cl; mov rdi, rbx; call [rax]
0x00060bde : mov eax, edi; or ebp, edx; mov [rbx], ebp; pop rbx; pop rbp; pop r12; ret
0x000b01d2 : add [rax], al; add [rax - 0x77], cl; sal [rbp + 5], 1; add rsp, 0x28; ret
0x0003a255 : mov esi, ebx; mov rdi, r14; sub r13, rbx; mov rdx, r13; call [r15 + 0x38]
0x0001c8bf : add [rbx + 0xd102444], cl; add [rax - 0x3f000001], al; shr eax, 0x1f; ret
0x00134f2c : stosb [rdi], al; mov rdi, [r15]; mov rax, [rdi + 0x38]; call [rax + 0x18]
0x000987aa : neg [rdi + rcx]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0007bd78 : mov [rbx + 0x20], rax; mov [rbx + 8], rsi; pop rbx; pop rbp; pop r12; ret
0x0014b7e9 : add eax, [rax + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx
0x00096f1a : movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x00052af2 : mov r11d, [rbp - 0x5a0]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0012615a : add eax, [rax]; add [rax - 0x75], cl; push rax; sbb [rax - 0x77], cl; ret
0x0016d4d0 : add [rax], al; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper ; ret
0x00134cd7 : add [rbx - 0x37f0a7b9], cl; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0014559d : add [rax], eax; add [rax - 0x77], cl; add ebx, [rax + 0x5a]; pop rbx; ret
0x00176828 : dec [rax - 0x73]; xchg eax, ecx; add [rax], al; add [rcx + 0x21], cl; ret
0x0009a0b0 : add [rax], eax; add [rcx], dh; ror [rax], cl; leave ; cmove rax, rdx; ret
0x0016d22e : mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper ; ret
0x000f7f7e : add [rax], al; xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0015bda3 : mov [rdx], rax; mov eax, [rcx + 6]; mov [rdx + 6], eax; mov rax, rdi; ret
0x000703ed : add [rax], al; add [rbx + 0x359b9e05], cl; add [rbp - 0xcf98740], al; ret
0x000920f1 : add [rsi + 0xf], ah; adc al, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret
0x000b0508 : add eax, r9d; mov [rsp + 0x40], eax; mov rsi, rbp; mov rdi, r12; call rbx
0x0003a6cc : mov esi, ebx; sub r15, r11; mov rdi, r14; mov rdx, r15; call [rax + 0x38]
0x0009227b : adc eax, [rdx]; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x0016d22f : mov edi, esi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper ; ret
0x00138dde : add [rax], al; mov rax, [r15 + 8]; mov rsi, rbp; mov rdi, r15; call [rax]
0x00138471 : add [rax], al; mov fs:[rbx], rax; mov rax, [rip + 0x29183a]; pop rbx; ret
0x00134caf : add [rbx - 0x37f0b7b9], cl; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x000691de : add [rax], al; mov rbx, r12; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x00096320 : mov rcx, [rsi]; mov dl, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dl; ret
0x0012b9d0 : add [rax], al; mov esi, 4; mov rdi, rbp; lea r9, [rsp + 0x20]; call [rax]
0x00171ecb : dec [rax + 0x6f]; add [rdx - 0xf], esp; dec [rax + 0x6f]; jmp [r10 - 0xf]
0x00075d84 : add [rax - 0x77], cl; cmp bl, al; nop [rax]; mov [rip + 0x35689e], 0; ret
0x0015bdd3 : mov [rdx], rax; mov rax, [rcx + 5]; mov [rdx + 5], rax; mov rax, rdi; ret
0x0006a08b : sub esp, esi; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call [rax + 0x40]
0x000871d6 : add eax, edi; mov [rdi], dx; movzx edx, [rsp - 6]; mov [rdi + 2], dl; ret
0x0006e83e : add [rax], al; lea rdx, [rax + 0x60]; mov rax, [rdi]; mov [rdx], rax; ret
0x0013348d : mov rax, [rbp + 8]; lea rsi, [rsp + 0xc]; mov rdi, rbp; call [rax + 0x48]
0x0003c029 : movsxd rax, [rdi + rax*4]; lea rdi, [rip - 0x1624]; add rax, rdi; jmp rax
0x00096bfc : add al, bl; nop ; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 3]; ret
0x000e0749 : add cl, [rax + 0x16893847]; mov [rsi + 8], rcx; mov [rsi + 0x10], r8; ret
0x0015bd03 : mov [rdx], rax; mov rax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x0003a50f : xchg [rax + 1], cl; clc ; mov r11, rdx; xor r8d, r8d; mov r9d, 1; jmp rax
0x00095660 : mov rcx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; ret
0x0012e981 : mov eax, [rsp + 0x10]; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax
0x0006a5cd : add [rax], al; sub rbp, rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret
0x0001d1ea : add [rax], al; add [rax], al; add [rax - 0x3f28f09a], dl; and eax, 8; ret
0x00096bf1 : mov ecx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x0014ba46 : add [rip + 0x14634900], eax; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx
0x0015bdb4 : mov [rdx], eax; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x00136ad7 : mov eax, [rdi + 8]; lea rdx, [rsp + 0xc]; mov esi, 0xd; call [rax + 0x28]
0x0013b46a : add [rbp + 0x4b], esi; mov rax, [rdi + 8]; lea rsi, [rsp + 8]; call [rax]
0x00139015 : add [rax], al; add [rcx + rcx*4 - 2], cl; mov rdi, r14; call [rax + 0x18]
0x0000192e : xor ecx, ecx; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx
0x000965bf : add [rcx + 0x66c3ff57], cl; nop ; nop cs:[rax + rax]; mov [rdi], edx; ret
0x0006cba9 : add [rax - 0x39], cl; push r8; add [rax], al; add [rax], al; pop rbx; ret
0x00135847 : add [rax], al; xor eax, eax; mov rsi, [rsp + 0x10]; mov rdi, rbp; call rbx
0x000c8ef7 : lea rdx, [rip + 0xc6976]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0009a730 : lea rsi, [rip + 0xf3f19]; movsxd rax, [rsi + rdi*4]; add rax, rsi; jmp rax
0x00176456 : lea edx, [rip + 0x265d4]; movsxd r12, [rdx + r12*4]; add rdx, r12; jmp rdx
0x0009a0af : add [rcx], al; add [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret
0x00096c61 : mov ecx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; lea rax, [rdi + 8]; ret
0x001334d8 : mov rax, [rbp + 8]; lea rsi, [r12 + 0x18]; mov rdi, rbp; call [rax + 0x48]
0x0014ca06 : int1 ; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0017094d : lea r11, [rip + 0x2b15c]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000025cb : add [rax], al; add [rax], al; add [rax - 0x75], cl; add eax, 0x3ccc31; ret
0x00096c10 : mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x001712da : mov esi, [rsi]; mov ecx, [rcx - 4]; mov [rdi], esi; mov [r9 - 4], ecx; ret
0x000ca898 : lea rdx, [rip + 0xc50c5]; movsxd rax, [rdx + r15*4]; add rax, rdx; jmp rax
0x00103d8f : mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x00148b0e : push rsp; add al, 0; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00170809 : lea r11, [rip + 0x2b2a0]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00170888 : lea ebx, [rip + 0x2b222]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016f1da : lea ebx, [rip + 0x2c790]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00170d19 : lea r11, [rip + 0x2ad90]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000ddfe6 : lea esi, [rip + 0xb1f50]; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x0016f764 : lea ebx, [rip + 0x2c206]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x001712c6 : mov rsi, [rsi]; mov rcx, [rcx - 8]; mov [rdi], rsi; mov [r9 - 8], rcx; ret
0x0000f3de : mov rax, [rax]; mov rax, [rax + 0x48]; mov eax, [rax + rdi*4 + 0x200]; ret
0x001383e4 : mov [rdx + 0x29], ch; add [rax + 0x39], cl; sal [rbx + rax + 0x5b], 1; ret
0x0007ad81 : call [rip + 0x351901]; mov [rip + 0x3518eb], 1; mov eax, ebx; pop rbx; ret
0x0006253f : mov eax, [rbp + 0x28]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax
0x0000f5b2 : mov eax, [rax + 0x40]; movzx eax, [rax + rdi*2 + 0x100]; and eax, esi; ret
0x00170445 : lea r11, [rip + 0x2b664]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x001334d9 : mov eax, [rbp + 8]; lea rsi, [r12 + 0x18]; mov rdi, rbp; call [rax + 0x48]
0x000f7f38 : add [rax], al; add [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0006bc72 : add [rax], al; mov rdx, r12; mov rsi, r13; mov rdi, rbx; call [r14 + 0x78]
0x0012fb56 : add eax, [rbp + 0x481574c0]; add esp, 8; mov eax, 1; pop rbx; pop rbp; ret
0x00138c49 : add [rax], al; mov [rsp + 0x18], 1; mov [rsp + 0x20], 5; call [rax + 0x18]
0x00170446 : lea ebx, [rip + 0x2b664]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0009a731 : lea esi, [rip + 0xf3f19]; movsxd rax, [rsi + rdi*4]; add rax, rsi; jmp rax
0x00175803 : lea ebp, [rip + 0x271e7]; movsxd rax, [rbp + rax*4]; add rbp, rax; jmp rbp
0x000c580c : lea rdx, [rip + 0xc9bb1]; movsxd rax, [rdx + rbx*4]; add rax, rdx; jmp rax
0x000c88f7 : lea edx, [rip + 0xc6ef7]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0000f3bf : mov eax, [rax]; mov rax, [rax + 0x58]; mov eax, [rax + rdi*4 + 0x200]; ret
0x000009cb : add [rax], al; add [rax], al; add [rax - 0x73], cl; add eax, 0x193971; ret
0x00131ee3 : mov rax, [r12 + 0xd0]; mov rsi, [rsp + 0x18]; mov rdi, rbx; call [rax + 8]
0x00170887 : lea r11, [rip + 0x2b222]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00096c60 : mov rcx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; lea rax, [rdi + 8]; ret
0x000260ce : push rdx; idiv bh; dec [rax - 0x77]; sbb cl, ch; idiv dil; jmp [rsi + 0xf]
0x00152276 : neg [rsp + rax + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx
0x0013bafd : mov eax, [rax + 0x10]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax
0x00170773 : lea ebx, [rip + 0x2b337]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000b0ba7 : add [rax], al; mov [rsp + 0xa8], rdx; mov rsi, rbp; mov rdi, r12; call rbx
0x000eb284 : lea edx, [rip + 0xa560e]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x000bf4fc : mov edx, [rsp + 0x68]; mov rsi, [rsp + 0x60]; mov rdi, [rsp + 8]; call r12
0x0012da85 : mov edi, [rdi]; add r14, r8; sub edx, r8d; mov rsi, r14; call [r15 + 0x40]
0x00170344 : lea r11, [rip + 0x2b765]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00069768 : add [rax], al; mov rdx, r14; mov rsi, r13; mov rdi, rbx; call [r15 + 0x40]
0x0005e698 : add [rax], al; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call [r15 + 0x38]
0x0001f7a6 : add [rax], al; mov rdx, r12; mov rsi, r14; mov rdi, [rsp + 0x18]; call rbp
0x000d7e0c : lea rdi, [rip + 0xb809d]; movsxd rax, [rdi + rax*4]; add rax, rdi; jmp rax
0x00043a09 : add [rbx - 0x76b7fe3d], eax; sub [r8 + 0x468b4102], r9b; add al, 0x39; ret
0x0014f136 : int3 ; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000009bb : add [rax], al; add [rax], al; add [rax - 0x73], cl; add eax, 0x191b34; ret
0x00136993 : movq mm0, [rip + 0x64716]; movaps xmm[rsp + 0x20], xmm0; call [rax + 0x28]
0x0001510f : add cl, [rdi]; test bl, bh; sbb al, [rax]; add [rbx - 0x7bf0fc06], al; ret
0x000f3860 : mov rax, [r12 + 0x10]; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0006f5b9 : add [rcx], al; add [rax], al; add [rax - 0x77], cl; add eax, 0x35a9f3; ret
0x00131ee4 : mov eax, [rsp + 0xd0]; mov rsi, [rsp + 0x18]; mov rdi, rbx; call [rax + 8]
0x0006e83d : add [rax], r8b; lea rdx, [rax + 0x60]; mov rax, [rdi]; mov [rdx], rax; ret
0x00131ec5 : mov eax, [rsp + 0xd0]; mov [r12 + 0xa8], ebp; bswap ebp; call [rax + 0x18]
0x00170d93 : lea r11, [rip + 0x2ad16]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00064993 : mov rax, [rax + 0x60]; sar r8, 2; mov [rsp + 0x30], rax; call [r13 + 0x30]
0x0016f143 : lea ebx, [rip + 0x2c827]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016f258 : lea ebx, [rip + 0x2c712]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00134de3 : mov eax, [rsp + 0x70]; mov [r12 + 0x48], ebp; bswap ebp; call [rax + 0x18]
0x00043a08 : add [rbx - 0x76b7fe3d], rax; sub [r8 + 0x468b4102], r9b; add al, 0x39; ret
0x000fbeff : mov edi, ebx; mov rax, rbp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax
0x0012c970 : movdqu xmm0, xmm[rdi + 0x38]; mov [rsi], 9; movups xmm[rsi + 8], xmm0; ret
0x0016f44f : lea r11, [rip + 0x2c51a]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000c88f6 : lea rdx, [rip + 0xc6ef7]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0006eb1b : add [rax], al; add [rax], al; add [rax - 0x75], cl; add eax, 0x35c869; ret
0x0016f257 : lea r11, [rip + 0x2c712]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0000f3df : mov eax, [rax]; mov rax, [rax + 0x48]; mov eax, [rax + rdi*4 + 0x200]; ret
0x0005fd9d : mov ecx, r12d; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x48]
0x00170345 : lea ebx, [rip + 0x2b765]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0001dab7 : add [rax], al; add [rax - 0x77], cl; sal [rbp + 8], 1; add rsp, 0x148; ret
0x00170577 : lea ebx, [rip + 0x2b533]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0013bafc : mov rax, [rax + 0x10]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax
0x0017080a : lea ebx, [rip + 0x2b2a0]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x001183eb : add al, 0; add [rcx + rcx*4 - 6], cl; mov rsi, r14; mov rdi, r13; call rax
0x0007c7f2 : add [rax], al; add cl, ch; cmpsb [rsi], [rdi]; xor bh, cl; jmp [rsi + 0xf]
0x00003b9b : movsx edx, [rdx + 0x1b]; mov [rax + 0x50], ecx; mov [rax + 0x54], edx; ret
0x00138f85 : add [rax], al; mov [rsp + 0xb0], 1; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x0006a850 : mov edx, eax; mov [rsp], r8; mov rsi, r13; mov rdi, rbx; call [rax + 0x78]
0x000ddfe5 : lea rsi, [rip + 0xb1f50]; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x00170a7f : lea r11, [rip + 0x2b02a]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00138be5 : add [rax], al; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; call [rax + 0x18]
0x0012beef : push [rsp + 0xe8]; mov [rsp + 0x18], r10; lea r9, [rsp + 0x40]; call [rax]
0x001600e2 : add [rax - 0x77], ecx; add cl, [rbx + 0x42890541]; add eax, 0x8428d48; ret
0x001523f3 : add [rax], 0; add [rdi], cl; cmp [rbx - 1], -1; dec [rax - 0x7f]; ret 0x80
0x000404f0 : lea eax, [rdi - 1]; xor edx, edx; div r8d; add r9d, eax; mov eax, r9d; ret
0x00170c8b : lea ebx, [rip + 0x2ae1f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016f6e9 : lea r11, [rip + 0x2c280]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0013689e : add [rax], al; add al, ch; stosb [rdi], al; mov ch, 0xee; jmp [rsi + 0x2e]
0x000ea95f : lea rdx, [rip + 0xa5cf2]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00134dfa : mov eax, [rsp + 0x70]; mov rsi, [rsp + 0x18]; mov rdi, rbx; call [rax + 8]
0x0016976c : add [rax], al; add [rax], al; bsr eax, eax; add rax, rdi; vzeroupper ; ret
0x00134df9 : mov rax, [r12 + 0x70]; mov rsi, [rsp + 0x18]; mov rdi, rbx; call [rax + 8]
0x0016f450 : lea ebx, [rip + 0x2c51a]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000eb18f : lea edx, [rip + 0xa5643]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x001345d5 : lea edx, [rip + 0x5da55]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0013d130 : add [rax], al; add [rax], al; mov [rdi + 0x20], 0; mov [rdi + 8], rax; ret
0x00060126 : add [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x58]
0x0017094e : lea ebx, [rip + 0x2b15c]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0012c922 : adc [rax], al; add [rax], al; mov [rsi + 8], 1; mov [rsi + 0x10], rax; ret
0x0005ff59 : add [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x58]
0x000eac4b : lea rdx, [rip + 0xa5ac6]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x000691df : add [rcx + rcx*4 - 0x1d], cl; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0013553f : add bl, dh; movq mm0, [rdi + 0x30]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x0016ee15 : lea r11, [rip + 0x2cb54]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016ef46 : lea r11, [rip + 0x2ca23]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0012c938 : movdqu xmm0, xmm[rdi + 0x20]; mov [rsi], 6; movups xmm[rsi + 8], xmm0; ret
0x0005facb : mov ecx, r12d; mov edx, ebp; mov rsi, r13; mov rdi, rbx; call [r14 + 0x48]
0x000abc31 : xor r8d, r8d; mov rcx, r13; mov rdi, [r14]; lea r9, [rsp + 0x30]; call r12
0x0016f65a : lea r11, [rip + 0x2c30f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000bf4fb : mov rdx, [rsp + 0x68]; mov rsi, [rsp + 0x60]; mov rdi, [rsp + 8]; call r12
0x000d7e0d : lea edi, [rip + 0xb809d]; movsxd rax, [rdi + rax*4]; add rax, rdi; jmp rax
0x00170d1a : lea ebx, [rip + 0x2ad90]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0012da84 : mov rdi, [r15]; add r14, r8; sub edx, r8d; mov rsi, r14; call [r15 + 0x40]
0x0010d193 : add [rax], 0; add [rax], al; add rsp, 8; mov eax, 7; pop rbx; pop rbp; ret
0x00018756 : add cl, [rdi]; test bl, bh; sbb [rax], al; add [rbx - 0x7bf0fc06], al; ret
0x00069f3c : mov [rsp + 0x90], edx; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x001322f5 : mov [r12 + 0x98], edx; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x000627be : mov rax, [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax
0x0007d8e8 : mov [rbp], rbx; xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0016ed06 : lea r11, [rip + 0x2cc63]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0005ff2f : add [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [r13 + 0x58]
0x00069f3b : mov [r12 + 0x90], rdx; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x000eb18e : lea rdx, [rip + 0xa5643]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x000eb44d : lea rdx, [rip + 0xa5504]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00037519 : mov dh, 4; adc [rax - 0x7b], cl; dec [rax + 0x48e57506]; mov eax, esi; ret
0x000eb283 : lea rdx, [rip + 0xa560e]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x000627bf : mov eax, [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax
0x0003377e : add [rax], al; adc [rax], al; or rsi, rax; mov eax, 1; mov [rdi], rsi; ret
0x0016ee16 : lea ebx, [rip + 0x2cb54]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0012dcbd : pop rax; mov eax, 1; mov [rbx + 0x68], rdx; pop rbx; pop rbp; pop r12; ret
0x000ea960 : lea edx, [rip + 0xa5cf2]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0016f1d9 : lea r11, [rip + 0x2c790]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016f65b : lea ebx, [rip + 0x2c30f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00170576 : lea r11, [rip + 0x2b533]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000f3861 : mov eax, [rsp + 0x10]; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0009c832 : xor r8d, r8d; mov rcx, r13; mov rdi, [r14]; lea r9, [rsp + 0x28]; call r12
0x00134c6f : add bl, dh; movq mm0, [rdi + 0x1c]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x000872a6 : mov [rdi], eax; movzx eax, [rsp - 6]; mov [rdi + 2], al; mov rax, rdi; ret
0x0000f5b1 : mov rax, [rax + 0x40]; movzx eax, [rax + rdi*2 + 0x100]; and eax, esi; ret
0x00152dbc : add [rax], al; add [rax], al; movzx edx, [rsi - 1]; mov [rdi - 1], dl; ret
0x0005f7b0 : xchg [rbx + 0x48000000], bh; mov edx, ebx; mov rsi, r12; call [r13 + 0x38]
0x0016ed07 : lea ebx, [rip + 0x2cc63]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0007d8e9 : mov [rbp], ebx; xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x00170772 : lea r11, [rip + 0x2b337]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000c580d : lea edx, [rip + 0xc9bb1]; movsxd rax, [rdx + rbx*4]; add rax, rdx; jmp rax
0x000eac4c : lea edx, [rip + 0xa5ac6]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0016f31e : lea ebx, [rip + 0x2c64c]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0006804b : add [rax], 0; add [rax - 0x77], cl; imul eax; mov rdi, r9; jmp [rsi + 0xf]
0x000eb44e : lea edx, [rip + 0xa5504]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x000abc32 : xor eax, eax; mov rcx, r13; mov rdi, [r14]; lea r9, [rsp + 0x30]; call r12
0x0012af98 : mov rax, [rbx + 0x20]; mov rsi, [rsp + 0x10]; mov rdi, rbp; call [rax + 8]
0x0012afc3 : add [rax], al; xor eax, eax; mov rsi, [rsp + 0x18]; mov rdi, rbp; call r14
0x0006253e : mov rax, [rbp + 0x28]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax
0x00134de2 : mov rax, [r12 + 0x70]; mov [r12 + 0x48], ebp; bswap ebp; call [rax + 0x18]
0x0016f6ea : lea ebx, [rip + 0x2c280]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0004a286 : adc al, 0; movzx eax, al; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x001355d7 : add [rax], al; add [rbx - 0x37f0fe18], al; mov [rdx], eax; mov eax, 1; ret
0x0009225c : add ah, [rsi - 0x75]; or [r14 - 0x77], spl; or [rax - 0x77], cl; clc ; ret
0x0006503d : mov eax, [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call [rax + 8]
0x0012bdba : sub rax, r12; mov [rbp + 0x18], rax; mov rax, [rbx + 8]; call [rax + 0x28]
0x00170d94 : lea ebx, [rip + 0x2ad16]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00139d40 : adc [rcx], al; add [rax], al; add [rcx + rcx*4 - 9], cl; call [rax + 0x28]
0x00170c8a : lea r11, [rip + 0x2ae1f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0010ae73 : add [rcx], ch; fcomp [rbx + 0x5d]; pop r12; pop r13; pop r14; pop r15; ret
0x0016f142 : lea r11, [rip + 0x2c827]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016f763 : lea r11, [rip + 0x2c206]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016f31d : lea r11, [rip + 0x2c64c]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000c8ef8 : lea edx, [rip + 0xc6976]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x000f7b60 : mov [rdi], 0; mov [rip + 0x2d53f7], cl; mov rax, rdi; mov [r8 - 1], 0; ret
0x0006e297 : add [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call [rax + 0x58]
0x00152d3c : add [rax], al; add [rax], al; movzx edx, [rsi - 2]; mov [rdi - 2], dx; ret
0x00175802 : lea rbp, [rip + 0x271e7]; movsxd rax, [rbp + rax*4]; add rbp, rax; jmp rbp
0x0000f3be : mov rax, [rax]; mov rax, [rax + 0x58]; mov eax, [rax + rdi*4 + 0x200]; ret
0x0012af99 : mov eax, [rbx + 0x20]; mov rsi, [rsp + 0x10]; mov rdi, rbp; call [rax + 8]
0x00111f52 : sbb [rax - 9], cl; cmc ; mov rbx, rax; mov rax, rbx; pop rbx; pop rbp; ret
0x001345d4 : lea rdx, [rip + 0x5da55]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0006f599 : add [rcx], al; add [rax], al; add [rax - 0x77], cl; add eax, 0x35aa0b; ret
0x0009c833 : xor eax, eax; mov rcx, r13; mov rdi, [r14]; lea r9, [rsp + 0x28]; call r12
0x00136ca5 : mov ecx, ebx; lea r8, [rip - 0x707e]; mov esi, 9; mov rdi, rax; call [r10]
0x000337a0 : sub eax, ecx; shl rsi, cl; mov [rdi], rsi; mov [rdx], eax; mov eax, 1; ret
0x000fbefe : mov rdi, rbx; mov rax, rbp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax
0x00170a80 : lea ebx, [rip + 0x2b02a]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00033884 : add [rcx], cl; or edx, eax; mov [rsp - 4], edx; movss xmm0, [rsp - 4]; ret
0x00139013 : add [rax], 0; add [rax], al; mov rsi, r15; mov rdi, r14; call [rax + 0x18]
0x0012bdbb : sub eax, esp; mov [rbp + 0x18], rax; mov rax, [rbx + 8]; call [rax + 0x28]
0x001322f6 : mov [rsp + 0x98], edx; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x000ca899 : lea edx, [rip + 0xc50c5]; movsxd rax, [rdx + r15*4]; add rax, rdx; jmp rax
0x00176455 : lea rdx, [rip + 0x265d4]; movsxd r12, [rdx + r12*4]; add rdx, r12; jmp rdx
0x0012c9c2 : adc [rax], al; add [rax], al; mov [rsi + 8], 0; mov [rsi + 0x10], rax; ret
0x00069769 : add [rcx + rcx*4 - 0xe], cl; mov rsi, r13; mov rdi, rbx; call [r15 + 0x40]
0x00072ed7 : mov [rsp + 0x28], rsi; mov [rsp + 0x18], r11; mov [rsp + 8], rax; call rcx
0x00072ed8 : mov [rsp + 0x28], esi; mov [rsp + 0x18], r11; mov [rsp + 8], rax; call rcx
0x00131ec4 : mov rax, [r12 + 0xd0]; mov [r12 + 0xa8], ebp; bswap ebp; call [rax + 0x18]
0x00135527 : add bl, dh; movq mm0, [rdx]; mov eax, 1; movups xmm[rdi + 0x30], xmm0; ret
0x00134571 : xor eax, eax; mov rax, [rdi + 8]; lea rsi, [rsp + 0x10]; call [rax + 0x10]
0x001451b3 : add [rax], al; add [rbp + 0x28], dh; mov rax, [rip + 0x28a019]; call [rax]
0x00064994 : mov eax, [rax + 0x60]; sar r8, 2; mov [rsp + 0x30], rax; call [r13 + 0x30]
0x00075f8e : call [rax + 0x18c48348]; xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret
0x0016ef47 : lea ebx, [rip + 0x2ca23]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x001712c7 : mov esi, [rsi]; mov rcx, [rcx - 8]; mov [rdi], rsi; mov [r9 - 8], rcx; ret
0x0003b43f : lea esi, [rip + 0x15134b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0016e744 : adc [rcx], edx; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper ; ret
0x0005bb10 : lea ecx, [rip + 0x131f52]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0003b3e3 : lea eax, [rip + 0x151327]; movsxd rax, [rax + rdx*4]; add rax, rsi; jmp rax
0x0003afb5 : lea esi, [rip + 0x1517d5]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0003b07f : lea esi, [rip + 0x15170b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0000f2ba : mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x0013b851 : mov bh, 6; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0001f7e7 : add [rcx + rax - 5], cl; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call rbp
0x000956a1 : mov ecx, [rsi]; mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; ret
0x000527b6 : lea ecx, [rip + 0x13a978]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0014f3d6 : leave ; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0001020f : lea rdx, [rip + 0x177ffe]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00153121 : mov edx, [rsi + 1]; mov rcx, [rsi]; mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x0003cc1c : lea eax, [rip + 0x14faee]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x0000f21a : mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x00069b7b : mov edx, [rbx + 0x40]; sub rdx, rsi; mov [rsp], rcx; mov rdi, rbx; call rax
0x0007991d : lea rdx, [rip + 0x1144ec]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x000527b5 : lea rcx, [rip + 0x13a978]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x00023663 : xor [rbp + 0x3a], esp; add bh, dh; fsub [rcx + rcx*4 + 2]; mov rax, -1; ret
0x00152fd1 : mov edx, [rsi + 4]; mov rcx, [rsi]; mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x001122ef : add [rax], dl; add [rax], al; lea rdx, [rip + 0x5fdf6]; cmove rax, rdx; ret
0x0008738c : add [rax], al; add [rax], al; mov [rdi], ecx; lea rax, [rdi + rax - 1]; ret
0x0008725a : lea rax, [rip + 0x106c47]; movsxd rdx, [rax + rdx*4]; add rdx, rax; jmp rdx
0x000474f5 : lea eax, [rip + 0x145595]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x00095671 : mov ecx, [rsi]; mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; ret
0x0005f022 : add [rax], al; add [rcx + rcx*4 - 0xa], cl; mov rdi, rbp; call [rax + 0x38]
0x00069b7a : mov rdx, [rbx + 0x40]; sub rdx, rsi; mov [rsp], rcx; mov rdi, rbx; call rax
0x001532e0 : mov edx, [rsi + 1]; mov ecx, [rsi]; mov [rdi + 1], edx; mov [rdi], ecx; ret
0x0006bc73 : add [rcx + rcx*4 - 0x1e], cl; mov rsi, r13; mov rdi, rbx; call [r14 + 0x78]
0x001523f4 : add [rax], al; add [rdi], cl; cmp [rbx - 1], -1; dec [rax - 0x7f]; ret 0x80
0x0012e732 : mov rdi, [r13]; add r14, rbx; sub edx, ebx; mov rsi, r14; call [r13 + 0x40]
0x0012db76 : mov rdi, [r15]; add r14, rax; sub edx, eax; mov rsi, r14; call [r15 + 0x40]
0x0003b022 : lea rsi, [rip + 0x151767]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x00047cee : lea rax, [rip + 0x144e1b]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x00113a57 : add [rax], al; add [rax], al; nop [rax + rax]; mov eax, edi; bswap eax; ret
0x00010042 : lea rdx, [rip + 0x178173]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x001530b0 : mov rdx, [rsi + 2]; mov rcx, [rsi]; mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x00139f6e : lea r12, [rbp + 0x10]; mov [rbp + 0x10], 0; mov rdi, r12; call [rax + 0x28]
0x00000ab5 : add [rax], eax; add [rdi], cl; test [rdi + rdi*8 - 1], ch; jmp [rsi - 0x70]
0x0008725b : lea eax, [rip + 0x106c47]; movsxd rdx, [rax + rdx*4]; add rdx, rax; jmp rdx
0x000474f4 : lea rax, [rip + 0x145595]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x0001fbef : add [rbp + 1], cl; std ; mov rdx, r12; mov rsi, r13; mov rdi, rbx; call rbp
0x00139f6f : lea esp, [rbp + 0x10]; mov [rbp + 0x10], 0; mov rdi, r12; call [rax + 0x28]
0x0003b139 : add [rax], al; add [rcx - 0x48], al; add [rax], eax; add [rax], al; jmp rax
0x0007d861 : add [rax], al; add [rax], dl; lea rax, [rip + 0x1c274]; cmove rax, rdx; ret
0x0007df1c : add eax, 1; mov [rbp], rax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x0016f25a : adc al, bh; add al, [rax]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000fc40f : add [rax - 0x75], cl; xor ecx, [rcx + rcx*4 - 0x19]; mov r13, rbx; call rbp
0x0003aa96 : lea rsi, [rip + 0x151cf3]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x00137311 : add al, 0; add [rax], al; lea rdx, [rip + 0x3f04]; mov rdi, rbx; call [rax]
0x0012d21f : mov edi, ebp; call [rax + 0x20]; pop rbx; mov eax, 1; pop rbp; pop r12; ret
0x0001b487 : lea rdi, [rip + 0x16cdc2]; movsxd rdx, [rdi + rdx*4]; add rdx, rdi; jmp rdx
0x0001cc5d : add [rax], al; add [rax + 0x7110ff2], al; and rax, rdx; movq xmm0, rax; ret
0x0005c2c5 : lea edx, [rip + 0x1319e1]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0014279d : mov ch, [rax]; add [rcx + rcx*4 - 0x32], cl; mov rdi, r8; call [rax + 0x18]
0x0008ae2b : add [rax], 0; add [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret
0x000956b0 : mov rcx, [rsi]; mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; ret
0x0003cc1b : lea rax, [rip + 0x14faee]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x0011e10e : add al, [rbx - 0x79f0f008]; cwde ; add [rax], al; add [rcx - 0x77], al; ret
0x000009c4 : sbb ebx, [rcx]; add bl, al; nop [rax + rax]; lea rax, [rip + 0x193971]; ret
0x0012d21e : mov rdi, rbp; call [rax + 0x20]; pop rbx; mov eax, 1; pop rbp; pop r12; ret
0x000524fb : lea rcx, [rip + 0x13ab76]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0003b18b : lea eax, [rip + 0x15137f]; movsxd rax, [rax + rsi*4]; add rax, rdi; jmp rax
0x0007991e : lea edx, [rip + 0x1144ec]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x000524fc : lea ecx, [rip + 0x13ab76]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0006804c : add [rax], al; add [rax - 0x77], cl; imul eax; mov rdi, r9; jmp [rsi + 0xf]
0x00010043 : lea edx, [rip + 0x178173]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0008732e : adc [rax], al; mov edx, eax; movsxd rdx, [r8 + rdx*4]; add rdx, r8; jmp rdx
0x001530b1 : mov edx, [rsi + 2]; mov rcx, [rsi]; mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x000b2258 : mov [rip + 0x31a68a], ebx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0006314a : mov [rax + 0x40], 0; mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x0003b023 : lea esi, [rip + 0x151767]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x000b2257 : mov [rip + 0x31a68a], rbx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0012d95d : mov esi, edx; sub esi, eax; mov eax, esi; add rsp, 8; pop rbx; pop rbp; ret
0x00047da3 : lea rax, [rip + 0x144b66]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x0008ae3b : add [rax], 0; add [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret
0x0005f021 : adc [rax], al; add [rax], al; mov rsi, r14; mov rdi, rbp; call [rax + 0x38]
0x00152e80 : mov rdx, [rsi + 7]; mov rcx, [rsi]; mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x000fb34a : xor al, [rbx]; add [rax], al; lea rax, [rip + 0x2d1d5b]; add rsp, 0x18; ret
0x0012bb00 : add [rbp + 0x480b75c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x0005c2c4 : lea rdx, [rip + 0x1319e1]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00104512 : mov eax, [rbp + rax*8]; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0004811c : dec [rax + 1]; clc ; mov r8, rcx; mov [rbp - 0x4c0], 1; mov esi, 1; jmp rax
0x00094f34 : movlps [rdx + 8], xmm1; xor ah, ah; mov [rdx + 0x10], ah; mov rax, rdi; ret
0x00086dcd : add [rax], al; add dh, al; add [rax], eax; mov rcx, r8; mov [rdx], rcx; ret
0x00132663 : xchg al, dl; add [rax], al; add [rcx + rcx*4 - 0x19], cl; call [rax + 0x20]
0x0005b430 : lea ecx, [rip + 0x13205a]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x00152e81 : mov edx, [rsi + 7]; mov rcx, [rsi]; mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x000c3fdc : add [rbp + 0x2e], dh; lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret
0x00153270 : mov edx, [rsi + 2]; mov ecx, [rsi]; mov [rdi + 2], edx; mov [rdi], ecx; ret
0x00145044 : sub [r8], al; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax + 0x170]; jmp rax
0x0003ab35 : lea eax, [rip + 0x151b55]; movsxd rax, [rax + rdx*4]; add rax, rsi; jmp rax
0x0006f47a : add bl, al; nop [rax]; mov rax, [rdi]; nop ; mov [rip + 0x35ab8d], rax; ret
0x00152f60 : mov rdx, [rsi + 5]; mov rcx, [rsi]; mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x0005c257 : lea edi, [rip + 0x131993]; movsxd rax, [rdi + rax*4]; add rax, rdi; jmp rax
0x000aff74 : add [rbx + 0x41], ebx; mov [rbx + 0xc], edi; pop rbp; pop r12; pop r14; ret
0x0001f7a7 : add [rcx + rcx*4 - 0x1e], cl; mov rsi, r14; mov rdi, [rsp + 0x18]; call rbp
0x00153200 : mov edx, [rsi + 3]; mov ecx, [rsi]; mov [rdi + 3], edx; mov [rdi], ecx; ret
0x000956a0 : mov rcx, [rsi]; mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; ret
0x0016f452 : sbb al, ch; add al, [rax]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00060127 : add [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x58]
0x001357fe : mov esi, [rdi + 0x88]; mov rdi, rbp; mov [r15 + 0x58], 0; call [rax + 0x28]
0x0016d3be : add [rax], al; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper ; ret
0x0005bb0f : lea rcx, [rip + 0x131f52]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0012db77 : mov edi, [rdi]; add r14, rax; sub edx, eax; mov rsi, r14; call [r15 + 0x40]
0x00092259 : movlpd [rdx], xmm0; mov ax, [rcx + 8]; mov [rdx + 8], ax; mov rax, rdi; ret
0x0012def3 : mov edi, [rbx]; add r13, rcx; sub edx, ecx; mov rsi, r13; call [rbx + 0x40]
0x0010dfff : mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x000c1d05 : add [rbp + 0x2d], dh; lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret
0x0011fd67 : add [rax + 0x63], cl; rol [rcx + rcx*4 - 0x40], cl; mov [rdi + rdx], 0; ret
0x0011b123 : add [rax - 0x77], ecx; xor [r8 + 1], dil; add rsp, 8; pop rbx; pop rbp; ret
0x0005bf83 : dec [rax - 0x73]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax
0x0015bd1b : add [rax], al; add [rax], al; add [rdx + 0x48028801], cl; mov eax, edi; ret
0x00065c5d : lea rsi, [rbx + 0x50]; push 0; lea r9, [rbp - 0x40]; mov rdi, r15; call r12
0x0012e733 : mov edi, [rbp]; add r14, rbx; sub edx, ebx; mov rsi, r14; call [r13 + 0x40]
0x0013b19e : sbb [rbp + 0x480d75c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x00152712 : push rsi; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x00038e84 : inc [rcx]; add [rax], al; add bh, al; test [rax], eax; idiv edi; call [rax]
0x00141d17 : lea edx, [rsp + 8]; lea rsi, [rsp + 0x190]; mov rdi, rbp; call [rax + 0x18]
0x001357fd : mov esi, [r15 + 0x88]; mov rdi, rbp; mov [r15 + 0x58], 0; call [rax + 0x28]
0x0008a96b : add [rax], 0; add [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret
0x00104511 : mov rax, [r13 + rax*8]; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x00078e0f : add [rbx + 0x4c], bl; mov eax, eax; pop rbp; pop r12; pop r13; pop r14; ret
0x00141d16 : lea rdx, [rsp + 8]; lea rsi, [rsp + 0x190]; mov rdi, rbp; call [rax + 0x18]
0x0012fa35 : add [rbp + 0x480e75c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x0003aa97 : lea esi, [rip + 0x151cf3]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x000956b1 : mov ecx, [rsi]; mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; ret
0x0012c222 : xor edi, esp; dec [rcx - 0x75]; cmp [r9 + r9*4 - 1], r9b; call [rax + 0x20]
0x0003b18a : lea rax, [rip + 0x15137f]; movsxd rax, [rax + rsi*4]; add rax, rdi; jmp rax
0x0009a647 : movdqu xmm[rdi + rdx - 0x10], xmm0; movdqu xmm[rdi + rdx - 0x20], xmm0; ret
0x000f521a : mov [rax], edx; mov rax, [rip + 0x2d49c5]; mov [rax], -1; xor eax, eax; ret
0x00095680 : mov rcx, [rsi]; mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; ret
0x00095690 : mov rcx, [rsi]; mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; ret
0x00152fd0 : mov rdx, [rsi + 4]; mov rcx, [rsi]; mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x000780af : add [rbx + 0x48], bl; mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret
0x00169a4f : leave ; mov al, [rdi + rdx - 1]; mov cl, [rsi + rdx - 1]; sub eax, ecx; ret
0x00065c5e : lea esi, [rbx + 0x50]; push 0; lea r9, [rbp - 0x40]; mov rdi, r15; call r12
0x000633bb : sub edx, [rcx + 0x10]; mov eax, [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret
0x00095681 : mov ecx, [rsi]; mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; ret
0x00067d49 : add [rax], 0; add [rax - 0x77], cl; imul eax; mov dr1, r9; jmp [rsi + 0x2e]
0x0003afb4 : lea rsi, [rip + 0x1517d5]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x00153040 : mov rdx, [rsi + 3]; mov rcx, [rsi]; mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x0003b3e2 : lea rax, [rip + 0x151327]; movsxd rax, [rax + rdx*4]; add rax, rsi; jmp rax
0x0000febe : lea rdx, [rip + 0x1782cb]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00095691 : mov ecx, [rsi]; mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; ret
0x00094f33 : movlpd [rdx + 8], xmm1; xor ah, ah; mov [rdx + 0x10], ah; mov rax, rdi; ret
0x00047da4 : lea eax, [rip + 0x144b66]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x00052a54 : lea rcx, [rip + 0x13a829]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0009a331 : movups xmm[rdi + rdx - 0x30], xmm6; movups xmm[rdi + rdx - 0x40], xmm7; ret
0x00010210 : lea edx, [rip + 0x177ffe]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00111c83 : adc [rdi + 0x2b], edi; add bh, dh; fsub [rcx + rcx*4 + 2]; mov rax, -1; ret
0x0012def2 : mov rdi, [rbx]; add r13, rcx; sub edx, ecx; mov rsi, r13; call [rbx + 0x40]
0x0015240e : popfq ; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153041 : mov edx, [rsi + 3]; mov rcx, [rsi]; mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x0003ab34 : lea rax, [rip + 0x151b55]; movsxd rax, [rax + rdx*4]; add rax, rsi; jmp rax
0x0007df1b : add rax, 1; mov [rbp], rax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x0013cd45 : add [rsi + 0x2e], ah; nop [rax + rax]; add [rdi + 0x28], 4; mov eax, 1; ret
0x0009225a : movlps [rdx], xmm0; mov ax, [rcx + 8]; mov [rdx + 8], ax; mov rax, rdi; ret
0x00095670 : mov rcx, [rsi]; mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; ret
0x000f5100 : adc al, 0; add [rax], al; sub edx, eax; test eax, eax; cmovns eax, edx; ret
0x00047498 : lea eax, [rip + 0x145572]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x000a4cc4 : lea eax, [rbp - 0x16000009]; cmpsb [rsi], [rdi]; idiv edi; jmp [rsi - 0x70]
0x0000f1da : mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x00152f61 : mov edx, [rsi + 5]; mov rcx, [rsi]; mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x000633ba : sub rdx, [rcx + 0x10]; mov eax, [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret
0x0009c22f : add [rax], dl; add [rax], al; lea rdx, [rip + 0xd5ec6]; cmove rax, rdx; ret
0x000c0527 : add [rax], 0; add [rsp + rax*2 - 0x77], ah; add cl, [rcx - 0x3b7cb710]; ret
0x00153120 : mov rdx, [rsi + 1]; mov rcx, [rsi]; mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x00047cef : lea eax, [rip + 0x144e1b]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x0005fb23 : add [rbx + 0x48], bl; mov eax, esi; pop rbp; pop r12; pop r13; pop r14; ret
0x0016343b : add [rax], al; add [rax], al; add [rbx + 0x48028901], cl; mov eax, edi; ret
0x0010e892 : mov [rbp - 0x80], edx; mov rdx, rbx; movups xmm[rbp - 0x78], xmm0; call rax
0x0010d194 : add [rax], al; add [rax], al; add rsp, 8; mov eax, 7; pop rbx; pop rbp; ret
0x000680bb : add [rax], al; add [rax], al; add [rbx + 0x8042507], cl; add [rax], al; ret
0x00139014 : add [rax], al; add [rax], al; mov rsi, r15; mov rdi, r14; call [rax + 0x18]
0x00047497 : lea rax, [rip + 0x145572]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x0012bddb : dec [rax - 0x75]; or [r9 + r9*4 - 0xa], al; mov rdi, rbx; call [rax + 0x28]
0x00152ef1 : mov edx, [rsi + 6]; mov rcx, [rsi]; mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x0005c256 : lea rdi, [rip + 0x131993]; movsxd rax, [rdi + rax*4]; add rax, rdi; jmp rax
0x00087189 : adc [rax], al; mov ecx, eax; movsxd rcx, [r9 + rcx*4]; add rcx, r9; jmp rcx
0x00137f2f : sub [rsp + 0x30], eax; push r14; push r13; lea r9, [rsp + 0x3a]; call [rax]
0x0005b42f : lea rcx, [rip + 0x13205a]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0009223a : movlps [rdx], xmm0; mov al, [rcx + 8]; mov [rdx + 8], al; mov rax, rdi; ret
0x0006cb9b : mov [rbx + 0x48], 0; mov [rbx + 0x58], 0; mov [rbx + 0x50], 0; pop rbx; ret
0x0003b43e : lea rsi, [rip + 0x15134b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0000febf : lea edx, [rip + 0x1782cb]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00092239 : movlpd [rdx], xmm0; mov al, [rcx + 8]; mov [rdx + 8], al; mov rax, rdi; ret
0x0003b07e : lea rsi, [rip + 0x15170b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x000ac052 : add [rax], eax; add al, ch; cmpsb [rsi], [rdi]; xor dh, dh; jmp [rsi + 0xf]
0x000372c3 : xchg eax, esp; cmp rax, rdi; pop rbx; cmovb rax, rdi; pop rbp; pop r12; ret
0x0009a354 : movups xmm[rdi + rdx - 0x10], xmm2; movups xmm[rdi + rdx - 0x20], xmm3; ret
0x000fb2c3 : pop rdx; mov rax, [rip + 0x2d0355]; pop rcx; pop rbx; pop rbp; pop r12; ret
0x00152ef0 : mov rdx, [rsi + 6]; mov rcx, [rsi]; mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x00060d19 : add [rbx + 0x44], bl; mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret
0x0007f66e : add [rax], al; xor r12d, r12d; mov rax, r12; pop rbx; pop rbp; pop r12; ret
0x0006f41a : add bl, al; nop [rax]; mov rax, [rdi]; nop ; mov [rip + 0x35ab9d], rax; ret
0x00052a55 : lea ecx, [rip + 0x13a829]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x001527a2 : push rsi; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x00095630 : mov ecx, [rsi]; mov edx, [rsi + 3]; mov [rdi], ecx; mov [rdi + 3], edx; ret
0x0001b488 : lea edi, [rip + 0x16cdc2]; movsxd rdx, [rdi + rdx*4]; add rdx, rdi; jmp rdx
0x000227d8 : mov [rip + 0x3a9b06], 0; mov rax, [rax]; pop rbx; mov eax, [rax + 0x58]; ret
0x0012ebb0 : add [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; pop rbx; pop rbp; ret
0x00067d4a : add [rax], al; add [rax - 0x77], cl; imul eax; mov dr1, r9; jmp [rsi + 0x2e]
0x0008ab8c : add [rax], al; add [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret
0x00106cae : add [rcx - 0x3b7cb730], cl; or bl, al; nop cs:[rax + rax]; mov eax, edx; ret
0x0014e6b5 : not esi; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000f461b : add [rax], al; add [rax], al; nop ; mov eax, [rdi + 8]; and eax, 0x100f; ret
0x0012e02a : mov rdi, [rbx]; add r13, r15; sub edx, r15d; mov rsi, r13; call [rbx + 0x40]
0x00097a23 : mov dl, [rsi + 2]; mov [rdi], cx; mov [rdi + 2], dl; lea rax, [rdi + 3]; ret
0x0016340d : xor cl, [rax - 0x75]; add [rax - 0x77], ecx; add cl, [rax - 0x77]; clc ; ret
0x0014cefd : add [rax], al; add [rax - 0x75], cl; push rsi; clc ; mov [rdi - 8], rdx; ret
0x00138311 : mov eax, [rip + 0x2917b9]; lea rdx, [rip + 0x296b52]; mov fs:[rax], rdx; ret
0x00086e2e : add [rax], al; mov [rbx], 0; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret
0x000b1bef : add rcx, rax; pop r12; mov [rdi + 0x20], rcx; pop r13; pop r14; pop r15; ret
0x0000785b : mov r9, [rsp + 0x30]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x000c982a : add [rcx + 0x3034ab05], ecx; add cl, ch; pop rax; idiv edi; jmp [rsi + 0x2e]
0x0016ed1d : add [rax], al; add [rdi], cl; mov dh, 7; movzx ecx, [rsi]; sub eax, ecx; ret
0x00141d18 : push rsp; and al, 8; lea rsi, [rsp + 0x190]; mov rdi, rbp; call [rax + 0x18]
0x00004a6e : mov r9, [rsp + 0x40]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call rbx
0x0006a396 : add [rax], al; add [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; call [rbp + 0x70]
0x00131d35 : add bl, al; nop [rax + rax]; mov eax, [rdi]; mov [rdx], eax; mov eax, 1; ret
0x0005f122 : xor [rax], al; add [rax], al; lea rsi, [rip + 0x1d3]; mov rdi, rbp; call rax
0x00138310 : mov rax, [rip + 0x2917b9]; lea rdx, [rip + 0x296b52]; mov fs:[rax], rdx; ret
0x000086fc : mov r9, [rsp + 0x20]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x0013cd24 : add [rbx + 0x28], esp; mov [rbx + 0x20], r12; pop rbx; pop rbp; pop r12; ret
0x000fbc1b : dec [rax - 0x7b]; ror [rax - 0x77], 3; setne al; movzx eax, al; pop rbx; ret
0x001693bc : add [rax], al; add [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper ; ret
0x0005dd2d : add bh, bh; rol [rbx + 0xb74fff8], 1; mov rax, [rsp + 8]; add rsp, 0x18; ret
0x0015bd2f : add [rsi - 0x75], ah; add [rsi - 0x77], esp; add cl, [rax - 0x77]; clc ; ret
0x00095638 : push rdi; add eax, ebx; nop [rax + rax]; mov rdx, [rsi]; mov [rdi], rdx; ret
0x000057c5 : add [rax], al; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x0012b093 : mov rdi, rbp; mov edx, [rbx + 0x22c0]; mov rsi, [rsp + 8]; call [rax + 0x18]
0x000f0c37 : mov rdi, [rbx + 0x18]; mov rsi, r14; mov edx, [rdx + rax]; call [rbx + 0x40]
0x00102cfd : mov [rip + 0x2c7389], 0; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0006d42c : push rax; add [rax], eax; add [rsi - 1], bh; mov rdi, rbx; call [r15 + 0x18]
0x0012b094 : mov edi, ebp; mov edx, [rbx + 0x22c0]; mov rsi, [rsp + 8]; call [rax + 0x18]
0x000792b2 : sub [rbx + 0x5d], bl; mov eax, r13d; pop r12; pop r13; pop r14; pop r15; ret
0x0007c1bc : add [rax], al; add [rbp + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret
0x000cce9a : mov [r12], esi; add [rdi + 4], 1; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x0014d492 : push rsi; std ; mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x00108d70 : add [rdx], al; mov rdx, [rsp + 0x18]; mov rsi, r13; xor r15d, r15d; call rax
0x0002f0d0 : add al, [rax]; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x000f7f35 : push rax; sub eax, 0; add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x001776ef : add [rbp + 0x31], al; fisttp [rax + 9]; fadd [rcx + 0xf]; xchg eax, ebp; ret
0x00003fba : mov r9, [rsp + 0x30]; mov rsi, [rsp + 0x28]; mov rdi, [rsp + 0x20]; call r15
0x000226e8 : mov [rip + 0x3a9bee], 0; mov rax, [rax]; pop rbx; mov eax, [rax + 0x58]; ret
0x000872c4 : mov [rdi], eax; movzx eax, [rsp - 0xc]; mov [rdi + 4], al; mov rax, rdi; ret
0x00152277 : pushfq ; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0008ae2c : add [rax], al; add [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret
0x00092174 : add ah, [rsi - 0x75]; add [rsi - 0x77], esp; add cl, [rax - 0x77]; clc ; ret
0x000c0528 : add [rax], al; add [rsp + rax*2 - 0x77], ah; add cl, [rcx - 0x3b7cb710]; ret
0x000997c8 : movq [rdi], mm0; mov [rdi + 0x10], cl; xor ch, ch; mov [rdi + 0x11], ch; ret
0x0006806f : add [rax], al; mov rax, [rdx + 0x38]; sub rax, [rdx + 0x30]; sar rax, 2; ret
0x0001e61e : add [rax], eax; add [rax], al; shl rax, cl; or [rdi], rax; xor eax, eax; ret
0x0009c208 : add [rdx + rax], cl; add [rcx + 0xc00f9], al; add [rsp + rcx - 0xd], dh; ret
0x000cce9b : mov [rsp], esi; add [rdi + 4], 1; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x0012d801 : mov eax, [rdi + 8]; lea rsi, [rsp + 0x18]; lea r12, [rsp + 0x10]; call [rax]
0x000067cf : mov r9, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call r15
0x0008720d : add eax, edi; mov [rdi], edx; movzx edx, [rsp + 0xc]; mov [rdi + 4], dx; ret
0x0013b185 : sub [rax], eax; mov rax, [rax + 0x10]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x0005fc91 : mov ecx, esp; mov rdi, rbx; xor edx, edx; pop rbx; pop rbp; pop r12; jmp rax
0x000ee2a6 : add [rax], al; xor r12d, r12d; mov eax, r12d; pop rbx; pop rbp; pop r12; ret
0x000b1bf0 : add ecx, eax; pop r12; mov [rdi + 0x20], rcx; pop r13; pop r14; pop r15; ret
0x000f0c38 : mov edi, [rbx + 0x18]; mov rsi, r14; mov edx, [rdx + rax]; call [rbx + 0x40]
0x0006817f : add [rax], al; mov rax, [rdx + 0x20]; sub rax, [rdx + 0x18]; sar rax, 2; ret
0x0012aeeb : mov rcx, rbx; lea rdi, [rax + 0x18]; xor eax, eax; pop rbx; pop rbp; jmp rcx
0x0008ae3c : add [rax], al; add [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret
0x000f51c3 : add [rax], 0; add [rax], al; mov fs:[rbx], 1; pop rbx; pop rbp; pop r12; ret
0x0008a96c : add [rax], al; add [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret
0x00061389 : lea rax, [rcx + 4]; mov [rdx + 0x20], rax; mov [rcx], edi; mov eax, edi; ret
0x0012aeec : mov ecx, ebx; lea rdi, [rax + 0x18]; xor eax, eax; pop rbx; pop rbp; jmp rcx
0x0008ae1c : add [rax], al; add [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret
0x00138f0d : add [rax], al; add [rcx + rcx*4 - 1], cl; mov rax, [r15 + 8]; call [rax + 8]
0x0015dd74 : push rcx; or bl, al; nop [rax + rax]; mov [rcx], rdx; mov [rcx + 8], dx; ret
0x0015bcaf : add [rax - 0x75], cl; add [rax - 0x77], ecx; add cl, [rax - 0x77]; clc ; ret
0x00096624 : push rdi; or bl, al; nop [rax + rax]; mov [rdi], rdx; mov [rdi + 8], dx; ret
0x0016fbbe : add [rax], al; movzx eax, [rdi - 1]; movzx ecx, [rsi - 1]; sub eax, ecx; ret
0x00086e18 : adc eax, esi; add [rax], al; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret
0x00160073 : mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x00086dcc : add [rax], al; add [rax], al; mov [rcx], 0; mov rcx, r8; mov [rdx], rcx; ret
0x0010045d : sub al, 0; mov rdx, [rbx]; mov [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret
0x0015d934 : adc [rax - 0x73], cl; adc [rdi], cl; test [rcx + 5], eax; add [rax], al; ret
0x00136dd3 : add al, [rax]; add [rax], al; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0012e02b : mov edi, [rbx]; add r13, r15; sub edx, r15d; mov rsi, r13; call [rbx + 0x40]
0x0010e95e : lea rdx, [rdi + 0x70]; mov edi, r12d; movups xmm[rbp - 0x78], xmm0; call rax
0x000741a6 : add [rcx], dh; mul [rdi + rax*8]; or al, 0; add [rax], al; mov rax, rsi; ret
0x001426dd : mov ebp, [rax]; add [rcx + rcx*4 - 0x32], cl; mov rdi, r8; call [rax + 0x10]
0x0012a6fe : pop rsp; lea rsi, [rdi + 0x48]; mov rdi, rax; mov rcx, [rcx + 0x18]; jmp rcx
0x0007aa6d : mov [rip + 0x351c01], 1; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0005ab70 : add al, 1; add [rax], al; add bl, al; nop cs:[rax + rax]; mov eax, 0x10; ret
0x00145045 : sub [rax], al; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax + 0x170]; jmp rax
0x0001d9d4 : mov edi, [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop ; jmp rdx
0x00062fcd : mov [rax + 0x38], r12; mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x0012b8de : push [rip + 0x6f684]; push [rip + 0x6f676]; lea r9, [rsp + 0x2c]; call [rax]
0x0011d96f : add ecx, [rdi]; test ah, dl; add [rax], al; add [rsi - 0x7d], ah; call [rax]
0x0006138a : lea eax, [rcx + 4]; mov [rdx + 0x20], rax; mov [rcx], edi; mov eax, edi; ret
0x0010e95f : lea edx, [rdi + 0x70]; mov edi, r12d; movups xmm[rbp - 0x78], xmm0; call rax
0x0000459e : mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x00138ff8 : add [rax], al; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xc8], rdx; call rax
0x00005048 : mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r12
0x000055cf : mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x0012ca70 : add [rax - 0x75], cl; or [r14 + 0x20], r15b; mov rdi, rbp; call [rax + 0x30]
0x00062fce : mov [rax + 0x38], esp; mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x000997e9 : movq [rdi], mm0; mov [rdi + 0x10], cx; xor ch, ch; mov [rdi + 0x12], ch; ret
0x0008720c : add rax, rdi; mov [rdi], edx; movzx edx, [rsp + 0xc]; mov [rdi + 4], dx; ret
0x0012ec2a : add [rbp - 0x3f6af040], al; movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret
0x00102d9a : mov [rip + 0x2c72ec], 2; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x000871f5 : add eax, edi; mov [rdi], edx; movzx edx, [rsp - 0xc]; mov [rdi + 4], dl; ret
0x00092212 : mov [rdx + 8], ah; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret
0x00005c37 : mov r9, [rsp + 0x20]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x0001d9d3 : mov r15, [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop ; jmp rdx
0x00099869 : movq [rdi], mm0; mov [rdi + 0xe], rcx; xor ch, ch; mov [rdi + 0x16], ch; ret
0x0007a55d : add [rcx], al; add [rax], al; add cl, ch; imul edi, esi, -1; jmp [rsi + 0xf]
0x000f7b62 : add [rax + 0x2d53f70d], cl; add [rax - 0x77], cl; clc ; mov [r8 - 1], 0; ret
0x0009560b : add [rax], al; add [rax], al; add [rbx + 0x477880e], cl; mov [rdi], ecx; ret
0x0012ca48 : add [rax], al; nop [rax + rax]; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x00036e5f : add [rax - 0x77], cl; sal [rcx], 1; shr cl, cl; fdivr st(7); jmp [rsi + 0xf]
0x00146169 : add [rax], al; add [rax - 0x77], cl; sal [rbp + 0x13], 1; add rsp, 0x38; ret
0x000ebf71 : adc eax, ebp; fnstcw [rip - 0x7ab7000f]; sal [rbx + rbp*2 + 0x48], 0x89; ret
0x00099889 : movq [rdi], mm0; mov [rdi + 0xf], rcx; xor ch, ch; mov [rdi + 0x17], ch; ret
0x0012d800 : mov rax, [rdi + 8]; lea rsi, [rsp + 0x18]; lea r12, [rsp + 0x10]; call [rax]
0x0012b6fe : push [rip + 0x6f864]; push [rip + 0x6f856]; lea r9, [rsp + 0x2c]; call [rax]
0x0010f74d : add [rdi], cl; test [rax + 0x48000001], esp; mov ebx, [rbp - 8]; leave ; ret
0x00096bfb : add r8b, r11b; nop ; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 3]; ret
0x0016d6bb : add [rax], al; add [rax], al; add [rcx + rcx*4 - 0x40], cl; vzeroupper ; ret
0x000aaec4 : add [rsp + rax - 0x7d], dh; adc [rcx], al; add rsp, 8; pop rbx; pop rbp; ret
0x0013cd44 : add [rsi + 0x2e], spl; nop [rax + rax]; add [rdi + 0x28], 4; mov eax, 1; ret
0x00099808 : movq [rdi], mm0; mov [rdi + 0xf], ecx; xor ch, ch; mov [rdi + 0x13], ch; ret
0x000871f4 : add rax, rdi; mov [rdi], edx; movzx edx, [rsp - 0xc]; mov [rdi + 4], dl; ret
0x00008f7b : mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call rbx
0x0008a95c : add [rax], al; add [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret
0x0016f971 : add [rax], al; movzx eax, [rdi - 1]; movzx edx, [rsi - 1]; sub eax, edx; ret
0x000fbece : push [rdi + rdi + 0x48]; mov ebx, edi; xor esi, esi; mov r12d, edx; call rbp
0x00131d88 : mov rax, [rdx]; sub eax, 1; bswap eax; mov [rdi + 0xa8], eax; mov eax, 1; ret
0x0015bd1c : add [rax], al; add [rax], al; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret
0x0014df25 : lea r11, [rip + 0x4e004]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0015dd02 : adc ebx, eax; nop ; nop cs:[rax + rax]; mov [rcx], dx; mov [rcx + 2], dl; ret
0x000ee2a5 : add [rax], r8b; xor r12d, r12d; mov eax, r12d; pop rbx; pop rbp; pop r12; ret
0x0000be48 : add [rax], eax; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x00095726 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x000bf77d : mov rdx, [rsp + 0x28]; mov rdi, [rsp + 0x20]; mov rax, [rsp + 0x18]; call rax
0x00139f74 : adc [rax], al; add [rax], al; add [rcx + rcx*4 - 0x19], cl; call [rax + 0x28]
0x00096d57 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x00036ff3 : mov [rsp - 0x10], rdx; movdqa xmm0, xmm[rsp - 0x18]; pinsrw xmm0, eax, 6; ret
0x0006f590 : mov rax, [rdi]; nop ; mov [rip + 0x35aa46], 1; mov [rip + 0x35aa0b], rax; ret
0x00097b96 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret
0x00064950 : mov [rsp + 0x10], rax; mov r13, [r15 + 0x98]; mov rdi, r13; call [r13 + 0x20]
0x00030f15 : mov edx, eax; movsxd rdx, [rsi + rdx*4]; add rdx, rsi; cmp r9d, 0x2f; jmp rdx
0x00004a6f : mov ecx, [rsp + 0x40]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call rbx
0x0014b4f4 : lea r11, [rip + 0x50835]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0016004b : add [rax], al; add [rax], al; add [rdx + 0x48028801], cl; lea eax, [rdx]; ret
0x00134cc1 : mov eax, [rdx]; sub eax, 1; bswap eax; mov [rdi + 0x48], eax; mov eax, 1; ret
0x0007df05 : add [rax], al; add [rax], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x000998a9 : movq [rdi], mm0; mov [rdi + 0x10], rcx; xor ch, ch; mov [rdi + 0x18], ch; ret
0x0006f5b1 : mov eax, [rdi]; nop ; mov [rip + 0x35aa26], 1; mov [rip + 0x35a9f3], rax; ret
0x00069280 : sbb [rcx], dh; fisttp [rax - 0x77]; fcomp [rbx + 0x5d]; pop r12; pop r13; ret
0x00004897 : mov edx, [rsp + 0x48]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call r14
0x0006414a : adc [rax - 0x75], cl; push rbx; mov rdi, rbx; sub rdx, rsi; call [r14 + 0x70]
0x00113ac6 : add [rdi + 0x17], dh; shl edi, 8; movzx eax, sil; or eax, edi; bswap eax; ret
0x00092299 : movlpd [rdx], xmm0; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x00005836 : mov rdx, [rsp + 0x30]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r13
0x0006f5b0 : mov rax, [rdi]; nop ; mov [rip + 0x35aa26], 1; mov [rip + 0x35a9f3], rax; ret
0x00064951 : mov [rsp + 0x10], eax; mov r13, [r15 + 0x98]; mov rdi, r13; call [r13 + 0x20]
0x00097a62 : mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; lea rax, [rdi + 6]; ret
0x00070d6b : add [rax], 0; add [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret
0x00008b40 : mov rdx, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call r15
0x00138f0b : add [rax], 0; add [rax], al; mov rdi, r15; mov rax, [r15 + 8]; call [rax + 8]
0x0013cd23 : add [rbx + 0x28], r12d; mov [rbx + 0x20], r12; pop rbx; pop rbp; pop r12; ret
0x0015bd2c : add [rax], al; add [rax], al; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret
0x0005fc90 : mov ecx, r12d; mov rdi, rbx; xor edx, edx; pop rbx; pop rbp; pop r12; jmp rax
0x0014b556 : lea ebx, [rip + 0x50814]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x00136f03 : add eax, [rax]; add [rax], al; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x000957cb : sbb bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x000ab106 : mov rdi, r12; mov r9, r15; mov rcx, rbx; mov rdx, r14; mov rsi, r13; call rbp
0x0006fffb : adc [rax], eax; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x0012e8dc : mov edi, [rbx]; mov [rcx], eax; sub rdx, rsi; mov rbp, rdx; call [rbx + 0x10]
0x000965d5 : add [rsi + 0x2e], ah; nop [rax + rax]; mov [rdi], edx; mov [rdi + 4], dl; ret
0x001600b2 : mov [rdx], eax; mov ax, [rcx + 4]; mov [rdx + 4], ax; lea rax, [rdx + 5]; ret
0x0011b9e3 : mov ecx, ebx; mov rdx, r15; mov rsi, r14; lea rdi, [rip + 0x2b2b1e]; call r12
0x0000f398 : movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x00138bdf : mov [rsp + 8], 1; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; call [rax + 0x18]
0x00087384 : add al, bl; nop cs:[rax + rax]; mov [rdi], ecx; lea rax, [rdi + rax - 1]; ret
0x000f51c4 : add [rax], al; add [rax], al; mov fs:[rbx], 1; pop rbx; pop rbp; pop r12; ret
0x00097bb7 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret
0x0014df26 : lea ebx, [rip + 0x4e004]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x000d6e4b : movzx eax, dl; mov rbp, rsi; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0007d8ea : pop rbp; add [rcx], dh; fisttp [rax - 0x77]; fcomp [rbx + 0x5d]; pop r12; ret
0x0013c6a3 : lea rsi, [rsp + 4]; mov [rsp + 4], eax; mov rax, [rdi + 8]; call [rax + 0x48]
0x0014decc : lea ebx, [rip + 0x4e01e]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0012e735 : add [rcx + 1], cl; fisubr [rcx]; fimul [rcx + rcx*4 - 0xa]; call [r13 + 0x40]
0x00003e8b : mov esi, [rsp + 0x28]; mov rdi, [rsp + 0x20]; mov rax, [rsp + 0x10]; call rax
0x0000f5fc : add [rax], al; add [rax], al; mov rax, [rip + 0x3ba649]; add rax, fs:[0]; ret
0x000b6566 : xchg [rip - 0x3f49f100], cl; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x00168ec4 : leave ; cmp cl, [rax + 0x63]; leave ; lea rax, [rdi + rcx]; sub rax, rsi; ret
0x000876fe : call [rax + 0x8c48348]; mov rax, rdi; pop rbx; pop rbp; pop r12; pop r13; ret
0x00134cc0 : mov rax, [rdx]; sub eax, 1; bswap eax; mov [rdi + 0x48], eax; mov eax, 1; ret
0x000b07c9 : mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x50]; mov rax, [rsp + 0x18]; call rax
0x00099828 : movq [rdi], mm0; mov [rdi + 0x10], ecx; xor ch, ch; mov [rdi + 0x14], ch; ret
0x00096635 : push rdi; or bl, al; nop [rax + rax]; mov [rdi], rdx; mov [rdi + 7], edx; ret
0x000e890d : add [rcx - 0x39], cl; add [r8], r8b; add [rax], al; add [rax - 0x7d], cl; ret
0x000086fd : mov ecx, [rsp + 0x20]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x0010e415 : mov [rbp - 0x70], rax; mov eax, [r12 + 0x60]; mov [rbp - 0x80], eax; call rcx
0x00131d3d : add [rax], al; add [rbx - 0x47fd76f9], cl; add [rax], eax; add [rax], al; ret
0x000ab107 : mov edi, esp; mov r9, r15; mov rcx, rbx; mov rdx, r14; mov rsi, r13; call rbp
0x0006be69 : add [rax - 0x75], cl; push rbx; mov rdi, rbx; sub rdx, rsi; call [r13 + 0x70]
0x0014decb : lea r11, [rip + 0x4e01e]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x000061f1 : mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; mov rax, [rsp + 0x20]; call rax
0x0014d86f : add [rbx + 0x4e8bfb56], cl; cld ; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x001600a2 : mov [rdx], eax; mov al, [rcx + 4]; mov [rdx + 4], al; lea rax, [rdx + 4]; ret
0x00086e33 : add [rax], al; add [rax], al; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret
0x0013cd4d : add [rax], al; add [rbx - 0x47fbd7b9], al; add [rax], eax; add [rax], al; ret
0x00174c8f : add [rbp + 0x31], al; fisttp [rcx + 9]; fiadd [rcx + 0xf]; xchg eax, ebp; ret
0x00160074 : mov [rdx], eax; mov al, [rcx + 2]; mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x000e0120 : inc [rax + 0x5b08384b]; mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret
0x00036ff4 : mov [rsp - 0x10], edx; movdqa xmm0, xmm[rsp - 0x18]; pinsrw xmm0, eax, 6; ret
0x00092279 : movlpd [rdx], xmm0; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x00096c22 : mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; lea rax, [rdi + 5]; ret
0x0000261f : xchg eax, esp; add [rax], al; mov [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret
0x0012e8db : mov rdi, [rbx]; mov [rcx], eax; sub rdx, rsi; mov rbp, rdx; call [rbx + 0x10]
0x0009647a : sbb bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; ret
0x000956cf : add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x00086e16 : mov [rbx], rdx; mov [rax], 0; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret
0x00138aac : sub [rax - 0x75], cl; or [r15], r9b; adc [rsp + 0x18], eax; call [rax + 0x18]
0x0014dc6f : add [rbx + 0x4e8bf956], cl; cld ; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x00005c38 : mov ecx, [rsp + 0x20]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x00008b41 : mov edx, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call r15
0x0005ab11 : add [rax], al; mov rdx, [r8 + 0x88]; mov [rdx + 8], r9; add [rdx + 4], 1; ret
0x00064e05 : mov rdi, rbx; pop rbx; mov rax, [rax + 0x130]; mov rax, [rax + 0x20]; jmp rax
0x000997b1 : movq mm0, [rsi]; movdqu xmm[rdi], xmm0; xor ch, ch; mov [rdi + 0x10], ch; ret
0x00004896 : mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call r14
0x00096c73 : mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 9]; ret
0x001124ba : add eax, [rax]; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x0006652f : lea ecx, [rax + 1]; mov [rsi + 0x28], rcx; mov [rax], dil; mov eax, r10d; ret
0x0012d719 : xchg [rsi], eax; add bl, ch; mov al, ch; lea esp, [rdx - 2]; jmp [rsi + 0x2e]
0x0000785c : mov ecx, [rsp + 0x30]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x00103b69 : mov edx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x38; ret
0x000c012b : add [rax], al; add [rax], al; add [rax - 0x75], cl; sbb [r8 - 0x7d], r9b; ret
0x000ed55f : xchg eax, ebp; sub dh, cl; dec [rbx + 0x438d0455]; add [rax - 0x7d], ecx; ret
0x0006f5f0 : mov rax, [rdi]; nop ; mov [rip + 0x35a9e6], 1; mov [rip + 0x35a9d8], eax; ret
0x00139f73 : adc [r8], r8b; add [rax], al; add [rcx + rcx*4 - 0x19], cl; call [rax + 0x28]
0x00153857 : mov [rax + rax], es; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00113dfc : add [rax], al; add [rax], al; mov rax, [rip + 0x2b5d79]; add rax, fs:[0]; ret
0x00003fbb : mov ecx, [rsp + 0x30]; mov rsi, [rsp + 0x28]; mov rdi, [rsp + 0x20]; call r15
0x001355d3 : mov rdx, [rdi + 0x90]; sub eax, 1; bswap eax; mov [rdx], eax; mov eax, 1; ret
0x001539d7 : mov al, [rax + rax]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006d1b9 : xor [rax - 0x73], ecx; pop rcx; add [rcx + rcx*4 - 1], ecx; call [rax + 0x18]
0x0000459f : mov ecx, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x0013c6a4 : lea esi, [rsp + 4]; mov [rsp + 4], eax; mov rax, [rdi + 8]; call [rax + 0x48]
0x00103b68 : mov rdx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x38; ret
0x00003e8a : mov rsi, [rsp + 0x28]; mov rdi, [rsp + 0x20]; mov rax, [rsp + 0x10]; call rax
0x0006cacc : adc [r8 - 0x77], r9b; sbb [r8 - 0x77], r9b; push rdi; mov [rdi + 8], rax; ret
0x00005391 : mov edx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x00008355 : mov edx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r15
0x00004d59 : mov edx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r12
0x0007d8d3 : add [rax - 0x77], ecx; add [r8 - 0x77], r9b; fcomp [rbx + 0x5d]; pop r12; ret
0x0009229a : movlps [rdx], xmm0; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x000067d0 : mov ecx, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call r15
0x00005049 : mov ecx, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r12
0x000055d0 : mov ecx, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x000042af : mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov rax, [rsp + 0x18]; call rax
0x000872dc : mov [rdi], eax; movzx eax, [rsp - 0x14]; mov [rdi + 4], ax; mov rax, rdi; ret
0x0006f5f1 : mov eax, [rdi]; nop ; mov [rip + 0x35a9e6], 1; mov [rip + 0x35a9d8], eax; ret
0x00137c75 : mov r8, r15; mov rcx, r14; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax
0x0004ab43 : adc al, 0; movzx r12d, r12b; movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x0014b4f5 : lea ebx, [rip + 0x50835]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x000042b0 : mov esi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov rax, [rsp + 0x18]; call rax
0x000957a7 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x00096d2f : add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x0007fa78 : dec [rax - 0x7d]; clc ; add [rdi - 0x27], esi; pop rbx; pop rbp; pop r12; ret
0x00005837 : mov edx, [rsp + 0x30]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r13
0x00086e17 : mov [rbx], edx; mov [rax], 0; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret
0x0006652e : lea rcx, [rax + 1]; mov [rsi + 0x28], rcx; mov [rax], dil; mov eax, r10d; ret
0x00131d46 : add [rax], al; add bl, al; nop [rax + rax]; mov [rdi + 4], 1; mov eax, 1; ret
0x000138c5 : xor rax, fs:[0x30]; call rax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x000339d7 : add [rcx], al; add [rax + 9], cl; ror [rax - 0x77], 1; or [r8 + 2], r15b; ret
0x00103bc9 : mov rdx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x40; ret
0x000061f2 : mov esi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; mov rax, [rsp + 0x20]; call rax
0x00161f16 : add rcx, [rdi]; test [rdx - 0x7ffffffd], esi; cmp [rcx], al; sbb rax, -1; ret
0x00102c8b : add [rax - 0x39], cl; adc [rax], al; add [rax], al; add [rax + 0x63], cl; ret
0x00031240 : mov rax, [r8 + rcx + 8]; mov [rsi + rcx + 8], rax; xor eax, eax; pop rbx; ret
0x00131d89 : mov eax, [rdx]; sub eax, 1; bswap eax; mov [rdi + 0xa8], eax; mov eax, 1; ret
0x001383b5 : sub [rax], eax; add al, [rax]; add [rax], al; mov fs:[rbx], rax; pop rbx; ret
0x000b07ca : mov esi, [rsp + 0x40]; mov rdi, [rsp + 0x50]; mov rax, [rsp + 0x18]; call rax
0x000fca47 : mov esi, 2; mov rdi, rbx; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax
0x00103bca : mov edx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x40; ret
0x0015dd85 : push rcx; or bl, al; nop [rax + rax]; mov [rcx], rdx; mov [rcx + 7], edx; ret
0x00131d3c : add [rax], al; add [rax], al; mov eax, [rdi]; mov [rdx], eax; mov eax, 1; ret
0x0014da6f : add [rbx + 0x4e8bfa56], cl; cld ; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x0010e416 : mov [rbp - 0x70], eax; mov eax, [r12 + 0x60]; mov [rbp - 0x80], eax; call rcx
0x0009227a : movlps [rdx], xmm0; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x0006f591 : mov eax, [rdi]; nop ; mov [rip + 0x35aa46], 1; mov [rip + 0x35aa0b], rax; ret
0x00004d58 : mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r12
0x00008354 : mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r15
0x00005390 : mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x00161f17 : add ecx, [rdi]; test [rdx - 0x7ffffffd], esi; cmp [rcx], al; sbb rax, -1; ret
0x001124b9 : add rax, [rax]; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x0015dda4 : push rcx; or bl, al; nop [rax + rax]; mov [rcx], rdx; mov [rcx + 5], rdx; ret
0x0011b9e2 : mov rcx, rbx; mov rdx, r15; mov rsi, r14; lea rdi, [rip + 0x2b2b1e]; call r12
0x00097a52 : mov dl, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dl; lea rax, [rdi + 5]; ret
0x0014b555 : lea r11, [rip + 0x50814]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x000bf77e : mov edx, [rsp + 0x28]; mov rdi, [rsp + 0x20]; mov rax, [rsp + 0x18]; call rax
0x00008f7c : mov ecx, [rsp + 0x28]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call rbx
0x0015dd25 : add [rsi + 0x2e], ah; nop [rax + rax]; mov [rcx], edx; mov [rcx + 4], dl; ret
0x001355d4 : mov edx, [rdi + 0x90]; sub eax, 1; bswap eax; mov [rdx], eax; mov eax, 1; ret
0x00097aa3 : mov dl, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dl; lea rax, [rdi + 9]; ret
0x000feccd : push r8; mov eax, 4; mov [rbx + 0x38], rcx; add rsp, 8; pop rbx; pop rbp; ret
0x0000f5dc : add [rax], al; add [rax], al; mov rax, [rip + 0x3ba621]; add rax, fs:[0]; ret
0x0012c24c : sub [rax], eax; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x0006cacd : adc [rax - 0x77], cl; sbb [r8 - 0x77], r9b; push rdi; mov [rdi + 8], rax; ret
0x0013d09d : add [rax], al; add [rbp - 0x47f38a2e], al; add [rax], eax; add [rax], al; ret
0x00096654 : push rdi; or bl, al; nop [rax + rax]; mov [rdi], rdx; mov [rdi + 5], rdx; ret
0x000dfece : add [rax], al; mov rdx, [rip + 0x2e9e01]; mov rax, [rdx]; mov [rdx], rdi; ret
0x000fca1a : push [rbx + rbx*2 + 0x48]; mov ebx, edi; xor edx, edx; xor esi, esi; call rbp
0x0007c75c : add [rax], al; add [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x000b0974 : add [rax], rax; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x00064e06 : mov edi, ebx; pop rbx; mov rax, [rax + 0x130]; mov rax, [rax + 0x20]; jmp rax
0x00062439 : sbb [r9 + rcx*4 - 0x1a], r8b; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax
0x00096e17 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x0012d8c7 : adc [rax + 0x29], cl; int1 ; mov [rdx + 0x58], rdi; mov [rdx + 0x68], rcx; ret
0x00063e89 : push [rax + 0x38]; mov rcx, [rbx + 8]; mov r9, [rax + 0x10]; call [rbp + 0x18]
0x00177042 : mov ds, [rcx]; or [rax], al; add [rax + 9], cl; fmul [rdi]; xchg eax, ebp; ret
0x00142abf : mov [rip + 0x28c6c7], 0; mov [rip + 0x28c540], ax; mov eax, 1; add rsp, 8; ret
0x0006243a : sbb [rcx + rcx*4 - 0x1a], al; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax
0x00020d0a : mov rsi, rbp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, [rsp + 8]; call rax
0x00132826 : int1 ; xor eax, eax; mov rsi, rdx; mov [rdi + 0x10], 2; add rdi, 0x10; jmp rcx
0x00097bf6 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret
0x00049dac : xor [rcx], al; add [rax], al; movsxd rdx, ebp; mov rdi, rbx; call [r14 + 0x38]
0x0007bf6b : mov [rbx], rax; mov [rbx + 8], rbp; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x0009580a : sbb bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x000671ec : add [rax - 0x77], cl; imul eax; stosd [rdi], eax; cdq ; stc ; jmp [rsi + 0x2e]
0x0005c142 : mov al, [rax]; add [rax], al; movsxd rax, [rdi + rax*4]; add rax, rdi; jmp rax
0x0008063e : lea rdx, [rax + 1]; test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdx; ret
0x0013562f : mov eax, [rax + 0xc]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x000ee163 : add [rax], al; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x00133d93 : inc [rbp + 0x48b174c0]; mov eax, [rsp + 0x78]; mov rdi, rbx; call [rax + 0x20]
0x001536de : lea eax, [rax + rax]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0007ac78 : add [rax], al; add [rdi], cl; test [rcx + 0x48000000], esi; add esp, 0x18; ret
0x0016e587 : lea eax, [rdi + rax + 0x20]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x00096ef9 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x0012cae9 : add [rax], al; mov rax, [rbp + 8]; mov esi, 8; mov rdi, rbp; call [rax + 0x30]
0x0003d663 : add [rax], eax; add [rax], al; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x0009657c : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; mov [rdi + 0x20], cl; ret
0x0000127f : xor edi, edi; test eax, eax; setne dil; add rsp, 8; mov eax, edi; neg eax; ret
0x0009c67c : xor eax, eax; mov rsi, r13; lea r9, [rsp + 0x28]; lea rcx, [rax + 4]; call rbx
0x0016e5a7 : lea eax, [rdi + rax + 0x40]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x00096eb9 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x000eebfa : add [rax], al; add [rdi], cl; test [rsi + 0x48000000], edi; add esp, 0x78; ret
0x0013879f : mov [rax + rdx*8 - 4], cx; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0006d1b6 : pop rcx; movzx esi, [rcx]; lea rbx, [rcx + 1]; mov rdi, r15; call [rax + 0x18]
0x00020d0b : mov esi, ebp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, [rsp + 8]; call rax
0x0011fff8 : mov [rdi + 3], cl; movdqu xmm0, xmm[rsi]; movups xmm[rdi + rdx + 8], xmm0; ret
0x00070d6c : add [rax], al; add [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret
0x000744d5 : adc [rcx + rcx*4 - 0x10], cl; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0016e5e4 : lea rax, [rdi + rax + 0x60]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x0013ce47 : sub [rsp + 0x80], eax; pxor xmm0, xmm0; movups xmm[rsp + 0x28], xmm0; call rdx
0x0009c67b : xor r8d, r8d; mov rsi, r13; lea r9, [rsp + 0x28]; lea rcx, [rax + 4]; call rbx
0x00068ab3 : adc [rdx - 0x18], dh; mov [rdi + 0x18], rax; mov [rsi], rax; xor eax, eax; ret
0x000658fb : add [rax], al; add [rax], al; add [rax - 0x75], cl; mov rax, [rax + 0x4c]; ret
0x00096c74 : mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 9]; ret
0x00133e9a : inc [rbp + 0x486174c0]; mov eax, [rsp + 0x38]; mov rdi, rbp; call [rax + 0x20]
0x00092160 : xor ah, ah; mov [rdx + 1], ah; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret
0x0002307d : mov rcx, r8; mov r8, rdx; mov [rdi + 8], rcx; xor eax, eax; mov [rdi], r8; ret
0x0016e586 : lea rax, [rdi + rax + 0x20]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x0006e849 : add al, bl; nop [rax + rax]; mov eax, [rdi + 0x10]; sub eax, [rsi + 0x10]; ret
0x0015824e : pop rsi; add eax, [rax]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0016debb : add [rax], al; add [rax], al; add [rcx], dh; ror [rbx + 0x75163b17], 0xe4; ret
0x00095865 : movq mm2, [rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x00031541 : mov rax, [rax + rdi + 8]; mov [rcx + rdi + 8], rax; xor eax, eax; pop rbx; ret
0x00097c77 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret
0x0006774b : sub [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0016ce86 : lea rax, [rdi + rax + 0x20]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x00092170 : xor ah, ah; mov [rdx + 2], ah; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret
0x00138d38 : add [rax], al; add [rax - 0x77], cl; push rsp; and al, 0x40; call [rax + 0x18]
0x00097d59 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret
0x001046e9 : mov eax, [rsi + 0x68]; mov edi, edi; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x00131bf6 : int1 ; xor eax, eax; mov rsi, rdx; mov [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx
0x00138f0c : add [rax], al; add [rax], al; mov rdi, r15; mov rax, [r15 + 8]; call [rax + 8]
0x0016cee5 : lea eax, [rdi + rax + 0x60]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x001046e8 : mov rax, [rsi + 0x68]; mov edi, edi; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x0014cef4 : add [rax], al; nop cs:[rax + rax]; mov rdx, [rsi - 8]; mov [rdi - 8], rdx; ret
0x0016e5a6 : lea rax, [rdi + rax + 0x40]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x0006f40a : add [rax], al; nop [rax]; mov rax, [rdi]; nop ; mov [rip + 0x35abb5], rax; ret
0x00096d96 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x000ee9d5 : add [rax], al; add [rdi], cl; test [rbx + 0x48000000], edi; add esp, 0x68; ret
0x00152c24 : add [rax], al; nop cs:[rax + rax]; mov edx, [rsi - 4]; mov [rdi - 4], edx; ret
0x00096ed9 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x00097b7f : add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0x10]; ret
0x001699e4 : movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; sub eax, edx; vzeroupper ; ret
0x00088eee : push rax; adc [rax], al; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00031241 : mov eax, [rax + rcx + 8]; mov [rsi + rcx + 8], rax; xor eax, eax; pop rbx; ret
0x0015dd62 : adc ebx, eax; nop ; nop cs:[rax + rax]; mov [rcx], rdx; mov [rcx + 8], dl; ret
0x000ef338 : add [rax], al; add [rdi], cl; test [rax + 0x48000000], ebp; add esp, 0x78; ret
0x0016cee4 : lea rax, [rdi + rax + 0x60]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x00138a48 : add [rax], al; add [rax - 0x77], cl; push rsp; and al, 0x38; call [rax + 0x18]
0x00097d39 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret
0x00020398 : push [rbp - 0x1b]; mov rdx, r12; mov rsi, [rsp + 0x10]; mov rdi, r14; call rbp
0x00078a4c : adc [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00097a63 : mov edx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; lea rax, [rdi + 6]; ret
0x00153b57 : mov [rax + rax], eax; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00169a4e : bswap ecx; mov al, [rdi + rdx - 1]; mov cl, [rsi + rdx - 1]; sub eax, ecx; ret
0x000473b8 : mov [rbp - 0x4c0], r8; mov rdx, [rbp - 0x4d8]; mov rsi, r15; call [r14 + 0x38]
0x00068124 : mov [rax + 8], edx; mov rdx, [rax + 0x18]; mov [rax + 0x20], rdx; pop rbx; ret
0x000fecce : push rax; mov eax, 4; mov [rbx + 0x38], rcx; add rsp, 8; pop rbx; pop rbp; ret
0x00031542 : mov eax, [rax + rdi + 8]; mov [rcx + rdi + 8], rax; xor eax, eax; pop rbx; ret
0x000ee19c : add [rax], al; nop ; mov eax, [rsi]; mov [rdi + 0x108], eax; xor eax, eax; ret
0x00134b96 : int1 ; xor eax, eax; mov rsi, rdx; mov [rdi + 0x68], 2; add rdi, 0x68; jmp rcx
0x0013c034 : mov esi, esp; mov rdi, rbp; mov [rsp], rax; mov rax, [rbp + 8]; call [rax + 8]
0x00137c76 : mov eax, edi; mov rcx, r14; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax
0x001354c6 : int1 ; xor eax, eax; mov rsi, rdx; mov [rdi + 0x58], 2; add rdi, 0x58; jmp rcx
0x00063dfd : add [rax - 0x77], cl; and al, 8; xor eax, eax; mov rdi, rbp; call [rbp + 0x20]
0x0015db2a : add [rax - 0x73], ecx; add [rdi], rcx; test [rbx + 3], ecx; add [rax], al; ret
0x0013411b : inc [rbp + 0x488974c0]; mov eax, [rsp + 0x88]; mov rdi, rbp; call [rax + 0x20]
0x0013b30f : add [rbx - 0x1976b7fa], cl; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0000f3fb : add [rax], al; add [rax], al; add [rcx], dh; rol [rbx - 0x6bf07f19], 0xc0; ret
0x0001e69c : adc edi, [rax + 1]; shl rax, cl; test [rdi], rax; setne al; movzx eax, al; ret
0x00097d19 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret
0x0006f4cf : sbb [rax - 0x75], cl; push rax; or [rax - 0x75], cl; adc [rcx - 0x7d], al; ret
0x00096c23 : mov edx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; lea rax, [rdi + 5]; ret
0x0016cea6 : lea rax, [rdi + rax + 0x40]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x0006774a : sub [r9 + rcx*4 - 0x18], r9b; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x000f5219 : mov fs:[rax], edx; mov rax, [rip + 0x2d49c5]; mov [rax], -1; xor eax, eax; ret
0x00095825 : movq mm2, [rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x00152e11 : movdqu xmm[rdi + 0x10], xmm0; lddqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; ret
0x00038227 : mov edx, [rdi + 0x20]; mov rdi, [rbp - 0x8a8]; sub rdx, rsi; call [rbx + 0x38]
0x00068683 : adc [rdx + 0x2a], dh; mov [rdi + 0x18], rax; mov [rsi], rax; xor eax, eax; ret
0x00139700 : mov rax, [r12]; mov [rbx + 8], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x00095845 : movq mm2, [rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x00002511 : add [rax - 0x39], cl; add eax, [rax]; add [rax], al; add [rax - 0x7d], cl; ret
0x00038226 : mov rdx, [r15 + 0x20]; mov rdi, [rbp - 0x8a8]; sub rdx, rsi; call [rbx + 0x38]
0x0013b467 : add [rbx + 0x4b7501f8], al; mov rax, [rdi + 8]; lea rsi, [rsp + 8]; call [rax]
0x0013c033 : mov rsi, rsp; mov rdi, rbp; mov [rsp], rax; mov rax, [rbp + 8]; call [rax + 8]
0x00097a07 : add ebx, eax; nop [rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi + 2]; ret
0x0008063f : lea edx, [rax + 1]; test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdx; ret
0x0016cea7 : lea eax, [rdi + rax + 0x40]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x0007bf6c : mov [rbx], eax; mov [rbx + 8], rbp; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x00068123 : mov [rax + 8], rdx; mov rdx, [rax + 0x18]; mov [rax + 0x20], rdx; pop rbx; ret
0x0016e5e5 : lea eax, [rdi + rax + 0x60]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x00153e57 : xchg [rax + rax], al; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009910d : adc edx, [rdi + rcx]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00139701 : mov eax, [rsp]; mov [rbx + 8], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x00133ce9 : add [rax], al; mov [rsp + 0x10], rax; mov rax, [rsp + 0x48]; call [rax + 0x28]
0x0016ce87 : lea eax, [rdi + rax + 0x20]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x00103b0a : add [rax], al; nop [rax]; mov rax, [rip + 0x2c6071]; mov eax, [rax + 0x38]; ret
0x0012c6a0 : add [rax], al; nop [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x00152c23 : add [rax], r8b; nop cs:[rax + rax]; mov edx, [rsi - 4]; mov [rdi - 4], edx; ret
0x0007b92c : add [rax + 0x48f95063], al; add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x000cc8bf : add [rax], al; add bl, al; nop [rax + rax]; mov [rdi + 8], 2; xor eax, eax; ret
0x000219c9 : add [rsi], dl; add [rax], al; add [rax - 1], bh; pop rbx; pop rbp; pop r12; ret
0x0003b1e1 : add eax, esi; mov r11, rdx; mov [rbp - 0x518], 0; mov [rbp - 0x528], 1; jmp rax
0x001355b4 : add [rax], al; add [rbx - 0x7637f100], cl; ror [rax - 0x77], 2; mov eax, 1; ret
0x0012ce43 : add [rax - 0x75], cl; and al, 8; mov esi, r12d; mov rdi, rbp; call [rax + 0x30]
0x0016343c : add [rax], al; add [rax], al; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret
0x00148b0b : lea edx, [rip + 0x4541f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x001600e3 : mov [rdx], rax; mov eax, [rcx + 5]; mov [rdx + 5], eax; lea rax, [rdx + 8]; ret
0x00097ac3 : mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 0xa]; ret
0x00131d70 : mov eax, [rdi + 0xa8]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x00152db4 : add [rax], al; nop cs:[rax + rax]; movzx edx, [rsi - 1]; mov [rdi - 1], dl; ret
0x0009962e : add [rax], al; mov dl, [rsi]; mov [rdi], dl; xor ch, ch; mov [rdi + 1], ch; ret
0x00096c42 : mov edx, [rsi + 3]; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x0012ba91 : lea r8, [rip + 0xb8]; lea rdx, [rip + 0xf781]; lea r9, [rsp + 0x20]; call [rax]
0x0003a5f9 : mov [rbp - 0x500], ebx; mov rsi, [rbp - 0x4f8]; mov rdi, r14; call [rax + 0x38]
0x000957ca : sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x00097a82 : mov edx, [rsi + 3]; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 7]; ret
0x001560db : lea edx, [rip + 0x37f4f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x001580f0 : add al, [r8]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00141a93 : sbb ebp, edx; sub [rax], al; nop [rax + rax]; mov [rsi], rdi; xor eax, eax; ret
0x00033a1d : mov [rdi], r8; sub eax, esi; mov [rdi + 8], r9; mov [rdx], eax; mov eax, 2; ret
0x000957a6 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x001355f7 : mov eax, [rax + 0x10]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0006a70d : xchg dh, bl; add [rax], eax; add [rsi - 1], bh; mov rdi, rbx; call [rax + 0x18]
0x0012b424 : mov ecx, [rsp + 0x20]; mov rdx, [rsp + 0x18]; mov rsi, [rsp + 0x10]; call [rax]
0x00068f1a : add [rax], al; add [rax], al; nop ; mov eax, [rdi]; shr eax, 4; and eax, 1; ret
0x0014dc71 : push rsi; stc ; mov ecx, [rsi - 4]; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x000623da : mov [rdx], ecx; mov edx, [rax]; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x0015bcac : add [rax], al; add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x000ee19d : add [rsi - 0x70], ah; mov eax, [rsi]; mov [rdi + 0x108], eax; xor eax, eax; ret
0x00153a99 : adc ecx, [rsp + rax + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx
0x000145d4 : push -0x3b7cb7f8; sub [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x0012b423 : mov rcx, [rsp + 0x20]; mov rdx, [rsp + 0x18]; mov rsi, [rsp + 0x10]; call [rax]
0x00148a74 : adc [rax], ebp; add [rdi + rax*8], ah; add es:[rax], al; add [rax - 1], bh; ret
0x000658fc : add [rax], al; add [rax], al; mov rax, [rdi + 0x48]; mov eax, [rax + 0x4c]; ret
0x001387a0 : mov [rax + rdx*8 - 4], ecx; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0003b91d : mov [rbp - 0x4e0], r11; mov rdi, r14; mov rdx, [rbp - 0x510]; call [r15 + 0x38]
0x0012b9e0 : adc [rbp + 0x75595ac0], al; mov rax, [rbp + 8]; mov rdi, rbp; call [rax + 0x20]
0x00097a06 : add r11d, r8d; nop [rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi + 2]; ret
0x000fe526 : add [rdx + 0x64], bh; mov eax, [rax + 0x38]; test eax, eax; cmove eax, edx; ret
0x000473b9 : mov [rbp - 0x4c0], eax; mov rdx, [rbp - 0x4d8]; mov rsi, r15; call [r14 + 0x38]
0x0012bd7f : add [rbp + 0x489774c0], al; mov eax, [rbx + 8]; mov rdi, rbx; call [rax + 0x20]
0x00149d8b : lea edx, [rip + 0x4421f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0013b8d6 : add [rax], al; mov rax, [rdi + 8]; mov [rsp], rbp; mov rsi, rsp; call [rax + 8]
0x0012161b : add [rax], al; add [rax], al; add [rax - 0x7c], al; div [rsp + rdx + 0x78]; ret
0x00134d00 : mov eax, [rdi + 0x54]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0007dbed : add [rax], al; add [rdx - 1], bh; bsf eax, edi; cmove eax, edx; add eax, 1; ret
0x0009bf8b : add [rbx + rcx*4 + 4], eax; xchg [rbp - 0x7b], eax; sal [rbp - 0x35], 0xf3; ret
0x00063156 : add [rax], al; add [rax - 0x39], cl; add [rax], al; add [rax], al; pop rbx; ret
0x0000f3dd : add [rax - 0x75], cl; add [rax - 0x75], cl; mov rax, [rax + rdi*4 + 0x200]; ret
0x00134cd8 : mov eax, [rdi + 0x58]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0011feed : add [rax], al; add [rax], al; movsxd rdx, eax; add rdi, rdx; mov [r9], rdi; ret
0x00149d8a : lea r10, [rip + 0x4421f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000ed86b : add [rax], al; nop [rax]; mov eax, [rdi + 4]; mov [rsi], eax; xor eax, eax; ret
0x00152d34 : add [rax], al; nop cs:[rax + rax]; movzx edx, [rsi - 2]; mov [rdi - 2], dx; ret
0x00064d39 : push rax; push rbx; mov rcx, [rsp + 0x20]; lea r8, [rsp + 0x38]; call [r13 + 8]
0x001320f4 : mov rdi, [r15]; lea rsi, [rax + 0x18]; mov rax, [rdi + 0x38]; call [rax + 0x10]
0x0003b91e : mov [rbp - 0x4e0], ebx; mov rdi, r14; mov rdx, [rbp - 0x510]; call [r15 + 0x38]
0x00097b95 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret
0x0006f57c : adc al, 0; add [rax], al; add [rcx + 0x4789246f], cl; adc [rbx + 0x5d], bl; ret
0x00064877 : mov edx, [rdi + 0x40]; sub rdx, rsi; mov [rsp + 8], rcx; mov rdi, r15; call rax
0x00096479 : sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; ret
0x0001d028 : not edx; and eax, edx; movd xmm1, eax; movss [rdi], xmm1; subss xmm0, xmm1; ret
0x00096d56 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x0012b710 : adc [rbp + 0x75595ac0], al; mov rax, [r15 + 8]; mov rdi, r15; call [rax + 0x20]
0x0009a46f : adc [rdi + 0x20], esi; movups xmm[rdi + 0x30], xmm7; movups xmm[r11], xmm8; ret
0x000f6a03 : add [rcx + 0x5c], al; mov [rip + 0x2d6448], eax; lea rax, [rip + 0x2d6415]; ret
0x0014cef3 : add [rax], r8b; nop cs:[rax + rax]; mov rdx, [rsi - 8]; mov [rdi - 8], rdx; ret
0x000faa6a : stosb [rdi], al; or ebp, [rip - 0x3b7cb800]; adc [rbx + 0x5d], bl; pop r12; ret
0x00160103 : mov [rdx], rax; mov eax, [rcx + 6]; mov [rdx + 6], eax; lea rax, [rdx + 9]; ret
0x00095725 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x00132afc : adc eax, edi; add eax, [rax]; add [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x0001ccb8 : not rdx; and rax, rdx; movq xmm1, rax; movsd [rdi], xmm1; subsd xmm0, xmm1; ret
0x000326f9 : adc rdx, r8; mov [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret
0x0016004c : add [rax], al; add [rax], al; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret
0x00020c71 : mov edx, [rsp + 0x10]; mov rsi, r15; mov rdi, r13; mov rax, [rsp + 8]; call rax
0x0009963e : add [rax], al; mov dx, [rsi]; mov [rdi], dx; xor ch, ch; mov [rdi + 2], ch; ret
0x000339d6 : add [rax], al; add [rax], eax; or rax, rdx; mov [rdi + 8], rax; mov eax, 2; ret
0x0013ed23 : sub [rax], eax; add [rax], al; add [rax], al; add rsp, 8; pop rbx; pop rbp; ret
0x0001cec8 : add [rax], al; add [rax], al; nop [rax]; pmovmskb eax, xmm0; and eax, 0x80; ret
0x00134cb0 : mov eax, [rdi + 0x48]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0009a3e7 : adc [rcx - 0x20], edi; movups xmm[rcx - 0x30], xmm8; movups xmm[r11], xmm4; ret
0x001600e4 : mov [rdx], eax; mov eax, [rcx + 5]; mov [rdx + 5], eax; lea rax, [rdx + 8]; ret
0x00020c70 : mov rdx, [rsp + 0x10]; mov rsi, r15; mov rdi, r13; mov rax, [rsp + 8]; call rax
0x0013c84c : add [rax], al; add [rax], al; mov rax, [rdi + 0x18]; sub rax, [rdi + 0x20]; ret
0x0001ccb9 : not edx; and rax, rdx; movq xmm1, rax; movsd [rdi], xmm1; subsd xmm0, xmm1; ret
0x00066530 : add [rax - 0x77], rcx; sub [rax - 0x78], r8b; cmp [rcx + rcx*4 - 0x30], al; ret
0x0005ba5a : adc eax, [rax]; movzx eax, al; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x001202ec : adc ecx, [rax - 0x7b]; sar [rax + 0x14], cl; mov rax, rdx; movsxd rdx, esi; ret
0x0001fbee : add [rax], al; add r13, r15; mov rdx, r12; mov rsi, r13; mov rdi, rbx; call rbp
0x0001ee66 : add [rax], al; lea eax, [rdx + 1]; mov [rip + 0x3ab06b], eax; mov eax, edx; ret
0x001600d2 : mov [rdx], eax; mov eax, [rcx + 3]; mov [rdx + 3], eax; lea rax, [rdx + 6]; ret
0x001320f5 : mov edi, [rdi]; lea rsi, [rax + 0x18]; mov rax, [rdi + 0x38]; call [rax + 0x10]
0x00097bb6 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret
0x000623d9 : mov [rdx], rcx; mov edx, [rax]; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x0003a5f8 : mov [rbp - 0x500], r11; mov rsi, [rbp - 0x4f8]; mov rdi, r14; call [rax + 0x38]
0x0013881d : sbb [rax + rdx + 0x48], dh; add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x00064876 : mov rdx, [r15 + 0x40]; sub rdx, rsi; mov [rsp + 8], rcx; mov rdi, r15; call rax
0x0015824b : lea edx, [rip + 0x35e5f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00148b0a : lea r10, [rip + 0x4541f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00153cd7 : xchg [rax + rax], eax; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d490 : mov dx, [rsi - 3]; mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x001560da : lea r10, [rip + 0x37f4f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00131da0 : mov eax, [rdi + 0xb8]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x00131dd0 : mov eax, [rdi + 0xb4]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x000785ff : add [rbx + 0x4c], bl; mov esi, ebp; pop rbp; pop r12; pop r13; pop r14; jmp rax
0x00097d79 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret
0x000872fb : mov [rdi + 4], ax; movzx eax, [rsp + 0xe]; mov [rdi + 6], al; mov rax, rdi; ret
0x0002307e : mov ecx, eax; mov r8, rdx; mov [rdi + 8], rcx; xor eax, eax; mov [rdi], r8; ret
0x00169757 : xchg eax, ebp; add [rax], al; add [rbx + 0x14840c0], al; clc ; vzeroupper ; ret
0x00160104 : mov [rdx], eax; mov eax, [rcx + 6]; mov [rdx + 6], eax; lea rax, [rdx + 9]; ret
0x00096f19 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x0015824a : lea r10, [rip + 0x35e5f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00047dec : dec [rax + 1]; clc ; mov r8, rcx; mov [rbp - 0x510], 1; xor r15d, r15d; jmp rax
0x00066531 : add [rax - 0x77], ecx; sub [rax - 0x78], r8b; cmp [rcx + rcx*4 - 0x30], al; ret
0x0013c67d : adc [rbx - 0x3d], bl; mov rax, [rdi + 8]; lea rsi, [rsp + 4]; call [rax + 0x40]
0x0003b1e0 : add rax, rsi; mov r11, rdx; mov [rbp - 0x518], 0; mov [rbp - 0x528], 1; jmp rax
0x000f6be3 : add [rcx + 0x5c], al; mov [rip + 0x2d6268], eax; lea rax, [rip + 0x2d6235]; ret
0x00088eea : lea r10, [rip + 0x10507f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0011b120 : add rax, 1; mov [rbx + 0x30], rax; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret
0x001712ea : adc [rsi - 0x75], ah; mov cx, ss:[rcx - 2]; mov [rdi], si; mov [r9 - 2], cx; ret
0x00047b33 : add [rax], al; lea rax, [rip + 0x14]; mov r8, rdx; mov [rbp - 0x4f8], 1; jmp rax
0x0012ba92 : lea eax, [rip + 0xb8]; lea rdx, [rip + 0xf781]; lea r9, [rsp + 0x20]; call [rax]
0x0007be56 : xor eax, eax; mov [rbx + 8], rbp; mov [rbx], rdx; pop rbx; pop rbp; pop r12; ret
0x0003a847 : dec [rcx + rcx*4 - 0x3a]; mov [rbp - 0x500], r8; mov rdi, r14; call [r15 + 0x38]
0x0017388e : add [rax], al; movzx eax, [rdi - 0xb]; movzx edx, [rsi - 0xb]; sub eax, edx; ret
0x000018ad : mov rcx, r12; push 0; mov rdx, rbp; mov rsi, [rsp + 0x18]; mov r9, r13; call rbx
0x0010a61d : add [rax], al; mov rsi, r13; mov rdx, rax; mov edi, 0x2000003; call [rbx + 0x28]
0x0013b310 : mov eax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0017385e : add [rax], al; movzx eax, [rdi - 0xe]; movzx edx, [rsi - 0xe]; sub eax, edx; ret
0x0010b768 : add [rcx + rcx*4 - 0xa], cl; mov rdx, rax; mov edi, 0x2000005; call [r13 + 0x28]
0x0008d70a : lea r10, [rip + 0x10095f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x001458ae : mov edx, [rsp + 0x28]; mov r9d, [rdx]; mov rdx, r14; add r9, [rsp + 8]; call rax
0x00171eca : int1 ; dec [rax + 0x6f]; add [rdx - 0xf], esp; dec [rax + 0x6f]; jmp [r10 - 0xf]
0x0010bfd0 : inc [rcx + rcx*4 - 0x19]; mov rdx, rax; mov rsi, [rbp - 0x98]; call [r10 + 0x28]
0x00138c43 : mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; mov [rsp + 0x20], 5; call [rax + 0x18]
0x0017386e : add [rax], al; movzx eax, [rdi - 0xd]; movzx edx, [rsi - 0xd]; sub eax, edx; ret
0x00152db3 : add [rax], r8b; nop cs:[rax + rax]; movzx edx, [rsi - 1]; mov [rdi - 1], dl; ret
0x00131bdb : add [rdi], cl; adc [rsi], eax; mov rax, [rax + 0xa0]; mov [rsi + 0x10], rax; ret
0x0001ee65 : add [rax], r8b; lea eax, [rdx + 1]; mov [rip + 0x3ab06b], eax; mov eax, edx; ret
0x00097c76 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret
0x0001ee6a : add [rcx + 0x3ab06b05], ecx; add [rcx + 0x1f0fc3d0], cl; add [rax - 1], dil; ret
0x00134cee : add [rax], al; mov rax, [rdx]; bswap eax; mov [rdi + 0x58], eax; mov eax, 1; ret
0x0009ca04 : push 1; xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx
0x00094dab : add [rax - 0x7d], ecx; fdivr st(7); xor cl, cl; mov [rax], cl; mov rax, rdi; ret
0x00033a1e : mov [rdi], eax; sub eax, esi; mov [rdi + 8], r9; mov [rdx], eax; mov eax, 2; ret
0x0006f97d : sbb [rax + 0x8c48348], dl; mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret
0x00169689 : add [rax], al; vpmovmskb eax, ymm1; bsr eax, eax; add rax, rdi; vzeroupper ; ret
0x00068bb9 : add [rax + rax], bl; add [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x000326fa : adc edx, eax; mov [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret
0x00063dfc : add [rax], al; mov [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call [rbp + 0x20]
0x0016cc96 : add [rax], al; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x001113f7 : add [rax], 0; add [rax - 0x77], cl; imul eax; popfq ; imul esi; jmp [rsi + 0x2e]
0x00134c41 : movq mm0, [rdx]; mov eax, 1; mov [rdi + 0x18], 1; movups xmm[rdi + 8], xmm0; ret
0x00015836 : adc [rax - 0x7b], cl; sal [rdi + rbp - 0x75], cl; or al, [rbx - 0x7bf0fd07]; ret
0x00097ac4 : mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 0xa]; ret
0x0012b062 : dec [rdi]; test [rdi + 0x48000000], dl; mov eax, [rdi + 0x38]; call [rax + 0x18]
0x0013b435 : pop rax; mov rax, [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call [rax + 8]
0x0013bbc3 : lea esi, [rsp + 0x10]; mov [rsp + 0x10], rax; mov rax, [rdi + 8]; call [rax + 8]
0x00097bf5 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret
0x0009963d : add [rax], r8b; mov dx, [rsi]; mov [rdi], dx; xor ch, ch; mov [rdi + 2], ch; ret
0x00132b2b : add [rax], al; mov [rbp + 0x50], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x0007524b : mov al, [rax + 2]; add [rax], al; shr ecx, 3; rep stosq [rdi], rax; pop rbx; ret
0x0014d491 : mov edx, [rsi - 3]; mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x00139f96 : inc [rax]; add [rax], al; mov rax, [rbp + 0x18]; mov rdi, r12; call [rax + 0x20]
0x00133476 : add [rax], al; mov rax, [rbp + 8]; mov rsi, r12; mov rdi, rbp; call [rax + 0x48]
0x000aff71 : add [rbx + 0x415b01c7], al; mov [rbx + 0xc], edi; pop rbp; pop r12; pop r14; ret
0x000018ae : mov ecx, esp; push 0; mov rdx, rbp; mov rsi, [rsp + 0x18]; mov r9, r13; call rbx
0x00142229 : add eax, [rax]; add [rax], al; add [rax - 1], bh; pop rbx; pop rbp; pop r12; ret
0x0007b409 : add [rdi], cl; test [rax + 0x48000000], ah; mov esi, ebx; mov rdi, r12; call rax
0x0007bfb5 : add [rax + rax], cl; add [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x00136992 : movdqa xmm0, xmm[rip + 0x64716]; movaps xmm[rsp + 0x20], xmm0; call [rax + 0x28]
0x00131cb6 : add [rax], al; movdqu xmm0, xmm[rdx]; mov eax, 1; movups xmm[rdi + 8], xmm0; ret
0x0010b767 : add [rax], al; mov rsi, r14; mov rdx, rax; mov edi, 0x2000005; call [r13 + 0x28]
0x0009c50f : mov esi, ebp; mov rdi, [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx
0x00088eeb : lea edx, [rip + 0x10507f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000b45cf : add [rdi], cl; test [rdx], ebp; add eax, [rax]; add [rbx + rcx*4 + 0xd], cl; ret
0x000fca4a : add [rax], al; mov rdi, rbx; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax
0x00111538 : add [rax], 0; add [rax - 0x77], cl; imul eax; pop rsp; imul dh; jmp [rsi + 0x2e]
0x00068682 : adc [r10 + 0x2a], r14b; mov [rdi + 0x18], rax; mov [rsi], rax; xor eax, eax; ret
0x00169d9d : movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0012c96f : add bl, dh; movq mm0, [rdi + 0x38]; mov [rsi], 9; movups xmm[rsi + 8], xmm0; ret
0x00096e16 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x00038592 : push rax; add [rax - 0x77], ecx; push rcx; sub dh, al; add [rcx - 0x7d], cl; ret
0x000e2d55 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rax, [rdi]; or [rax + 8], 0x2000; ret
0x0012c937 : add bl, dh; movq mm0, [rdi + 0x20]; mov [rsi], 6; movups xmm[rsi + 8], xmm0; ret
0x00007288 : add [rax - 0x77], cl; xor [rdi], cl; test [rdi + rdi*8 - 1], al; jmp [rsi + 0xf]
0x00152d33 : add [rax], r8b; nop cs:[rax + rax]; movzx edx, [rsi - 2]; mov [rdi - 2], dx; ret
0x0017387e : add [rax], al; movzx eax, [rdi - 0xc]; movzx edx, [rsi - 0xc]; sub eax, edx; ret
0x00134b78 : xor [rdi], cl; adc [rsi], eax; mov rax, [rax + 0x40]; mov [rsi + 0x10], rax; ret
0x00030f14 : adc ecx, [rcx + 0x146348c2]; xchg eax, esi; add rdx, rsi; cmp r9d, 0x2f; jmp rdx
0x0008b4ab : lea edx, [rip + 0x102b3f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0008d70b : lea edx, [rip + 0x10095f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00049f3c : add [rax - 0x77], ecx; adc eax, [rax - 0x78]; sub [rbx + 0x5d], bl; pop r12; ret
0x0012c324 : add [rax], eax; add al, ch; xchg eax, esp; push rdi; std ; dec [rax + 0x39]; ret
0x0013b8d5 : add [rax], r8b; mov rax, [rdi + 8]; mov [rsp], rbp; mov rsi, rsp; call [rax + 8]
0x0017384e : add [rax], al; movzx eax, [rdi - 0xf]; movzx edx, [rsi - 0xf]; sub eax, edx; ret
0x00108e7f : add [rax], al; xor esi, esi; mov rdx, [rsp + 0x18]; mov edi, 0x2000004; call rcx
0x0005bf85 : lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax
0x0001ccd6 : add [rax], al; add [rax + 0x66d02148], al; movd mm1, rax; movsd [rdi], xmm1; ret
0x00131cce : add [rax], al; movdqu xmm0, xmm[rdi + 8]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x0009ca7e : push 1; xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx
0x00131db6 : add [rax], al; mov rax, [rdx]; bswap eax; mov [rdi + 0xb8], eax; mov eax, 1; ret
0x00134c48 : add bh, al; sbb [r9], r8b; add [rax], al; add [rdi], cl; adc [rdi + 8], eax; ret
0x000877da : lea r10, [rip + 0x10670f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000877db : lea edx, [rip + 0x10670f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00092145 : adc cl, [rcx + 8]; movlpd [rdx], xmm0; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x001580f1 : add al, [rax]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000921a0 : xor ah, ah; mov [rdx + 4], ah; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret
0x0012d212 : inc [rbp + 0x481974c0]; mov eax, [rbx + 0x23b8]; mov rdi, rbp; call [rax + 0x20]
0x00095885 : movq mm2, [rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x000872fc : mov [rdi + 4], eax; movzx eax, [rsp + 0xe]; mov [rdi + 6], al; mov rax, rdi; ret
0x0006dcb3 : dec [rax - 0x73]; push -0xe173515; pop rsp; or al, [rax]; nop ; mov rax, -1; ret
0x001525a0 : int3 ; cdq ; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138f7c : mov [rsp + 0xa8], 1; mov [rsp + 0xb0], 1; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x0008b4aa : lea r10, [rip + 0x102b3f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00068ab2 : adc [r10 - 0x18], r14b; mov [rdi + 0x18], rax; mov [rsi], rax; xor eax, eax; ret
0x0016cc62 : add [rax], al; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0017389e : add [rax], al; movzx eax, [rdi - 0xa]; movzx edx, [rsi - 0xa]; sub eax, edx; ret
0x0005bf84 : lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax
0x00095809 : sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x000962dd : add [rax], al; add [rbx + 0x4568a0e], cl; mov [rdi], ecx; mov [rdi + 4], dl; ret
0x0011b121 : add eax, 1; mov [rbx + 0x30], rax; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret
0x001739a0 : adc [rdi], ecx; test [rbx], bl; add al, [rax]; add [rbx - 0x7bf0ed07], al; ret 2
0x001458ad : mov rdx, [rsp + 0x28]; mov r9d, [rdx]; mov rdx, r14; add r9, [rsp + 8]; call rax
0x0009c50e : mov rsi, rbp; mov rdi, [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx
0x0016ed09 : movsxd rcx, esp; add al, [rax]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0013c2ab : add [rax], 0; add [rax], al; mov rax, [rdi + 8]; mov rsi, rsp; call [rax + 0x40]
0x00068f1b : add [rax], al; add [rsi - 0x70], ah; mov eax, [rdi]; shr eax, 4; and eax, 1; ret
0x00096d95 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x0013bbc2 : lea rsi, [rsp + 0x10]; mov [rsp + 0x10], rax; mov rax, [rdi + 8]; call [rax + 8]
0x00160184 : mov [rdx], eax; mov rax, [rcx + 6]; mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x00095d24 : lea ebx, [rip + 0xf84c6]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00099281 : lea ebx, [rip + 0xf531d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0007b582 : add [rax], al; add [rcx + rcx*4 - 0x11], cl; mov rdx, rbx; mov rsi, r12; call rax
0x000922dc : add ah, [rsi + 0xf]; adc cl, [rcx + 6]; movlpd [rdx + 6], xmm1; mov rax, rdi; ret
0x000973d4 : lea ebx, [rip + 0xf6ff6]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00096cb3 : mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; lea rax, [rdi + 0xb]; ret
0x0012c565 : xor eax, eax; mov rsi, [rsp]; mov rdi, [rsp + 0x10]; mov rcx, [rsp + 8]; call rcx
0x0014f323 : mov edx, ecx; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0010a61e : add [rcx + rcx*4 - 0x12], cl; mov rdx, rax; mov edi, 0x2000003; call [rbx + 0x28]
0x0017384d : add [rax], r8b; movzx eax, [rdi - 0xf]; movzx edx, [rsi - 0xf]; sub eax, edx; ret
0x00097b03 : mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; lea rax, [rdi + 0xc]; ret
0x0006d76d : mov [rbx + 0x40], esp; mov [rbx], edx; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x00095dad : lea ebx, [rip + 0xf843d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009685a : lea ebx, [rip + 0xf7990]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00094e4c : add ah, [rsi + 0xf]; adc cl, [rcx + 8]; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x00096cf4 : mov edx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x00099264 : lea ebx, [rip + 0xf533a]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00131db5 : add [rax], r8b; mov rax, [rdx]; bswap eax; mov [rdi + 0xb8], eax; mov eax, 1; ret
0x00097b63 : mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret
0x00095d83 : lea r11, [rip + 0xf8466]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00160163 : mov [rdx], rax; mov rax, [rcx + 5]; mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x000922bc : add ah, [rsi + 0xf]; adc cl, [rcx + 5]; movlpd [rdx + 5], xmm1; mov rax, rdi; ret
0x0009cfdf : mov r9, [rsp + 0x10]; mov rsi, [rsp + 0x18]; mov rdx, r14; mov rdi, rbp; call rbx
0x0014bed3 : sbb ebp, edi; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013c2ac : add [rax], al; add [rax], al; mov rax, [rdi + 8]; mov rsi, rsp; call [rax + 0x40]
0x0006a5c8 : mov rbp, [rdi + 0x90]; sub rbp, rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret
0x00160143 : mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; lea rax, [rdx + 0xb]; ret
0x0006d76c : mov [rbx + 0x40], r12; mov [rbx], edx; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x00096c0d : add [rax], al; add [rbx + 0x477880e], cl; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x0004551c : dec [rcx + rcx*4 - 0x1a]; mov rdi, [rbp - 0x8d0]; mov rdx, r13; call [rbx + 0x38]
0x000f1a83 : adc [rcx - 0x389bffd3], eax; add [rsi], dl; add [rax], al; add [rax - 1], bh; ret
0x0001f898 : mov [rsp + 8], ebx; nop [rax]; mov rsi, r13; mov rdi, r14; mov rdx, r12; call rbp
0x00065b60 : mov ecx, edi; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x00047815 : add rax, rdi; mov r8, rcx; mov [rbp - 0x4d8], 1; mov [rbp - 0x4f0], 0x20; jmp rax
0x00160164 : mov [rdx], eax; mov rax, [rcx + 5]; mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x0009740f : lea ebx, [rip + 0xf6fbb]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0012b9cb : lea r8, [rip + 0x17e]; mov esi, 4; mov rdi, rbp; lea r9, [rsp + 0x20]; call [rax]
0x00096cf3 : mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x0005dcca : push rbx; mov rbp, rdx; mov rbx, rdi; sub rsp, 8; mov rdi, [rdi + 0xe0]; call rax
0x000e2d54 : add [rsi + 0x2e], spl; nop [rax + rax]; mov rax, [rdi]; or [rax + 8], 0x2000; ret
0x000226ee : add [rax], al; add [rax], al; mov rax, [rax]; pop rbx; mov eax, [rax + 0x58]; ret
0x00095df6 : lea ebx, [rip + 0xf83f4]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000ee56b : sub [rsi - 0x389bffd3], esi; add [rsi], dl; add [rax], al; add [rax - 1], bh; ret
0x0011feee : add [rax], al; add [rax + 0x63], cl; ror [rax + 1], 1; xlatb ; mov [r9], rdi; ret
0x00096d14 : mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x00096cd4 : mov edx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x00065984 : mov ecx, edi; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x00099335 : lea r11, [rip + 0xf5268]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00097b43 : mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret
0x00111539 : add [rax], al; add [rax - 0x77], cl; imul eax; pop rsp; imul dh; jmp [rsi + 0x2e]
0x0009675a : lea ebx, [rip + 0xf7b20]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009745d : lea ebx, [rip + 0xf6f6d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00097434 : lea ebx, [rip + 0xf6f96]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009807a : lea ebx, [rip + 0xf6350]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0000f410 : mov rax, [rsi + 0x68]; movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x0003aac3 : add [rax], al; lea rax, [rip - 0xbc]; mov r11, rdx; mov [rbp - 0x500], 1; jmp rax
0x000922bb : adc eax, [rdx]; movlpd xmm1, [rcx + 5]; movlpd [rdx + 5], xmm1; mov rax, rdi; ret
0x0001f899 : pop rsp; and al, 8; nop [rax]; mov rsi, r13; mov rdi, r14; mov rdx, r12; call rbp
0x00097f5a : lea r11, [rip + 0xf64ff]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00046f14 : add [rax + 1], cl; clc ; mov r8, rcx; mov [rbp - 0x4c0], 1; xor esi, esi; jmp rax
0x00171941 : push rsi; std ; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x000922fc : add ah, [rsi + 0xf]; adc cl, [rcx + 7]; movlpd [rdx + 7], xmm1; mov rax, rdi; ret
0x0015326d : add [rax], al; add [rbx + 0xe8b0256], cl; mov [rdi + 2], edx; mov [rdi], ecx; ret
0x001532dd : add [rax], al; add [rbx + 0xe8b0156], cl; mov [rdi + 1], edx; mov [rdi], ecx; ret
0x0017387d : add [rax], r8b; movzx eax, [rdi - 0xc]; movzx edx, [rsi - 0xc]; sub eax, edx; ret
0x00128d01 : adc [rcx], dh; ror [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; mov rcx, r13; call r10
0x00160034 : mov [rdx], eax; mov rax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x0001d03d : add [rax], al; add [rip - 0x80000000], ah; movd xmm1, eax; movss [rdi], xmm1; ret
0x00099233 : lea r11, [rip + 0xf536a]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00095d41 : lea ebx, [rip + 0xf84a9]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014df9b : adc esi, ebx; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00065a66 : xor eax, eax; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx
0x00097f8f : lea ebx, [rip + 0xf64cb]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00068149 : mov [rbx + 0x10], eax; mov rax, [rbx + 0x20]; mov [rbx + 0x28], rax; pop rbx; ret
0x0009676f : lea ebx, [rip + 0xf7b0b]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009747d : lea ebx, [rip + 0xf6f4d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00097a3b : add [rax], al; add [rax], al; add [rbx + 0x48178916], cl; lea eax, [rdi + 4]; ret
0x000979fb : add [rax], al; add [rax], al; add [rdx + 0x48178816], cl; lea eax, [rdi + 1]; ret
0x0016eb5f : popfq ; add [rax], al; add [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper ; ret
0x00145598 : sub [rax], al; call [rax + 0x178]; mov [rbx], rax; pop rax; pop rdx; pop rbx; ret
0x00097b23 : mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret
0x0009740e : lea r11, [rip + 0xf6fbb]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00095d5e : lea r11, [rip + 0xf848b]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00096d13 : mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x00128990 : mov rdx, [r15]; mov [rbx], rax; mov r8, rbp; mov rcx, r14; mov rdi, r13; call r12
0x000992ec : lea r11, [rip + 0xf52b1]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00099263 : lea r11, [rip + 0xf533a]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00095d84 : lea ebx, [rip + 0xf8466]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00102eb8 : mov [rdx + 0x10], rcx; mov [r8], rax; nop ; mov [rip + 0x2c71c5], 0; pop rbp; ret
0x001694fa : add [rax], 0; add bl, ch; sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper ; ret
0x0016008b : add [rax], al; add [rax], al; add [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret
0x00160033 : mov [rdx], rax; mov rax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x0017440b : add [rcx], eax; add [rcx], eax; add [rcx], eax; imul rax, rdx; shr rax, 0x38; ret
0x000ed5c9 : mov [rbx + 4], edx; xor edx, edx; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x0006cb4c : xor [r8 - 0x77], cl; and [r9 + 0x48c03113], cl; add esp, 8; pop rbx; pop rbp; ret
0x00100d0b : mov [rsi - 0x389bffd4], ecx; add [rsi], dl; add [rax], al; add [rax - 1], bh; ret
0x00095d23 : lea r11, [rip + 0xf84c6]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00102eb9 : mov [rdx + 0x10], ecx; mov [r8], rax; nop ; mov [rip + 0x2c71c5], 0; pop rbp; ret
0x00095dac : lea r11, [rip + 0xf843d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009930d : lea ebx, [rip + 0xf5291]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00095d5f : lea ebx, [rip + 0xf848b]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0017385d : add [rax], r8b; movzx eax, [rdi - 0xe]; movzx edx, [rsi - 0xe]; sub eax, edx; ret
0x001531fd : add [rax], al; add [rbx + 0xe8b0356], cl; mov [rdi + 3], edx; mov [rdi], ecx; ret
0x0010a61c : add [rax], r8b; mov rsi, r13; mov rdx, rax; mov edi, 0x2000003; call [rbx + 0x28]
0x0012e8da : add [rax - 0x75], cl; cmp ecx, [rcx - 0xdd6b7ff]; mov rbp, rdx; call [rbx + 0x10]
0x00096859 : lea r11, [rip + 0xf7990]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0006ac75 : add [rax - 0x39], cl; adc [r8], al; add [rax], al; add [rbp + 0x58d48c0], al; ret
0x00160183 : mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x0014f083 : sub ebp, ecx; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0017386d : add [rax], r8b; movzx eax, [rdi - 0xd]; movzx edx, [rsi - 0xd]; sub eax, edx; ret
0x0017388d : add [rax], r8b; movzx eax, [rdi - 0xb]; movzx edx, [rsi - 0xb]; sub eax, edx; ret
0x00095d40 : lea r11, [rip + 0xf84a9]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00065a65 : xor r8d, r8d; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx
0x0000f411 : mov eax, [rsi + 0x68]; movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x0008a899 : add [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret
0x000922fb : adc eax, [rdx]; movlpd xmm1, [rcx + 7]; movlpd [rdx + 7], xmm1; mov rax, rdi; ret
0x0012ce42 : add [rax], al; mov rax, [rsp + 8]; mov esi, r12d; mov rdi, rbp; call [rax + 0x30]
0x00098079 : lea r11, [rip + 0xf6350]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00160123 : mov [rdx], rax; mov eax, [rcx + 7]; mov [rdx + 7], eax; lea rax, [rdx + 0xa]; ret
0x000992c3 : lea r11, [rip + 0xf52da]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000973f1 : lea ebx, [rip + 0xf6fd9]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0011fe57 : movzx ecx, [rax + 1]; add rax, 2; mov [r8], ecx; mov [r9], rax; mov eax, edx; ret
0x000ee683 : adc [rbp - 0x389bffd3], esi; add [rsi], dl; add [rax], al; add [rax - 1], bh; ret
0x00096c93 : mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; lea rax, [rdi + 0xa]; ret
0x000992c4 : lea ebx, [rip + 0xf52da]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001601a4 : mov [rdx], eax; mov rax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x0006a5c9 : mov ebp, [rdi + 0x90]; sub rbp, rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret
0x00131dd1 : xchg [rax + rax - 0x37f10000], esi; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0009676e : lea r11, [rip + 0xf7b0b]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014c563 : mov esi, esi; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00065b5f : mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x00099aba : lea ebx, [rip + 0xf4ae4]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00095df5 : lea r11, [rip + 0xf83f4]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00097f7a : lea ebx, [rip + 0xf64e0]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0006d871 : add [rax], al; add [rax - 0x39], cl; or [rax], al; add [rax], al; add bl, dh; ret
0x0006917b : add [rax], 0; add [rax - 0x77], cl; imul eax; sbb [rdx - 7], edi; jmp [rsi + 0xf]
0x0017389d : add [rax], r8b; movzx eax, [rdi - 0xa]; movzx edx, [rsi - 0xa]; sub eax, edx; ret
0x0009747c : lea r11, [rip + 0xf6f4d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00097ae3 : mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; lea rax, [rdi + 0xb]; ret
0x00097f79 : lea r11, [rip + 0xf64e0]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00096759 : lea r11, [rip + 0xf7b20]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000992ed : lea ebx, [rip + 0xf52b1]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009930c : lea r11, [rip + 0xf5291]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00068148 : mov [rbx + 0x10], rax; mov rax, [rbx + 0x20]; mov [rbx + 0x28], rax; pop rbx; ret
0x00097f8e : lea r11, [rip + 0xf64cb]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00097b24 : mov edx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret
0x00099234 : lea ebx, [rip + 0xf536a]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000973d3 : lea r11, [rip + 0xf6ff6]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00095dcc : lea r11, [rip + 0xf841d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00160124 : mov [rdx], eax; mov eax, [rcx + 7]; mov [rdx + 7], eax; lea rax, [rdx + 0xa]; ret
0x00095cf3 : lea r11, [rip + 0xf84f6]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000973a3 : lea r11, [rip + 0xf7026]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00044821 : dec [rcx + rcx*4 - 0xa]; mov [rbp - 0x950], r9b; mov rdi, [rbp - 0x8d0]; call rax
0x0009929f : lea ebx, [rip + 0xf52ff]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014ec93 : sbb ecx, edx; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c2c3 : sub ecx, edi; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097433 : lea r11, [rip + 0xf6f96]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00097f5b : lea ebx, [rip + 0xf64ff]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009673a : lea r11, [rip + 0xf7b3f]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00064ea4 : push [rax + 0x38]; mov rcx, [rbx + 0x10]; lea r8, [rsp + 0x10]; call [rbp + 0x18]
0x0009929e : lea r11, [rip + 0xf52ff]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000922db : adc eax, [rdx]; movlpd xmm1, [rcx + 6]; movlpd [rdx + 6], xmm1; mov rax, rdi; ret
0x001113f8 : add [rax], al; add [rax - 0x77], cl; imul eax; popfq ; imul esi; jmp [rsi + 0x2e]
0x00160144 : mov [rdx], eax; mov eax, [rcx + 8]; mov [rdx + 8], eax; lea rax, [rdx + 0xb]; ret
0x0009745c : lea r11, [rip + 0xf6f6d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000b4c7d : inc edi; and [r8], r8b; add [rax], al; add cl, ch; mov sil, 0xff; jmp [rsi + 0xf]
0x00097b44 : mov edx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret
0x0016ea21 : add [rax + 1], cl; clc ; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper ; ret
0x000973a4 : lea ebx, [rip + 0xf7026]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0013ed1c : mov eax, [rax + 0x18]; mov [rip + 0x290ab7], 0; add rsp, 8; pop rbx; pop rbp; ret
0x00095cf4 : lea ebx, [rip + 0xf84f6]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009673b : lea ebx, [rip + 0xf7b3f]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0007b760 : push rsp; sysexit ; add [rbp + 0x484874c0], al; add esp, 8; pop rbx; pop rbp; ret
0x00165498 : add [rax], eax; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00099280 : lea r11, [rip + 0xf531d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00166da1 : add [rax], eax; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0009966e : add [rax], al; mov edx, [rsi]; mov [rdi], edx; xor ch, ch; mov [rdi + 4], ch; ret
0x0001e593 : add [rsi - 0x389bffc6], esi; add [rsi], dl; add [rax], al; add [rax - 1], bh; ret
0x0009a646 : adc bl, dh; movq [rdi + rdx - 0x10], mm0; movdqu xmm[rdi + rdx - 0x20], xmm0; ret
0x00097b64 : mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret
0x00096cd3 : mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x00094e4b : adc eax, [rdx]; movlpd xmm1, [rcx + 8]; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x0009cd68 : mov edx, [rsp + 0x10]; mov rsi, [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx
0x000bf4fa : int1 ; mov rdx, [rsp + 0x68]; mov rsi, [rsp + 0x60]; mov rdi, [rsp + 8]; call r12
0x001454e0 : add [rax], al; add [rbp + 0x23], dh; mov rax, [rip + 0x289cec]; call [rax + 0x10]
0x00065983 : mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x000974a5 : lea r11, [rip + 0xf6f24]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00024ebc : sbb [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; pop r13; pop r14; pop r15; ret
0x0007b408 : add [r15], r9b; test [rax + 0x48000000], ah; mov esi, ebx; mov rdi, r12; call rax
0x00166d6d : add [rax], eax; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x00145597 : sub [r8], r8b; call [rax + 0x178]; mov [rbx], rax; pop rax; pop rdx; pop rbx; ret
0x0001f897 : mov [rsp + 8], r11; nop [rax]; mov rsi, r13; mov rdi, r14; mov rdx, r12; call rbp
0x0009cd67 : mov rdx, [rsp + 0x10]; mov rsi, [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx
0x0015bdc2 : add [rax - 0x77], ecx; add cl, [rbx + 0x42890841]; or [rax - 0x77], cl; clc ; ret
0x00099ab9 : lea r11, [rip + 0xf4ae4]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0012b9cf : add [rax], eax; add [rsi + 4], bh; mov rdi, rbp; lea r9, [rsp + 0x20]; call [rax]
0x001528b2 : push rsi; cmc ; mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x00095dcd : lea ebx, [rip + 0xf841d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000974a6 : lea ebx, [rip + 0xf6f24]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001601a3 : mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x000973f0 : lea r11, [rip + 0xf6fd9]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00099336 : lea ebx, [rip + 0xf5268]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00047816 : add eax, edi; mov r8, rcx; mov [rbp - 0x4d8], 1; mov [rbp - 0x4f0], 0x20; jmp rax
0x00128991 : mov edx, [rdi]; mov [rbx], rax; mov r8, rbp; mov rcx, r14; mov rdi, r13; call r12
0x00150fb7 : lea ebx, [rip + 0x4b1f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153f17 : lea ebx, [rip + 0x48793]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014caa1 : lea ebx, [rip + 0x4f149]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001539d4 : lea ebx, [rip + 0x48a96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001694fb : add [rax], al; add bl, ch; sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper ; ret
0x0012e8fd : add eax, 4; mov [rbx + 0x20], rax; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x0011fee7 : lea eax, [rdx + 1]; mov [r8], 0; movsxd rdx, eax; add rdi, rdx; mov [r9], rdi; ret
0x000482f0 : mov [rbp - 0x4d8], r8; mov rdx, r14; mov rsi, r15; mov rdi, r13; call [rax + 0x38]
0x00098830 : lea r11, [rip + 0xf5c6d]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00151136 : lea r11, [rip + 0x4b073]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000954da : lea r11, [rip + 0xf8c0f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001508e8 : lea ebx, [rip + 0x4b4c2]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000987a7 : lea r11, [rip + 0xf5cf6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014cbf1 : lea ebx, [rip + 0x4eff9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151974 : lea ebx, [rip + 0x4a5f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150cb7 : lea ebx, [rip + 0x4b4f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095bee : lea r11, [rip + 0xf857b]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00153cd3 : lea r11, [rip + 0x48796]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153796 : lea r11, [rip + 0x48f13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c6b1 : lea ebx, [rip + 0x4f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f470 : lea r11, [rip + 0x4c939]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154bd3 : lea r11, [rip + 0x47896]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015259e : lea ebx, [rip + 0x499cc]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ec91 : lea ebx, [rip + 0x4d119]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009878a : lea r11, [rip + 0xf5d13]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014c950 : lea r11, [rip + 0x4f299]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000998d0 : mov [rdi + 0x10], edx; mov [rdi + 0x18], cl; xor ch, ch; mov [rdi + 0x19], ch; ret
0x00096b55 : lea ebx, [rip + 0xf7769]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014e1b6 : lea r11, [rip + 0x4dbf3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154754 : lea ebx, [rip + 0x47d16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150b79 : lea r11, [rip + 0x4b630]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0016e8ef : add bl, dh; bsf eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper ; ret
0x00151a36 : lea r11, [rip + 0x4a773]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f525 : xchg eax, ecx; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099185 : lea ebx, [rip + 0xf5399]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014bc31 : lea ebx, [rip + 0x4ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013b7d0 : movsx rax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0014be32 : lea r11, [rip + 0x4fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f522 : lea r11, [rip + 0x4c887]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014df98 : lea r11, [rip + 0x4de11]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c411 : lea ebx, [rip + 0x4f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cca2 : lea r11, [rip + 0x4ef47]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097a0b : add [rax], 0; add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi + 2]; ret
0x0014e366 : lea r11, [rip + 0x4da43]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e563 : lea ebx, [rip + 0x4d847]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151a37 : lea ebx, [rip + 0x4a773]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000991b1 : lea ebx, [rip + 0xf536d]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014e4b0 : lea r11, [rip + 0x4d8f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009878b : lea ebx, [rip + 0xf5d13]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00151df4 : lea ebx, [rip + 0x4a176]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c0d3 : lea ebx, [rip + 0x4fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ede1 : lea ebx, [rip + 0x4cfc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cca3 : lea ebx, [rip + 0x4ef47]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151eb7 : lea ebx, [rip + 0x4a2f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00113a5f : add [rcx - 0x3c37f008], cl; nop cs:[rax + rax]; nop ; mov eax, edi; ror ax, 8; ret
0x000955ec : add [rax], al; add [rax], al; mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; ret
0x00098732 : lea r11, [rip + 0xf5d6b]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00066d97 : add [rax], 0; add [rax - 0x77], cl; imul eax; std ; popfq ; stc ; jmp [rsi + 0x2e]
0x0005f7b2 : add [rax], al; add [rax - 0x77], cl; fimul [rcx + rcx*4 - 0x1a]; call [r13 + 0x38]
0x00098733 : lea ebx, [rip + 0xf5d6b]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009728f : lea ebx, [rip + 0xf70bb]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00136b7a : mov esi, 1; lea r8, [rip - 0x7206]; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x00154453 : lea r11, [rip + 0x48016]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ede0 : lea r11, [rip + 0x4cfc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151f74 : lea ebx, [rip + 0x49ff6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012e8be : mov edx, 1; mov [rbx + 0x20], rsi; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x00096a83 : lea ebx, [rip + 0xf783b]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00154817 : lea r11, [rip + 0x47e92]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151d38 : lea ebx, [rip + 0x4a472]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151074 : lea ebx, [rip + 0x4aef6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001371b8 : lea r8, [rip - 0x773f]; mov esi, 7; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0014bd81 : lea ebx, [rip + 0x4fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000954f7 : lea r11, [rip + 0xf8bf2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00096b1c : lea r11, [rip + 0xf77a1]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009910b : lea ebx, [rip + 0xf5413]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00095482 : lea r11, [rip + 0xf8c67]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014bed0 : lea r11, [rip + 0x4fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096af8 : lea ebx, [rip + 0xf77c6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00138f9b : add [rax], al; call [rax + 0x18]; mov rax, [r15 + 8]; mov rdi, r15; call [rax + 8]
0x00150ef3 : lea r11, [rip + 0x4b076]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00098865 : lea r11, [rip + 0xf5c38]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00153854 : lea ebx, [rip + 0x48c16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0001fc89 : mov [rax + rax], al; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x0014c6b0 : lea r11, [rip + 0x4f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099807 : movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; xor ch, ch; mov [rdi + 0x13], ch; ret
0x001507fc : lea r11, [rip + 0x4b5ad]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000955b6 : lea ebx, [rip + 0xf8b34]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00154997 : lea ebx, [rip + 0x47d13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e750 : lea r11, [rip + 0x4d659]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151af3 : lea r11, [rip + 0x4a476]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bce3 : lea ebx, [rip + 0x4ff07]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001518b7 : lea ebx, [rip + 0x4a8f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014de23 : lea r11, [rip + 0x4ddc6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009910a : lea r11, [rip + 0xf5413]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00153cd4 : lea ebx, [rip + 0x48796]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009551d : lea ebx, [rip + 0xf8bcd]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00153fd4 : lea ebx, [rip + 0x48496]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000f57e : add [rax], al; mov rax, [rsi + 0x70]; movsxd rdi, edi; mov eax, [rax + rdi*4]; ret
0x0014c765 : xchg esp, esi; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150e37 : lea ebx, [rip + 0x4b373]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154eff : lea ebx, [rip + 0x477ab]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153797 : lea ebx, [rip + 0x48f13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bd80 : lea r11, [rip + 0x4fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d0a9 : push rsi; cld ; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x001289f0 : mov rdx, [r15]; mov [rbx], rax; xor r8d, r8d; mov rcx, r14; mov rdi, r13; call r12
0x0014eaa2 : lea r11, [rip + 0x4d307]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00103316 : add [rax], al; mov rax, [rip + 0x2c9f49]; mov rax, [rax + 0x18]; add [rax], 1; ret
0x000955b5 : lea r11, [rip + 0xf8b34]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000990a4 : lea ebx, [rip + 0xf547a]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00099200 : lea r11, [rip + 0xf531d]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00154c97 : lea ebx, [rip + 0x47a13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014dd4a : lea ebx, [rip + 0x4dea0]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095cc0 : lea r11, [rip + 0xf84a9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00099128 : lea ebx, [rip + 0xf53f6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001534db : lea r11, [rip + 0x48f8e]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000e4a71 : mov r9, r15; mov rdx, [r14]; mov rsi, [rbp - 0x1f0]; lea r8, [rax + r13]; call r12
0x00154097 : lea ebx, [rip + 0x48613]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154397 : lea ebx, [rip + 0x48313]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00049f3a : lea edx, [rax + 1]; mov [rbx], rdx; mov [rax], bpl; pop rbx; pop rbp; pop r12; ret
0x0014c801 : lea ebx, [rip + 0x4f3e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154216 : lea r11, [rip + 0x48493]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150731 : lea r11, [rip + 0x4b678]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012fa03 : int 0xff; inc [rbp - 0x3f6af040]; movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret
0x001518b6 : lea r11, [rip + 0x4a8f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154996 : lea r11, [rip + 0x47d13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150732 : lea ebx, [rip + 0x4b678]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151673 : lea r11, [rip + 0x4a8f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001509a5 : lea ebx, [rip + 0x4b405]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c561 : lea ebx, [rip + 0x4f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00092187 : add [rsi - 0x77], esp; add cl, [rdx + 0x42880241]; add cl, [rax - 0x77]; clc ; ret
0x0014bf83 : lea ebx, [rip + 0x4fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099888 : movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; xor ch, ch; mov [rdi + 0x17], ch; ret
0x000abc2f : push 0; xor r8d, r8d; mov rcx, r13; mov rdi, [r14]; lea r9, [rsp + 0x30]; call r12
0x000998cf : mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; xor ch, ch; mov [rdi + 0x19], ch; ret
0x000997c7 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; xor ch, ch; mov [rdi + 0x11], ch; ret
0x001539d3 : lea r11, [rip + 0x48a96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015240b : lea ebx, [rip + 0x49d9f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096adb : lea ebx, [rip + 0xf77e3]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014bb93 : lea ebx, [rip + 0x50057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151af4 : lea ebx, [rip + 0x4a476]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014caa0 : lea r11, [rip + 0x4f149]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bed1 : lea ebx, [rip + 0x4fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154217 : lea ebx, [rip + 0x48493]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151737 : lea ebx, [rip + 0x4aa73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0016249b : mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; cmp [rax], 1; sbb rax, -1; ret
0x0014f1d0 : lea r11, [rip + 0x4cbd9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009553f : lea ebx, [rip + 0xf8bab]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014bf82 : lea r11, [rip + 0x4fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e8a1 : lea ebx, [rip + 0x4d509]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e275 : lea r11, [rip + 0x4db34]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f1d1 : lea ebx, [rip + 0x4cbd9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f283 : lea ebx, [rip + 0x4cb27]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154696 : lea r11, [rip + 0x48013]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096a82 : lea r11, [rip + 0xf783b]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00098831 : lea ebx, [rip + 0xf5c6d]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001542d4 : lea ebx, [rip + 0x48196]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00103216 : add [rax], al; mov rax, [rip + 0x2ca049]; mov rax, [rax + 0x18]; add [rax], 1; ret
0x000987a8 : lea ebx, [rip + 0xf5cf6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00095b98 : lea ebx, [rip + 0xf85d2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00154b17 : lea ebx, [rip + 0x47b93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000fecd0 : add al, 0; add [rax], al; mov [rbx + 0x38], rcx; add rsp, 8; pop rbx; pop rbp; ret
0x0014f3d3 : lea ebx, [rip + 0x4c9d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b77c : lea r11, [rip + 0x5046d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e413 : lea ebx, [rip + 0x4d997]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001521b6 : lea r11, [rip + 0x49ff3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001545d3 : lea r11, [rip + 0x47e96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099868 : movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; xor ch, ch; mov [rdi + 0x16], ch; ret
0x00049f39 : lea rdx, [rax + 1]; mov [rbx], rdx; mov [rax], bpl; pop rbx; pop rbp; pop r12; ret
0x00152274 : lea ebx, [rip + 0x49cf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e953 : lea ebx, [rip + 0x4d457]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c223 : lea ebx, [rip + 0x4f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151373 : lea r11, [rip + 0x4abf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095581 : lea ebx, [rip + 0xf8b69]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014dd49 : lea r11, [rip + 0x4dea0]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151df3 : lea r11, [rip + 0x4a176]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154454 : lea ebx, [rip + 0x48016]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095bc1 : lea ebx, [rip + 0xf85a9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001534fd : lea r11, [rip + 0x491ac]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0007649b : adc [rcx + rcx*4 - 0x12], cl; pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rax
0x00150cb6 : lea r11, [rip + 0x4b4f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00022e23 : xchg eax, edx; pop rbx; add r10d, eax; xor eax, eax; mov [rsi], r10d; pop rbp; ret
0x00152682 : push rsi; int1 ; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x00150ef4 : lea ebx, [rip + 0x4b076]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154d53 : lea r11, [rip + 0x47716]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ed48 : lea ebx, [rip + 0x4d062]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000987ef : lea ebx, [rip + 0xf5caf]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014c4c3 : lea ebx, [rip + 0x4f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153a96 : lea r11, [rip + 0x48c13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bae0 : lea r11, [rip + 0x50109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b5c8 : lea r11, [rip + 0x50621]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cbf0 : lea r11, [rip + 0x4eff9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f672 : lea r11, [rip + 0x4c737]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000954db : lea ebx, [rip + 0xf8c0f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014e601 : lea ebx, [rip + 0x4d7a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012fa61 : int 0xff; inc [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; pop rbx; pop rbp; ret
0x0014f5c0 : lea r11, [rip + 0x4c7e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154154 : lea ebx, [rip + 0x48316]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ca02 : lea r11, [rip + 0x4f1e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000663ff : add [rax + 0xb740000], al; shr eax, 5; and eax, 1; mov edx, eax; mov eax, edx; ret
0x000998f0 : mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; xor ch, ch; mov [rdi + 0x1a], ch; ret
0x00131f13 : xor eax, eax; mov rsi, [rsp + 0x30]; mov rdi, rbx; mov rcx, [rsp + 0x28]; call rcx
0x00097238 : lea ebx, [rip + 0xf7112]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000991e5 : lea r11, [rip + 0xf5338]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00152036 : lea r11, [rip + 0x4a173]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001548d4 : lea ebx, [rip + 0x47b96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001514f3 : lea r11, [rip + 0x4aa76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014eb40 : lea r11, [rip + 0x4d269]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095cc1 : lea ebx, [rip + 0xf84a9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001508e7 : lea r11, [rip + 0x4b4c2]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153b53 : lea r11, [rip + 0x48916]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00136dcb : lea r8, [rip - 0x7352]; mov esi, 2; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x00150d73 : lea r11, [rip + 0x4b1f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150bfa : lea r11, [rip + 0x4b36f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154697 : lea ebx, [rip + 0x48013]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e9f0 : lea r11, [rip + 0x4d3b9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00135800 : mov [rax], al; add [rax], al; mov rdi, rbp; mov [r15 + 0x58], 0; call [rax + 0x28]
0x001517f3 : lea r11, [rip + 0x4a776]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154d54 : lea ebx, [rip + 0x47716]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b68e : lea ebx, [rip + 0x5055c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000998f1 : mov [rdi + 0x10], edx; mov [rdi + 0x18], cx; xor ch, ch; mov [rdi + 0x1a], ch; ret
0x00096b3f : lea ebx, [rip + 0xf777f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00095b97 : lea r11, [rip + 0xf85d2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009628f : add bl, al; nop [rax + rax]; nop cs:[rax + rax]; mov dl, [rsi]; mov [rdi], dl; ret
0x00099184 : lea r11, [rip + 0xf5399]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00151f73 : lea r11, [rip + 0x49ff6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ef30 : lea r11, [rip + 0x4ce79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cef5 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rdx, [rsi - 8]; mov [rdi - 8], rdx; ret
0x0014e1b7 : lea ebx, [rip + 0x4dbf3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154153 : lea r11, [rip + 0x48316]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015240a : lea r11, [rip + 0x49d9f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096b54 : lea r11, [rip + 0xf7769]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014cb52 : lea r11, [rip + 0x4f097]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0016249c : mov eax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; cmp [rax], 1; sbb rax, -1; ret
0x0014c951 : lea ebx, [rip + 0x4f299]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ef31 : lea ebx, [rip + 0x4ce79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097371 : lea ebx, [rip + 0xf6fd9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00098866 : lea ebx, [rip + 0xf5c38]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014bce2 : lea r11, [rip + 0x4ff07]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b999 : push rbx; add al, [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx
0x00154396 : lea r11, [rip + 0x48313]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005d743 : add [rbp + 0x48247ec0], al; mov eax, [rbx + 0x98]; mov rdi, rax; call [rax + 0x20]
0x0014ca03 : lea ebx, [rip + 0x4f1e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009551c : lea r11, [rip + 0xf8bcd]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0000f5d4 : add [rax], al; nop cs:[rax + rax]; mov rax, [rip + 0x3ba621]; add rax, fs:[0]; ret
0x001289f1 : mov edx, [rdi]; mov [rbx], rax; xor r8d, r8d; mov rcx, r14; mov rdi, r13; call r12
0x00160056 : add al, bl; nop [rax + rax]; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx + 1]; ret
0x0014b7e7 : lea ebx, [rip + 0x50403]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154a54 : lea ebx, [rip + 0x47a16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153fd3 : lea r11, [rip + 0x48496]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001520f4 : lea ebx, [rip + 0x49e76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001550b1 : lea r11, [rip + 0x473b8]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001517f4 : lea ebx, [rip + 0x4a776]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012b9cc : lea eax, [rip + 0x17e]; mov esi, 4; mov rdi, rbp; lea r9, [rsp + 0x20]; call [rax]
0x00096af7 : lea r11, [rip + 0xf77c6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009914c : lea r11, [rip + 0xf53d1]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014f5c1 : lea ebx, [rip + 0x4c7e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001515b6 : lea r11, [rip + 0x4abf3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c763 : lea ebx, [rip + 0x4f487]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b996 : lea r11, [rip + 0x50253]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151674 : lea ebx, [rip + 0x4a8f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095bef : lea ebx, [rip + 0xf857b]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00137048 : lea r8, [rip - 0x75cf]; mov esi, 6; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x000fbf14 : add [rbp - 0x46], dh; pop rbx; mov rax, rbp; mov esi, 3; pop rbp; pop r12; jmp rax
0x0014f673 : lea ebx, [rip + 0x4c737]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bb95 : push rdi; add [rip + 0x14634900], al; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx
0x00154a53 : lea r11, [rip + 0x47a16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095580 : lea r11, [rip + 0xf8b69]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014b8a5 : lea r11, [rip + 0x50344]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009728e : lea r11, [rip + 0xf70bb]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00096b1d : lea ebx, [rip + 0xf77a1]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014c612 : lea r11, [rip + 0x4f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150a1a : lea r11, [rip + 0x4b54f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000fc40c : add [rax], al; add [rax], al; mov rsi, [rbx]; mov rdi, r12; mov r13, rbx; call rbp
0x00153f16 : lea r11, [rip + 0x48793]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f471 : lea ebx, [rip + 0x4c939]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150e36 : lea r11, [rip + 0x4b373]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e600 : lea r11, [rip + 0x4d7a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00134c45 : add [rax], eax; add [rax], al; mov [rdi + 0x18], 1; movups xmm[rdi + 8], xmm0; ret
0x0014cd40 : lea r11, [rip + 0x4eea9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00132106 : xor eax, eax; mov rsi, [rsp + 0x40]; mov rdi, rbx; mov rdx, [rsp + 0x20]; call rdx
0x0005221d : lea rdx, [rax + 4]; mov [rbx], rdx; mov [rax], ebp; pop rbx; pop rbp; pop r12; ret
0x000987cd : lea ebx, [rip + 0xf5cd1]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0006cb4d : xor [rax - 0x77], cl; and [r9 + 0x48c03113], cl; add esp, 8; pop rbx; pop rbp; ret
0x0006f60c : add [rax], al; add [rax], al; mov rax, [rdi]; nop ; mov [rip + 0x35d042], eax; ret
0x00151073 : lea r11, [rip + 0x4aef6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152273 : lea r11, [rip + 0x49cf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00131dd2 : mov ah, 0; add [rax], al; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x00096b3e : lea r11, [rip + 0xf777f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00153d97 : lea ebx, [rip + 0x48913]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097237 : lea r11, [rip + 0xf7112]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001534fe : lea ebx, [rip + 0x491ac]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154bd4 : lea ebx, [rip + 0x47896]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150fb6 : lea r11, [rip + 0x4b1f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00098805 : lea ebx, [rip + 0xf5c99]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00151973 : lea r11, [rip + 0x4a5f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015259d : lea r11, [rip + 0x499cc]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000987ee : lea r11, [rip + 0xf5caf]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001509a4 : lea r11, [rip + 0x4b405]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b5c9 : lea ebx, [rip + 0x50621]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096b81 : lea ebx, [rip + 0xf773d]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0013b850 : movzx eax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0014c170 : lea r11, [rip + 0x4fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e05d : lea r11, [rip + 0x4dd4c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151c74 : lea ebx, [rip + 0x4a2f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e4b1 : lea ebx, [rip + 0x4d8f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154efe : lea r11, [rip + 0x477ab]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f320 : lea r11, [rip + 0x4ca89]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c8b2 : lea r11, [rip + 0x4f337]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00085995 : dec [rcx - 0xa743]; dec [rax - 0x976b]; dec [rdi]; test [rbx - 0x8fffff3], dl; ret
0x00151bb6 : lea r11, [rip + 0x4a5f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099201 : lea ebx, [rip + 0xf531d]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00151bb7 : lea ebx, [rip + 0x4a5f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000f5f4 : add [rax], al; nop cs:[rax + rax]; mov rax, [rip + 0x3ba649]; add rax, fs:[0]; ret
0x0014e8a0 : lea r11, [rip + 0x4d509]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151436 : lea r11, [rip + 0x4ad73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001514f4 : lea ebx, [rip + 0x4aa76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c613 : lea ebx, [rip + 0x4f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b997 : lea ebx, [rip + 0x50253]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c2c0 : lea r11, [rip + 0x4f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014efe2 : lea r11, [rip + 0x4cdc7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153a97 : lea ebx, [rip + 0x48c13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151137 : lea ebx, [rip + 0x4b073]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cd41 : lea ebx, [rip + 0x4eea9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154818 : lea ebx, [rip + 0x47e92]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000f58e : add [rax], al; mov rax, [rsi + 0x78]; movsxd rdi, edi; mov eax, [rax + rdi*4]; ret
0x00150bfb : lea ebx, [rip + 0x4b36f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097260 : lea r11, [rip + 0xf70e9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001520f3 : lea r11, [rip + 0x49e76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153853 : lea r11, [rip + 0x48c16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001461b9 : movsxd rax, ecx; shl rdx, cl; shr rax, 6; or [rdi + rax*8], rdx; xor eax, eax; ret
0x0014f711 : lea ebx, [rip + 0x4c699]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c020 : lea r11, [rip + 0x4fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009c830 : push 0; xor r8d, r8d; mov rcx, r13; mov rdi, [r14]; lea r9, [rsp + 0x28]; call r12
0x0014efe3 : lea ebx, [rip + 0x4cdc7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000991e6 : lea ebx, [rip + 0xf5338]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009a5e1 : mov ecx, edx; movzx eax, sil; mov rdx, rdi; rep stosb [rdi], al; mov rax, rdx; ret
0x0014c800 : lea r11, [rip + 0x4f3e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138fef : mov [rsp + 0xd0], 1; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xc8], rdx; call rax
0x001373ea : lea r8, [rip - 0x7a71]; mov esi, 8; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0012b1e9 : add [rbp + 0x487274c0], al; mov eax, [rbx + 0x20]; mov rdi, rbp; call [rax + 0x20]
0x0014ed47 : lea r11, [rip + 0x4d062]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151374 : lea ebx, [rip + 0x4abf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e6b2 : lea r11, [rip + 0x4d6f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001515b7 : lea ebx, [rip + 0x4abf3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001512b6 : lea r11, [rip + 0x4aef3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c021 : lea ebx, [rip + 0x4fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001507fd : lea ebx, [rip + 0x4b5ad]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095483 : lea ebx, [rip + 0xf8c67]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00137f2e : movaps xmm[rsp + 0x30], xmm0; push r14; push r13; lea r9, [rsp + 0x3a]; call [rax]
0x0014e412 : lea r11, [rip + 0x4d997]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005e2bb : add [rbp + 0x48117ec0], al; mov eax, [rbx + 0x98]; mov rdi, rax; call [rax + 0x20]
0x00150d74 : lea ebx, [rip + 0x4b1f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005221e : lea edx, [rax + 4]; mov [rbx], rdx; mov [rax], ebp; pop rbx; pop rbp; pop r12; ret
0x0014f080 : lea r11, [rip + 0x4cd29]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ee92 : lea r11, [rip + 0x4cf17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151c73 : lea r11, [rip + 0x4a2f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009bdbe : add [rax], eax; add [rax], al; setl al; neg eax; cmp ecx, r8d; cmovg eax, edx; ret
0x00153659 : lea r11, [rip + 0x49050]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154516 : lea r11, [rip + 0x48193]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0007f760 : add [rax], al; add [rax], al; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x0014ee93 : lea ebx, [rip + 0x4cf17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013cc56 : add [rax], al; add bl, al; nop [rax + rax]; add [rdi + 0x28], edx; mov eax, 1; ret
0x0014ebf3 : lea ebx, [rip + 0x4d1b7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00136efb : lea r8, [rip - 0x7482]; mov esi, 3; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0014e05e : lea ebx, [rip + 0x4dd4c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000991b0 : lea r11, [rip + 0xf536d]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0012afad : add [rax], al; mov rdi, [r13]; mov rsi, rbp; mov rax, [rdi + 0x38]; call [rax + 8]
0x0009916e : lea r11, [rip + 0xf53af]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0013b7d1 : movsx eax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x000954f8 : lea ebx, [rip + 0xf8bf2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001511f3 : lea r11, [rip + 0x4ad76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153e53 : lea r11, [rip + 0x48616]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153b54 : lea ebx, [rip + 0x48916]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153c16 : lea r11, [rip + 0x48a93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009a5e0 : mov rcx, rdx; movzx eax, sil; mov rdx, rdi; rep stosb [rdi], al; mov rax, rdx; ret
0x0014c410 : lea r11, [rip + 0x4f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153917 : lea ebx, [rip + 0x48d93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b68d : lea r11, [rip + 0x5055c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c4c2 : lea r11, [rip + 0x4f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001536da : lea r11, [rip + 0x48d8f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006630f : add [rax + 0xb740000], al; shr eax, 4; and eax, 1; mov edx, eax; mov eax, edx; ret
0x00136a38 : add [rdi], cl; test [rdi + 0x48000000], edx; mov eax, [rdi + 8]; call [rax + 0x20]
0x0009553e : lea r11, [rip + 0xf8bab]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00068fae : adc [rbx + 0xf], dh; lea rdx, [rax + 1]; mov [rdi + 8], rdx; movzx eax, [rax]; ret
0x00151437 : lea ebx, [rip + 0x4ad73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f133 : lea ebx, [rip + 0x4cc77]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0007f75f : add [r8], r8b; add [rax], al; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x001511f4 : lea ebx, [rip + 0x4ad76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001534dc : lea ebx, [rip + 0x48f8e]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000997e8 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; xor ch, ch; mov [rdi + 0x12], ch; ret
0x00150a07 : lea r11, [rip + 0x4b7a2]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cb53 : lea ebx, [rip + 0x4f097]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095bc0 : lea r11, [rip + 0xf85a9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014f3d2 : lea r11, [rip + 0x4c9d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f523 : lea ebx, [rip + 0x4c887]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ba42 : lea r11, [rip + 0x501a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e367 : lea ebx, [rip + 0x4da43]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e952 : lea r11, [rip + 0x4d457]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e14d : lea ebx, [rip + 0x4dc5d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152c25 : add [rsi + 0x2e], ah; nop [rax + rax]; mov edx, [rsi - 4]; mov [rdi - 4], edx; ret
0x0014c378 : lea ebx, [rip + 0x4f872]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095554 : lea r11, [rip + 0xf8b95]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00153916 : lea r11, [rip + 0x48d93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0007f8b8 : dec [rax - 0x39]; add [r8], r8b; add [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x0014c762 : lea r11, [rip + 0x4f487]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bb92 : lea r11, [rip + 0x50057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e803 : lea ebx, [rip + 0x4d5a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154753 : lea r11, [rip + 0x47d16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012ce7d : push rdx; cmp [rax - 0x7b], cl; sal [rbp + rax + 0x48], cl; mov edi, ebp; call rdx
0x0009658d : add [rax], al; add bl, al; nop [rax + rax]; nop cs:[rax + rax]; mov [rdi], dl; ret
0x0014f282 : lea r11, [rip + 0x4cb27]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150a08 : lea ebx, [rip + 0x4b7a2]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c222 : lea r11, [rip + 0x4f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000524ff : stosd [rdi], eax; adc eax, [rax]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0014c560 : lea r11, [rip + 0x4f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095555 : lea ebx, [rip + 0xf8b95]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014b77d : lea ebx, [rip + 0x5046d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c8b3 : lea ebx, [rip + 0x4f337]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009cfe0 : mov ecx, [rsp + 0x10]; mov rsi, [rsp + 0x18]; mov rdx, r14; mov rdi, rbp; call rbx
0x000488f7 : mov [rbp - 0x4d8], r8; mov rdx, r14; mov rsi, r11; mov rdi, r13; call [r15 + 0x38]
0x0014f710 : lea r11, [rip + 0x4c699]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005f01d : add [rax], al; add [rdx + 0x10], bh; mov rsi, r14; mov rdi, rbp; call [rax + 0x38]
0x000987cc : lea r11, [rip + 0xf5cd1]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009916f : lea ebx, [rip + 0xf53af]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014e9f1 : lea ebx, [rip + 0x4d3b9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012e8fc : add rax, 4; mov [rbx + 0x20], rax; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x0014e751 : lea ebx, [rip + 0x4d659]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00098804 : lea r11, [rip + 0xf5c99]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00131efc : add [rax], al; mov rdi, [r15]; mov rsi, rbx; mov rax, [rdi + 0x38]; call [rax + 8]
0x00097261 : lea ebx, [rip + 0xf70e9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001545d4 : lea ebx, [rip + 0x47e96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e14c : lea r11, [rip + 0x4dc5d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006917c : add [rax], al; add [rax - 0x77], cl; imul eax; sbb [rdx - 7], edi; jmp [rsi + 0xf]
0x00096ada : lea r11, [rip + 0xf77e3]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014f132 : lea r11, [rip + 0x4cc77]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0017383e : add [rax], al; movzx eax, [rdi - 0x10]; movzx edx, [rsi - 0x10]; sub eax, edx; ret
0x0014de24 : lea ebx, [rip + 0x4ddc6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005ab82 : add [rax], al; add bl, al; nop cs:[rax + rax]; add [rdx + 4], 1; xor eax, eax; ret
0x00151736 : lea r11, [rip + 0x4aa73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096bb6 : lea ebx, [rip + 0xf7708]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00154096 : lea r11, [rip + 0x48613]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000fc06b : add [rax], al; mov rsi, [rbx]; mov rdi, [rsp + 8]; mov rax, [rsp + 0x10]; call rax
0x0006f57f : add [rax], al; mov [rdi + 0x24], ebp; mov [rdi + 0x10], eax; pop rbx; pop rbp; ret
0x00153d96 : lea r11, [rip + 0x48913]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096bb5 : lea r11, [rip + 0xf7708]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00150b7a : lea ebx, [rip + 0x4b630]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ba43 : lea ebx, [rip + 0x501a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000990a3 : lea r11, [rip + 0xf547a]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014e802 : lea r11, [rip + 0x4d5a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001550b2 : lea ebx, [rip + 0x473b8]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001512b7 : lea ebx, [rip + 0x4aef3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154517 : lea ebx, [rip + 0x48193]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b8a6 : lea ebx, [rip + 0x50344]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bc30 : lea r11, [rip + 0x4ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150a1b : lea ebx, [rip + 0x4b54f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015365a : lea ebx, [rip + 0x49050]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b7e6 : lea r11, [rip + 0x50403]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001536db : lea ebx, [rip + 0x48d8f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009984e : mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; xor ch, ch; mov [rdi + 0x15], ch; ret
0x00153e54 : lea ebx, [rip + 0x48616]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00135831 : add [rax], al; mov rdi, [r12]; mov rsi, rbp; mov rax, [rdi + 0x38]; call [rax + 8]
0x00151d37 : lea r11, [rip + 0x4a472]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009914d : lea ebx, [rip + 0xf53d1]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014e6b3 : lea ebx, [rip + 0x4d6f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00133477 : add [rax - 0x75], cl; or [r9 + rcx*4 - 0x1a], r9b; mov rdi, rbp; call [rax + 0x48]
0x0014ebf2 : lea r11, [rip + 0x4d1b7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014eaa3 : lea ebx, [rip + 0x4d307]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099127 : lea r11, [rip + 0xf53f6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00096b80 : lea r11, [rip + 0xf773d]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001521b7 : lea ebx, [rip + 0x49ff3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e276 : lea ebx, [rip + 0x4db34]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097370 : lea r11, [rip + 0xf6fd9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00152037 : lea ebx, [rip + 0x4a173]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151eb6 : lea r11, [rip + 0x4a2f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014eb41 : lea ebx, [rip + 0x4d269]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001542d3 : lea r11, [rip + 0x48196]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0007b999 : mov [rbx + 0x30], eax; mov [rbx + 0x48], r9; mov [rbx], rsi; mov rdi, r9; call rcx
0x000ab985 : add [rax], 0; add [rax - 0x77], cl; imul eax; rsqrtps xmm6, xmm5; jmp [rsi + 0x2e]
0x0014e562 : lea r11, [rip + 0x4d847]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0001ee19 : add [rax], al; add [rax], al; add [rsi - 0x70], ah; mov eax, [rip + 0x3ab0b6]; ret
0x0014bae1 : lea ebx, [rip + 0x50109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154c96 : lea r11, [rip + 0x47a13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f081 : lea ebx, [rip + 0x4cd29]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0016212d : add [rax], al; add bl, al; nop [rax + rax]; nop cs:[rax + rax]; mov [rcx], dl; ret
0x0014f321 : lea ebx, [rip + 0x4ca89]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001548d3 : lea r11, [rip + 0x47b96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154b16 : lea r11, [rip + 0x47b93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c0d2 : lea r11, [rip + 0x4fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153c17 : lea ebx, [rip + 0x48a93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014be33 : lea ebx, [rip + 0x4fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014df99 : lea ebx, [rip + 0x4de11]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c2c1 : lea ebx, [rip + 0x4f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c377 : lea r11, [rip + 0x4f872]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c171 : lea ebx, [rip + 0x4fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ec90 : lea r11, [rip + 0x4d119]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097a0c : add [rax], al; add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi + 2]; ret
0x00038d14 : add [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, [rbp - 0x8a8]; call [rbx + 0x38]
0x000404ed : add [rax], al; add [rbp - 0x2dce00b9], cl; div r8d; add r9d, eax; mov eax, r9d; ret
0x00047039 : mov rsi, r8; mov rdi, r13; sub r14, r8; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x00134c6e : add [rax], al; movdqu xmm0, xmm[rdi + 0x1c]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x0014d0c1 : mov ecx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x000ed4d3 : mov [rbp + 8], rax; mov [rbp], ebx; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x00099910 : mov [rdi + 0x10], edx; mov [rdi + 0x17], ecx; xor ch, ch; mov [rdi + 0x1b], ch; ret
0x00171253 : adc [rdi + 1], rcx; vmovups zmm[r9 - 0x80], zmm2; vmovups zmm[r9 - 0x40], zmm3; ret
0x00020be1 : mov edx, [rsp + 0x10]; mov rsi, [r15]; mov rdi, [r13]; mov rax, [rsp + 8]; call rax
0x0014da70 : mov edx, [rsi - 6]; mov ecx, [rsi - 4]; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x0011edfb : add [rax], al; add [rax], al; add [rbx + 0x3b83f], cl; add [rax], al; syscall ; ret
0x000386f8 : add al, 2; lea rdx, [rip - 0x2a5]; movsxd rax, [rsi + rax*4]; add rax, rdx; jmp rax
0x000ed4d4 : mov [rbp + 8], eax; mov [rbp], ebx; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x001787c7 : add [rax - 0x48], cl; add [rax], al; add [rax], al; add [rax - 0x7ab80000], al; ret
0x00152db5 : add [rsi + 0x2e], ah; nop [rax + rax]; movzx edx, [rsi - 1]; mov [rdi - 1], dl; ret
0x000476f0 : mov rdx, r14; mov rsi, r11; mov [rbp - 0x500], r11; mov rdi, r13; call [r15 + 0x38]
0x0011fc41 : mov [rdx + 1], al; add r10, 2; mov [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret
0x001529b0 : mov rdx, [rsi - 9]; mov ecx, [rsi - 4]; mov [rdi - 9], rdx; mov [rdi - 4], ecx; ret
0x0000f65e : add [rax], al; mov fs:[rcx], rdx; mov rdx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x0013554c : add al, bl; nop ; movdqu xmm0, xmm[rdi + 8]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x00142ac5 : add [rax], al; add [rax], al; mov [rip + 0x28c540], ax; mov eax, 1; add rsp, 8; ret
0x0002289f : mov rax, [rax + 0x10]; mov [rip + 0x3acab2], 0; pop rbx; mov eax, [rax + 0x58]; ret
0x0014e14f : pop rbp; fadd [rax + rax]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015365c : push rax; nop ; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003370d : sub edx, eax; mov [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret
0x000bdf97 : add bh, bh; ror [rax - 0x77], 1; fcomp [rbx + 0x5d]; pop r12; pop r13; pop r14; ret
0x001386a1 : mov [rip + 0x2967a5], 2; mov fs:[rbx], rax; mov rax, [rip + 0x291502]; pop rbx; ret
0x00152d35 : add [rsi + 0x2e], ah; nop [rax + rax]; movzx edx, [rsi - 2]; mov [rdi - 2], dx; ret
0x0014d0c0 : mov rcx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00171254 : adc [rdi + 1], ecx; vmovups zmm[r9 - 0x80], zmm2; vmovups zmm[r9 - 0x40], zmm3; ret
0x001375e4 : push rdx; and [rax - 0x77], cl; fistp [rbx - 0x17]; or [rdx + 0x5b90ffec], ecx; ret
0x000228a0 : mov eax, [rax + 0x10]; mov [rip + 0x3acab2], 0; pop rbx; mov eax, [rax + 0x58]; ret
0x0010ee0e : add al, 0; test rdx, rdx; cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret
0x000998a8 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; xor ch, ch; mov [rdi + 0x18], ch; ret
0x000d2d5d : add [rax], al; add [rbx - 0x48], bl; or al, 0; add [rax], al; pop rbp; pop r12; ret
0x00103315 : add [rax], r8b; mov rax, [rip + 0x2c9f49]; mov rax, [rax + 0x18]; add [rax], 1; ret
0x0000b869 : push [rbp + rcx - 0x18]; pushfq ; adc eax, [rax]; mov [rbx + 0x10], 0; pop rbx; ret
0x001450d9 : mov [rcx], al; add [rax], al; mov [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret
0x00137049 : lea eax, [rip - 0x75cf]; mov esi, 6; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0000f5d3 : add [rax], r8b; nop cs:[rax + rax]; mov rax, [rip + 0x3ba621]; add rax, fs:[0]; ret
0x0009992f : mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; xor ch, ch; mov [rdi + 0x1c], ch; ret
0x00094ec8 : adc al, [rcx]; movlpd [rdx], xmm0; xor ah, ah; mov [rdx + 8], ah; mov rax, rdi; ret
0x0007defe : add [rbp + 0x17], dh; mov [rbp], 0; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x00138521 : mov [rip + 0x296925], 2; mov fs:[rbx], rax; mov rax, [rip + 0x2917da]; pop rbx; ret
0x0001edf1 : mov [rdi + 8], eax; mov rax, [rsi]; or rax, [r8]; mov [rdi], rax; xor eax, eax; ret
0x000476f1 : mov edx, esi; mov rsi, r11; mov [rbp - 0x500], r11; mov rdi, r13; call [r15 + 0x38]
0x00099930 : mov [rdi + 0x10], edx; mov [rdi + 0x18], ecx; xor ch, ch; mov [rdi + 0x1c], ch; ret
0x000ee7b8 : add [rax], al; add [rbp + 0x1a], dh; sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret
0x000e074a : mov [rdi + 0x38], al; mov [rsi], edx; mov [rsi + 8], rcx; mov [rsi + 0x10], r8; ret
0x000488f8 : mov [rbp - 0x4d8], eax; mov rdx, r14; mov rsi, r11; mov rdi, r13; call [r15 + 0x38]
0x000ee74d : add [rax], al; add [rbp + 0x15], dh; sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret
0x0016e740 : mul [rip + 0x11111111]; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper ; ret
0x00066d98 : add [rax], al; add [rax - 0x77], cl; imul eax; std ; popfq ; stc ; jmp [rsi + 0x2e]
0x0001cfd2 : adc [rip + 0x16b6f8], bl; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret
0x000b0c31 : div [rax + rdx + 0x4c]; mov [rsp + 0xa8], esi; mov rsi, rbp; mov rdi, r12; call rbx
0x0009996a : movq [rdi], mm0; movdqu xmm[rdi + 0xe], xmm2; xor ch, ch; mov [rdi + 0x1e], ch; ret
0x00099610 : push rdi; adc bl, al; nop [rax]; nop cs:[rax + rax]; xor ch, ch; mov [rdi], ch; ret
0x0003d428 : xchg [rbx + 1], dl; add [rax], al; movsxd rdx, ebp; mov rdi, rbx; call [r14 + 0x38]
0x0016ed1c : add [rax], al; add [rax], al; movzx eax, [rdi]; movzx ecx, [rsi]; sub eax, ecx; ret
0x0015dd21 : adc ebx, eax; nop [rax]; nop cs:[rax + rax]; mov [rcx], edx; mov [rcx + 4], dl; ret
0x001088e9 : add [rax + rax], cl; add [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x000318ed : add edx, eax; mov [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret
0x001383ab : lea eax, [rip + 0x296abf]; mov [rip + 0x296a95], 2; mov fs:[rbx], rax; pop rbx; ret
0x00099827 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; xor ch, ch; mov [rdi + 0x14], ch; ret
0x000997b0 : movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; xor ch, ch; mov [rdi + 0x10], ch; ret
0x00088b8c : add [rax], al; add [rax], al; movzx ecx, [rsi]; movzx eax, [rdi]; sub eax, ecx; ret
0x000999d1 : movq [rdi + 0x10], mm2; mov [rdi + 0x20], cl; xor ch, ch; mov [rdi + 0x21], ch; ret
0x00138f9c : add bh, bh; push rax; sbb [rcx - 0x75], cl; or [r9 + r9*4 - 1], r9b; call [rax + 8]
0x0012bd8e : mov rsi, [rbp + 0x20]; mov r12d, eax; mov rdi, rbx; xor eax, eax; call [rbp + 0x28]
0x000343d7 : add [rcx], al; add [rcx], dh; fisttp [rax - 0x7b]; ror [rdi], 1; xchg eax, ebp; ret
0x0003370c : sub r10, rax; mov [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret
0x000b08cd : add [rax], al; mov [rsp + 0xb0], rax; lea rdi, [rsp + 0xb0]; mov rsi, rbp; call rbx
0x00136dcc : lea eax, [rip - 0x7352]; mov esi, 2; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x000c55a6 : add [rbx + rax*4 + 0x38], ah; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret
0x00171217 : adc [rcx - 3], rbp; vmovups zmm[r9 - 0x80], zmm6; vmovups zmm[r9 - 0x40], zmm7; ret
0x001385e1 : mov [rip + 0x296865], 2; mov fs:[rbx], rax; mov rax, [rip + 0x29162a]; pop rbx; ret
0x0008734e : add [rax], al; mov rdx, [rsp + 0x10]; lea rax, [rdi + rax - 1]; mov [rdi], rdx; ret
0x000e4a72 : mov ecx, edi; mov rdx, [r14]; mov rsi, [rbp - 0x1f0]; lea r8, [rax + r13]; call r12
0x0013553e : add [rax], al; movdqu xmm0, xmm[rdi + 0x30]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x001371b9 : lea eax, [rip - 0x773f]; mov esi, 7; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0014d870 : mov edx, [rsi - 5]; mov ecx, [rsi - 4]; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x0012d790 : movsxd rax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0012bd8f : mov esi, [rbp + 0x20]; mov r12d, eax; mov rdi, rbx; xor eax, eax; call [rbp + 0x28]
0x001529b1 : mov edx, [rsi - 9]; mov ecx, [rsi - 4]; mov [rdi - 9], rdx; mov [rdi - 4], ecx; ret
0x000ab986 : add [rax], al; add [rax - 0x77], cl; imul eax; rsqrtps xmm6, xmm5; jmp [rsi + 0x2e]
0x000cc96d : add [rax], al; add dh, al; or [r8 + r15*4], r11b; add al, [rax]; add [rax], al; ret
0x0005ff55 : mov eax, [rax + 0x130]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x58]
0x0006afe3 : mov [rbx + 0x90], -1; cmove ebp, r12d; mov eax, ebp; pop rbx; pop rbp; pop r12; ret
0x0014dc70 : mov edx, [rsi - 7]; mov ecx, [rsi - 4]; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x00137321 : mov ebp, eax; mov rdi, rbx; pop rax; mov rax, [rbx + 8]; pop rdx; call [rax + 0x20]
0x0009990f : mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; xor ch, ch; mov [rdi + 0x1b], ch; ret
0x001383aa : lea rax, [rip + 0x296abf]; mov [rip + 0x296a95], 2; mov fs:[rbx], rax; pop rbx; ret
0x0000f58d : add [rax], r8b; mov rax, [rsi + 0x78]; movsxd rdi, edi; mov eax, [rax + rdi*4]; ret
0x00141d3d : add [rbx + 0x440f03fb], al; fmul [rax - 0x75]; add eax, 0x289535; call [rax + 0x28]
0x000ee0ea : add [rax], al; nop [rax]; mov eax, [rdi + 0x10c]; mov [rsi], eax; xor eax, eax; ret
0x000f7f7d : add [rax], al; add [rcx], dh; fisttp [rax - 0x77]; fcomp [rbx + 0x5d]; pop r12; ret
0x000979fc : add [rax], al; add [rax], al; mov dl, [rsi]; mov [rdi], dl; lea rax, [rdi + 1]; ret
0x00137320 : adc [rcx - 0x2076b73b], cl; pop rax; mov rax, [rbx + 8]; pop rdx; call [rax + 0x20]
0x0016005c : add [rax], al; add [rax], al; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx + 1]; ret
0x0009998a : movq [rdi], mm0; movdqu xmm[rdi + 0xf], xmm2; xor ch, ch; mov [rdi + 0x1f], ch; ret
0x0014e753 : pop rcx; salc ; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0011aa96 : add [rax - 0x68], cl; mov eax, [rdx + rax*8 + 4]; add rsp, 8; pop rbx; pop rbp; ret
0x00066060 : add [rax], al; mov rax, rdx; sar rax, 2; mov [rcx], rax; xor eax, eax; pop rbx; ret
0x001373eb : lea eax, [rip - 0x7a71]; mov esi, 8; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x00068f77 : adc [rbx + 0x16], dh; lea rdx, [rax + 1]; mov [rdi + 8], rdx; movzx eax, [rax]; ret
0x000482f1 : mov [rbp - 0x4d8], eax; mov rdx, r14; mov rsi, r15; mov rdi, r13; call [rax + 0x38]
0x001423e7 : add [rax], al; mov rax, [rip + 0x288e90]; mov rdi, rdx; mov rsi, r8; call [rax + 8]
0x00138469 : mov [rip + 0x2969dd], 2; mov fs:[rbx], rax; mov rax, [rip + 0x29183a]; pop rbx; ret
0x0006be68 : add [rax], al; mov rdx, [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call [r13 + 0x70]
0x0012c8e5 : add [rbp + 0x38], esi; mov eax, [rdi + 0x20]; mov [rsi], 7; mov [rsi + 8], eax; ret
0x0009994a : movq [rdi], mm0; movdqu xmm[rdi + 0xd], xmm2; xor ch, ch; mov [rdi + 0x1d], ch; ret
0x0005ff54 : mov rax, [rax + 0x130]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x58]
0x000318ec : add r10, rax; mov [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret
0x0010e58d : movq mm0, [rdi - 0x18]; mov [rbp - 0x80], 0; movups xmm[rbp - 0x78], xmm0; call rax
0x00136efc : lea eax, [rip - 0x7482]; mov esi, 3; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0009a353 : adc [rdi], cl; adc [rdi + rdx - 0x10], edx; movups xmm[rdi + rdx - 0x20], xmm3; ret
0x0011fd63 : add [rax], 0; add [rax], al; movsxd rdx, edx; mov eax, r8d; mov [rdi + rdx], 0; ret
0x00096bdc : add [rax], al; add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi + 1]; ret
0x00020be0 : mov rdx, [rsp + 0x10]; mov rsi, [r15]; mov rdi, [r13]; mov rax, [rsp + 8]; call rax
0x0000f5f3 : add [rax], r8b; nop cs:[rax + rax]; mov rax, [rip + 0x3ba649]; add rax, fs:[0]; ret
0x00171218 : adc [rcx - 3], ebp; vmovups zmm[r9 - 0x80], zmm6; vmovups zmm[r9 - 0x40], zmm7; ret
0x0001edf0 : mov [rdi + 8], rax; mov rax, [rsi]; or rax, [r8]; mov [rdi], rax; xor eax, eax; ret
0x0010e58c : movq mm0, [r15 - 0x18]; mov [rbp - 0x80], 0; movups xmm[rbp - 0x78], xmm0; call rax
0x0005aa43 : mov [rax + 9], esp; add [rbp - 0x3f6af040], al; movzx eax, al; neg eax; pop rbx; ret
0x0012d222 : push rax; and [rbx - 0x48], bl; add [rax], eax; add [rax], al; pop rbp; pop r12; ret
0x00137f5d : mov edi, ebx; call [rax + 0x10]; mov rax, [rbx + 8]; mov rdi, rbx; call [rax + 0x20]
0x00030233 : add [rax + 0x75000178], eax; neg [rbx - 0x3d]; nop [rax]; mov rax, rbx; pop rbx; ret
0x0012d9e0 : sub edx, 4; mov rbp, rax; bswap edx; mov [rcx], edx; mov edx, eax; call [rbx + 0x10]
0x00138f8c : add [rax], al; add [rax], eax; add [rax], al; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x0010ea31 : mov [rbp - 0x80], edx; lea rdx, [rcx + 0x70]; movups xmm[rbp - 0x78], xmm0; call rax
0x000afb6b : add [rax], al; add [rax], al; add [rax - 0x39], cl; rol [rdx], 0; add [rax], al; ret
0x0006314d : add [rax], al; add [rax], al; mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x0006817a : mov rdx, [rdi + 0xa0]; mov rax, [rdx + 0x20]; sub rax, [rdx + 0x18]; sar rax, 2; ret
0x00061692 : xor [rbx + 0x13], dh; lea rsi, [rcx + 1]; mov [rdx + 0x28], rsi; mov [rcx], dil; ret
0x00031141 : mov r8, [rsi + 0x28]; mov r9, [rsi + 0x30]; mov rsi, [rsi + 0x70]; xor eax, eax; ret
0x0014d289 : push rsi; cld ; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00139f97 : add [rax], al; add [rax - 0x75], cl; sbb [r9 + rcx*4 - 0x19], r9b; call [rax + 0x20]
0x00095844 : movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x00000073 : mov [rip + 0x3cb6b6], rax; mov [rip + 0x3cf17f], rdx; pop rax; pop rbx; pop rbp; ret
0x0010ebdd : push rbp; nop ; mov edx, [r13 + 0x60]; mov [rbp - 0x80], edx; mov rdx, r12; call rax
0x00045f90 : add [rax], al; mov rdx, rbx; mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [r13 + 0x38]
0x00048c37 : add al, 1; lea rcx, [rip - 0x10f0]; movsxd rax, [rdi + rax*4]; add rax, rcx; jmp rax
0x000f7f37 : add [rax], al; add [rax], al; add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x0006806b : mov edx, [rdi + 0xa0]; mov rax, [rdx + 0x38]; sub rax, [rdx + 0x30]; sar rax, 2; ret
0x00038aa0 : add [rax], al; mov rdx, rbx; mov rsi, r13; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x0006a499 : dec [rax - 0x75]; push rsp; and al, 8; mov rsi, r12; mov rdi, rbx; call [rbp + 0x70]
0x00038d15 : add [rcx + rcx*4 - 0x16], cl; mov rsi, r9; mov rdi, [rbp - 0x8a8]; call [rbx + 0x38]
0x0014d469 : push rsi; cld ; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0006cb9e : add [rax], al; add [rax], al; mov [rbx + 0x58], 0; mov [rbx + 0x50], 0; pop rbx; ret
0x0011efac : add [rax], eax; add [rbp - 0x2e7af025], al; add [rax], al; add [rax + 0x63], cl; ret
0x0011fd64 : add [rax], al; add [rax], al; movsxd rdx, edx; mov eax, r8d; mov [rdi + rdx], 0; ret
0x001183ea : add [rax + rax], al; add [rcx + rcx*4 - 6], cl; mov rsi, r14; mov rdi, r13; call rax
0x0003c027 : add al, 6; movsxd rax, [rdi + rax*4]; lea rdi, [rip - 0x1624]; add rax, rdi; jmp rax
0x001691cd : xchg dh, bl; add [rax], eax; add [rax + 1], cl; clc ; add rax, rcx; vzeroupper ; ret
0x000ee162 : add [rax], al; add bl, dh; movq mm0, [rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x00138f05 : add [rax], al; call rax; nop [rax]; mov rdi, r15; mov rax, [r15 + 8]; call [rax + 8]
0x00133ce3 : mov [rsp + 0x40], 0; mov [rsp + 0x10], rax; mov rax, [rsp + 0x48]; call [rax + 0x28]
0x0012b34f : add [rax - 0x7b], cl; push [rdi + rcx + 0x48]; mov eax, [rdi + 8]; call [rax + 0x20]
0x00152e10 : adc bl, dh; movq [rdi + 0x10], mm0; lddqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; ret
0x0014d83a : push rsi; clc ; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00138d2f : adc [rsp + 0x18], eax; mov [rsp + 0x30], 2; mov [rsp + 0x40], rdx; call [rax + 0x18]
0x000afb5b : add [rax], al; add [rax], al; add [rax - 0x39], cl; rol [rcx], 0; add [rax], al; ret
0x0004703a : mov esi, eax; mov rdi, r13; sub r14, r8; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x0012dd99 : sub rbx, rsi; sub rax, 4; bswap eax; mov [rdx], eax; mov edx, ebx; call [r13 + 0x10]
0x000474f7 : xchg eax, ebp; push rbp; adc al, 0; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x00141d39 : mov eax, 2; cmp ebx, 3; cmove ebx, eax; mov rax, [rip + 0x289535]; call [rax + 0x28]
0x001385b6 : add ebp, ebx; movsb [rdi], [rsi]; nop [rax]; mov rax, [rip + 0x291659]; pop rbx; ret
0x00075247 : sub rdx, rdi; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq [rdi], rax; pop rbx; ret
0x0014620f : add [rax - 0x7b], cl; div [rbx + rcx - 0x17]; xchg [rdi - 0x12], bh; jmp [rsi + 0xf]
0x0000d4aa : xchg [rcx + 1], eax; add [rax], al; movsxd rdi, [r11 + rsi*4]; add rdi, r11; jmp rdi
0x000afbab : add [rax], al; add [rax], al; add [rax - 0x39], cl; rol [rsi], 0; add [rax], al; ret
0x0002158d : add [rbp + 0x51], dh; lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret
0x0014d649 : push rsi; cld ; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0006151c : sub [rbx + 0x11], dh; lea rsi, [rcx + 4]; mov [rdx + 0x20], rsi; mov [rcx], eax; ret
0x00066ad8 : lea rcx, [rax + 1]; mov [rdi + 8], rcx; movzx edx, [rax]; mov eax, edx; pop rbx; ret
0x00068fad : adc [r11 + 0xf], r14b; lea rdx, [rax + 1]; mov [rdi + 8], rdx; movzx eax, [rax]; ret
0x00030e11 : mov r8, [rdi + 0x28]; mov r9, [rdi + 0x30]; mov rdi, [rdi + 0x68]; xor eax, eax; ret
0x0012bccd : mov esi, [rbx + 0x10]; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call [rbx + 0x18]
0x0010fd0a : add [rax], al; add [rax], al; add [rax + 0x48c03155], dl; mov ebp, esp; pop rbp; ret
0x0011fc40 : mov [r10 + 1], r8b; add r10, 2; mov [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret
0x00066c4d : lea edx, [rax + 1]; mov [rbx + 8], rdx; movzx edx, [rax]; mov eax, edx; pop rbx; ret
0x0012dcbf : add [rax], eax; add [rax], al; mov [rbx + 0x68], rdx; pop rbx; pop rbp; pop r12; ret
0x000fab00 : add al, ch; sub al, [rbx]; add [rax], al; lea rax, [rip + 0x2d2553]; add rsp, 8; ret
0x0006806a : mov rdx, [rdi + 0xa0]; mov rax, [rdx + 0x38]; sub rax, [rdx + 0x30]; sar rax, 2; ret
0x0015dd72 : adc [rax + 0x66c30851], ecx; nop [rax + rax]; mov [rcx], rdx; mov [rcx + 8], dx; ret
0x000afb7b : add [rax], al; add [rax], al; add [rax - 0x39], cl; rol [rbx], 0; add [rax], al; ret
0x0008fc78 : add [rax], al; add [rax - 0x73], cl; add al, 7; cmp [rax], sil; cmovne rax, rdx; ret
0x00095824 : movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x0012dd9a : sub ebx, esi; sub rax, 4; bswap eax; mov [rdx], eax; mov edx, ebx; call [r13 + 0x10]
0x000999aa : movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; xor ch, ch; mov [rdi + 0x20], ch; ret
0x0013bad2 : add [rax], al; add bl, al; nop cs:[rax + rax]; mov rax, [rdi + 8]; call [rax + 0x10]
0x0010e4a4 : push rbp; nop ; mov edx, [r12 + 0x60]; mov [rbp - 0x80], edx; mov rdx, rbx; call rax
0x000c4844 : add [rbp + 0x18], dh; lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret
0x00138676 : add ebp, ebx; movsb [rdi], [rsi]; nop [rax]; mov rax, [rip + 0x291531]; pop rbx; ret
0x00000074 : mov [rip + 0x3cb6b6], eax; mov [rip + 0x3cf17f], rdx; pop rax; pop rbx; pop rbp; ret
0x0005de7d : add [rsi], dl; add [rax], al; add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x00075248 : sub edx, edi; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq [rdi], rax; pop rbx; ret
0x00063059 : add [rax], eax; add [rax], al; mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x00066c4c : lea rdx, [rax + 1]; mov [rbx + 8], rdx; movzx edx, [rax]; mov eax, edx; pop rbx; ret
0x000afbbb : add [rax], al; add [rax], al; add [rax - 0x39], cl; rol [rdi], 0; add [rax], al; ret
0x00066ad9 : lea ecx, [rax + 1]; mov [rdi + 8], rcx; movzx edx, [rax]; mov eax, edx; pop rbx; ret
0x00095864 : movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x0014da3a : push rsi; clc ; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x000388d6 : add [rax], al; mov rdx, r13; mov rsi, rbx; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x00138ff7 : add [rax], al; add [rdi], cl; adc [rsp + 0xb8], eax; mov [rsp + 0xc8], rdx; call rax
0x001514f7 : stosb [rdi], al; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138a3f : adc [rsp + 0x18], eax; mov [rsp + 0x30], 0; mov [rsp + 0x38], rdx; call [rax + 0x18]
0x0001eb20 : mov [rdi + 8], rax; mov rax, [rsi]; and rax, [r8]; mov [rdi], rax; xor eax, eax; ret
0x00147fd4 : sbb ebp, [rax]; add [rcx - 9], al; fsub [rsp + rax*2 - 0x77]; add [rax - 1], bh; ret
0x001384f6 : add ebp, ebx; movsb [rdi], [rsi]; nop [rax]; mov rax, [rip + 0x291809]; pop rbx; ret
0x0001eb21 : mov [rdi + 8], eax; mov rax, [rsi]; and rax, [r8]; mov [rdi], rax; xor eax, eax; ret
0x0012bccc : mov rsi, [rbx + 0x10]; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call [rbx + 0x18]
0x00045848 : add [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [rbx + 0x38]
0x00137f5c : mov rdi, rbx; call [rax + 0x10]; mov rax, [rbx + 8]; mov rdi, rbx; call [rax + 0x20]
0x0012d9df : sub rdx, 4; mov rbp, rax; bswap edx; mov [rcx], edx; mov edx, eax; call [rbx + 0x10]
0x0006817b : mov edx, [rdi + 0xa0]; mov rax, [rdx + 0x20]; sub rax, [rdx + 0x18]; sar rax, 2; ret
0x0014dc3a : push rsi; clc ; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0009a352 : adc [r15], r9b; adc [rdi + rdx - 0x10], edx; movups xmm[rdi + rdx - 0x20], xmm3; ret
0x0009560c : add [rax], al; add [rax], al; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; ret
0x000339bd : dec [rcx + rcx*4 + 0x4f]; or [rcx + rbp - 0x30], al; mov [rdx], eax; mov eax, 2; ret
0x000e55ba : dec [rcx + 0xf]; std ; add r9, rax; add rax, [rip + 0x2e45cf]; mov r8, rax; call r12
0x0009564c : add [rax], al; add [rax], al; mov rcx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; ret
0x000922ba : movlps [rdx], xmm0; movlpd xmm1, [rcx + 5]; movlpd [rdx + 5], xmm1; mov rax, rdi; ret
0x00134b94 : mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov [rdi + 0x68], 2; add rdi, 0x68; jmp rcx
0x00063df5 : mov rax, fs:[0x28]; mov [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call [rbp + 0x20]
0x0012d269 : add [rax], al; mov rax, [rax + 0x23b8]; xor esi, esi; mov rdi, rbx; call [rax + 0x28]
0x0012e8c1 : add [rax], al; mov [rbx + 0x20], rsi; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x00171451 : adc [rcx - 3], rbp; vmovups zmm[r9 - 0x80], zmm14; vmovups zmm[r9 - 0x40], zmm15; ret
0x00171961 : adc [rdi + 1], edx; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x000cced1 : add [rax], al; add [rcx + 0x1b828], cl; add [rax], al; pop rbx; pop rbp; pop r12; ret
0x0016d085 : add [rsi + 0x2e], ah; nop [rax + rax]; tzcnt eax, eax; add rax, rdi; vzeroupper ; ret
0x0011d1e8 : add [rbp - 0x7b], al; dec [rdi]; test cl, dh; add [rax], al; add [rcx - 0xa], al; ret
0x00068f76 : adc [r11 + 0x16], r14b; lea rdx, [rax + 1]; mov [rdi + 8], rdx; movzx eax, [rax]; ret
0x00142797 : add [rax], al; mov rax, [rip + 0x288ae0]; mov rsi, r9; mov rdi, r8; call [rax + 0x18]
0x0016ea20 : add [rax], al; add rax, rdi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper ; ret
0x000b2be2 : sbb [rax - 0x77], cl; sub [rbx + 0x5d], r11b; pop r12; pop r13; pop r14; pop r15; ret
0x00094e49 : movlpd [rdx], xmm0; movlpd xmm1, [rcx + 8]; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x0008ab85 : add [rsi + 0x2e], ah; nop [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret
0x0015ffdc : add [rax], al; add [rax], al; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; ret
0x00097a4f : add [rbx + 0x4568a0e], cl; mov [rdi], ecx; mov [rdi + 4], dl; lea rax, [rdi + 5]; ret
0x000620c2 : mov [rax + 8], edx; mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x001354c5 : mov ecx, esi; xor eax, eax; mov rsi, rdx; mov [rdi + 0x58], 2; add rdi, 0x58; jmp rcx
0x0012b4ef : push rax; and [rax - 0x77], cl; fistp [rbx - 0x17]; dec [rdx - 0x13]; jmp [rsi + 0xf]
0x0016d4cf : add [rax], eax; add [rax + 1], cl; clc ; add rax, rcx; sub rax, rdx; vzeroupper ; ret
0x00061691 : xor [rbx + 0x13], sil; lea rsi, [rcx + 1]; mov [rdx + 0x28], rsi; mov [rcx], dil; ret
0x00131d23 : mov [rdx + 0x68], eax; movzx eax, [rdi + 0x88]; mov [rdx + 0x6c], ax; mov eax, 1; ret
0x00046f13 : add [rax], al; add rax, rdi; mov r8, rcx; mov [rbp - 0x4c0], 1; xor esi, esi; jmp rax
0x00097a3c : add [rax], al; add [rax], al; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 4]; ret
0x0015dd92 : adc [rcx + 0x66c30751], ecx; nop [rax + rax]; mov [rcx], rdx; mov [rcx + 8], edx; ret
0x0000eec3 : mov [rdx], rcx; mov rdx, [rax + 0xc0]; mov rax, [rip + 0x3bac3c]; mov [rax], rdx; ret
0x0004a285 : sub [rax + rax], edx; movzx eax, al; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0016d3bd : add [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; sub rax, rdx; vzeroupper ; ret
0x0012f985 : xchg eax, eax; add [rax], al; test eax, eax; setne al; add rsp, 8; movzx eax, al; ret
0x000922d9 : movlpd [rdx], xmm0; movlpd xmm1, [rcx + 6]; movlpd [rdx + 6], xmm1; mov rax, rdi; ret
0x00135b8f : add [rbx + rdx + 0x49], esi; mov edi, [rsp]; mov rax, [rdi + 0x38]; call [rax + 0x18]
0x0012bf05 : mov edx, [rsp + 8]; mov ebp, eax; mov rax, [r10 + 8]; mov rdi, r10; call [rax + 0x20]
0x00069766 : mov dh, 0; add [rax], al; mov rdx, r14; mov rsi, r13; mov rdi, rbx; call [r15 + 0x40]
0x0013345c : mov [rsp + 0xc], eax; mov rax, [rbp + 8]; mov esi, 8; mov rdi, rbp; call [rax + 0x30]
0x00092144 : movlps xmm1, [rcx + 8]; movlpd [rdx], xmm0; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x000dac31 : add [rax], al; movzx edx, [rax + 8]; movsxd rdx, [r10 + rdx*4]; add rdx, r10; jmp rdx
0x0015dda2 : adc [rcx + 0x66c30851], ecx; nop [rax + rax]; mov [rcx], rdx; mov [rcx + 5], rdx; ret
0x000da1fd : adc [rdi + 0x10], dh; movzx edx, cl; movsxd rdx, [rbp + rdx*4]; add rdx, rbp; jmp rdx
0x00171aa1 : adc [rsi + 1], edx; vmovups zmm[rsi + 0x80], zmm2; vmovups zmm[rsi + 0xc0], zmm2; ret
0x0006d224 : mov eax, [rsp]; mov rdi, r15; movzx esi, [rcx]; lea rbx, [rcx + 1]; call [rax + 0x18]
0x001725af : add [rax - 0x73], cl; or r11b, r8b; nop ; nop cs:[rax + rax]; lea rax, [rdi + 9]; ret
0x00171452 : adc [rcx - 3], ebp; vmovups zmm[r9 - 0x80], zmm14; vmovups zmm[r9 - 0x40], zmm15; ret
0x00046c3d : mov edi, ebp; sub r14, rbx; mov r15, r14; sar r15, 2; mov rdx, r15; call [rax + 0x38]
0x0011b777 : add [rcx + rcx*4 - 7], cl; mov rdx, [rsp + 8]; mov rsi, [rsp]; mov rdi, r13; call r12
0x00137309 : lea r8, [rip - 0xab40]; mov esi, 4; lea rdx, [rip + 0x3f04]; mov rdi, rbx; call [rax]
0x00171940 : adc [rsi - 3], edx; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x00018cc5 : adc [rax - 0x7b], cl; sal [rdi + rbp - 0x75], cl; or al, [rbx - 0x7bf0fd07]; ret 0x18
0x00171aa0 : adc [rsi + 1], rdx; vmovups zmm[rsi + 0x80], zmm2; vmovups zmm[rsi + 0xc0], zmm2; ret
0x0016cd4a : xor edx, edx; lea rax, [rdi + rax]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x00136b7d : add [rax], al; lea r8, [rip - 0x7206]; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x000922f9 : movlpd [rdx], xmm0; movlpd xmm1, [rcx + 7]; movlpd [rdx + 7], xmm1; mov rax, rdi; ret
0x000620c1 : mov [rax + 8], rdx; mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x00103d8d : sub al, 0; mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x00094e4a : movlps [rdx], xmm0; movlpd xmm1, [rcx + 8]; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x000625b8 : lea rdx, [rsi + 4]; mov [rax], rdx; mov eax, [rsi]; add rsp, 8; pop rbx; pop rbp; ret
0x0000eec4 : mov [rdx], ecx; mov rdx, [rax + 0xc0]; mov rax, [rip + 0x3bac3c]; mov [rax], rdx; ret
0x0014ceca : push rsi; clc ; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x001426d7 : add [rax], al; mov rax, [rip + 0x288ba0]; mov rsi, r9; mov rdi, r8; call [rax + 0x10]
0x00045849 : add [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [rbx + 0x38]
0x0001e617 : sbb [rbx + 0x13773ff9], al; mov eax, 1; shl rax, cl; or [rdi], rax; xor eax, eax; ret
0x001354c4 : mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov [rdi + 0x58], 2; add rdi, 0x58; jmp rcx
0x00131bf5 : mov ecx, esi; xor eax, eax; mov rsi, rdx; mov [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx
0x00171960 : adc [rdi + 1], rdx; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x0009659f : add [rax + 0x1f0fc317], cl; add [rsi + 0x2e], ah; nop [rax + rax]; mov [rdi], dx; ret
0x0013b19d : push rax; sbb [rbp + 0x480d75c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x000922b9 : movlpd [rdx], xmm0; movlpd xmm1, [rcx + 5]; movlpd [rdx + 5], xmm1; mov rax, rdi; ret
0x00092185 : mov ax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; mov rax, rdi; ret
0x0003a6ca : dec [rcx + rcx*4 - 0x22]; sub r15, r11; mov rdi, r14; mov rdx, r15; call [rax + 0x38]
0x00031142 : mov eax, [rsi + 0x28]; mov r9, [rsi + 0x30]; mov rsi, [rsi + 0x70]; xor eax, eax; ret
0x000625b9 : lea edx, [rsi + 4]; mov [rax], rdx; mov eax, [rsi]; add rsp, 8; pop rbx; pop rbp; ret
0x0006d223 : mov rax, [rsp]; mov rdi, r15; movzx esi, [rcx]; lea rbx, [rcx + 1]; call [rax + 0x18]
0x000388d7 : add [rcx + rcx*4 - 0x16], cl; mov rsi, rbx; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x0005e696 : mov dh, 0; add [rax], al; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call [r15 + 0x38]
0x0016008c : add [rax], al; add [rax], al; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx + 3]; ret
0x00097d78 : adc bl, dh; movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret
0x0015dcef : add [rax + 0x1f0fc311], cl; add [rsi + 0x2e], ah; nop [rax + rax]; mov [rcx], dx; ret
0x00151377 : stosd [rdi], eax; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00132824 : mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov [rdi + 0x10], 2; add rdi, 0x10; jmp rcx
0x0011f7ae : sub [rbx + 0xba05ff], eax; add [rax], al; add [rax + 0x102], bh; cmovne eax, edx; ret
0x00134b95 : mov ecx, esi; xor eax, eax; mov rsi, rdx; mov [rdi + 0x68], 2; add rdi, 0x68; jmp rcx
0x00096f18 : adc bl, dh; movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x0017193f : adc [rsi - 3], rdx; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x00087376 : lea eax, [rdi + rax - 1]; mov [rdi], dx; movzx edx, [rsp - 6]; mov [rdi + 2], dl; ret
0x0009a645 : adc r11b, r14b; movq [rdi + rdx - 0x10], mm0; movdqu xmm[rdi + rdx - 0x20], xmm0; ret
0x0012bf04 : mov r10, [rsp + 8]; mov ebp, eax; mov rax, [r10 + 8]; mov rdi, r10; call [rax + 0x20]
0x0006ec55 : adc cl, [rax - 0x75]; or [r8 + 0x39], r9b; sal [rbx + 0x21], 1; movzx eax, [rax]; ret
0x000922da : movlps [rdx], xmm0; movlpd xmm1, [rcx + 6]; movlpd [rdx + 6], xmm1; mov rax, rdi; ret
0x00131bf4 : mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx
0x00046c3c : mov rdi, r13; sub r14, rbx; mov r15, r14; sar r15, 2; mov rdx, r15; call [rax + 0x38]
0x00022e20 : add cl, [rbp + 0x415b9204]; add edx, eax; xor eax, eax; mov [rsi], r10d; pop rbp; ret
0x00092143 : movlpd xmm1, [rcx + 8]; movlpd [rdx], xmm0; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x0012b8ea : lea r9, [rsp + 0x2c]; call [rax]; mov rax, [r13 + 8]; mov rdi, r13; call [rax + 0x20]
0x00087375 : lea rax, [rdi + rax - 1]; mov [rdi], dx; movzx edx, [rsp - 6]; mov [rdi + 2], dl; ret
0x0006151b : sub [rbx + 0x11], sil; lea rsi, [rcx + 4]; mov [rdx + 0x20], rsi; mov [rcx], eax; ret
0x000ab104 : push 0; mov rdi, r12; mov r9, r15; mov rcx, rbx; mov rdx, r14; mov rsi, r13; call rbp
0x00030e12 : mov eax, [rdi + 0x28]; mov r9, [rdi + 0x30]; mov rdi, [rdi + 0x68]; xor eax, eax; ret
0x00060811 : push rax; or [rbx + 0xb], dh; lea rcx, [rdx + 4]; mov [rax], rcx; mov eax, [rdx]; ret
0x000922fa : movlps [rdx], xmm0; movlpd xmm1, [rcx + 7]; movlpd [rdx + 7], xmm1; mov rax, rdi; ret
0x0016e44a : xor edx, edx; lea rax, [rdi + rax]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x0013ce46 : movaps xmm[rsp + 0x80], xmm0; pxor xmm0, xmm0; movups xmm[rsp + 0x28], xmm0; call rdx
0x0012c955 : lea r8, [rip + 0x645f4]; mov ecx, eax; movsxd rdx, [r8 + rcx*4]; add rdx, r8; jmp rdx
0x00132825 : mov ecx, esi; xor eax, eax; mov rsi, rdx; mov [rdi + 0x10], 2; add rdi, 0x10; jmp rcx
0x000afb8f : add [rax - 0x39], cl; rol [rax + rax], 0; add bl, al; nop [rax + rax]; mov rax, 5; ret
0x0000459d : push rax; mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x0000f5f5 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rax, [rip + 0x3ba649]; add rax, fs:[0]; ret
0x001200d3 : add [rbp + 0x12], dh; movzx eax, [rdi + 1]; shl eax, 3; shr rax, 4; and eax, 0x7f; ret
0x00072ac9 : add [rax], al; mov rax, [rip + 0x35701e]; mov [rsp + 8], r11; mov rdi, r12; call [rax]
0x0001f7a3 : mov [rbx], al; sldt [rax]; mov rdx, r12; mov rsi, r14; mov rdi, [rsp + 0x18]; call rbp
0x000962be : add [rax], al; mov cx, [rsi]; mov dl, [rsi + 2]; mov [rdi], cx; mov [rdi + 2], dl; ret
0x000435f1 : add [rax - 0x77], ecx; push rbp; sub dh, al; add [rip - 0x11d17], ch; jmp [rsi - 0x70]
0x0012c956 : lea eax, [rip + 0x645f4]; mov ecx, eax; movsxd rdx, [r8 + rcx*4]; add rdx, r8; jmp rdx
0x00096d2e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x00101886 : add [rax], al; mov rdx, [rip + 0x2c8309]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00111ba6 : add [rax], al; mov rdx, [rip + 0x2b7fe9]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000e5406 : dec [rdi]; test [rax], al; add eax, [rax]; add [rcx], dh; fild [rbx - 0x6af0fd08]; ret
0x001525f2 : movq [rdi - 0x20], mm0; lddqu xmm0, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x10], xmm0; ret
0x0012a6fd : push rdi; pop rsp; lea rsi, [rdi + 0x48]; mov rdi, rax; mov rcx, [rcx + 0x18]; jmp rcx
0x00131cb5 : add [rax], al; add bl, dh; movq mm0, [rdx]; mov eax, 1; movups xmm[rdi + 8], xmm0; ret
0x00062437 : mov rax, [rbp + 0x18]; mov esi, r12d; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax
0x0009c679 : push 0; xor r8d, r8d; mov rsi, r13; lea r9, [rsp + 0x28]; lea rcx, [rax + 4]; call rbx
0x00092186 : mov eax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; mov rax, rdi; ret
0x00072e5d : add [rax], al; mov rax, [rip + 0x356c8a]; mov [rsp + 8], rsi; xor edi, edi; call [rax]
0x0006e294 : xchg [rdi + 0x31000001], cl; sal [rcx], cl; test [rax - 0x77], 0xdf; call [rax + 0x58]
0x00005047 : push rsi; mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r12
0x0003ab32 : adc al, 2; lea rax, [rip + 0x151b55]; movsxd rax, [rax + rdx*4]; add rax, rsi; jmp rax
0x0015bd15 : add [rsi + 0x2e], ah; nop [rax + rax]; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret
0x000c84b3 : add [rbx - 0x7bf0d606], al; stosd [rdi], eax; add [rax], al; add [rax - 0x7d], cl; ret
0x0010234e : add [rax], al; mov rdx, [rip + 0x2c7841]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00008f7a : push rbp; mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call rbx
0x00134c40 : movdqu xmm0, xmm[rdx]; mov eax, 1; mov [rdi + 0x18], 1; movups xmm[rdi + 8], xmm0; ret
0x000b067d : mov r14, r13; and r14, r15; and r14d, 1; add r14, rax; mov [rsp + 0xa8], r14; call rbx
0x000ab289 : mov rdx, r14; mov rcx, [rsp + 0x20]; mov r9, r15; mov rsi, r13; mov rdi, r12; call rbp
0x0013b1bd : lea rsi, [rip + 0x572d0]; mov rax, [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x00022fe8 : lea rax, [r10 + r8*4]; mov [rsi + 0x10], r10; mov [rsi + 0x28], rax; xor eax, eax; ret
0x0017254f : add [rax - 0x73], cl; add r11d, r8d; nop ; nop cs:[rax + rax]; lea rax, [rdi + 2]; ret
0x0003aa94 : add al, 6; lea rsi, [rip + 0x151cf3]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x00005046 : push r14; mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r12
0x000eeede : add [rax], al; mov rdx, [rip + 0x2dacb1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0014d0a8 : mov edx, [rsi - 4]; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0000eee3 : adc [rbx + rdi - 0x9cb800], ebp; mov rax, fs:[rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x001375d6 : call [rax + 0x20]; mov rax, [rbx]; mov rdx, [rax + 8]; mov rdi, rax; call [rdx + 0x20]
0x00005c36 : push rbp; mov r9, [rsp + 0x20]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x0008ad6f : add [rax], al; add [rsi + 0xf], ah; xlatb ; ror [rdi], -0x43; ror [rax + 1], 0xf8; ret
0x000b067e : mov esi, ebp; and r14, r15; and r14d, 1; add r14, rax; mov [rsp + 0xa8], r14; call rbx
0x00108b89 : mov [rbp + 0x38], rdx; mov [rax], bl; movsx eax, bl; add rsp, 8; pop rbx; pop rbp; ret
0x0005b9a4 : sub [rdi + 0x29], esi; movzx eax, al; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x00100b36 : add [rax], al; mov rdx, [rip + 0x2c9059]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0001e5dc : adc [rdi + 0x50], eax; movups xmm[rdi + 0x60], xmm0; movups xmm[rdi + 0x70], xmm0; ret
0x000695f6 : lea rdi, [rip + 0x35d3d3]; mov [rbx + 0xd8], rcx; mov [rdx + 0x130], rdi; pop rbx; ret
0x00062438 : mov eax, [rbp + 0x18]; mov esi, r12d; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax
0x001693bb : add [rax], al; add [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper ; ret
0x0017256f : add [rax - 0x73], cl; add r8d, r11d; nop ; nop cs:[rax + rax]; lea rax, [rdi + 4]; ret
0x00088d48 : int1 ; bsf rcx, rcx; movzx eax, [rax + rcx]; movzx edx, [rdx + rcx]; sub eax, edx; ret
0x00108b8a : mov [rbp + 0x38], edx; mov [rax], bl; movsx eax, bl; add rsp, 8; pop rbx; pop rbp; ret
0x00101a8e : add [rax], al; mov rdx, [rip + 0x2c8101]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000ed6f2 : mov [rax + 0xc], esp; mov [rbx + 4], edx; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x000086fb : push rbp; mov r9, [rsp + 0x20]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x00097a7f : add [rbx + 0x3568b0e], cl; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 7]; ret
0x0012beea : mov esi, 5; push [rsp + 0xe8]; mov [rsp + 0x18], r10; lea r9, [rsp + 0x40]; call [rax]
0x000ee0d2 : adc [rsi + 0x60], eax; movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x0007b8de : mov [rbx + 0x40], r8; movsxd rdi, esi; mov [rbx + 0x30], eax; mov [rbx], rdi; call rcx
0x0009a46e : movups xmm[rdi + 0x20], xmm6; movups xmm[rdi + 0x30], xmm7; movups xmm[r11], xmm8; ret
0x00020de4 : dec [rcx - 0x75]; add cl, [rcx - 0x77]; add [rcx - 0x73], ecx; or [r8 + 0x39], cl; ret
0x00004a6d : push rsp; mov r9, [rsp + 0x40]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call rbx
0x000eee0e : add [rax], al; mov rdx, [rip + 0x2dad81]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0013b1be : lea esi, [rip + 0x572d0]; mov rax, [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x0000785a : push rbx; mov r9, [rsp + 0x30]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x0008727c : add [rax], al; add [rax], al; mov rax, [rsp + 0x10]; mov [rdi], rax; mov rax, rdi; ret
0x0012d80f : adc [rbp + 0x481074c0], al; mov eax, [rbx + 8]; mov rsi, r12; mov rdi, rbx; call [rax]
0x00131ccd : add [rax], al; add bl, dh; movq mm0, [rdi + 8]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x0003cc19 : adc al, 2; lea rax, [rip + 0x14faee]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x000eef56 : add [rax], al; mov rdx, [rip + 0x2dac39]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000474f2 : adc al, 2; lea rax, [rip + 0x145595]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x0012b8eb : lea ecx, [rsp + 0x2c]; call [rax]; mov rax, [r13 + 8]; mov rdi, r13; call [rax + 0x20]
0x0003b07c : add al, 6; lea rsi, [rip + 0x15170b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x00168ec3 : movsxd rcx, ecx; cmp cl, [rax + 0x63]; leave ; lea rax, [rdi + rcx]; sub rax, rsi; ret
0x000ed50e : adc [rdi + 0x20], eax; movups xmm[rdi + 0x30], xmm0; movups xmm[rdi + 0x40], xmm0; ret
0x00072d55 : add [rax], al; mov rax, [rip + 0x356d92]; mov [rsp + 8], rdx; mov rdi, r15; call [rax]
0x0016d304 : sbb esi, ebx; bsf eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper ; ret
0x0009cc12 : mov rcx, r13; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x00044fe3 : adc [rax], al; add [rdi], cl; xchg edi, ebx; sbb [rax], eax; add [rax - 0x7d], cl; ret
0x001250d2 : mov [rax], rbx; mov [rbx + 0x20], rdx; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x0003b188 : xor al, 6; lea rax, [rip + 0x15137f]; movsxd rax, [rax + rsi*4]; add rax, rdi; jmp rax
0x0013cc6d : add [rax], al; add [rbx + 0x66c32847], cl; nop ; nop cs:[rax + rax]; xor eax, eax; ret
0x00035056 : xchg eax, ebp; or [rax], eax; add [rbp + 0x31], al; inc [rax - 0x80]; jmp [rbp + 0x49]
0x00135f12 : mov rbp, [rsp + 0x30]; mov rax, [rdi + 0x38]; lea rsi, [rbp + 0x18]; call [rax + 0x10]
0x000be01f : add [rcx], dh; fisttp [rax - 0x77]; fcomp [rbx + 0x5d]; pop r12; pop r13; pop r14; ret
0x00039c4c : inc [rcx + 0x39]; fmul [rdi]; lea ebp, [rdx]; add al, [rax]; add [rax + 0x63], cl; ret
0x0009d1ed : xor eax, eax; mov rcx, r12; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x00095884 : movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0011ef24 : sub [rax], eax; add [rax], al; xor eax, eax; mov [rdi + 0xc], edx; mov [rsi], rdi; ret
0x0010192e : add [rax], al; mov rdx, [rip + 0x2c8261]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00003fb9 : push rbx; mov r9, [rsp + 0x30]; mov rsi, [rsp + 0x28]; mov rdi, [rsp + 0x20]; call r15
0x0013555c : add al, bl; nop ; movdqu xmm0, xmm[rdx]; mov eax, 1; movups xmm[rdi + 0x20], xmm0; ret
0x000b0bf6 : mov ebp, esi; and r13, r15; and r13d, 1; add r13, rax; mov [rsp + 0xa8], r13; call rbx
0x000407fc : sub esi, eax; mov rax, [rip + 0x38ad9b]; mov rdi, rbp; mov rcx, r14; call [rax + r8*8]
0x000ed7dd : adc [rsi + 0x60], eax; movdqu xmm0, xmm[rdi + 0x78]; movups xmm[rsi + 0x70], xmm0; ret
0x000eef26 : add [rax], al; mov rdx, [rip + 0x2dac69]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0009a3e6 : movups xmm[rcx - 0x20], xmm7; movups xmm[rcx - 0x30], xmm8; movups xmm[r11], xmm4; ret
0x00075c64 : add [rax], 0; add al, ch; adc [rdi - 0x7eb7fff7], -0x3c; add [rax], 0; add bl, dh; ret
0x00135f13 : mov ebp, [rsp + 0x30]; mov rax, [rdi + 0x38]; lea rsi, [rbp + 0x18]; call [rax + 0x10]
0x000226ed : add [rax], al; add [rax], al; add [rax - 0x75], cl; add [rbx - 0x75], bl; pop rax; ret
0x0006cb4e : mov [rbx + 0x20], rax; mov [rbx], edx; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x0006cb4f : mov [rbx + 0x20], eax; mov [rbx], edx; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x001396a9 : xor edx, [rax - 1]; inc [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; add eax, 1; ret
0x0010fd7f : add [rax + 0x39], cl; or [r13 - 0x1f], sil; pop rbx; mov eax, 5; pop r12; pop rbp; ret
0x00096c3f : add [rbx + 0x3568b0e], cl; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x00111c7e : add [rax], al; mov rdx, [rip + 0x2b7f11]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x001009be : add [rax], al; mov rdx, [rip + 0x2c91d1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00087329 : lea r8, [rip + 0x106b9c]; mov edx, eax; movsxd rdx, [r8 + rdx*4]; add rdx, r8; jmp rdx
0x0013c8ab : mov [rdi + 0x28], eax; mov rax, [rdi + 0x18]; add rsi, rax; mov [rdi + 0x18], rsi; ret
0x0009cf0e : xor eax, eax; mov rcx, r12; mov rdx, r14; lea r9, [rsp + 0x28]; mov rdi, rbp; call rbx
0x000956ce : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x0005ab65 : xchg eax, edi; mov [rax], al; add [rax], al; mov [rdx + 8], rcx; mov [rdx + 4], 1; ret
0x0003b020 : add al, 6; lea rsi, [rip + 0x151767]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0011f1ec : add [rbp - 0x647af025], al; add [rax], al; add [rax + 0x63], cl; fisttp [rax + 1]; ret
0x0000f5d5 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rax, [rip + 0x3ba621]; add rax, fs:[0]; ret
0x00131d25 : push -0x777848f1; add [rax], al; add [rsi - 0x77], ah; insb [rdi], dx; mov eax, 1; ret
0x00087184 : lea r9, [rip + 0x106cf9]; mov ecx, eax; movsxd rcx, [r9 + rcx*4]; add rcx, r9; jmp rcx
0x000067ce : push rbx; mov r9, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call r15
0x0003afb2 : add al, 6; lea rsi, [rip + 0x1517d5]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0013b34b : add [rax], al; add [rax], al; add [rbx + 0xb7501f8], al; mov rax, [rdi + 8]; jmp [rax]
0x000f543e : add [rax], al; mov rdx, [rip + 0x2d4751]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0009d1ec : xor r8d, r8d; mov rcx, r12; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x00008f79 : push r13; mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call rbx
0x0005d842 : add [rax], 0; add [rax - 0x77], cl; imul eax; push rdx; xor edi, edx; jmp [rsi - 0x70]
0x00023485 : movsxd rax, [rbx + 2]; mov [rbp], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x000871ac : add [rax], al; add [rax], al; mov rdx, [rsp + 0x18]; add rax, rdi; mov [rdi], rdx; ret
0x000ab28a : mov edx, esi; mov rcx, [rsp + 0x20]; mov r9, r15; mov rsi, r13; mov rdi, r12; call rbp
0x00102526 : add [rax], al; mov rdx, [rip + 0x2c7669]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00152e0f : adc bl, r14b; movq [rdi + 0x10], mm0; lddqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; ret
0x0013730a : lea eax, [rip - 0xab40]; mov esi, 4; lea rdx, [rip + 0x3f04]; mov rdi, rbx; call [rax]
0x000c63cb : add [rax], al; add [rax], al; add [rbx - 0x2ef73], cl; inc [rbx - 0x2ff73]; call [rax]
0x0016d22b : add [rcx - 0x876b730], cl; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper ; ret
0x000965ff : add [rax - 0x77], cl; push rdi; inc ebx; nop ; nop cs:[rax + rax]; mov [rdi], rdx; ret
0x0003b12c : movsxd rax, [rsi + rax*4]; add rax, rdi; mov r11, rdx; mov r9d, 1; mov r8d, 1; jmp rax
0x0012bf06 : push rsp; and al, 8; mov ebp, eax; mov rax, [r10 + 8]; mov rdi, r10; call [rax + 0x20]
0x00004a6c : push r12; mov r9, [rsp + 0x40]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call rbx
0x000b0bf5 : mov r13, r14; and r13, r15; and r13d, 1; add r13, rax; mov [rsp + 0xa8], r13; call rbx
0x0003b3e0 : adc al, 2; lea rax, [rip + 0x151327]; movsxd rax, [rax + rdx*4]; add rax, rsi; jmp rax
0x0007cb3b : add [rax], 0; add [rax], al; lea rax, [rip + 0x34fbe9]; mov [rip + 0x34fbca], rax; ret
0x0017255f : add [rax - 0x73], cl; add r8b, r11b; nop ; nop cs:[rax + rax]; lea rax, [rdi + 3]; ret
0x000055ce : push rbx; mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x0009cf0d : xor r8d, r8d; mov rcx, r12; mov rdx, r14; lea r9, [rsp + 0x28]; mov rdi, rbp; call rbx
0x00005c35 : push r13; mov r9, [rsp + 0x20]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x00094ec9 : add [rsi + 0xf], esp; adc eax, [rdx]; xor ah, ah; mov [rdx + 8], ah; mov rax, rdi; ret
0x0010edcc : add [rbp - 0x10], dh; mov edx, [rdi + 0x28]; xor eax, eax; test edx, edx; sete al; ret
0x00101b56 : add [rax], al; mov rdx, [rip + 0x2c8039]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0008ab84 : add [rsi + 0x2e], spl; nop [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret
0x0009cc13 : mov ecx, ebp; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x001250d3 : mov [rax], ebx; mov [rbx + 0x20], rdx; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x0012fade : mov bh, 0; add [rbp + 0x480b75c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x000ee15f : adc [rdi + 0xe8], eax; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x000407fb : sub rsi, rax; mov rax, [rip + 0x38ad9b]; mov rdi, rbp; mov rcx, r14; call [rax + r8*8]
0x000f539e : add [rax], al; mov rdx, [rip + 0x2d47f1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00060988 : push rax; or [rbx + 0x14], dh; lea rcx, [rdx + 4]; mov [rax], rcx; mov eax, [rdx]; ret
0x000695f7 : lea edi, [rip + 0x35d3d3]; mov [rbx + 0xd8], rcx; mov [rdx + 0x130], rdi; pop rbx; ret
0x000ed82d : adc [rdi + 0x68], eax; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0x78], xmm0; ret
0x0003b43c : add al, 6; lea rsi, [rip + 0x15134b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x001533be : add [rax], al; mov dx, [rsi + 1]; mov cx, [rsi]; mov [rdi + 1], dx; mov [rdi], cx; ret
0x0016d084 : add [rsi + 0x2e], spl; nop [rax + rax]; tzcnt eax, eax; add rax, rdi; vzeroupper ; ret
0x000a549d : add [rax - 0x77], cl; test [rax + rdx*4], ah; add [rax], al; add [rax + 0x39], cl; ret
0x00152711 : mov edx, [rsi - 0xe]; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x000eeedd : add [rax], r8b; mov rdx, [rip + 0x2dacb1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0014dc50 : mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0015824d : pop rdi; pop rsi; add eax, [rax]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00148b09 : leave ; lea r10, [rip + 0x4541f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0014d851 : mov ecx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x001108c4 : add [rdx], al; lea rdx, [rip + 0x618c3]; lea rax, [rip + 0x6184c]; cmovne rax, rdx; ret
0x0007db56 : add [rdx], al; lea rdx, [rip + 0x1c6d1]; lea rax, [rip + 0x1c60a]; cmovne rax, rdx; ret
0x0016e8ee : add [rax], al; tzcnt eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper ; ret
0x00110825 : add [rdx], al; lea rdx, [rip + 0x5cfa2]; lea rax, [rip + 0x5cf3b]; cmovne rax, rdx; ret
0x000c0214 : add [rax], 0; add [rbx - 0x77], bl; rcr [rbp + 0x41], 1; pop rsp; pop r13; pop r14; ret
0x000f6f1d : add [rax], al; add [rbp + 9], dh; lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret
0x00141d3c : add [rax], al; cmp ebx, 3; cmove ebx, eax; mov rax, [rip + 0x289535]; call [rax + 0x28]
0x0009629f : add [rdx - 0x3ce877ea], cl; nop ; nop cs:[rax + rax]; mov dx, [rsi]; mov [rdi], dx; ret
0x0015dd31 : adc [rax + 0x66c30451], ecx; nop cs:[rax + rax]; mov [rcx], edx; mov [rcx + 4], dx; ret
0x0007da55 : add [rdx], al; lea rdx, [rip + 0xefda2]; lea rax, [rip + 0xefd3b]; cmovne rax, rdx; ret
0x00095761 : movq mm0, [rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x000d8edd : sbb [rax], al; add [rax], al; add bh, al; add [rsi], al; add [rax], al; add cl, ch; ret
0x0013b181 : lea esi, [rip + 0x293df1]; mov rax, [rax + 0x10]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x00097b7e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0x10]; ret
0x00095741 : movq mm0, [rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x0009c203 : dec [rcx + 0xe181d1]; or al, 2; add [rcx + 0xc00f9], al; add [rsp + rcx - 0xd], dh; ret
0x000fcb91 : adc [rax - 0x7b], cl; dec [rdi]; test [rax + 0x49000000], edx; mov edi, [rbp]; call r12
0x0001cfd0 : movss xmm3, [rip + 0x16b6f8]; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret
0x0015dd0f : add [rsi - 0x77], ah; adc [rax + 0x66c30251], ecx; nop [rax + rax]; mov [rcx], edx; ret
0x0010192d : add [rax], r8b; mov rdx, [rip + 0x2c8261]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00128e99 : lea esi, [rsp + 0x58]; xor edx, edx; mov rsi, r13; mov rdi, rbp; mov rcx, r14; call r10
0x0014d2a1 : mov ecx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00110664 : add [rdx], al; lea rdx, [rip + 0x61573]; lea rax, [rip + 0x614fc]; cmovne rax, rdx; ret
0x00152930 : mov rdx, [rsi - 0xa]; mov ecx, [rsi - 4]; mov [rdi - 0xa], rdx; mov [rdi - 4], ecx; ret
0x000921d5 : mov eax, [rcx]; mov [rdx], eax; mov ax, [rcx + 4]; mov [rdx + 4], ax; mov rax, rdi; ret
0x00158249 : leave ; lea r10, [rip + 0x35e5f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x001527a0 : mov rdx, [rsi - 0xd]; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x000921b5 : mov eax, [rcx]; mov [rdx], eax; mov al, [rcx + 4]; mov [rdx + 4], al; mov rax, rdi; ret
0x00132029 : add [rsi + rbx*4 + 0x49], esi; mov edi, [rdi]; mov rax, [rdi + 0x38]; call [rax + 0x18]
0x0016d22c : mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper ; ret
0x0009a2ae : mov rcx, [rsi + rdx - 8]; mov rsi, [rsi]; mov [rdi + rdx - 8], rcx; mov [rdi], rsi; ret
0x00139b90 : mov rdi, [rdi + 0x48]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx
0x00101b55 : add [rax], r8b; mov rdx, [rip + 0x2c8039]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0011b776 : add al, [rax]; mov rcx, r15; mov rdx, [rsp + 8]; mov rsi, [rsp]; mov rdi, r13; call r12
0x00110616 : add [rdx], al; lea rdx, [rip - 0x763df]; lea rax, [rip - 0x764a6]; cmovne rax, rdx; ret
0x001106e6 : add [rdx], al; lea rdx, [rip - 0x764af]; lea rax, [rip - 0x76576]; cmovne rax, rdx; ret
0x0000192b : xor r8d, r8d; xor ecx, ecx; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx
0x001009bd : add [rax], r8b; mov rdx, [rip + 0x2c91d1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00151af7 : movsb [rdi], [rsi]; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005d843 : add [rax], al; add [rax - 0x77], cl; imul eax; push rdx; xor edi, edx; jmp [rsi - 0x70]
0x0007dea4 : add [rdx], al; lea rdx, [rip + 0xf3d43]; lea rax, [rip + 0xf3ccc]; cmovne rax, rdx; ret
0x00101a8d : add [rax], r8b; mov rdx, [rip + 0x2c8101]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00135510 : mov rax, [rdx]; mov rdx, [rdi + 0x90]; bswap eax; mov [rdx + 0xc], eax; mov eax, 1; ret
0x001725cf : add [rax - 0x73], cl; or r8b, r11b; nop ; nop cs:[rax + rax]; lea rax, [rdi + 0xb]; ret
0x00152830 : mov rdx, [rsi - 0xc]; mov ecx, [rsi - 4]; mov [rdi - 0xc], rdx; mov [rdi - 4], ecx; ret
0x00064b3e : sub [rbp - 0x667bf02e], al; add [rax], al; add [rcx + 0x2b], cl; and [r8 + 1], r9b; ret
0x0014d660 : mov rcx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0007dec5 : add [rdx], al; lea rdx, [rip + 0xef932]; lea rax, [rip + 0xef8cb]; cmovne rax, rdx; ret
0x0001ed28 : mov rdx, [rsi + rax*8]; or rdx, [r8 + rax*8]; mov [rdi + rax*8], rdx; xor eax, eax; ret
0x00096bee : add [rax], al; mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x00087185 : lea ecx, [rip + 0x106cf9]; mov ecx, eax; movsxd rcx, [r9 + rcx*4]; add rcx, r9; jmp rcx
0x0007daf4 : add [rdx], al; lea rdx, [rip + 0xf46a3]; lea rax, [rip + 0xf462c]; cmovne rax, rdx; ret
0x00152831 : mov edx, [rsi - 0xc]; mov ecx, [rsi - 4]; mov [rdi - 0xc], rdx; mov [rdi - 4], ecx; ret
0x0014d850 : mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00022000 : add [rax], dl; mov [rax], 1; add [rip + 0x3ad33f], 1; add rsp, 8; pop rbx; pop rbp; ret
0x0007d9e6 : add [rdx], al; lea rdx, [rip + 0x1c861]; lea rax, [rip + 0x1c79a]; cmovne rax, rdx; ret
0x00152710 : mov rdx, [rsi - 0xe]; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x00152680 : mov rdx, [rsi - 0xf]; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x00132801 : mov edi, [rdi + 0x40]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx
0x001725df : add [rax - 0x73], cl; or r8d, r11d; nop ; nop cs:[rax + rax]; lea rax, [rdi + 0xc]; ret
0x0006aea9 : xor edx, [rdi]; add [rax], al; mov [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret
0x0001d729 : add [rax], al; add [rax], al; add [rsi - 0x70], ah; movmskps eax, xmm0; and eax, 8; ret
0x00101885 : add [rax], r8b; mov rdx, [rip + 0x2c8309]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000f5217 : neg edx; mov fs:[rax], edx; mov rax, [rip + 0x2d49c5]; mov [rax], -1; xor eax, eax; ret
0x001715b8 : adc [rcx + 5], rbp; vmovups zmm[r9 + 0x180], zmm14; vmovups zmm[r9 + 0x1c0], zmm15; ret
0x000fb348 : sbb al, ch; xor al, [rbx]; add [rax], al; lea rax, [rip + 0x2d1d5b]; add rsp, 0x18; ret
0x0007de56 : add [rdx], al; lea rdx, [rip + 0x1c3f1]; lea rax, [rip + 0x1c32a]; cmovne rax, rdx; ret
0x0013b180 : lea rsi, [rip + 0x293df1]; mov rax, [rax + 0x10]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x0014d481 : mov ecx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0007426d : add [rax], al; add [rax - 0x77], cl; or [r8 - 0x75], cl; or [rbx + 0x94807e0], r8b; ret
0x00151977 : movsd [rdi], [rsi]; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014da50 : mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0014d661 : mov ecx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0011a738 : dec [rax - 0x73]; test [rax + rax], ah; add [rax], eax; add [rcx], dh; jmp [rsi - 0x77]
0x0007dba4 : add [rdx], al; lea rdx, [rip + 0xf4023]; lea rax, [rip + 0xf3fac]; cmovne rax, rdx; ret
0x001355b5 : add [rax], al; mov eax, [rax]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x001725bf : add [rax - 0x73], cl; or r11d, r8d; nop ; nop cs:[rax + rax]; lea rax, [rdi + 0xa]; ret
0x000f543d : add [rax], r8b; mov rdx, [rip + 0x2d4751]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00171b3d : adc [rsi + 5], rdx; vmovups zmm[rsi + 0x180], zmm2; vmovups zmm[rsi + 0x1c0], zmm2; ret
0x001107b6 : add [rdx], al; lea rdx, [rip - 0x7659f]; lea rax, [rip - 0x76666]; cmovne rax, rdx; ret
0x00110734 : add [rdx], al; lea rdx, [rip + 0x614a3]; lea rax, [rip + 0x6142c]; cmovne rax, rdx; ret
0x000956e1 : movq mm0, [rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x00128e98 : lea r14, [rsp + 0x58]; xor edx, edx; mov rsi, r13; mov rdi, rbp; mov rcx, r14; call r10
0x00136901 : add [rax], al; mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi + 0x38]; call [rax + 0x20]
0x00044182 : add [rbp + rcx*4 + 0x2c], cl; test [rax], eax; add [rax], al; add [rax + 0x29], cl; ret
0x0000192c : xor eax, eax; xor ecx, ecx; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx
0x0016351a : add [rbx], 0; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00132800 : mov rdi, [rdi + 0x40]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx
0x00135511 : mov eax, [rdx]; mov rdx, [rdi + 0x90]; bswap eax; mov [rdx + 0xc], eax; mov eax, 1; ret
0x001527a1 : mov edx, [rsi - 0xd]; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x000f539d : add [rax], r8b; mov rdx, [rip + 0x2d47f1]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00149d89 : leave ; lea r10, [rip + 0x4421f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0009a2bf : mov ecx, [rsi + rdx - 4]; mov esi, [rsi]; mov [rdi + rdx - 4], ecx; mov [rdi], esi; ret
0x0014d2a0 : mov rcx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0009a2af : mov ecx, [rsi + rdx - 8]; mov rsi, [rsi]; mov [rdi + rdx - 8], rcx; mov [rdi], rsi; ret
0x00111ba5 : add [rax], r8b; mov rdx, [rip + 0x2b7fe9]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000633ce : add [rax], al; sub rdx, [rcx + 8]; mov eax, [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret
0x00099653 : mov dl, [rsi + 2]; mov [rdi], cx; mov [rdi + 2], dl; xor ch, ch; mov [rdi + 3], ch; ret
0x0007aff3 : add [rax], eax; add [rax - 0x77], cl; fimul [rcx + rcx*4 - 0xa]; mov rdi, r13; call rax
0x0014da4f : add [rax - 0x75], cl; mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00075c65 : add [rax], al; add al, ch; adc [rdi - 0x7eb7fff7], -0x3c; add [rax], 0; add bl, dh; ret
0x00087383 : push rdi; add al, bl; nop cs:[rax + rax]; mov [rdi], ecx; lea rax, [rdi + rax - 1]; ret
0x000450bd : dec [rax - 0x77]; fimul [rcx + rcx*4 - 0x1a]; mov rdi, [rbp - 0x8d0]; call [r13 + 0x38]
0x00095701 : movq mm0, [rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x00131bda : add [rax], al; movups xmm[rsi], xmm0; mov rax, [rax + 0xa0]; mov [rsi + 0x10], rax; ret
0x00022fe9 : lea eax, [rdx + rax*4]; mov [rsi + 0x10], r10; mov [rsi + 0x28], rax; xor eax, eax; ret
0x00134f2a : add [rdx + rbp*4 + 0x49], esi; mov edi, [rdi]; mov rax, [rdi + 0x38]; call [rax + 0x18]
0x00152931 : mov edx, [rsi - 0xa]; mov ecx, [rsi - 4]; mov [rdi - 0xa], rdx; mov [rdi - 4], ecx; ret
0x00171b3e : adc [rsi + 5], edx; vmovups zmm[rsi + 0x180], zmm2; vmovups zmm[rsi + 0x1c0], zmm2; ret
0x00110685 : add [rdx], al; lea rdx, [rip + 0x5d162]; lea rax, [rip + 0x5d0fb]; cmovne rax, rdx; ret
0x0013d107 : movsd [rdi], [rsi]; pslld mm7, mm7; cmp rax, 1; sete al; add rsp, 8; movzx eax, al; ret
0x0007dbc5 : add [rdx], al; lea rdx, [rip + 0xefc12]; lea rax, [rip + 0xefbab]; cmovne rax, rdx; ret
0x001528b0 : mov rdx, [rsi - 0xb]; mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x000234cd : mov [rsi], ax; movabs rax, -0x21131992fffefff5; mov [rsi + 0xc], rax; xor eax, eax; ret
0x0001ed29 : mov edx, [rsi + rax*8]; or rdx, [r8 + rax*8]; mov [rdi + rax*8], rdx; xor eax, eax; ret
0x0014d84f : add [rax - 0x75], cl; mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0012fb1f : mov ah, 0; add [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; pop rbx; pop rbp; ret
0x0007b8df : mov [rbx + 0x40], eax; movsxd rdi, esi; mov [rbx + 0x30], eax; mov [rbx], rdi; call rcx
0x00128cfe : lea ebp, [rsp + 0x10]; xor edx, edx; mov rsi, r12; mov rdi, rbx; mov rcx, r13; call r10
0x0008732a : lea eax, [rip + 0x106b9c]; mov edx, eax; movsxd rdx, [r8 + rdx*4]; add rdx, r8; jmp rdx
0x001560d9 : leave ; lea r10, [rip + 0x37f4f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0014dc51 : mov ecx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0007da34 : add [rdx], al; lea rdx, [rip + 0xf41b3]; lea rax, [rip + 0xf413c]; cmovne rax, rdx; ret
0x0007eb00 : add [rax], al; add [rax], al; add al, ch; xchg [rax + rdi*8], dl; dec [rax - 0x77]; ret
0x000963a1 : movq mm0, [rsi]; mov cl, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; ret
0x00139b91 : mov edi, [rdi + 0x48]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx
0x0015bd14 : add [rsi + 0x2e], spl; nop [rax + rax]; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret
0x00033a1c : dec [rcx + rcx*4 + 7]; sub eax, esi; mov [rdi + 8], r9; mov [rdx], eax; mov eax, 2; ret
0x00152681 : mov edx, [rsi - 0xf]; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x000bf77c : push rdx; mov rdx, [rsp + 0x28]; mov rdi, [rsp + 0x20]; mov rax, [rsp + 0x18]; call rax
0x001528b1 : mov edx, [rsi - 0xb]; mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x0014da51 : mov ecx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x000ed6f1 : mov [rax + 0xc], r12d; mov [rbx + 4], edx; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x00100b35 : add [rax], r8b; mov rdx, [rip + 0x2c9059]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0007cb3c : add [rax], al; add [rax], al; lea rax, [rip + 0x34fbe9]; mov [rip + 0x34fbca], rax; ret
0x000b0506 : mov eax, esi; add eax, r9d; mov [rsp + 0x40], eax; mov rsi, rbp; mov rdi, r12; call rbx
0x0013bf0e : add [rax], al; mov rax, [rdi + 8]; mov [rsp + 8], r8; lea rsi, [rsp + 0x10]; call [rax]
0x00110804 : add [rdx], al; lea rdx, [rip + 0x613b3]; lea rax, [rip + 0x6133c]; cmovne rax, rdx; ret
0x001715b9 : adc [rcx + 5], ebp; vmovups zmm[r9 + 0x180], zmm14; vmovups zmm[r9 + 0x1c0], zmm15; ret
0x0014d480 : mov rcx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00110755 : add [rdx], al; lea rdx, [rip + 0x5d092]; lea rax, [rip + 0x5d02b]; cmovne rax, rdx; ret
0x00128cfd : lea r13, [rsp + 0x10]; xor edx, edx; mov rsi, r12; mov rdi, rbx; mov rcx, r13; call r10
0x0001e657 : sbb [rbx + 0x13773ff9], al; mov rax, -2; rol rax, cl; and [rdi], rax; xor eax, eax; ret
0x00097c1b : movq [rdi], mm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret
0x0016f761 : add edi, edx; lea r11, [rip + 0x2c206]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000018ab : push 0; mov rcx, r12; push 0; mov rdx, rbp; mov rsi, [rsp + 0x18]; mov r9, r13; call rbx
0x00170806 : add rdi, rdx; lea r11, [rip + 0x2b2a0]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0014da39 : mov edx, [rsi - 8]; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0016f13f : add rdi, rdx; lea r11, [rip + 0x2c827]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0014d040 : mov [rdi - 0x19], edx; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x0006a088 : add [rax], al; sub r12, r14; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call [rax + 0x40]
0x000920ee : add eax, [rcx]; add [rax], al; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret
0x0009565e : add [rax], al; mov rcx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; ret
0x0008fc77 : add [rax], al; add [rax], al; lea rax, [rdi + rax]; cmp [rax], sil; cmovne rax, rdx; ret
0x0012dcba : mov [rbx + 0x58], rcx; mov eax, 1; mov [rbx + 0x68], rdx; pop rbx; pop rbp; pop r12; ret
0x00170573 : add rdi, rdx; lea r11, [rip + 0x2b533]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00096d41 : movq mm0, [rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret
0x00000c48 : add [rax], al; add [rax], al; nop [rax]; mov rax, [rip + 0x3c8f41]; add rax, fs:[0]; ret
0x0001ea58 : mov rdx, [rsi + rax*8]; and rdx, [r8 + rax*8]; mov [rdi + rax*8], rdx; xor eax, eax; ret
0x0012dcbb : mov [rbx + 0x58], ecx; mov eax, 1; mov [rbx + 0x68], rdx; pop rbx; pop rbp; pop r12; ret
0x00170885 : add edi, edx; lea r11, [rip + 0x2b222]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000fb2c2 : add [rdx + 0x48], bl; mov eax, [rip + 0x2d0355]; pop rcx; pop rbx; pop rbp; pop r12; ret
0x0012e97e : add [rax], al; mov rax, [rsp + 0x10]; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax
0x00170c88 : add edi, edx; lea r11, [rip + 0x2ae1f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0001ea59 : mov edx, [rsi + rax*8]; and rdx, [r8 + rax*8]; mov [rdi + rax*8], rdx; xor eax, eax; ret
0x00099682 : mov dl, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dl; xor ch, ch; mov [rdi + 5], ch; ret
0x0015bca5 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x00062082 : mov ecx, [rax + 0x10]; mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x000c5bc2 : lea edx, [rip + 0xc9bd8]; mov esi, esi; movsxd rax, [rdx + rsi*4]; add rax, rdx; jmp rax
0x0000de70 : mov rax, [rip + 0x3bbc81]; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax + 0xa8]; ret
0x0016f44d : add edi, edx; lea r11, [rip + 0x2c51a]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00088ee9 : leave ; lea r10, [rip + 0x10507f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0012c774 : mov rdx, [rbx + 0x28]; add rsp, 8; mov rdi, rbp; xor eax, eax; pop rbx; pop rbp; jmp rdx
0x0014dc38 : mov rdx, [rsi - 8]; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0010a61b : int1 ; add [rax], r8b; mov rsi, r13; mov rdx, rax; mov edi, 0x2000003; call [rbx + 0x28]
0x0014da38 : mov rdx, [rsi - 8]; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00087405 : add [rdx + rax], cl; add [rip + 0xc00], bh; lea rax, [rip + 0x37bb]; cmove rax, rdx; ret
0x0016f31b : add edi, edx; lea r11, [rip + 0x2c64c]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x001354fd : lea rcx, [rip + 0x5cf50]; mov esi, esi; movsxd rax, [rcx + rsi*4]; add rax, rcx; jmp rax
0x00142735 : add [rax - 0x39], cl; add al, [rax]; add [rax], al; add [rdx - 1], bh; mov eax, edx; ret
0x0012d3f6 : mov rax, [r13 + 8]; mov rsi, [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call [rax + 0x20]
0x00099692 : mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; xor ch, ch; mov [rdi + 6], ch; ret
0x0006e296 : add [rax], eax; add [rcx], dh; sal [rcx], cl; test [rax - 0x77], 0xdf; call [rax + 0x58]
0x0014d288 : mov edx, [rsi - 4]; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00160045 : add [rsi + 0x2e], ah; nop [rax + rax]; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret
0x0014cf43 : mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x00131c8d : lea rcx, [rip + 0x6035c]; mov esi, esi; movsxd rax, [rcx + rsi*4]; add rax, rcx; jmp rax
0x000997c6 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], cl; xor ch, ch; mov [rdi + 0x11], ch; ret
0x000873a4 : lea rax, [rdi + rax - 1]; mov [rdi], edx; movzx edx, [rsp - 0xc]; mov [rdi + 4], dl; ret
0x0001d915 : xor esi, esi; test eax, eax; sete sil; mov [rbx + 0x40], esi; xor eax, eax; pop rbx; ret
0x0014dc39 : mov edx, [rsi - 8]; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00064991 : mov edi, ebp; mov rax, [rax + 0x60]; sar r8, 2; mov [rsp + 0x30], rax; call [r13 + 0x30]
0x00138527 : add al, [rax]; add [rax], al; mov fs:[rbx], rax; mov rax, [rip + 0x2917da]; pop rbx; ret
0x00170574 : add edi, edx; lea r11, [rip + 0x2b533]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0003a253 : dec [rax - 0x77]; fimul [rcx + rcx*4 - 9]; sub r13, rbx; mov rdx, r13; call [r15 + 0x38]
0x0013b1ee : add [rax], al; mov [rsp + 0x38], rax; xor eax, eax; mov [rsp], 2; mov rdi, rsp; call rdx
0x00066dd1 : sub eax, [rbx + 0x20]; mov rdx, [rbx + 0xf8]; mov [rdx], rax; xor eax, eax; pop rbx; ret
0x0013d129 : mov [rdi + 0x18], rsi; mov [rdi + 0x28], 0; mov [rdi + 0x20], 0; mov [rdi + 8], rax; ret
0x0002268f : add [rax - 0x7b], cl; call [rbx + 0x74]; cmp dh, [rcx]; rol [rax + 0x375003f], 0x5b; ret
0x0016f31a : add rdi, rdx; lea r11, [rip + 0x2c64c]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016f6e6 : add rdi, rdx; lea r11, [rip + 0x2c280]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00096e5d : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x00170884 : add rdi, rdx; lea r11, [rip + 0x2b222]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000962de : add [rax], al; mov ecx, [rsi]; mov dl, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dl; ret
0x00170d91 : add edi, edx; lea r11, [rip + 0x2ad16]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000bb166 : lea rsi, [rip + 0xd3e2b]; mov edx, ecx; movsxd rax, [rsi + rdx*4]; add rax, rsi; jmp rax
0x0013d12a : mov [rdi + 0x18], esi; mov [rdi + 0x28], 0; mov [rdi + 0x20], 0; mov [rdi + 8], rax; ret
0x00097c9c : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret
0x00135819 : mov rsi, [rsp + 0x28]; mov rdi, rbp; add [rax], 1; mov rax, [r15 + 0x60]; call [rax + 8]
0x0016ef44 : add edi, edx; lea r11, [rip + 0x2ca23]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x001385e7 : add al, [rax]; add [rax], al; mov fs:[rbx], rax; mov rax, [rip + 0x29162a]; pop rbx; ret
0x00135610 : mov rax, [rdx]; mov rdx, [rdi + 0x90]; bswap eax; mov [rdx + 0x10], eax; mov eax, 1; ret
0x000996f5 : push rsi; or [rax - 0x77], cl; pcmpgtd mm1, [rcx - 0x12cff7a9]; mov [rdi + 0xa], ch; ret
0x00145071 : mov rax, [rip + 0x284b10]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax + 0x170]; jmp rax
0x0005ff2c : xchg [rdi + 0x48000000], cl; mov edx, ebp; mov rsi, r12; mov rdi, rbx; call [r13 + 0x58]
0x0017094b : add edi, edx; lea r11, [rip + 0x2b15c]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0000f3bd : add [rax - 0x75], cl; add [rax - 0x75], cl; pop rax; mov eax, [rax + rdi*4 + 0x200]; ret
0x0016f44c : add rdi, rdx; lea r11, [rip + 0x2c51a]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000234ce : mov [rsi], eax; movabs rax, -0x21131992fffefff5; mov [rsi + 0xc], rax; xor eax, eax; ret
0x0016ed04 : add edi, edx; lea r11, [rip + 0x2cc63]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00138eef : add [rax], al; mov rsi, r13; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xd0], 2; call rax
0x00170770 : add edi, edx; lea r11, [rip + 0x2b337]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016ed03 : add rdi, rdx; lea r11, [rip + 0x2cc63]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00170807 : add edi, edx; lea r11, [rip + 0x2b2a0]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00170442 : add rdi, rdx; lea r11, [rip + 0x2b664]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0012d850 : mov eax, [rdi + 8]; movhps xmm0, [rsp + 8]; movaps xmm[rsp + 0x10], xmm0; call [rax + 8]
0x0016ee13 : add edi, edx; lea r11, [rip + 0x2cb54]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0012bdb8 : mov esi, eax; sub rax, r12; mov [rbp + 0x18], rax; mov rax, [rbx + 8]; call [rax + 0x28]
0x000703eb : add [rax], al; add [rax], al; add [rbx + 0x359b9e05], cl; add [rbp - 0xcf98740], al; ret
0x00066dd0 : sub rax, [rbx + 0x20]; mov rdx, [rbx + 0xf8]; mov [rdx], rax; xor eax, eax; pop rbx; ret
0x0014d468 : mov edx, [rsi - 4]; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x000bb1da : lea edi, [rip + 0xd3fa4]; mov edx, esi; movsxd rax, [rdi + rdx*4]; add rax, rdi; jmp rax
0x0012c775 : mov edx, [rbx + 0x28]; add rsp, 8; mov rdi, rbp; xor eax, eax; pop rbx; pop rbp; jmp rdx
0x000877d9 : leave ; lea r10, [rip + 0x10670f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0009561e : add [rax], al; mov ecx, [rsi]; mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; ret
0x00170a7c : add rdi, rdx; lea r11, [rip + 0x2b02a]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00063054 : mov [rcx + 0x38], r12; mov eax, 1; mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x000c5bc1 : lea rdx, [rip + 0xc9bd8]; mov esi, esi; movsxd rax, [rdx + rsi*4]; add rax, rdx; jmp rax
0x0014cf44 : mov [rdi - 0x19], edx; mov [rdi - 0x11], r11; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x00135611 : mov eax, [rdx]; mov rdx, [rdi + 0x90]; bswap eax; mov [rdx + 0x10], eax; mov eax, 1; ret
0x0005ff56 : xor [rax], 1; add [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x58]
0x0014d839 : mov edx, [rsi - 8]; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0008b4a9 : leave ; lea r10, [rip + 0x102b3f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000965bd : add [rax], al; add [rcx + 0x66c3ff57], cl; nop ; nop cs:[rax + rax]; mov [rdi], edx; ret
0x0013c845 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rax, [rdi + 0x18]; sub rax, [rdi + 0x20]; ret
0x0013c821 : mov dh, 6; lea rsi, [rsp + 4]; mov [rsp + 4], eax; mov rax, [rdi + 8]; call [rax + 0x48]
0x000bb1d9 : lea rdi, [rip + 0xd3fa4]; mov edx, esi; movsxd rax, [rdi + rdx*4]; add rax, rdi; jmp rax
0x00170342 : add edi, edx; lea r11, [rip + 0x2b765]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0005e695 : xchg [rsi + 0x48000000], dh; mov edx, ebp; mov rsi, r14; mov rdi, r12; call [r15 + 0x38]
0x00094ec7 : movlps xmm0, [rcx]; movlpd [rdx], xmm0; xor ah, ah; mov [rdx + 8], ah; mov rax, rdi; ret
0x00145072 : mov eax, [rip + 0x284b10]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax + 0x170]; jmp rax
0x000bf4f8 : mov rcx, r14; mov rdx, [rsp + 0x68]; mov rsi, [rsp + 0x60]; mov rdi, [rsp + 8]; call r12
0x000c0236 : add [rsi], dl; add [rax], al; add [rcx + 0x415d5bd0], cl; pop rsp; pop r13; pop r14; ret
0x0014d03f : mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x0013846f : add al, [rax]; add [rax], al; mov fs:[rbx], rax; mov rax, [rip + 0x29183a]; pop rbx; ret
0x0016f140 : add edi, edx; lea r11, [rip + 0x2c827]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0013581a : mov esi, [rsp + 0x28]; mov rdi, rbp; add [rax], 1; mov rax, [r15 + 0x60]; call [rax + 8]
0x00170a7d : add edi, edx; lea r11, [rip + 0x2b02a]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00170d17 : add edi, edx; lea r11, [rip + 0x2ad90]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000996d3 : mov dl, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dl; xor ch, ch; mov [rdi + 9], ch; ret
0x001369a3 : lea edx, [rsp + 0x18]; mov esi, 6; mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x28]
0x0013bafa : mov edx, ebp; mov rax, [rax + 0x10]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax
0x0012d3b9 : mov eax, [rbp + 8]; mov rsi, [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call [rax + 0x10]
0x0000de71 : mov eax, [rip + 0x3bbc81]; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax + 0xa8]; ret
0x00096e39 : movq [rdi], mm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x00170d90 : add rdi, rdx; lea r11, [rip + 0x2ad16]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000c4f42 : lea rdx, [rip + 0xca427]; mov esi, esi; movsxd rax, [rdx + rsi*4]; add rax, rdx; jmp rax
0x0016f1d7 : add edi, edx; lea r11, [rip + 0x2c790]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00170443 : add edi, edx; lea r11, [rip + 0x2b664]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0013562c : add [rax], al; add [rbx - 0x37f0f3c0], cl; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0006cba7 : add [rax], al; add [rax - 0x39], cl; push r8; add [rax], al; add [rax], al; pop rbx; ret
0x0012bdb7 : mov r14, rax; sub rax, r12; mov [rbp + 0x18], rax; mov rax, [rbx + 8]; call [rax + 0x28]
0x001369a2 : lea rdx, [rsp + 0x18]; mov esi, 6; mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x28]
0x000997e7 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], cx; xor ch, ch; mov [rdi + 0x12], ch; ret
0x0014d838 : mov rdx, [rsi - 8]; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0017094a : add rdi, rdx; lea r11, [rip + 0x2b15c]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x001355f4 : add [rax], al; add [rbx - 0x37f0efc0], cl; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x000630d3 : mov [rax + 0x28], rdx; mov [rax + 0x18], rdx; mov [rbx], ecx; xor eax, eax; pop rbx; ret
0x001386a7 : add al, [rax]; add [rax], al; mov fs:[rbx], rax; mov rax, [rip + 0x291502]; pop rbx; ret
0x0016f657 : add rdi, rdx; lea r11, [rip + 0x2c30f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000bf4f9 : mov ecx, esi; mov rdx, [rsp + 0x68]; mov rsi, [rsp + 0x60]; mov rdi, [rsp + 8]; call r12
0x000873a5 : lea eax, [rdi + rax - 1]; mov [rdi], edx; movzx edx, [rsp - 0xc]; mov [rdi + 4], dl; ret
0x001354fe : lea ecx, [rip + 0x5cf50]; mov esi, esi; movsxd rax, [rcx + rsi*4]; add rax, rcx; jmp rax
0x0014d648 : mov edx, [rsi - 4]; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00145041 : mov eax, [rip + 0x284b41]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax + 0x170]; jmp rax
0x00134c1e : lea ecx, [rip + 0x5d7f0]; mov esi, esi; movsxd rax, [rcx + rsi*4]; add rax, rcx; jmp rax
0x000180f9 : add [rbx - 0x7bf0fc08], al; insd [rdi], dx; add al, 0; add [rbx - 0x7bf0fe08], al; ret 4
0x00138ddc : add [rax], al; add [rax], al; mov rax, [r15 + 8]; mov rsi, rbp; mov rdi, r15; call [rax]
0x0016f658 : add edi, edx; lea r11, [rip + 0x2c30f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016f254 : add rdi, rdx; lea r11, [rip + 0x2c712]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000630d4 : mov [rax + 0x28], edx; mov [rax + 0x18], rdx; mov [rbx], ecx; xor eax, eax; pop rbx; ret
0x00131c8e : lea ecx, [rip + 0x6035c]; mov esi, esi; movsxd rax, [rcx + rsi*4]; add rax, rcx; jmp rax
0x00134c1d : lea rcx, [rip + 0x5d7f0]; mov esi, esi; movsxd rax, [rcx + rsi*4]; add rax, rcx; jmp rax
0x00170d16 : add rdi, rdx; lea r11, [rip + 0x2ad90]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0014511d : add [rax], al; call [rax + 0x178]; mov [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret
0x0016f6e7 : add edi, edx; lea r11, [rip + 0x2c280]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0007f505 : add [rdx + rax], cl; add [rip + 0xc00], bh; lea rax, [rip + 0xb4bb]; cmove rax, rdx; ret
0x000658f5 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rax, [rdi + 0x48]; mov eax, [rax + 0x4c]; ret
0x000f51c7 : add [rdi + rax*8 + 3], ah; add [rax], eax; add [rax], al; pop rbx; pop rbp; pop r12; ret
0x0003a50c : movsxd rax, [rsi + rax*4]; add rax, rdi; mov r11, rdx; xor r8d, r8d; mov r9d, 1; jmp rax
0x0016ef43 : add rdi, rdx; lea r11, [rip + 0x2ca23]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0007ad7f : mov edi, ebx; call [rip + 0x351901]; mov [rip + 0x3518eb], 1; mov eax, ebx; pop rbx; ret
0x00096bed : add [rax], r8b; mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x00108d6c : sub [rdi + 0x2000001], bh; mov rdx, [rsp + 0x18]; mov rsi, r13; xor r15d, r15d; call rax
0x00134cd5 : add [rax], al; add [rbx - 0x37f0a7b9], cl; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0012d84f : mov rax, [rdi + 8]; movhps xmm0, [rsp + 8]; movaps xmm[rsp + 0x10], xmm0; call [rax + 8]
0x00062081 : mov rcx, [rax + 0x10]; mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x0007d925 : add [rdx + rax], cl; add [rip + 0xc00], bh; lea rax, [rip + 0xcd6b]; cmove rax, rdx; ret
0x000c024f : add [rcx], dh; rcr [rbx - 0x77], cl; rcr [rbp + 0x41], 1; pop rsp; pop r13; pop r14; ret
0x00145040 : mov rax, [rip + 0x284b41]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax + 0x170]; jmp rax
0x00170c87 : add rdi, rdx; lea r11, [rip + 0x2ae1f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0017076f : add rdi, rdx; lea r11, [rip + 0x2b337]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00087347 : inc ebx; nop [rax]; mov rdx, [rsp + 0x10]; lea rax, [rdi + rax - 1]; mov [rdi], rdx; ret
0x000c4f43 : lea edx, [rip + 0xca427]; mov esi, esi; movsxd rax, [rdx + rsi*4]; add rax, rdx; jmp rax
0x000c0215 : add [rax], al; add [rbx - 0x77], bl; rcr [rbp + 0x41], 1; pop rsp; pop r13; pop r14; ret
0x0016f760 : add rdi, rdx; lea r11, [rip + 0x2c206]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00094ec6 : movlpd xmm0, [rcx]; movlpd [rdx], xmm0; xor ah, ah; mov [rdx + 8], ah; mov rax, rdi; ret
0x00170341 : add rdi, rdx; lea r11, [rip + 0x2b765]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0013c721 : mov bh, 6; lea rsi, [rsp + 4]; mov [rsp + 4], eax; mov rax, [rdi + 8]; call [rax + 0x48]
0x0012d3f7 : mov eax, [rbp + 8]; mov rsi, [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call [rax + 0x20]
0x0008a900 : xor [rsi + 0xf], ah; xlatb ; rol [rbp - 0x5c7af040], 0; add [rax], al; xor eax, eax; ret
0x00131caf : add bl, al; nop [rax]; movdqu xmm0, xmm[rdx]; mov eax, 1; movups xmm[rdi + 8], xmm0; ret
0x00064990 : mov rdi, r13; mov rax, [rax + 0x60]; sar r8, 2; mov [rsp + 0x30], rax; call [r13 + 0x30]
0x0012cae8 : add al, [rax]; add [rax - 0x75], cl; or [r14 + 8], r15b; mov rdi, rbp; call [rax + 0x30]
0x0016f1d6 : add rdi, rdx; lea r11, [rip + 0x2c790]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0012d3b8 : mov rax, [r13 + 8]; mov rsi, [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call [rax + 0x10]
0x0009631e : add [rax], al; mov rcx, [rsi]; mov dl, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dl; ret
0x00092210 : xor ah, ah; mov [rdx + 8], ah; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret
0x00064b3d : sub [r13 - 0x667bf02e], r8b; add [rax], al; add [rcx + 0x2b], cl; and [r8 + 1], r9b; ret
0x0016f255 : add edi, edx; lea r11, [rip + 0x2c712]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000bb167 : lea esi, [rip + 0xd3e2b]; mov edx, ecx; movsxd rax, [rsi + rdx*4]; add rax, rsi; jmp rax
0x0009ca02 : push 1; push 1; xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx
0x0006a84d : add [rax], al; mov rdx, r8; mov [rsp], r8; mov rsi, r13; mov rdi, rbx; call [rax + 0x78]
0x0006f57a : mov [rdi + 0x14], 0; mov [rdi + 0x24], ebp; mov [rdi + 0x10], eax; pop rbx; pop rbp; ret
0x00063055 : mov [rcx + 0x38], esp; mov eax, 1; mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x00096db8 : movq [rdi], mm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x00097cbd : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret
0x0017252e : add [rax - 0x73], cl; movnti [r14 - 0x70], r12d; nop cs:[rax + rax]; lea rax, [rdi]; ret
0x00138f92 : mov [rsp + 0xb8], 1; call [rax + 0x18]; mov rax, [r15 + 8]; mov rdi, r15; call [rax + 8]
0x00131d87 : add [rax - 0x75], cl; add al, [rbx - 0x37f0fe18]; mov [rdi + 0xa8], eax; mov eax, 1; ret
0x0016ee12 : add rdi, rdx; lea r11, [rip + 0x2cb54]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0008d709 : leave ; lea r10, [rip + 0x10095f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000f7b5e : add [rax], al; mov [rdi], 0; mov [rip + 0x2d53f7], cl; mov rax, rdi; mov [r8 - 1], 0; ret
0x00001132 : lea rdx, [rip + 0x17a497]; mov eax, eax; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0012e8bd : xor [rdx + 1], bh; mov [rbx + 0x20], rsi; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x00166efa : add rax, [rax]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x000998a7 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rcx; xor ch, ch; mov [rdi + 0x18], ch; ret
0x00095781 : movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x00136ad3 : mov rdi, [rbx]; mov rax, [rdi + 8]; lea rdx, [rsp + 0xc]; mov esi, 0xd; call [rax + 0x28]
0x00099826 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], ecx; xor ch, ch; mov [rdi + 0x14], ch; ret
0x00139d38 : mov rax, [rbx + 0x18]; xor esi, esi; mov [rbx + 0x10], 1; mov rdi, r14; call [rax + 0x28]
0x00032160 : mov [rdi], r11; shrd r8, r9, cl; mov [rdi + 8], r8; shr r9, cl; mov [rdi + 0x10], r9; ret
0x00175800 : add [rax], al; lea rbp, [rip + 0x271e7]; movsxd rax, [rbp + rax*4]; add rbp, rax; jmp rbp
0x0016351b : add eax, [rax]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0017171a : adc [rdi - 6], rbp; vmovups zmm[rdi - 0x1c0], zmm14; vmovups zmm[rdi - 0x200], zmm15; ret
0x0009bbf5 : add [rdx + rax], cl; add [rip + 0xc00], bh; lea rax, [rip + 0x13d2b]; cmove rax, rdx; ret
0x0003377c : add [rax], al; add [rax], al; adc [rax], al; or rsi, rax; mov eax, 1; mov [rdi], rsi; ret
0x00134cbe : add bl, al; mov rax, [rdx]; sub eax, 1; bswap eax; mov [rdi + 0x48], eax; mov eax, 1; ret
0x0007cc29 : add [rax - 0x68], cl; mov [rbp + rax], 0; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret
0x0015bdd1 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 5]; mov [rdx + 5], rax; mov rax, rdi; ret
0x00095711 : movq mm0, [rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; ret
0x0015bd00 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x000ca896 : add [rax], al; lea rdx, [rip + 0xc50c5]; movsxd rax, [rdx + r15*4]; add rax, rdx; jmp rax
0x0009c155 : add [rdx + rax], cl; add [rip + 0xc00], bh; lea rax, [rip + 0x12d0b]; cmove rax, rdx; ret
0x0015bdb1 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x00099262 : popfq ; lea r11, [rip + 0xf533a]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000627bc : add [rax], al; mov rax, [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax
0x000c580a : add [rax], al; lea rdx, [rip + 0xc9bb1]; movsxd rax, [rdx + rbx*4]; add rax, rdx; jmp rax
0x0015bdf0 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; mov rax, rdi; ret
0x0005faca : add [rcx + rcx*4 - 0x1f], al; mov edx, ebp; mov rsi, r13; mov rdi, rbx; call [r14 + 0x48]
0x000997af : add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; xor ch, ch; mov [rdi + 0x10], ch; ret
0x00069767 : add [rax], al; add [rcx + rcx*4 - 0xe], cl; mov rsi, r13; mov rdi, rbx; call [r15 + 0x40]
0x0009a72e : add [rax], al; lea rsi, [rip + 0xf3f19]; movsxd rax, [rsi + rdi*4]; add rax, rsi; jmp rax
0x00138ef0 : add [rcx + rcx*4 - 0x12], cl; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xd0], 2; call rax
0x0006253c : add [rax], al; mov rax, [rbp + 0x28]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax
0x000920ef : add [rax], eax; add [rsi + 0xf], ah; adc al, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret
0x0012beed : add [rax], al; push [rsp + 0xe8]; mov [rsp + 0x18], r10; lea r9, [rsp + 0x40]; call [rax]
0x0015bd91 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 5]; mov [rdx + 5], eax; mov rax, rdi; ret
0x0012b075 : mov eax, [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov [rbx + 0x18], 0; call [rax + 0x28]
0x000921f5 : mov eax, [rcx]; mov [rdx], eax; mov eax, [rcx + 3]; mov [rdx + 3], eax; mov rax, rdi; ret
0x00096c5e : add [rax], al; mov rcx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; lea rax, [rdi + 8]; ret
0x000973d2 : popfq ; lea r11, [rip + 0xf6ff6]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0015bd01 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x001250d1 : mov fs:[rax], rbx; mov [rbx + 0x20], rdx; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x00103e1f : mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x000b6a13 : lea edx, [rip + 0xd82b7]; movzx eax, al; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0016dea6 : mov edx, [rdi + rcx]; cmp edx, [rsi + rcx]; setl al; neg eax; or eax, 1; vzeroupper ; ret
0x0015be11 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; mov rax, rdi; ret
0x000ddfe3 : add [rax], al; lea rsi, [rip + 0xb1f50]; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x0014cec8 : mov rdx, [rsi - 8]; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0015bdc0 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x0007cab5 : add [rdx + rax], cl; add [rip + 0xc00], bh; lea rax, [rip + 0x1359b]; cmove rax, rdx; ret
0x0012afee : mov rax, [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov [rbx + 0x18], 1; call [rax + 0x28]
0x0012afef : mov eax, [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov [rbx + 0x18], 1; call [rax + 0x28]
0x0013553d : add [rax], al; add bl, dh; movq mm0, [rdi + 0x30]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x00032051 : mov [rdi], ebx; shld r8, r9, cl; mov [rdi - 8], r8; shl r9, cl; mov [rdi - 0x10], r9; ret
0x001334d6 : add [rax], al; mov rax, [rbp + 8]; lea rsi, [r12 + 0x18]; mov rdi, rbp; call [rax + 0x48]
0x00096c0e : add [rax], al; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x000c8ef5 : add [rax], al; lea rdx, [rip + 0xc6976]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0017171b : adc [rdi - 6], ebp; vmovups zmm[rdi - 0x1c0], zmm14; vmovups zmm[rdi - 0x200], zmm15; ret
0x00022005 : add [rax], eax; add [rax], al; add [rip + 0x3ad33f], 1; add rsp, 8; pop rbx; pop rbp; ret
0x0015bda1 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 6]; mov [rdx + 6], eax; mov rax, rdi; ret
0x0005ff57 : xor [rcx], al; add [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x58]
0x0012c96e : add [rax], al; movdqu xmm0, xmm[rdi + 0x38]; mov [rsi], 9; movups xmm[rsi + 8], xmm0; ret
0x0015bdc1 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x00099949 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; xor ch, ch; mov [rdi + 0x1d], ch; ret
0x000b6a12 : lea rdx, [rip + 0xd82b7]; movzx eax, al; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x001450d5 : mov edi, [rdi]; call [rax + 0x188]; mov [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret
0x00099693 : mov edx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; xor ch, ch; mov [rdi + 6], ch; ret
0x0013b9f4 : mov rsi, rsp; test edx, edx; setne al; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0012b074 : mov rax, [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov [rbx + 0x18], 0; call [rax + 0x28]
0x0006a394 : xchg bh, dh; add [rax], al; add [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; call [rbp + 0x70]
0x00169a4c : bswap eax; bswap ecx; mov al, [rdi + rdx - 1]; mov cl, [rsi + rdx - 1]; sub eax, ecx; ret
0x00099969 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; xor ch, ch; mov [rdi + 0x1e], ch; ret
0x000873bd : lea eax, [rdi + rax - 1]; mov [rdi], edx; movzx edx, [rsp - 0x14]; mov [rdi + 4], dx; ret
0x00131ee1 : add [rax], al; mov rax, [r12 + 0xd0]; mov rsi, [rsp + 0x18]; mov rdi, rbx; call [rax + 8]
0x0009a2cc : movzx ecx, [rsi + rdx - 2]; movzx esi, [rsi]; mov [rdi + rdx - 2], cx; mov [rdi], si; ret
0x0015bda0 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 6]; mov [rdx + 6], eax; mov rax, rdi; ret
0x000b8cb8 : lea rsi, [rip + 0xd60ed]; movzx eax, cl; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x00001133 : lea edx, [rip + 0x17a497]; mov eax, eax; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x000404ee : add [rax], al; lea eax, [rdi - 1]; xor edx, edx; div r8d; add r9d, eax; mov eax, r9d; ret
0x0008ab80 : xor bl, al; nop [rax]; nop cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret
0x0015bd90 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 5]; mov [rdx + 5], eax; mov rax, rdi; ret
0x0007f535 : add [rdx + rax], cl; add [rip + 0xc00], bh; lea rax, [rip + 0x1090b]; cmove rax, rdx; ret
0x0013c844 : add [rsi + 0x2e], spl; nop [rax + rax]; mov rax, [rdi + 0x18]; sub rax, [rdi + 0x20]; ret
0x0009ae35 : add [rdx + rax], cl; add [rip + 0xc00], bh; lea rax, [rip + 0x1438b]; cmove rax, rdx; ret
0x00139d39 : mov eax, [rbx + 0x18]; xor esi, esi; mov [rbx + 0x10], 1; mov rdi, r14; call [rax + 0x28]
0x00138dd4 : mov r14, rsp; nop [rax + rax]; mov rax, [r15 + 8]; mov rsi, rbp; mov rdi, r15; call [rax]
0x000eac49 : add [rax], al; lea rdx, [rip + 0xa5ac6]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00138dd5 : mov esi, esp; nop [rax + rax]; mov rax, [r15 + 8]; mov rsi, rbp; mov rdi, r15; call [rax]
0x000b5809 : lea esi, [rip + 0xd9289]; movzx eax, al; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x000b6562 : lea rsi, [rip + 0xd8687]; movzx eax, al; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x0007c9b5 : add [rdx + rax], cl; add [rip + 0xc00], bh; lea rax, [rip + 0x1398b]; cmove rax, rdx; ret
0x000cae6a : lea rdi, [rip + 0xc4b73]; movzx eax, al; movsxd rax, [rdi + rax*4]; add rax, rdi; jmp rax
0x00075d75 : mov eax, [rip + 0x353f85]; mov [rax], rsi; mov rax, [rip + 0x353e7b]; mov [rax], rdi; ret
0x0014cec9 : mov edx, [rsi - 8]; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0014cf8c : mov [rdi - 0x19], edx; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x000691dd : add [rax], al; add [rcx + rcx*4 - 0x1d], cl; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x000873bc : lea rax, [rdi + rax - 1]; mov [rdi], edx; movzx edx, [rsp - 0x14]; mov [rdi + 4], dx; ret
0x0012c936 : add [rax], al; movdqu xmm0, xmm[rdi + 0x20]; mov [rsi], 6; movups xmm[rsi + 8], xmm0; ret
0x00075d74 : mov rax, [rip + 0x353f85]; mov [rax], rsi; mov rax, [rip + 0x353e7b]; mov [rax], rdi; ret
0x0008732c : pushfq ; imul edx, [rax], 0; mov edx, eax; movsxd rdx, [r8 + rdx*4]; add rdx, r8; jmp rdx
0x001450d4 : mov rdi, [rdi]; call [rax + 0x188]; mov [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret
0x00139f71 : adc bh, al; adc [r8], r8b; add [rax], al; add [rcx + rcx*4 - 0x19], cl; call [rax + 0x28]
0x00099989 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; xor ch, ch; mov [rdi + 0x1f], ch; ret
0x000d7e0a : add [rax], al; lea rdi, [rip + 0xb809d]; movsxd rax, [rdi + rax*4]; add rax, rdi; jmp rax
0x00134df7 : add [rax], al; mov rax, [r12 + 0x70]; mov rsi, [rsp + 0x18]; mov rdi, rbx; call [rax + 8]
0x00103c5f : mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x000b6563 : lea esi, [rip + 0xd8687]; movzx eax, al; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x0001e69e : add [rax], eax; add [rax], al; shl rax, cl; test [rdi], rax; setne al; movzx eax, al; ret
0x000ed55d : adc al, ch; xchg eax, ebp; sub dh, cl; dec [rbx + 0x438d0455]; add [rax - 0x7d], ecx; ret
0x0010e58b : movdqu xmm0, xmm[r15 - 0x18]; mov [rbp - 0x80], 0; movups xmm[rbp - 0x78], xmm0; call rax
0x00132af8 : inc [rbp - 0x38ec8a40]; add eax, [rax]; add [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x0005fd9c : add [rcx + rcx*4 - 0x1f], al; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x48]
0x0007c9e5 : add [rdx + rax], cl; add [rip + 0xc00], bh; lea rax, [rip + 0x13afb]; cmove rax, rdx; ret
0x0009bf35 : add [rdx + rax], cl; add [rip + 0xc00], bh; lea rax, [rip + 0x1341b]; cmove rax, rdx; ret
0x0014cee0 : mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00097cfc : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret
0x0005fd9b : add [rax], al; mov ecx, r12d; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x48]
0x0003aea5 : mov [rbp - 0x4e0], ebx; mov rdx, [rbp - 0x510]; mov rsi, [rbp - 0x528]; call [rax + 0x38]
0x00032050 : mov [rdi], r11; shld r8, r9, cl; mov [rdi - 8], r8; shl r9, cl; mov [rdi - 0x10], r9; ret
0x0003aea4 : mov [rbp - 0x4e0], r11; mov rdx, [rbp - 0x510]; mov rsi, [rbp - 0x528]; call [rax + 0x38]
0x0015bdd0 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 5]; mov [rdx + 5], rax; mov rax, rdi; ret
0x00136ad4 : mov edi, [rbx]; mov rax, [rdi + 8]; lea rdx, [rsp + 0xc]; mov esi, 0xd; call [rax + 0x28]
0x000b5808 : lea rsi, [rip + 0xd9289]; movzx eax, al; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x000cae6b : lea edi, [rip + 0xc4b73]; movzx eax, al; movsxd rax, [rdi + rax*4]; add rax, rdi; jmp rax
0x0009565d : add [rax], r8b; mov rcx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; ret
0x0015bdb0 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x000b8cb9 : lea esi, [rip + 0xd60ed]; movzx eax, cl; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x00134c6d : add [rax], al; add bl, dh; movq mm0, [rdi + 0x1c]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x0015be10 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; mov rax, rdi; ret
0x000999d0 : movdqu xmm[rdi + 0x10], xmm2; mov [rdi + 0x20], cl; xor ch, ch; mov [rdi + 0x21], ch; ret
0x000fbc87 : add [rbx - 0x3d], bl; nop [rax + rax]; mov rax, [rip + 0x2cdf01]; mov fs:[rax], 0x16; ret
0x0005fac9 : add [rax], al; mov ecx, r12d; mov edx, ebp; mov rsi, r13; mov rdi, rbx; call [r14 + 0x48]
0x00032161 : mov [rdi], ebx; shrd r8, r9, cl; mov [rdi + 8], r8; shr r9, cl; mov [rdi + 0x10], r9; ret
0x0015bca4 : add [rsi + 0x2e], spl; nop [rax + rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x00176453 : add [rax], al; lea rdx, [rip + 0x265d4]; movsxd r12, [rdx + r12*4]; add rdx, r12; jmp rdx
0x0008b08f : add ecx, [rax - 0x2d]; clc ; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret
0x0012e97d : add [rax], r8b; mov rax, [rsp + 0x10]; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax
0x00021fff : add [rax], r10b; mov [rax], 1; add [rip + 0x3ad33f], 1; add rsp, 8; pop rbx; pop rbp; ret
0x00097cdc : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret
0x0013b9f5 : mov esi, esp; test edx, edx; setne al; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x00096e7c : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x0014cf8b : mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x000962ed : add [rax], r8b; mov ecx, [rsi]; mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; ret
0x000873db : movzx edx, [rsp + 0xc]; mov [rdi + 4], dx; movzx edx, [rsp + 0xe]; mov [rdi + 6], dl; ret
0x00096e9c : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x000c88f4 : add [rax], al; lea rdx, [rip + 0xc6ef7]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0015bdf1 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; mov rax, rdi; ret
0x0014cee1 : mov ebx, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0010411f : mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x0013456f : add [rax], al; xor eax, eax; mov rax, [rdi + 8]; lea rsi, [rsp + 0x10]; call [rax + 0x10]
0x0012af96 : add [rax], al; mov rax, [rbx + 0x20]; mov rsi, [rsp + 0x10]; mov rdi, rbp; call [rax + 8]
0x00095d22 : popfq ; lea r11, [rip + 0xf84c6]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00068c37 : sbb [rsi + 4], dh; mov [rbp + 0x20], rax; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret
0x000fc4a3 : add [rax], al; nop [rax]; mov rsi, [rax]; mov rdi, [rbp - 0x58]; mov r12d, r14d; call r15
0x0006e8e5 : add eax, [rbp + 0x10]; mov [rbp + 8], rax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x0006e8bc : add rax, [rbp + 0x18]; mov [rbp + 8], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x00160084 : add [rax], al; nop cs:[rax + rax]; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx + 3]; ret
0x00166da0 : pop rbp; add [rax], eax; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000996b2 : mov edx, [rsi + 3]; mov [rdi], ecx; mov [rdi + 3], edx; xor ch, ch; mov [rdi + 7], ch; ret
0x0000f5ae : mov rax, [rax]; mov rax, [rax + 0x40]; movzx eax, [rax + rdi*2 + 0x100]; and eax, esi; ret
0x000008b5 : mov esi, [rsp + 8]; mov edi, [rsp + 0x14]; mov rdx, [rax]; mov rax, [rsp + 0x18]; call rax
0x0000f3db : mov rax, [rax]; mov rax, [rax]; mov rax, [rax + 0x48]; mov eax, [rax + rdi*4 + 0x200]; ret
0x00133e98 : mov bh, bh; inc [rbp + 0x486174c0]; mov eax, [rsp + 0x38]; mov rdi, rbp; call [rax + 0x20]
0x00138c47 : add [rax], eax; add [rax], al; mov [rsp + 0x18], 1; mov [rsp + 0x20], 5; call [rax + 0x18]
0x0000f5af : mov eax, [rax]; mov rax, [rax + 0x40]; movzx eax, [rax + rdi*2 + 0x100]; and eax, esi; ret
0x00086dcb : add [rax], al; add [rax], al; add dh, al; add [rax], eax; mov rcx, r8; mov [rdx], rcx; ret
0x00092237 : adc al, [rcx]; movlpd [rdx], xmm0; mov al, [rcx + 8]; mov [rdx + 8], al; mov rax, rdi; ret
0x000fe3b4 : lea ecx, [rbx + 2]; cmp rax, rdx; cmove rax, rcx; mov [rax], 0; mov rax, rbx; pop rbx; ret
0x001531fe : add [rax], al; mov edx, [rsi + 3]; mov ecx, [rsi]; mov [rdi + 3], edx; mov [rdi], ecx; ret
0x000c3fda : add [rax], al; add [rbp + 0x2e], dh; lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret
0x0015303e : add [rax], al; mov rdx, [rsi + 3]; mov rcx, [rsi]; mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x0008a8ff : xor [r14 + 0xf], r12b; xlatb ; rol [rbp - 0x5c7af040], 0; add [rax], al; xor eax, eax; ret
0x00138f83 : add [rax], eax; add [rax], al; mov [rsp + 0xb0], 1; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x000008b4 : mov rsi, [rsp + 8]; mov edi, [rsp + 0x14]; mov rdx, [rax]; mov rax, [rsp + 0x18]; call rax
0x0005b42d : add [rax], al; lea rcx, [rip + 0x13205a]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0016ccb7 : lea edx, [rip + 0xfe33]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000448c1 : mov edx, [rsi + 0x20]; mov rdi, [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call [rbx + 0x38]
0x00092257 : adc al, [rcx]; movlpd [rdx], xmm0; mov ax, [rcx + 8]; mov [rdx + 8], ax; mov rax, rdi; ret
0x001670a0 : pop rdx; add [rax], eax; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00161ef1 : add cl, [rdi]; test ebx, eax; add eax, [rax]; add [rax - 0x7cb7fec8], al; fdivr st(7); ret
0x0000f3dc : mov eax, [rax]; mov rax, [rax]; mov rax, [rax + 0x48]; mov eax, [rax + rdi*4 + 0x200]; ret
0x0009c82f : add [rdx], ebp; xor r8d, r8d; mov rcx, r13; mov rdi, [r14]; lea r9, [rsp + 0x28]; call r12
0x0009c82e : push 1; push 0; xor r8d, r8d; mov rcx, r13; mov rdi, [r14]; lea r9, [rsp + 0x28]; call r12
0x0009a1ab : adc [rsi + rdx - 0x10], cl; movups xmm[rdi], xmm0; movups xmm[rdi + rdx - 0x10], xmm1; ret
0x000c1d03 : add [rax], al; add [rbp + 0x2d], dh; lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret
0x000996f3 : mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; xor ch, ch; mov [rdi + 0xa], ch; ret
0x00166d9f : pop r13; add [rax], eax; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0006f603 : add bl, al; nop ; nop cs:[rax + rax]; mov rax, [rdi]; nop ; mov [rip + 0x35d042], eax; ret
0x00063147 : add [rax], al; mov [rax + 0x40], 0; mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x0000f3bc : mov eax, [rax]; mov rax, [rax]; mov rax, [rax + 0x58]; mov eax, [rax + rdi*4 + 0x200]; ret
0x0006e8e4 : add rax, [rbp + 0x10]; mov [rbp + 8], rax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x00049f3b : push rax; add [rax - 0x77], ecx; adc eax, [rax - 0x78]; sub [rbx + 0x5d], bl; pop r12; ret
0x0005c2c2 : add [rax], al; lea rdx, [rip + 0x1319e1]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x000abc2d : push 1; push 0; xor r8d, r8d; mov rcx, r13; mov rdi, [r14]; lea r9, [rsp + 0x30]; call r12
0x0015311e : add [rax], al; mov rdx, [rsi + 1]; mov rcx, [rsi]; mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x0012aee9 : mov esi, ebp; mov rcx, rbx; lea rdi, [rax + 0x18]; xor eax, eax; pop rbx; pop rbp; jmp rcx
0x000999a9 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; xor ch, ch; mov [rdi + 0x20], ch; ret
0x0004a775 : lea edx, [rip + 0x1426fd]; movzx eax, al; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0004a281 : lea rdx, [rip + 0x1429e4]; movzx eax, al; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0001fbed : add [rax], al; add [rbp + 1], cl; std ; mov rdx, r12; mov rsi, r13; mov rdi, rbx; call rbp
0x00138be3 : add [rax], eax; add [rax], al; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; call [rax + 0x18]
0x0016cc92 : lea edx, [rip + 0xfe58]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000abc2e : add [rdx], ebp; xor r8d, r8d; mov rcx, r13; mov rdi, [r14]; lea r9, [rsp + 0x30]; call r12
0x000e4a6f : push 0; mov r9, r15; mov rdx, [r14]; mov rsi, [rbp - 0x1f0]; lea r8, [rax + r13]; call r12
0x0006e8bd : add eax, [rbp + 0x18]; mov [rbp + 8], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x00152f5e : add [rax], al; mov rdx, [rsi + 5]; mov rcx, [rsi]; mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x0000aa06 : mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; lea r8, [rsp + 0xb0]; xor r9d, r9d; call r15
0x0004a282 : lea edx, [rip + 0x1429e4]; movzx eax, al; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00166d6c : pop rbp; add [rax], eax; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x000f7b5d : add [rax], r8b; mov [rdi], 0; mov [rip + 0x2d53f7], cl; mov rax, rdi; mov [r8 - 1], 0; ret
0x0006a84e : add [rcx + rcx*4 - 0x3e], cl; mov [rsp], r8; mov rsi, r13; mov rdi, rbx; call [rax + 0x78]
0x0016709f : pop r10; add [rax], eax; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0000f3bb : mov rax, [rax]; mov rax, [rax]; mov rax, [rax + 0x58]; mov eax, [rax + rdi*4 + 0x200]; ret
0x000527b3 : add [rax], al; lea rcx, [rip + 0x13a978]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0001f7a4 : add ecx, [rdi]; add [rax], al; mov rdx, r12; mov rsi, r14; mov rdi, [rsp + 0x18]; call rbp
0x000997c5 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], cl; xor ch, ch; mov [rdi + 0x11], ch; ret
0x0012aee8 : mov rsi, rbp; mov rcx, rbx; lea rdi, [rax + 0x18]; xor eax, eax; pop rbx; pop rbp; jmp rcx
0x0016cc5e : lea ecx, [rip + 0xfe8c]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x00096c5d : add [rax], r8b; mov rcx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; lea rax, [rdi + 8]; ret
0x00152e7e : add [rax], al; mov rdx, [rsi + 7]; mov rcx, [rsi]; mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x0016cc91 : lea rdx, [rip + 0xfe58]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0010320f : add al, bl; nop [rax]; mov rax, [rip + 0x2ca049]; mov rax, [rax + 0x18]; add [rax], 1; ret
0x0001b76e : lea edx, [rip + 0x16cb14]; movzx edi, dl; movsxd rdi, [r10 + rdi*4]; add rdi, r10; jmp rdi
0x00060125 : add [rax], al; add [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x58]
0x001530ae : add [rax], al; mov rdx, [rsi + 2]; mov rcx, [rsi]; mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x0005ba56 : lea esi, [rip + 0x131f50]; movzx eax, al; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x0003d65c : sbb [rbp - 0x17], dh; mov [rbx + 0x18], 1; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x000d2d4b : mov [rbx + 0x2c], eax; mov [rbx + 0x30], eax; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x0015326e : add [rax], al; mov edx, [rsi + 2]; mov ecx, [rsi]; mov [rdi + 2], edx; mov [rdi], ecx; ret
0x0016cc5d : lea rcx, [rip + 0xfe8c]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0001f7e2 : add [rax], al; nop [rax]; add rbx, r15; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call rbp
0x0005bb0d : add [rax], al; lea rcx, [rip + 0x131f52]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x001458ac : push rax; mov rdx, [rsp + 0x28]; mov r9d, [rdx]; mov rdx, r14; add r9, [rsp + 8]; call rax
0x00106cab : add [rax], 0; add [rcx - 0x3b7cb730], cl; or bl, al; nop cs:[rax + rax]; mov eax, edx; ret
0x00000ab3 : sub [rdi], al; add [rax], eax; add [rdi], cl; test [rdi + rdi*8 - 1], ch; jmp [rsi - 0x70]
0x0011fd65 : add [rax], al; add [rax + 0x63], cl; rol [rcx + rcx*4 - 0x40], cl; mov [rdi + rdx], 0; ret
0x0000aa07 : mov esi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; lea r8, [rsp + 0xb0]; xor r9d, r9d; call r15
0x00015835 : push rax; adc [rax - 0x7b], cl; sal [rdi + rbp - 0x75], cl; or al, [rbx - 0x7bf0fd07]; ret
0x0013b84f : add [rdi], cl; mov bh, 6; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0016d3bc : add [rax], al; add [rax], al; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper ; ret
0x00138efc : mov [rsp + 0xd0], 2; call rax; nop [rax]; mov rdi, r15; mov rax, [r15 + 8]; call [rax + 8]
0x000fc40d : add [rax], al; add [rax - 0x75], cl; xor ecx, [rcx + rcx*4 - 0x19]; mov r13, rbx; call rbp
0x00152eee : add [rax], al; mov rdx, [rsi + 6]; mov rcx, [rsi]; mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x0012a6fc : mov edx, [rdi + 0x5c]; lea rsi, [rdi + 0x48]; mov rdi, rax; mov rcx, [rcx + 0x18]; jmp rcx
0x00097a34 : add [rax], al; nop cs:[rax + rax]; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 4]; ret
0x0007b8dd : dec [rcx + rcx*4 + 0x43]; movsxd rdi, esi; mov [rbx + 0x30], eax; mov [rbx], rdi; call rcx
0x000fe3b3 : lea rcx, [rbx + 2]; cmp rax, rdx; cmove rax, rcx; mov [rax], 0; mov rax, rbx; pop rbx; ret
0x00141d14 : sub [rax], al; lea rdx, [rsp + 8]; lea rsi, [rsp + 0x190]; mov rdi, rbp; call [rax + 0x18]
0x000997e6 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], cx; xor ch, ch; mov [rdi + 0x12], ch; ret
0x0006bc71 : add [rax], al; add [rcx + rcx*4 - 0x1e], cl; mov rsi, r13; mov rdi, rbx; call [r14 + 0x78]
0x000f881e : add [rcx + 0x485475d8], cl; lea esp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret
0x0007991b : add [rax], al; lea rdx, [rip + 0x1144ec]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0005ba55 : lea rsi, [rip + 0x131f50]; movzx eax, al; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x000448c0 : mov rdx, [r14 + 0x20]; mov rdi, [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call [rbx + 0x38]
0x001532de : add [rax], al; mov edx, [rsi + 1]; mov ecx, [rsi]; mov [rdi + 1], edx; mov [rdi], ecx; ret
0x0001cc5b : add [rax], al; add [rax], al; add [rax + 0x7110ff2], al; and rax, rdx; movq xmm0, rax; ret
0x0016ccb6 : lea rdx, [rip + 0xfe33]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0001b485 : add [rax], al; lea rdi, [rip + 0x16cdc2]; movsxd rdx, [rdi + rdx*4]; add rdx, rdi; jmp rdx
0x00138aa8 : mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x000524f9 : add [rax], al; lea rcx, [rip + 0x13ab76]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x00152fce : add [rax], al; mov rdx, [rsi + 4]; mov rcx, [rsi]; mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x0011ef20 : add bh, al; or [r9], r13b; add [rax], al; add [rcx], dh; ror [rcx - 0x76b7f3a9], 0x3e; ret
0x0001b76d : lea r10, [rip + 0x16cb14]; movzx edi, dl; movsxd rdi, [r10 + rdi*4]; add rdi, r10; jmp rdi
0x00138aa9 : mov [rsp + 0x28], eax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x0004a774 : lea rdx, [rip + 0x1426fd]; movzx eax, al; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0012c935 : add [rax], r8b; movdqu xmm0, xmm[rdi + 0x20]; mov [rsi], 6; movups xmm[rsi + 8], xmm0; ret
0x00169ea3 : lea rcx, [rip + 0x12c46]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0006cea9 : lea edx, [rax + 1]; mov [rbx + 8], rdx; movzx eax, [rax]; add rsp, 8; pop rbx; pop rbp; ret
0x00165493 : lea rcx, [rip + 0x17656]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00161ecd : add [rdi], rcx; test edi, ebx; add eax, [rax]; add [rax - 0x7cb7fec8], al; fdivr st(7); ret
0x001580ec : lea rdx, [rip + 0x249fd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0015a666 : lea rdx, [rip + 0x22483]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000996f4 : mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; xor ch, ch; mov [rdi + 0xa], ch; ret
0x0008d5ad : lea edx, [rip + 0xef53d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0012ca6e : add [rax], al; add [rax - 0x75], cl; or [r14 + 0x20], r15b; mov rdi, rbp; call [rax + 0x30]
0x0014cefb : add [rax], al; add [rax], al; add [rax - 0x75], cl; push rsi; clc ; mov [rdi - 8], rdx; ret
0x0009a20a : lea edi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std ; rep movsb [rdi], [rsi]; cld ; ret
0x00138bdc : mov rsi, rsp; mov [rsp + 8], 1; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; call [rax + 0x18]
0x00160070 : mov ax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x00099232 : int 0x4c; lea ebx, [rip + 0xf536a]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0015a641 : lea rdx, [rip + 0x224a8]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0009a209 : lea rdi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std ; rep movsb [rdi], [rsi]; cld ; ret
0x0014d2f3 : mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0008fbf2 : lea edx, [rip + 0xecef8]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0005dcc9 : push rbp; push rbx; mov rbp, rdx; mov rbx, rdi; sub rsp, 8; mov rdi, [rdi + 0xe0]; call rax
0x0014d2f4 : mov [rdi - 0x1b], edx; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0008d5c6 : lea rdx, [rip + 0xef523]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0015bd2d : add [rax], al; add [rsi - 0x75], ah; add [rsi - 0x77], esp; add cl, [rax - 0x77]; clc ; ret
0x0014cdca : mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0010ebdc : mov [rbp - 0x70], edx; mov edx, [r13 + 0x60]; mov [rbp - 0x80], edx; mov rdx, r12; call rax
0x00106cac : add [rax], al; add [rcx - 0x3b7cb730], cl; or bl, al; nop cs:[rax + rax]; mov eax, edx; ret
0x00166db7 : lea edx, [rip + 0x15d33]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0006f579 : add bh, al; adc al, 0; add [rax], al; add [rcx + 0x4789246f], cl; adc [rbx + 0x5d], bl; ret
0x0008fbf1 : lea rdx, [rip + 0xecef8]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0014d6b4 : mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0008d5ac : lea rdx, [rip + 0xef53d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0003d65b : sbb [r13 - 0x17], sil; mov [rbx + 0x18], 1; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x0003a842 : mov [rbp - 0x510], ebx; mov rsi, r8; mov [rbp - 0x500], r8; mov rdi, r14; call [r15 + 0x38]
0x0014d113 : mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00094da5 : lea rax, [rdx + 7]; cmp [rax], 1; sbb rax, -1; xor cl, cl; mov [rax], cl; mov rax, rdi; ret
0x0012b091 : add [rcx], al; mov rdi, rbp; mov edx, [rbx + 0x22c0]; mov rsi, [rsp + 8]; call [rax + 0x18]
0x0013345b : add [rcx + 0x480c2444], cl; mov eax, [rbp + 8]; mov esi, 8; mov rdi, rbp; call [rax + 0x30]
0x0014dab4 : mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0013ed1b : push rsp; mov eax, [rax + 0x18]; mov [rip + 0x290ab7], 0; add rsp, 8; pop rbx; pop rbp; ret
0x001088ca : mov [rbx + 0x38], rax; mov [rbx + 0x40], rbp; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret
0x00097a20 : mov cx, [rsi]; mov dl, [rsi + 2]; mov [rdi], cx; mov [rdi + 2], dl; lea rax, [rdi + 3]; ret
0x0016b2ed : lea edx, [rip + 0x117fd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0010f74b : add [rax], al; add [rdi], cl; test [rax + 0x48000001], esp; mov ebx, [rbp - 8]; leave ; ret
0x00095cf2 : int 0x4c; lea ebx, [rip + 0xf84f6]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001088cb : mov [rbx + 0x38], eax; mov [rbx + 0x40], rbp; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret
0x0010e4a2 : mov [rbp - 0x70], rdx; mov edx, [r12 + 0x60]; mov [rbp - 0x80], edx; mov rdx, rbx; call rax
0x0016b307 : lea edx, [rip + 0x117e3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000feccc : mov [rbx + 0x50], eax; mov eax, 4; mov [rbx + 0x38], rcx; add rsp, 8; pop rbx; pop rbp; ret
0x00166db6 : lea rdx, [rip + 0x15d33]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0014d6b5 : mov [rdi - 0x1d], edx; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00161ece : add [rdi], ecx; test edi, ebx; add eax, [rax]; add [rax - 0x7cb7fec8], al; fdivr st(7); ret
0x0016b2b9 : lea ecx, [rip + 0x11831]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0015a667 : lea edx, [rip + 0x22483]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0006ca99 : sbb [rax - 0x75], cl; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x0016b57d : lea ecx, [rip + 0x1156d]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0015bcad : add [rax], al; add [rax - 0x75], cl; add [rax - 0x77], ecx; add cl, [rax - 0x77]; clc ; ret
0x00099825 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], ecx; xor ch, ch; mov [rdi + 0x14], ch; ret
0x0014d4e3 : mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00168d62 : lea edx, [rip + 0x13d88]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0003a841 : mov [rbp - 0x510], r11; mov rsi, r8; mov [rbp - 0x500], r8; mov rdi, r14; call [r15 + 0x38]
0x000998a6 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rcx; xor ch, ch; mov [rdi + 0x18], ch; ret
0x00094da6 : lea eax, [rdx + 7]; cmp [rax], 1; sbb rax, -1; xor cl, cl; mov [rax], cl; mov rax, rdi; ret
0x001776ed : add [rax], al; add [rbp + 0x31], al; fisttp [rax + 9]; fadd [rcx + 0xf]; xchg eax, ebp; ret
0x00134fe9 : pop rbx; xor eax, eax; mov rsi, [rsp + 0x40]; mov rdi, rbx; mov rdx, [rsp + 0x20]; call rdx
0x00166d69 : lea ecx, [rip + 0x15d81]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x00158107 : lea edx, [rip + 0x249e3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0006605b : mov rcx, [rbx + 0xf8]; mov rax, rdx; sar rax, 2; mov [rcx], rax; xor eax, eax; pop rbx; ret
0x00166d9d : lea edx, [rip + 0x15d4d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0016b2ec : lea rdx, [rip + 0x117fd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00168d2e : lea ecx, [rip + 0x13dbc]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0014d114 : mov [rdi - 0x1a], edx; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0008fc16 : lea rdx, [rip + 0xeced3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00138d2e : movups xmm[rsp + 0x18], xmm0; mov [rsp + 0x30], 2; mov [rsp + 0x40], rdx; call [rax + 0x18]
0x00068c36 : sbb [r14 + 4], r14b; mov [rbp + 0x20], rax; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret
0x00022e21 : lea eax, [rdx + rdx*4]; pop rbx; add r10d, eax; xor eax, eax; mov [rsi], r10d; pop rbp; ret
0x0010ebdb : mov [rbp - 0x70], rdx; mov edx, [r13 + 0x60]; mov [rbp - 0x80], edx; mov rdx, r12; call rax
0x0016b2b8 : lea rcx, [rip + 0x11831]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0014dab5 : mov [rdi - 0x1f], edx; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00138bdd : mov esi, esp; mov [rsp + 8], 1; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; call [rax + 0x18]
0x0016b57c : lea rcx, [rip + 0x1156d]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00038aa1 : add [rax - 0x77], cl; fimul [rcx + rcx*4 - 0x12]; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x000973a2 : int 0x4c; lea ebx, [rip + 0xf7026]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00168d2d : lea rcx, [rip + 0x13dbc]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0010e414 : add [rax - 0x77], cl; xchg eax, r8d; mov eax, [r12 + 0x60]; mov [rbp - 0x80], eax; call rcx
0x000feccb : mov [rbx + 0x50], rax; mov eax, 4; mov [rbx + 0x38], rcx; add rsp, 8; pop rbx; pop rbp; ret
0x00168d87 : lea edx, [rip + 0x13d63]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0008d5c7 : lea edx, [rip + 0xef523]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00135523 : add bl, al; nop [rax]; movdqu xmm0, xmm[rdx]; mov eax, 1; movups xmm[rdi + 0x30], xmm0; ret
0x001580ed : lea edx, [rip + 0x249fd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00166d68 : lea rcx, [rip + 0x15d81]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0011fd53 : add [rdi + rax + 0x31], dh; shl [rsi - 0x77], cl; push rsp; add esi, edi; mov eax, r8d; ret
0x0016e742 : adc [rcx], edx; adc [rcx], edx; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper ; ret
0x00087229 : movzx edx, [rsp + 0x14]; mov [rdi + 4], dx; movzx edx, [rsp + 0x16]; mov [rdi + 6], dl; ret
0x0016b306 : lea rdx, [rip + 0x117e3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0009ca7d : adc [rdx + 1], ch; xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx
0x00141d38 : sbb [rax + 2], bh; cmp ebx, 3; cmove ebx, eax; mov rax, [rip + 0x289535]; call [rax + 0x28]
0x0006be97 : add [rax - 0x75], cl; or [r11 + 0x5d], bl; movzx eax, [rax]; pop r12; pop r13; pop r14; ret
0x0016709d : lea ecx, [rip + 0x15a4d]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0014d8b4 : mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0008fc17 : lea edx, [rip + 0xeced3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00134119 : xchg bh, bh; inc [rbp + 0x488974c0]; mov eax, [rsp + 0x88]; mov rdi, rbp; call [rax + 0x20]
0x0005dd2b : add [rax], al; add bh, bh; rol [rbx + 0xb74fff8], 1; mov rax, [rsp + 8]; add rsp, 0x18; ret
0x0006cea8 : lea rdx, [rax + 1]; mov [rbx + 8], rdx; movzx eax, [rax]; add rsp, 8; pop rbx; pop rbp; ret
0x00097a33 : add [rax], r8b; nop cs:[rax + rax]; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 4]; ret
0x0014d8b5 : mov [rdi - 0x1e], edx; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00158106 : lea rdx, [rip + 0x249e3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00169ea4 : lea ecx, [rip + 0x12c46]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00138a3e : movups xmm[rsp + 0x18], xmm0; mov [rsp + 0x30], 0; mov [rsp + 0x38], rdx; call [rax + 0x18]
0x0001cfd1 : movups xmm3, xmm[rip + 0x16b6f8]; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret
0x0014cd8c : mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x00160083 : add [rax], r8b; nop cs:[rax + rax]; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx + 3]; ret
0x0016ed1b : add [rax], al; add [rax], al; add [rdi], cl; mov dh, 7; movzx ecx, [rsi]; sub eax, ecx; ret
0x00168d86 : lea rdx, [rip + 0x13d63]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00045f91 : add [rax - 0x77], cl; fimul [rcx + rcx*4 - 0x1a]; mov rdi, [rbp - 0x8d0]; call [r13 + 0x38]
0x0007a72e : add [rdi], cl; test bl, bl; add al, [rax]; add [rcx + rcx*4 - 6], cl; mov rdi, r8; call rax
0x00064148 : mov esi, [rbx + 0x10]; mov rdx, [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call [r14 + 0x70]
0x00168d61 : lea rdx, [rip + 0x13d88]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00165494 : lea ecx, [rip + 0x17656]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00131d33 : add [rax], al; add bl, al; nop [rax + rax]; mov eax, [rdi]; mov [rdx], eax; mov eax, 1; ret
0x0006605c : mov ecx, [rbx + 0xf8]; mov rax, rdx; sar rax, 2; mov [rcx], rax; xor eax, eax; pop rbx; ret
0x0015a642 : lea edx, [rip + 0x224a8]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00064147 : mov rsi, [rbx + 0x10]; mov rdx, [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call [r14 + 0x70]
0x0016709c : lea rcx, [rip + 0x15a4d]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0010e4a3 : mov [rbp - 0x70], edx; mov edx, [r12 + 0x60]; mov [rbp - 0x80], edx; mov rdx, rbx; call rax
0x00166d9c : lea rdx, [rip + 0x15d4d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0014d4e4 : mov [rdi - 0x1c], edx; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0000f659 : lea rdx, [rdi + 0x200]; mov fs:[rcx], rdx; mov rdx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x00097a21 : mov ecx, [rsi]; mov dl, [rsi + 2]; mov [rdi], cx; mov [rdi + 2], dl; lea rax, [rdi + 3]; ret
0x0006e764 : mov rax, [rbx + 0x60]; mov [rbp], rax; mov [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret
0x00099793 : mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; xor ch, ch; mov [rdi + 0xf], ch; ret
0x0014da6d : add [rax], al; add [rbx + 0x4e8bfa56], cl; cld ; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x000d0456 : lea rsi, [rip + 0xbf693]; movzx r12d, r12b; movsxd rax, [rsi + r12*4]; add rax, rsi; jmp rax
0x0006f58e : add [rax], al; mov rax, [rdi]; nop ; mov [rip + 0x35aa46], 1; mov [rip + 0x35aa0b], rax; ret
0x0006ca9a : mov rax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x0010bfca : mov r10, [rbp - 0xc8]; mov edi, r12d; mov rdx, rax; mov rsi, [rbp - 0x98]; call [r10 + 0x28]
0x000b07c7 : add [rax], al; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x50]; mov rax, [rsp + 0x18]; call rax
0x00131d3b : add [rax], al; add [rax], al; add [rbx - 0x47fd76f9], cl; add [rax], eax; add [rax], al; ret
0x0011b9e0 : add al, [rax]; mov rcx, rbx; mov rdx, r15; mov rsi, r14; lea rdi, [rip + 0x2b2b1e]; call r12
0x0013cd4b : add [rax], al; add [rax], al; add [rbx - 0x47fbd7b9], al; add [rax], eax; add [rax], al; ret
0x0001f7c8 : add ebp, [rsp + 8]; lea rbx, [rax + r15]; mov rdx, r12; mov rsi, r14; mov rdi, r13; call rbp
0x0011fff6 : xor eax, eax; mov [rdi + 3], cl; movdqu xmm0, xmm[rsi]; movups xmm[rdi + rdx + 8], xmm0; ret
0x00174c8d : add [rax], al; add [rbp + 0x31], al; fisttp [rcx + 9]; fiadd [rcx + 0xf]; xchg eax, ebp; ret
0x000473b5 : mov rdi, r13; mov [rbp - 0x4c0], r8; mov rdx, [rbp - 0x4d8]; mov rsi, r15; call [r14 + 0x38]
0x000d0507 : lea ecx, [rip + 0xbf7b3]; movzx r14d, r14b; movsxd rax, [rcx + r14*4]; add rax, rcx; jmp rax
0x0006ca9b : mov eax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x0006caca : mov [rdi + 0x10], rax; mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x0006d069 : mov [rbx + 0x38], ebp; mov [rbx + 0x40], r12; mov [rbx], eax; pop rbx; pop rbp; pop r12; ret
0x00064e03 : add [rax], al; mov rdi, rbx; pop rbx; mov rax, [rax + 0x130]; mov rax, [rax + 0x20]; jmp rax
0x00160071 : mov eax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x0016e5a4 : xor edx, edx; lea rax, [rdi + rax + 0x40]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x0006959e : mov [rbx + 0x18], rax; mov [rbx + 8], rax; mov [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret
0x0006652c : add [rax], al; lea rcx, [rax + 1]; mov [rsi + 0x28], rcx; mov [rax], dil; mov eax, r10d; ret
0x00047814 : add [rax + 1], cl; clc ; mov r8, rcx; mov [rbp - 0x4d8], 1; mov [rbp - 0x4f0], 0x20; jmp rax
0x0012a5de : lea rdx, [rsi + 7]; and esi, 7; movsxd rax, [rcx + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax
0x0006d068 : mov [rbx + 0x38], rbp; mov [rbx + 0x40], r12; mov [rbx], eax; pop rbx; pop rbp; pop r12; ret
0x00100458 : mov rax, [rip + 0x2c96a9]; mov rdx, [rbx]; mov [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret
0x0013ca29 : mov [rdi + 0x20], rsi; mov [rdi + 0x18], rsi; mov [rdi + 0x28], edx; mov [rdi + 8], rax; ret
0x0005ab5e : xor al, [rbp + 0x481d75c0]; mov edx, [rdi + 0x88]; mov [rdx + 8], rcx; mov [rdx + 4], 1; ret
0x000c4f46 : movsb [rdi], [rsi]; or al, 0; mov esi, esi; movsxd rax, [rdx + rsi*4]; add rax, rdx; jmp rax
0x000473b6 : mov edi, ebp; mov [rbp - 0x4c0], r8; mov rdx, [rbp - 0x4d8]; mov rsi, r15; call [r14 + 0x38]
0x0000edd5 : mov rcx, [rip + 0x3bae2c]; mov fs:[rcx], rsi; cmp rax, rdx; mov rdx, -1; cmove rax, rdx; ret
0x00088b85 : add [rsi + 0x2e], ah; nop [rax + rax]; movzx ecx, [rsi]; movzx eax, [rdi]; sub eax, ecx; ret
0x00096d2d : add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x0012b073 : mov rax, ds:[rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov [rbx + 0x18], 0; call [rax + 0x28]
0x0012e8d9 : add [rax], al; mov rdi, [rbx]; mov [rcx], eax; sub rdx, rsi; mov rbp, rdx; call [rbx + 0x10]
0x00099794 : mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; xor ch, ch; mov [rdi + 0xf], ch; ret
0x0016e584 : xor edx, edx; lea rax, [rdi + rax + 0x20]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x000956cd : add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x00063e86 : mov rdi, rbp; push [rax + 0x38]; mov rcx, [rbx + 8]; mov r9, [rax + 0x10]; call [rbp + 0x18]
0x00133d91 : mov edi, edi; inc [rbp + 0x48b174c0]; mov eax, [rsp + 0x78]; mov rdi, rbx; call [rax + 0x20]
0x0014dc6d : add [rax], al; add [rbx + 0x4e8bf956], cl; cld ; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x001560d7 : sub r9, rcx; lea r10, [rip + 0x37f4f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000671e9 : add [rax], 0; add [rax - 0x77], cl; imul eax; stosd [rdi], eax; cdq ; stc ; jmp [rsi + 0x2e]
0x000339d5 : add [rax], al; add [rcx], al; add [rax + 9], cl; ror [rax - 0x77], 1; or [r8 + 2], r15b; ret
0x00099733 : mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; xor ch, ch; mov [rdi + 0xc], ch; ret
0x0000f2b8 : movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x0013c031 : mov eax, esp; mov rsi, rsp; mov rdi, rbp; mov [rsp], rax; mov rax, [rbp + 8]; call [rax + 8]
0x00048116 : lea rdi, [rip - 0x5cd]; add rax, rdi; mov r8, rcx; mov [rbp - 0x4c0], 1; mov esi, 1; jmp rax
0x00122682 : mov rax, [rdi + 0x10]; lea rax, [rax + rdx*8]; add rdx, 1; mov [rdi], rdx; mov [rax], 0; ret
0x00099753 : mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; xor ch, ch; mov [rdi + 0xd], ch; ret
0x0014d86d : add [rax], al; add [rbx + 0x4e8bfb56], cl; cld ; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x00099774 : mov edx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; xor ch, ch; mov [rdi + 0xe], ch; ret
0x0000f1d8 : movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x0006cacb : mov [rdi + 0x10], eax; mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x0013ca2a : mov [rdi + 0x20], esi; mov [rdi + 0x18], rsi; mov [rdi + 0x28], edx; mov [rdi + 8], rax; ret
0x0006e765 : mov eax, [rbx + 0x60]; mov [rbp], rax; mov [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret
0x0010e413 : add [rax], al; mov [rbp - 0x70], rax; mov eax, [r12 + 0x60]; mov [rbp - 0x80], eax; call rcx
0x00099754 : mov edx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; xor ch, ch; mov [rdi + 0xd], ch; ret
0x0016cee2 : xor edx, edx; lea rax, [rdi + rax + 0x60]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x00100459 : mov eax, [rip + 0x2c96a9]; mov rdx, [rbx]; mov [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret
0x00048117 : lea edi, [rip - 0x5cd]; add rax, rdi; mov r8, rcx; mov [rbp - 0x4c0], 1; mov esi, 1; jmp rax
0x000326f6 : add r9, rax; adc rdx, r8; mov [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret
0x00069686 : mov rax, [rbx + 0x18]; mov [rbx + 8], rax; mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x001525f1 : movdqu xmm[rdi - 0x20], xmm0; lddqu xmm0, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x10], xmm0; ret
0x0016cea4 : xor edx, edx; lea rax, [rdi + rax + 0x40]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x0013698d : mov esi, 4; movdqa xmm0, xmm[rip + 0x64716]; movaps xmm[rsp + 0x20], xmm0; call [rax + 0x28]
0x000dfecc : add [rax], al; add [rax], al; mov rdx, [rip + 0x2e9e01]; mov rax, [rdx]; mov [rdx], rdi; ret
0x00099773 : mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; xor ch, ch; mov [rdi + 0xe], ch; ret
0x0016ce84 : xor edx, edx; lea rax, [rdi + rax + 0x20]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x000d0457 : lea esi, [rip + 0xbf693]; movzx r12d, r12b; movsxd rax, [rsi + r12*4]; add rax, rsi; jmp rax
0x001623ef : mov eax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; cmp [rax], 1; sbb rax, -1; ret
0x001623ee : mov rax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; cmp [rax], 1; sbb rax, -1; ret
0x0006f5ae : add [rax], al; mov rax, [rdi]; nop ; mov [rip + 0x35aa26], 1; mov [rip + 0x35a9f3], rax; ret
0x0012fc85 : add [rbp + 0x661675c0], al; nop [rax + rax]; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x00063e87 : mov edi, ebp; push [rax + 0x38]; mov rcx, [rbx + 8]; mov r9, [rax + 0x10]; call [rbp + 0x18]
0x0007a72d : add [r15], r9b; test bl, bl; add al, [rax]; add [rcx + rcx*4 - 6], cl; mov rdi, r8; call rax
0x000e890b : add [rax], al; add [rcx - 0x39], cl; add [r8], r8b; add [rax], al; add [rax - 0x7d], cl; ret
0x00149d87 : sub r9, rcx; lea r10, [rip + 0x4421f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000d1cac : adc ecx, [rax - 0x7b]; sal [rbp - 0x40], cl; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x00169c74 : movzx eax, [rdi + rcx + 0x20]; movzx edx, [rsi + rcx + 0x20]; sub eax, edx; vzeroupper ; ret
0x0001f7c7 : add r13, [rsp + 8]; lea rbx, [rax + r15]; mov rdx, r12; mov rsi, r14; mov rdi, r13; call rbp
0x000d0506 : lea rcx, [rip + 0xbf7b3]; movzx r14d, r14b; movsxd rax, [rcx + r14*4]; add rax, rcx; jmp rax
0x00153c19 : xchg eax, ebx; mov al, [rax + rax]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00092297 : adc al, [rcx]; movlpd [rdx], xmm0; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x00092277 : adc al, [rcx]; movlpd [rdx], xmm0; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x00060694 : lea rsi, [rcx + 4]; mov [rdx + 0x20], rsi; mov [rcx], ebp; add rsp, 8; pop rbx; pop rbp; ret
0x0012d718 : xchg eax, ecx; xchg [rsi], eax; add bl, ch; mov al, ch; lea esp, [rdx - 2]; jmp [rsi + 0x2e]
0x00169c94 : movzx eax, [rdi + rcx + 0x40]; movzx edx, [rsi + rcx + 0x40]; sub eax, edx; vzeroupper ; ret
0x00060695 : lea esi, [rcx + 4]; mov [rdx + 0x20], rsi; mov [rcx], ebp; add rsp, 8; pop rbx; pop rbp; ret
0x0000edd6 : mov ecx, [rip + 0x3bae2c]; mov fs:[rcx], rsi; cmp rax, rdx; mov rdx, -1; cmove rax, rdx; ret
0x001712e8 : add dh, [rdx + 0x10]; mov si, [rsi]; mov cx, [rcx - 2]; mov [rdi], si; mov [r9 - 2], cx; ret
0x0016532a : add eax, gs:[rax]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x001539d6 : xchg eax, esi; mov al, [rax + rax]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cdcb : mov [rdi - 0x20], ecx; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0006959f : mov [rbx + 0x18], eax; mov [rbx + 8], rax; mov [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret
0x0009ca03 : add [rdx + 1], ebp; xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx
0x0016e5e2 : xor edx, edx; lea rax, [rdi + rax + 0x60]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x0000f218 : movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x00148b07 : sub r9, rcx; lea r10, [rip + 0x4541f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0003bd04 : mov [rbp - 0x4e8], ecx; mov [rbp - 0x4e0], r11; mov rsi, r8; mov rdi, r14; call [r15 + 0x38]
0x0010bfcb : mov edx, [rbp - 0xc8]; mov edi, r12d; mov rdx, rax; mov rsi, [rbp - 0x98]; call [r10 + 0x28]
0x00099713 : mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; xor ch, ch; mov [rdi + 0xb], ch; ret
0x0000f65a : lea edx, [rdi + 0x200]; mov fs:[rcx], rdx; mov rdx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x00158247 : sub r9, rcx; lea r10, [rip + 0x35e5f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0005fc8f : adc [rcx + rcx*4 - 0x1f], al; mov rdi, rbx; xor edx, edx; pop rbx; pop rbp; pop r12; jmp rax
0x0013d09b : add [rax], al; add [rax], al; add [rbp - 0x47f38a2e], al; add [rax], eax; add [rax], al; ret
0x0012a5df : lea edx, [rsi + 7]; and esi, 7; movsxd rax, [rcx + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax
0x00138ff6 : add [rax], eax; add [rax], al; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xc8], rdx; call rax
0x001461d9 : movsxd rdx, ecx; shl rax, cl; shr rdx, 6; not rax; and [rdi + rdx*8], rax; xor eax, eax; ret
0x00169c5a : movzx eax, [rdi + rcx + 0x60]; movzx edx, [rsi + rcx + 0x60]; sub eax, edx; vzeroupper ; ret
0x00122683 : mov eax, [rdi + 0x10]; lea rax, [rax + rdx*8]; add rdx, 1; mov [rdi], rdx; mov [rax], 0; ret
0x00108d6e : add [rax], eax; add [rdx], al; mov rdx, [rsp + 0x18]; mov rsi, r13; xor r15d, r15d; call rax
0x0014cd8d : mov [rdi - 0x20], ecx; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x00069687 : mov eax, [rbx + 0x18]; mov [rbx + 8], rax; mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x00131d86 : add [rax], al; mov rax, [rdx]; sub eax, 1; bswap eax; mov [rdi + 0xa8], eax; mov eax, 1; ret
0x00045517 : mov ebp, [rbp - 0x8f8]; mov rsi, r12; mov rdi, [rbp - 0x8d0]; mov rdx, r13; call [rbx + 0x38]
0x000ee19a : add [rax], al; add [rax], al; nop ; mov eax, [rsi]; mov [rdi + 0x108], eax; xor eax, eax; ret
0x0010fdfa : lea edx, [rip - 0xf0]; test rax, rax; cmove rax, rdx; mov [rip + 0x2be1a2], rax; pop rbp; ret
0x0004481c : mov [rbp - 0x940], al; mov rsi, r14; mov [rbp - 0x950], r9b; mov rdi, [rbp - 0x8d0]; call rax
0x000956e0 : movdqu xmm0, xmm[rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x00154219 : xchg eax, ebx; test [rax + rax], al; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00133ce7 : add [rax], al; add [rax], al; mov [rsp + 0x10], rax; mov rax, [rsp + 0x48]; call [rax + 0x28]
0x00097aa0 : mov rcx, [rsi]; mov dl, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dl; lea rax, [rdi + 9]; ret
0x0012ba8f : mov edi, ebp; lea r8, [rip + 0xb8]; lea rdx, [rip + 0xf781]; lea r9, [rsp + 0x20]; call [rax]
0x00153919 : xchg eax, ebx; lea eax, [rax + rax]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000b0a16 : mov edx, esi; and rdx, r12; and edx, 1; lea r15, [rax + rdx]; mov [rsp + 0xb8], r15; call r13
0x000f6bde : mov eax, [rip + 0x2d6240]; pop r12; mov [rip + 0x2d6268], eax; lea rax, [rip + 0x2d6235]; ret
0x001355d0 : mov rax, [rdx]; mov rdx, [rdi + 0x90]; sub eax, 1; bswap eax; mov [rdx], eax; mov eax, 1; ret
0x001045e8 : mov rax, [rsi + 0x68]; mov edi, edi; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x00097a60 : mov ecx, [rsi]; mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; lea rax, [rdi + 6]; ret
0x001049e8 : mov rax, [rsi + 0x68]; mov edi, edi; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x00097b7d : add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0x10]; ret
0x00097c34 : mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret
0x00145594 : mov eax, [rip + 0x2845ee]; call [rax + 0x178]; mov [rbx], rax; pop rax; pop rdx; pop rbx; ret
0x00131d85 : add [rax], r8b; mov rax, [rdx]; sub eax, 1; bswap eax; mov [rdi + 0xa8], eax; mov eax, 1; ret
0x0001ee61 : add bl, al; nop [rax + rax]; lea eax, [rdx + 1]; mov [rip + 0x3ab06b], eax; mov eax, edx; ret
0x00148b08 : sub ecx, ecx; lea r10, [rip + 0x4541f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00097aa1 : mov ecx, [rsi]; mov dl, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dl; lea rax, [rdi + 9]; ret
0x00138d36 : xor [rdx], al; add [rax], al; add [rax - 0x77], cl; push rsp; and al, 0x40; call [rax + 0x18]
0x0006f408 : add [rax], al; add [rax], al; nop [rax]; mov rax, [rdi]; nop ; mov [rip + 0x35abb5], rax; ret
0x001355d1 : mov eax, [rdx]; mov rdx, [rdi + 0x90]; sub eax, 1; bswap eax; mov [rdx], eax; mov eax, 1; ret
0x0012d261 : mov [rax + 0x23b0], 1; mov rax, [rax + 0x23b8]; xor esi, esi; mov rdi, rbx; call [rax + 0x28]
0x00092238 : add [rsi + 0xf], esp; adc eax, [rdx]; mov al, [rcx + 8]; mov [rdx + 8], al; mov rax, rdi; ret
0x00149d88 : sub ecx, ecx; lea r10, [rip + 0x4421f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00088b84 : add [rsi + 0x2e], spl; nop [rax + rax]; movzx ecx, [rsi]; movzx eax, [rdi]; sub eax, ecx; ret
0x00092258 : add [rsi + 0xf], esp; adc eax, [rdx]; mov ax, [rcx + 8]; mov [rdx + 8], ax; mov rax, rdi; ret
0x0012fa96 : add eax, [rbp - 0x47ea8b40]; add [rax], eax; add [rax], al; add rsp, 8; pop rbx; pop rbp; ret
0x0000f3ba : mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax + 0x58]; mov eax, [rax + rdi*4 + 0x200]; ret
0x0012eac0 : mov rax, [rsp + 0x20]; mov rcx, [rsp + 8]; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax
0x00095740 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x0004ab3e : lea rdx, [rip + 0x1423e3]; movzx r12d, r12b; movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x0012ba8e : mov rdi, rbp; lea r8, [rip + 0xb8]; lea rdx, [rip + 0xf781]; lea r9, [rsp + 0x20]; call [rax]
0x00096df5 : mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x00096dd4 : mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x0008b4a7 : sub r9, rcx; lea r10, [rip + 0x102b3f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0011fd96 : mov eax, ecx; shr eax, 3; mov ecx, eax; xor eax, eax; rep stosq [rdi], rax; mov eax, r8d; ret
0x00096c20 : mov ecx, [rsi]; mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; lea rax, [rdi + 5]; ret
0x000450b8 : mov [rbp - 0x91c], ebx; mov rdx, rbx; mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [r13 + 0x38]
0x00095760 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x00128af3 : lea rcx, [rsp + 0x20]; xor edx, edx; mov rsi, r15; mov rdi, rbx; mov [rsp + 8], rcx; call r12
0x000963a0 : movdqu xmm0, xmm[rsi]; mov cl, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; ret
0x0015e034 : add [rdi], cl; test [rbp + 0x48fffffb], ah; mov eax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x0006f58d : add [rax], r8b; mov rax, [rdi]; nop ; mov [rip + 0x35aa46], 1; mov [rip + 0x35aa0b], rax; ret
0x00158248 : sub ecx, ecx; lea r10, [rip + 0x35e5f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00097b94 : mov cl, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret
0x00153fd6 : xchg eax, esi; test [rax + rax], al; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000b0a15 : mov rdx, r14; and rdx, r12; and edx, 1; lea r15, [rax + rdx]; mov [rsp + 0xb8], r15; call r13
0x00097bb4 : mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret
0x00094fe1 : lea eax, [rdx + 0xe]; cmp [rax], 1; sbb rax, -1; xor cl, cl; mov [rax], cl; mov rax, rdi; ret
0x001600b0 : mov eax, [rcx]; mov [rdx], eax; mov ax, [rcx + 4]; mov [rdx + 4], ax; lea rax, [rdx + 5]; ret
0x0010ee0d : add [rax + rax], al; test rdx, rdx; cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret
0x00096df4 : mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x00088ee7 : sub r9, rcx; lea r10, [rip + 0x10507f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0012542c : add [rax - 0x39], cl; adc [rax], al; add [rax], al; add cl, ch; cmp dh, 0xff; jmp [rsi + 0xf]
0x0000f3da : mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax + 0x48]; mov eax, [rax + rdi*4 + 0x200]; ret
0x00096478 : mov cl, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; ret
0x00128af4 : lea ecx, [rsp + 0x20]; xor edx, edx; mov rsi, r15; mov rdi, rbx; mov [rsp + 8], rcx; call r12
0x0012bd5b : add [rbp + 0x48bb74c0], al; mov eax, [rbx + 8]; mov rdi, rbx; mov [rsp], 0; call [rax + 0x20]
0x00097a50 : mov ecx, [rsi]; mov dl, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dl; lea rax, [rdi + 5]; ret
0x00063dfb : add [rax], al; add [rax - 0x77], cl; and al, 8; xor eax, eax; mov rdi, rbp; call [rbp + 0x20]
0x0008d707 : sub r9, rcx; lea r10, [rip + 0x10095f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00096c70 : mov rcx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 9]; ret
0x000326f7 : add ecx, eax; adc rdx, r8; mov [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret
0x000ed7dc : movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0x78]; movups xmm[rsi + 0x70], xmm0; ret
0x00095700 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x00097c55 : mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret
0x00104768 : mov rax, [rsi + 0x68]; mov edi, edi; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x0013c030 : mov eax, r12d; mov rsi, rsp; mov rdi, rbp; mov [rsp], rax; mov rax, [rbp + 8]; call [rax + 8]
0x0006cba1 : add [rax - 0x39], cl; pop r8; add [rax], al; add [rax], al; mov [rbx + 0x50], 0; pop rbx; ret
0x000ee0d1 : movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x000877d7 : sub r9, rcx; lea r10, [rip + 0x10670f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0013562d : add [rax], al; mov eax, [rax + 0xc]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x001049e9 : mov eax, [rsi + 0x68]; mov edi, edi; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x0013b1e7 : mov rax, fs:[0x28]; mov [rsp + 0x38], rax; xor eax, eax; mov [rsp], 2; mov rdi, rsp; call rdx
0x0012d971 : mov eax, [rbx + 0x20]; sub rax, [rbx + 0x18]; add rsp, 8; pop rbx; pop rbp; add eax, edx; ret
0x0012eac1 : mov eax, [rsp + 0x20]; mov rcx, [rsp + 8]; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax
0x00000847 : xchg eax, ebx; cmp al, 0; mov rsi, [rsp + 8]; mov edi, [rsp + 0x14]; mov rdx, [rax]; call rbp
0x0010fdf9 : lea rdx, [rip - 0xf0]; test rax, rax; cmove rax, rdx; mov [rip + 0x2be1a2], rax; pop rbp; ret
0x0014d47f : add [rax - 0x75], cl; cmc ; mov edx, [rsi - 4]; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00045516 : mov r13, [rbp - 0x8f8]; mov rsi, r12; mov rdi, [rbp - 0x8d0]; mov rdx, r13; call [rbx + 0x38]
0x00138a46 : xor [rax], al; add [rax], al; add [rax - 0x77], cl; push rsp; and al, 0x38; call [rax + 0x18]
0x00145593 : mov rax, [rip + 0x2845ee]; call [rax + 0x178]; mov [rbx], rax; pop rax; pop rdx; pop rbx; ret
0x0004ab3f : lea edx, [rip + 0x1423e3]; movzx r12d, r12b; movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x00096d74 : mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x000ed82c : movups xmm[rdi + 0x68], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0x78], xmm0; ret
0x0006be67 : add [rax], eax; add [rax - 0x75], cl; push rbx; mov rdi, rbx; sub rdx, rsi; call [r13 + 0x70]
0x0001e5db : movups xmm[rdi + 0x50], xmm0; movups xmm[rdi + 0x60], xmm0; movups xmm[rdi + 0x70], xmm0; ret
0x000671ea : add [rax], al; add [rax - 0x77], cl; imul eax; stosd [rdi], eax; cdq ; stc ; jmp [rsi + 0x2e]
0x00097c54 : mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret
0x00096c71 : mov ecx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 9]; ret
0x000f69fe : mov eax, [rip + 0x2d6420]; pop r12; mov [rip + 0x2d6448], eax; lea rax, [rip + 0x2d6415]; ret
0x00097c35 : mov ecx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret
0x00071038 : add [rax - 0x15], dl; mov dr0, [rcx]; lcall [rbx + 0x48]; mov eax, edi; pop rbp; pop r12; ret
0x0009215e : add [rax], al; xor ah, ah; mov [rdx + 1], ah; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret
0x000ee15e : movups xmm[rdi + 0xe8], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x000ab105 : add [rcx + rcx*4 - 0x19], cl; mov r9, r15; mov rcx, rbx; mov rdx, r14; mov rsi, r13; call rbp
0x00104769 : mov eax, [rsi + 0x68]; mov edi, edi; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x0012d970 : mov rax, [rbx + 0x20]; sub rax, [rbx + 0x18]; add rsp, 8; pop rbx; pop rbp; add eax, edx; ret
0x00096d54 : mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x0006e871 : push rax; or [rbp + 0xb], dh; sub edx, [rax + 0x18]; mov eax, [rdi + 0x10]; sub eax, edx; ret
0x000ed50d : movups xmm[rdi + 0x20], xmm0; movups xmm[rdi + 0x30], xmm0; movups xmm[rdi + 0x40], xmm0; ret
0x00096dd5 : mov ecx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x001045e9 : mov eax, [rsi + 0x68]; mov edi, edi; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x000957c8 : mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x00094fe0 : lea rax, [rdx + 0xe]; cmp [rax], 1; sbb rax, -1; xor cl, cl; mov [rax], cl; mov rax, rdi; ret
0x001600a0 : mov eax, [rcx]; mov [rdx], eax; mov al, [rcx + 4]; mov [rdx + 4], al; lea rax, [rdx + 4]; ret
0x00097bd4 : mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret
0x001560d8 : sub ecx, ecx; lea r10, [rip + 0x37f4f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000963f7 : mov dl, [rsi + 0x14]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; ret
0x00131db1 : add bl, al; nop [rax + rax]; mov rax, [rdx]; bswap eax; mov [rdi + 0xb8], eax; mov eax, 1; ret
0x00131cb3 : add [rax], 0; add [rax], al; movdqu xmm0, xmm[rdx]; mov eax, 1; movups xmm[rdi + 8], xmm0; ret
0x001635a7 : lea ecx, [rdx + rcx - 0x10]; movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; sub eax, edx; ret
0x00138c41 : mov esi, esp; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; mov [rsp + 0x20], 5; call [rax + 0x18]
0x00134ce6 : add bl, al; nop [rax + rax]; mov rax, [rdx]; bswap eax; mov [rdi + 0x58], eax; mov eax, 1; ret
0x00096db7 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x0008d708 : sub ecx, ecx; lea r10, [rip + 0x10095f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00038189 : mov [rbp - 0x944], r9d; mov [rbp - 0x920], r8b; mov rsi, r15; mov rdi, [rbp - 0x8a8]; call rax
0x00020f0e : add [rax], al; mov rdx, [rsp + 0x10]; mov rsi, r15; mov rdi, r13; mov rax, [rsp + 8]; call rax
0x00046f0e : lea rdi, [rip + 0xc3b]; add rax, rdi; mov r8, rcx; mov [rbp - 0x4c0], 1; xor esi, esi; jmp rax
0x00153f19 : xchg eax, ebx; xchg [rax + rax], eax; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000339d4 : add [rax], al; add [rax], al; add [rax], eax; or rax, rdx; mov [rdi + 8], rax; mov eax, 2; ret
0x00160085 : add [rsi + 0x2e], ah; nop [rax + rax]; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx + 3]; ret
0x000957c9 : mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x00097bb5 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret
0x0003d694 : mov [rbx + 0x18], esi; mov [rcx + rdx*8], rax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x000450b7 : mov [rbp - 0x91c], r11d; mov rdx, rbx; mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [r13 + 0x38]
0x0016cc60 : mov esi, dr1; add [rax], al; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0009962c : add [rax], al; add [rax], al; mov dl, [rsi]; mov [rdi], dl; xor ch, ch; mov [rdi + 1], ch; ret
0x0001ccb6 : add [rax], al; not rdx; and rax, rdx; movq xmm1, rax; movsd [rdi], xmm1; subsd xmm0, xmm1; ret
0x000957a5 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x00108b88 : add [rax - 0x77], ecx; push rbp; cmp [rax - 0x3c41f0e8], cl; add rsp, 8; pop rbx; pop rbp; ret
0x0014dc4f : add [rax - 0x75], cl; int1 ; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00096e38 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x00095724 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x0011aa91 : lea edx, [rip + 0x762b9]; cdqe ; mov eax, [rdx + rax*8 + 4]; add rsp, 8; pop rbx; pop rbp; ret
0x000ee19b : add [rax], al; add [rsi - 0x70], ah; mov eax, [rsi]; mov [rdi + 0x108], eax; xor eax, eax; ret
0x00088ee8 : sub ecx, ecx; lea r10, [rip + 0x10507f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00134cd6 : add [rax], al; mov eax, [rdi + 0x58]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x000ab287 : push 0; mov rdx, r14; mov rcx, [rsp + 0x20]; mov r9, r15; mov rsi, r13; mov rdi, r12; call rbp
0x0009c678 : add [rdx], ebp; xor r8d, r8d; mov rsi, r13; lea r9, [rsp + 0x28]; lea rcx, [rax + 4]; call rbx
0x00103d8c : pop rbp; sub al, 0; mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x0009c677 : push 1; push 0; xor r8d, r8d; mov rsi, r13; lea r9, [rsp + 0x28]; lea rcx, [rax + 4]; call rbx
0x0001d026 : add [rax], al; not edx; and eax, edx; movd xmm1, eax; movss [rdi], xmm1; subss xmm0, xmm1; ret
0x0009cf0b : push 0; xor r8d, r8d; mov rcx, r12; mov rdx, r14; lea r9, [rsp + 0x28]; mov rdi, rbp; call rbx
0x00068121 : mov edx, [rax]; mov [rax + 8], rdx; mov rdx, [rax + 0x18]; mov [rax + 0x20], rdx; pop rbx; ret
0x001461b3 : mov edx, 1; movsxd rax, ecx; shl rdx, cl; shr rax, 6; or [rdi + rax*8], rdx; xor eax, eax; ret
0x00068120 : mov rdx, [rax]; mov [rax + 8], rdx; mov rdx, [rax + 0x18]; mov [rax + 0x20], rdx; pop rbx; ret
0x00171ec8 : add [rdx - 0xf], ah; dec [rax + 0x6f]; add [rdx - 0xf], esp; dec [rax + 0x6f]; jmp [r10 - 0xf]
0x0001fbec : add [rax], al; add [rax], al; add r13, r15; mov rdx, r12; mov rsi, r13; mov rdi, rbx; call rbp
0x000476ef : dec [rcx + rcx*4 - 0xe]; mov rsi, r11; mov [rbp - 0x500], r11; mov rdi, r13; call [r15 + 0x38]
0x0009a46d : adc [rdi], cl; adc [rdi + 0x20], esi; movups xmm[rdi + 0x30], xmm7; movups xmm[r11], xmm8; ret
0x0013bf0f : add [rax - 0x75], cl; or [r9 + r9*4 + 0x44], r9b; and al, 8; lea rsi, [rsp + 0x10]; call [rax]
0x00097c9b : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret
0x00096d55 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x0009bb28 : lea edx, [rip + 0xc72e2]; test [rax + 0x79], 2; lea rax, [rip + 0x13667]; cmovne rax, rdx; ret
0x000877d8 : sub ecx, ecx; lea r10, [rip + 0x10670f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00138f7a : mov edi, edi; mov [rsp + 0xa8], 1; mov [rsp + 0xb0], 1; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x0016ccb9 : xor edi, esi; add [rax], al; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00000843 : mov rax, [rip + 0x3c938e]; mov rsi, [rsp + 8]; mov edi, [rsp + 0x14]; mov rdx, [rax]; call rbp
0x00094f30 : adc cl, [rcx + 8]; movlpd [rdx + 8], xmm1; xor ah, ah; mov [rdx + 0x10], ah; mov rax, rdi; ret
0x0009c50c : xor eax, eax; mov rsi, rbp; mov rdi, [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx
0x0009bb27 : lea rdx, [rip + 0xc72e2]; test [rax + 0x79], 2; lea rax, [rip + 0x13667]; cmovne rax, rdx; ret
0x00131ec1 : lea ebp, [rax - 1]; mov rax, [r12 + 0xd0]; mov [r12 + 0xa8], ebp; bswap ebp; call [rax + 0x18]
0x000fed1b : lea eax, [rip - 0x74681]; mov [rbx + 0x20], rax; add rsp, 8; mov eax, 2; pop rbx; pop rbp; ret
0x0007dbeb : add [rax], al; add [rax], al; add [rdx - 1], bh; bsf eax, edi; cmove eax, edx; add eax, 1; ret
0x0003818a : mov [rbp - 0x944], ecx; mov [rbp - 0x920], r8b; mov rsi, r15; mov rdi, [rbp - 0x8a8]; call rax
0x0015ffd5 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; ret
0x00134ddf : lea ebp, [rax - 1]; mov rax, [r12 + 0x70]; mov [r12 + 0x48], ebp; bswap ebp; call [rax + 0x18]
0x00097c1a : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret
0x00103b08 : add [rax], al; add [rax], al; nop [rax]; mov rax, [rip + 0x2c6071]; mov eax, [rax + 0x38]; ret
0x0011aa90 : lea rdx, [rip + 0x762b9]; cdqe ; mov eax, [rdx + rax*8 + 4]; add rsp, 8; pop rbx; pop rbp; ret
0x0008b4a8 : sub ecx, ecx; lea r10, [rip + 0x102b3f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00000844 : mov eax, [rip + 0x3c938e]; mov rsi, [rsp + 8]; mov edi, [rsp + 0x14]; mov rdx, [rax]; call rbp
0x0009cc10 : push 0; mov rcx, r13; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x000ed869 : add [rax], al; add [rax], al; nop [rax]; mov eax, [rdi + 4]; mov [rsi], eax; xor eax, eax; ret
0x00138c40 : mov rsi, rsp; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; mov [rsp + 0x20], 5; call [rax + 0x18]
0x00088b6e : add [rax], al; bsf rdx, rdx; movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x00153cd6 : xchg eax, esi; xchg [rax + rax], eax; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096e5c : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x00138f79 : mov rdi, r15; mov [rsp + 0xa8], 1; mov [rsp + 0xb0], 1; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x00097a35 : add [rsi + 0x2e], ah; nop [rax + rax]; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 4]; ret
0x000957a4 : mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x0009d1ea : push 0; xor r8d, r8d; mov rcx, r12; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x001355f5 : add [rax], al; mov eax, [rax + 0x10]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0012bf03 : pop rcx; mov r10, [rsp + 8]; mov ebp, eax; mov rax, [r10 + 8]; mov rdi, r10; call [rax + 0x20]
0x00097cbc : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret
0x000fed1a : lea rax, [rip - 0x74681]; mov [rbx + 0x20], rax; add rsp, 8; mov eax, 2; pop rbx; pop rbp; ret
0x00096d40 : movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret
0x0004481b : mov [rbp - 0x940], r8b; mov rsi, r14; mov [rbp - 0x950], r9b; mov rdi, [rbp - 0x8d0]; call rax
0x00136a05 : mov [rbx + 0xc], eax; mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi + 0x38]; call [rax + 0x20]
0x0009c50b : xor r8d, r8d; mov rsi, rbp; mov rdi, [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx
0x00046f0f : lea edi, [rip + 0xc3b]; add rax, rdi; mov r8, rcx; mov [rbp - 0x4c0], 1; xor esi, esi; jmp rax
0x00152cae : add [rax], al; mov dx, [rsi - 3]; mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x0003d693 : mov [rbx + 0x18], rsi; mov [rcx + rdx*8], rax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x00131dce : add [rax], al; mov eax, [rdi + 0xb4]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x001635a6 : lea rcx, [rdx + rcx - 0x10]; movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; sub eax, edx; ret
0x00092256 : movlps xmm0, [rcx]; movlpd [rdx], xmm0; mov ax, [rcx + 8]; mov [rdx + 8], ax; mov rax, rdi; ret
0x00095808 : mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x001600e1 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 5]; mov [rdx + 5], eax; lea rax, [rdx + 8]; ret
0x00095dca : add esi, ecx; lea r11, [rip + 0xf841d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00097479 : add rsi, rcx; lea r11, [rip + 0xf6f4d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000962db : add [rax], al; add [rax], al; add [rbx + 0x4568a0e], cl; mov [rdi], ecx; mov [rdi + 4], dl; ret
0x00068188 : sbb [rax - 0x3f], cl; clc ; add al, bl; nop ; mov rax, [rdi + 0x28]; sub rax, [rdi + 0x20]; ret
0x00097431 : add esi, ecx; lea r11, [rip + 0xf6f96]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00160101 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 6]; mov [rdx + 6], eax; lea rax, [rdx + 9]; ret
0x00146199 : movsxd rax, ecx; shl rdx, cl; shr rax, 6; test [rdi + rax*8], rdx; setne al; movzx eax, al; ret
0x001600d0 : mov eax, [rcx]; mov [rdx], eax; mov eax, [rcx + 3]; mov [rdx + 3], eax; lea rax, [rdx + 6]; ret
0x00095d81 : add esi, ecx; lea r11, [rip + 0xf8466]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00095da9 : add rsi, rcx; lea r11, [rip + 0xf843d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00097430 : add rsi, rcx; lea r11, [rip + 0xf6f96]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0015bd02 : add [rax - 0x77], ecx; add cl, [rax - 0x75]; or [r8 - 0x77], cl; or [rax - 0x77], cl; clc ; ret
0x00097a80 : mov ecx, [rsi]; mov edx, [rsi + 3]; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 7]; ret
0x00097ac0 : mov rcx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 0xa]; ret
0x00095780 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x00134cec : add [rax], al; add [rax], al; mov rax, [rdx]; bswap eax; mov [rdi + 0x58], eax; mov eax, 1; ret
0x000871d0 : movzx edx, [rsp - 8]; add rax, rdi; mov [rdi], dx; movzx edx, [rsp - 6]; mov [rdi + 2], dl; ret
0x000992e9 : add rsi, rcx; lea r11, [rip + 0xf52b1]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000992c1 : add esi, ecx; lea r11, [rip + 0xf52da]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0001ccd4 : add [rax], al; add [rax], al; add [rax + 0x66d02148], al; movd mm1, rax; movsd [rdi], xmm1; ret
0x00096f17 : push rsi; adc bl, dh; movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x00092235 : movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov al, [rcx + 8]; mov [rdx + 8], al; mov rax, rdi; ret
0x0009219e : add [rax], al; xor ah, ah; mov [rdx + 4], ah; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret
0x00096e15 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x0009cfdd : mov ecx, esp; mov r9, [rsp + 0x10]; mov rsi, [rsp + 0x18]; mov rdx, r14; mov rdi, rbp; call rbx
0x00097cfb : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret
0x0006e87a : adc [rcx], ch; rol bl, 1; nop ; sub edx, [rax + 0x10]; mov eax, [rdi + 0x10]; sub eax, edx; ret
0x0000f5ad : add [rax - 0x75], cl; add [rax - 0x75], cl; movzx eax, [rax + rdi*2 + 0x100]; and eax, esi; ret
0x000872a0 : movzx eax, [rsp - 8]; mov [rdi], ax; movzx eax, [rsp - 6]; mov [rdi + 2], al; mov rax, rdi; ret
0x00095d80 : add rsi, rcx; lea r11, [rip + 0xf8466]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00096e14 : mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x00097ac1 : mov ecx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 0xa]; ret
0x00131ccc : add [rax], al; add [rax], al; movdqu xmm0, xmm[rdi + 8]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x0014dc37 : int1 ; mov rdx, [rsi - 8]; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00063301 : mov rax, [rbx + 0x60]; mov [rbp], rax; mov [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret
0x00160100 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 6]; mov [rdx + 6], eax; lea rax, [rdx + 9]; ret
0x0012c96d : add [rax], al; add bl, dh; movq mm0, [rdi + 0x38]; mov [rsi], 9; movups xmm[rsi + 8], xmm0; ret
0x0013c6a0 : movsx eax, [rsi]; lea rsi, [rsp + 4]; mov [rsp + 4], eax; mov rax, [rdi + 8]; call [rax + 0x48]
0x00065981 : xor eax, eax; mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x00096c40 : mov ecx, [rsi]; mov edx, [rsi + 3]; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x00065b5c : xor r8d, r8d; mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x00092236 : movlps xmm0, [rcx]; movlpd [rdx], xmm0; mov al, [rcx + 8]; mov [rdx + 8], al; mov rax, rdi; ret
0x00134c46 : add [rax], al; add bh, al; sbb [r9], r8b; add [rax], al; add [rdi], cl; adc [rdi + 8], eax; ret
0x0013b477 : adc [rbp + 0x481274c0], al; mov eax, [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call [rax]
0x0014b48d : add [rdi + 0x20], dh; movsxd r9, [r11 + rdx*4]; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9
0x00095daa : add esi, ecx; lea r11, [rip + 0xf843d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00095710 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; ret
0x001355b0 : mov rax, [rdi + 0x90]; mov eax, [rax]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0009747a : add esi, ecx; lea r11, [rip + 0xf6f4d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00099309 : add rsi, rcx; lea r11, [rip + 0xf5291]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00097d77 : push rsi; adc bl, dh; movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret
0x00023559 : movzx eax, [rdi + 0xc]; mov [rsi + 0xc], ax; mov eax, 1; mov [rsi + 0xe], ax; xor eax, eax; ret
0x00092298 : add [rsi + 0xf], esp; adc eax, [rdx]; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x00097c74 : mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret
0x00142c1a : add al, ch; and [rdx + 0xabfffed], dh; add [rax], al; add al, ch; or eax, r15d; jmp [rsi + 0xf]
0x00097459 : add rsi, rcx; lea r11, [rip + 0xf6f6d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00097cdb : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret
0x0009cd64 : mov rcx, r15; mov rdx, [rsp + 0x10]; mov rsi, [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx
0x00064ea1 : mov rdi, rbp; push [rax + 0x38]; mov rcx, [rbx + 0x10]; lea r8, [rsp + 0x10]; call [rbp + 0x18]
0x0009745a : add esi, ecx; lea r11, [rip + 0xf6f6d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00096e7b : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x00065a63 : xor edx, edx; xor r8d, r8d; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx
0x0014ba1a : pop rdi; sal [rdx + 0xd], 1; movaps xmm[rdi - 0x20], xmm4; movaps xmm[rdi - 0x10], xmm5; jmp r9
0x0016420d : add [rax], r8b; bsf rdx, rdx; movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x00063302 : mov eax, [rbx + 0x60]; mov [rbp], rax; mov [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret
0x001600e0 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 5]; mov [rdx + 5], eax; lea rax, [rdx + 8]; ret
0x00097c75 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret
0x00136909 : mov rax, [rdi + 0x38]; call [rax + 0x20]; mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x20]
0x0009cfdc : mov rcx, r12; mov r9, [rsp + 0x10]; mov rsi, [rsp + 0x18]; mov rdx, r14; mov rdi, rbp; call rbx
0x0013b30e : add [rax], al; mov eax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x00063150 : add [rax - 0x39], cl; push rax; add [rax], al; add [rax], al; mov [rax + 0x48], 0; pop rbx; ret
0x0013731f : call [rax]; mov ebp, eax; mov rdi, rbx; pop rax; mov rax, [rbx + 8]; pop rdx; call [rax + 0x20]
0x0012e029 : add ecx, [rax - 0x75]; cmp ecx, [rbp + 1]; std ; sub edx, r15d; mov rsi, r13; call [rbx + 0x40]
0x00065980 : xor r8d, r8d; mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x0014de70 : add [rdi + 0x1d], dh; movsxd r9, [r11 + rdx*4]; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9
0x0015ffd4 : add [rsi + 0x2e], spl; nop [rax + rax]; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; ret
0x00065b5d : xor eax, eax; mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x00138f8a : mov al, 0; add [rax], al; add [rax], eax; add [rax], al; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x00131bd9 : add [rax], al; add [rdi], cl; adc [rsi], eax; mov rax, [rax + 0xa0]; mov [rsi + 0x10], rax; ret
0x001355d5 : xchg eax, edi; nop ; add [rax], al; add [rbx - 0x37f0fe18], al; mov [rdx], eax; mov eax, 1; ret
0x000992c0 : add rsi, rcx; lea r11, [rip + 0xf52da]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00097bf4 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret
0x000630d2 : adc [rax - 0x77], cl; push rax; sub [rax - 0x77], cl; push rax; sbb [rcx + 0x5bc0310b], cl; ret
0x000957e8 : mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x00092278 : add [rsi + 0xf], esp; adc eax, [rdx]; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x000992ea : add esi, ecx; lea r11, [rip + 0xf52b1]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00068078 : xor [rax - 0x3f], cl; clc ; add al, bl; nop ; mov rax, [rdi + 0x40]; sub rax, [rdi + 0x38]; ret
0x00092255 : movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov ax, [rcx + 8]; mov [rdx + 8], ax; mov rax, rdi; ret
0x0009cd65 : mov ecx, edi; mov rdx, [rsp + 0x10]; mov rsi, [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx
0x00136990 : add [rax], al; movdqa xmm0, xmm[rip + 0x64716]; movaps xmm[rsp + 0x20], xmm0; call [rax + 0x28]
0x00136ca1 : add [rdx + 0x1e], ch; mov r9, rbx; lea r8, [rip - 0x707e]; mov esi, 9; mov rdi, rax; call [r10]
0x00096e9b : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x0015bca0 : add [rax], al; nop [rax]; nop cs:[rax + rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x00177bd9 : add [rbp - 0x7b], cl; dec [rdi]; test ah, dl; add eax, [rax]; add [rcx], dh; dec [rax + 9]; ret
0x0009930a : add esi, ecx; lea r11, [rip + 0xf5291]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0012cdc4 : add [rax + 0x63], cl; sbb [r11 + 0x127703f8], r8b; lea rdx, [rip + 0x29cabb]; jmp [rdx + rax*8]
0x00063dfa : sub [rax], al; add [rax], al; mov [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call [rbp + 0x20]
0x001355b1 : mov eax, [rdi + 0x90]; mov eax, [rax]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x00068f19 : add [rax], al; add [rax], al; add [rsi - 0x70], ah; mov eax, [rdi]; shr eax, 4; and eax, 1; ret
0x00007286 : add [rax], al; add [rax - 0x77], cl; xor [rdi], cl; test [rdi + rdi*8 - 1], al; jmp [rsi + 0xf]
0x000aff6f : add [rax], al; add [rbx + 0x415b01c7], al; mov [rbx + 0xc], edi; pop rbp; pop r12; pop r14; ret
0x0013690a : mov eax, [rdi + 0x38]; call [rax + 0x20]; mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x20]
0x00064ea2 : mov edi, ebp; push [rax + 0x38]; mov rcx, [rbx + 0x10]; lea r8, [rsp + 0x10]; call [rbp + 0x18]
0x00096d94 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x00095dc9 : add rsi, rcx; lea r11, [rip + 0xf841d]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000cebdf : add [rbx - 0x3c0cb3b9], cl; nop [rax]; mov eax, [rdi + 0x4c]; add rsp, 8; pop rbx; pop rbp; ret
0x0013c720 : movzx eax, [rsi]; lea rsi, [rsp + 4]; mov [rsp + 4], eax; mov rax, [rdi + 8]; call [rax + 0x48]
0x00018cc4 : push rax; adc [rax - 0x7b], cl; sal [rdi + rbp - 0x75], cl; or al, [rbx - 0x7bf0fd07]; ret 0x18
0x00131cb4 : add [rax], al; add [rax], al; movdqu xmm0, xmm[rdx]; mov eax, 1; movups xmm[rdi + 8], xmm0; ret
0x00099638 : add ebx, eax; nop [rax + rax]; mov dx, [rsi]; mov [rdi], dx; xor ch, ch; mov [rdi + 2], ch; ret
0x00047925 : movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x21c]; add rax, rdi; jmp rax
0x0014cb4f : add rsi, rdx; lea r11, [rip + 0x4f097]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153cd0 : sub rsi, rdx; lea r11, [rip + 0x48796]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150bf8 : sub esi, edx; lea r11, [rip + 0x4b36f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ee8f : add rsi, rdx; lea r11, [rip + 0x4cf17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154d51 : sub esi, edx; lea r11, [rip + 0x47716]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e410 : add esi, edx; lea r11, [rip + 0x4d997]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000018ac : add [rcx + rcx*4 - 0x1f], cl; push 0; mov rdx, rbp; mov rsi, [rsp + 0x18]; mov r9, r13; call rbx
0x00005045 : push rax; push r14; mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r12
0x00154b14 : add esi, edx; lea r11, [rip + 0x47b93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012c563 : add [rax], al; xor eax, eax; mov rsi, [rsp]; mov rdi, [rsp + 0x10]; mov rcx, [rsp + 8]; call rcx
0x0015259b : sub edi, edx; lea r11, [rip + 0x499cc]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138eea : mov [rsp + 0xc8], edx; mov rsi, r13; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xd0], 2; call rax
0x00154efc : add edi, edx; lea r11, [rip + 0x477ab]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c8af : add rsi, rdx; lea r11, [rip + 0x4f337]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c0d0 : add esi, edx; lea r11, [rip + 0x4fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153656 : add rdi, rdx; lea r11, [rip + 0x49050]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001542d1 : sub esi, edx; lea r11, [rip + 0x48196]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f520 : add esi, edx; lea r11, [rip + 0x4c887]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153c13 : add rsi, rdx; lea r11, [rip + 0x48a93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001518b4 : add esi, edx; lea r11, [rip + 0x4a8f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151434 : add esi, edx; lea r11, [rip + 0x4ad73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151433 : add rsi, rdx; lea r11, [rip + 0x4ad73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012da7e : push rdi; and r8d, 3; mov rdi, [r15]; add r14, r8; sub edx, r8d; mov rsi, r14; call [r15 + 0x40]
0x001507fa : add edi, edx; lea r11, [rip + 0x4b5ad]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000055cd : push rax; push rbx; mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x0014ebf0 : add esi, edx; lea r11, [rip + 0x4d1b7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150bf7 : sub rsi, rdx; lea r11, [rip + 0x4b36f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014eaa0 : add esi, edx; lea r11, [rip + 0x4d307]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152034 : add esi, edx; lea r11, [rip + 0x4a173]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096b3b : sub rdx, rcx; lea r11, [rip + 0xf777f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00087208 : mov edx, [rsp + 8]; add rax, rdi; mov [rdi], edx; movzx edx, [rsp + 0xc]; mov [rdi + 4], dx; ret
0x0014c21f : add rsi, rdx; lea r11, [rip + 0x4f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151a34 : add esi, edx; lea r11, [rip + 0x4a773]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00047813 : add [rax], al; add rax, rdi; mov r8, rcx; mov [rbp - 0x4d8], 1; mov [rbp - 0x4f0], 0x20; jmp rax
0x00153e51 : sub esi, edx; lea r11, [rip + 0x48616]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e149 : add rsi, rdx; lea r11, [rip + 0x4dc5d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000f5ef : add bl, al; nop [rax + rax]; nop cs:[rax + rax]; mov rax, [rip + 0x3ba649]; add rax, fs:[0]; ret
0x00172157 : add [rax], al; vmovdqu64 zmm[rdi + rdx - 0x40], zmm0; vmovdqu64 zmm[rdi], zmm0; vzeroupper ; ret
0x000478c7 : movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x27a]; add rax, rdi; jmp rax
0x0009966c : add [rax], al; add [rax], al; mov edx, [rsi]; mov [rdi], edx; xor ch, ch; mov [rdi + 4], ch; ret
0x000386f6 : movzx eax, [rdx + rax]; lea rdx, [rip - 0x2a5]; movsxd rax, [rsi + rax*4]; add rax, rdx; jmp rax
0x0014e950 : add esi, edx; lea r11, [rip + 0x4d457]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b779 : add rsi, rdx; lea r11, [rip + 0x5046d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00005c34 : push rax; push r13; mov r9, [rsp + 0x20]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x00150ef1 : sub esi, edx; lea r11, [rip + 0x4b076]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001550af : sub edi, edx; lea r11, [rip + 0x473b8]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153793 : add rsi, rdx; lea r11, [rip + 0x48f13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f12f : add rsi, rdx; lea r11, [rip + 0x4cc77]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154150 : sub rsi, rdx; lea r11, [rip + 0x48316]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00043a05 : add [rax - 0x73], cl; add [rbx - 0x76b7fe3d], rax; sub [r8 + 0x468b4102], r9b; add al, 0x39; ret
0x00103213 : add [rax], 0; add [rax], al; mov rax, [rip + 0x2ca049]; mov rax, [rax + 0x18]; add [rax], 1; ret
0x00151371 : sub esi, edx; lea r11, [rip + 0x4abf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009916b : sub rdx, rcx; lea r11, [rip + 0xf53af]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00154693 : add rsi, rdx; lea r11, [rip + 0x48013]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151971 : sub esi, edx; lea r11, [rip + 0x4a5f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151df1 : sub esi, edx; lea r11, [rip + 0x4a176]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153850 : sub rsi, rdx; lea r11, [rip + 0x48c16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e14a : add esi, edx; lea r11, [rip + 0x4dc5d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b68b : add edi, edx; lea r11, [rip + 0x5055c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151af1 : sub esi, edx; lea r11, [rip + 0x4a476]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001545d0 : sub rsi, rdx; lea r11, [rip + 0x47e96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151df0 : sub rsi, rdx; lea r11, [rip + 0x4a176]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151eb4 : add esi, edx; lea r11, [rip + 0x4a2f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bb8f : add rsi, rdx; lea r11, [rip + 0x50057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f51f : add rsi, rdx; lea r11, [rip + 0x4c887]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153794 : add esi, edx; lea r11, [rip + 0x48f13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c610 : add esi, edx; lea r11, [rip + 0x4f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154450 : sub rsi, rdx; lea r11, [rip + 0x48016]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003f6f6 : mov rax, [rax + 0x38]; mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, [rbp - 0xc0]; call rax
0x0004a531 : mov rcx, [rbp - 0x600]; mov r11, [rbp - 0x630]; movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x00150b77 : add edi, edx; lea r11, [rip + 0x4b630]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001514f0 : sub rsi, rdx; lea r11, [rip + 0x4aa76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153c14 : add esi, edx; lea r11, [rip + 0x48a93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000999a8 : adc bl, dh; movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; xor ch, ch; mov [rdi + 0x20], ch; ret
0x00151134 : add esi, edx; lea r11, [rip + 0x4b073]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000f5cf : add bl, al; nop [rax + rax]; nop cs:[rax + rax]; mov rax, [rip + 0x3ba621]; add rax, fs:[0]; ret
0x0014e05b : add edi, edx; lea r11, [rip + 0x4dd4c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152033 : add rsi, rdx; lea r11, [rip + 0x4a173]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001521b3 : add rsi, rdx; lea r11, [rip + 0x49ff3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ee90 : add esi, edx; lea r11, [rip + 0x4cf17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e7ff : add rsi, rdx; lea r11, [rip + 0x4d5a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151f70 : sub rsi, rdx; lea r11, [rip + 0x49ff6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ba3f : add rsi, rdx; lea r11, [rip + 0x501a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b68a : add rdi, rdx; lea r11, [rip + 0x5055c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000e4be8 : mov edx, [rbp - 0x1e0]; add rax, rbx; mov rdi, [rbp - 0x190]; push rax; mov rcx, [r14]; call r12
0x0014e800 : add esi, edx; lea r11, [rip + 0x4d5a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00004a6b : push rax; push r12; mov r9, [rsp + 0x40]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call rbx
0x00152271 : sub esi, edx; lea r11, [rip + 0x49cf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150ef0 : sub rsi, rdx; lea r11, [rip + 0x4b076]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014be2f : add rsi, rdx; lea r11, [rip + 0x4fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154750 : sub rsi, rdx; lea r11, [rip + 0x47d16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154751 : sub esi, edx; lea r11, [rip + 0x47d16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c8b0 : add esi, edx; lea r11, [rip + 0x4f337]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001521b4 : add esi, edx; lea r11, [rip + 0x49ff3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013bd28 : mov eax, [rsi]; lea rsi, [rsp + 0x10]; mov [rsp + 0x10], rax; mov rax, [rdi + 8]; call [rax + 8]
0x001539d1 : sub esi, edx; lea r11, [rip + 0x48a96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001520f0 : sub rsi, rdx; lea r11, [rip + 0x49e76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154151 : sub esi, edx; lea r11, [rip + 0x48316]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001520f1 : sub esi, edx; lea r11, [rip + 0x49e76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151af0 : sub rsi, rdx; lea r11, [rip + 0x4a476]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ea9f : add rsi, rdx; lea r11, [rip + 0x4d307]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e6b0 : add esi, edx; lea r11, [rip + 0x4d6f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00065038 : mov eax, [rsp + 0x10]; mov r8, [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call [rax + 8]
0x0014f3d0 : add esi, edx; lea r11, [rip + 0x4c9d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f3cf : add rsi, rdx; lea r11, [rip + 0x4c9d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c0cf : add rsi, rdx; lea r11, [rip + 0x4fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154094 : add esi, edx; lea r11, [rip + 0x48613]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e55f : add rsi, rdx; lea r11, [rip + 0x4d847]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c4c0 : add esi, edx; lea r11, [rip + 0x4f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bf80 : add esi, edx; lea r11, [rip + 0x4fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001354a5 : movq mm0, [rax + 0x40]; movups xmm[rsi], xmm0; mov rax, [rax + 0x50]; mov [rsi + 0x10], rax; ret
0x000987eb : sub rdx, rcx; lea r11, [rip + 0xf5caf]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014df96 : add edi, edx; lea r11, [rip + 0x4de11]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153851 : sub esi, edx; lea r11, [rip + 0x48c16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154513 : add rsi, rdx; lea r11, [rip + 0x48193]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0001f895 : add [rax], al; mov [rsp + 8], r11; nop [rax]; mov rsi, r13; mov rdi, r14; mov rdx, r12; call rbp
0x00151670 : sub rsi, rdx; lea r11, [rip + 0x4a8f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c760 : add esi, edx; lea r11, [rip + 0x4f487]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014efe0 : add esi, edx; lea r11, [rip + 0x4cdc7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006ac73 : add [rax], al; add [rax - 0x39], cl; adc [r8], al; add [rax], al; add [rbp + 0x58d48c0], al; ret
0x00153914 : add esi, edx; lea r11, [rip + 0x48d93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001514f1 : sub esi, edx; lea r11, [rip + 0x4aa76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001517f0 : sub rsi, rdx; lea r11, [rip + 0x4a776]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152407 : add rdi, rdx; lea r11, [rip + 0x49d9f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154efb : add rdi, rdx; lea r11, [rip + 0x477ab]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009916c : sub edx, ecx; lea r11, [rip + 0xf53af]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00153b50 : sub rsi, rdx; lea r11, [rip + 0x48916]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153d94 : add esi, edx; lea r11, [rip + 0x48913]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00131bd5 : movq mm0, [rax + 0x90]; movups xmm[rsi], xmm0; mov rax, [rax + 0xa0]; mov [rsi + 0x10], rax; ret
0x0009728c : sub edx, ecx; lea r11, [rip + 0xf70bb]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014f66f : add rsi, rdx; lea r11, [rip + 0x4c737]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014be30 : add esi, edx; lea r11, [rip + 0x4fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150e34 : add esi, edx; lea r11, [rip + 0x4b373]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150e33 : add rsi, rdx; lea r11, [rip + 0x4b373]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b5c6 : add edi, edx; lea r11, [rip + 0x50621]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154bd0 : sub rsi, rdx; lea r11, [rip + 0x47896]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00169d9b : add eax, [rax]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0009553b : sub rdx, rcx; lea r11, [rip + 0xf8bab]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014c75f : add rsi, rdx; lea r11, [rip + 0x4f487]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151733 : add rsi, rdx; lea r11, [rip + 0x4aa73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c9ff : add rsi, rdx; lea r11, [rip + 0x4f1e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001539d0 : sub rsi, rdx; lea r11, [rip + 0x48a96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006e879 : adc [r9], r13b; rol bl, 1; nop ; sub edx, [rax + 0x10]; mov eax, [rdi + 0x10]; sub eax, edx; ret
0x001534fa : add rdi, rdx; lea r11, [rip + 0x491ac]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151071 : sub esi, edx; lea r11, [rip + 0x4aef6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00072ed3 : mov [rsp + 0x30], dl; mov [rsp + 0x28], rsi; mov [rsp + 0x18], r11; mov [rsp + 8], rax; call rcx
0x001511f1 : sub esi, edx; lea r11, [rip + 0x4ad76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000d0459 : xchg eax, ebx; test [rbx], 0; movzx r12d, r12b; movsxd rax, [rsi + r12*4]; add rax, rsi; jmp rax
0x001536d8 : sub esi, edx; lea r11, [rip + 0x48d8f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153b51 : sub esi, edx; lea r11, [rip + 0x48916]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001534fb : add edi, edx; lea r11, [rip + 0x491ac]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009553c : sub edx, ecx; lea r11, [rip + 0xf8bab]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014c60f : add rsi, rdx; lea r11, [rip + 0x4f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c348 : pop rdi; sal [rdx + 0x14], 1; movaps xmm[rdi - 0x20], xmm4; movaps xmm[rdi - 0x10], xmm5; jmp r9
0x0007bd75 : mov [rbx + 0x10], esp; mov [rbx + 0x20], rax; mov [rbx + 8], rsi; pop rbx; pop rbp; pop r12; ret
0x0014bb90 : add esi, edx; lea r11, [rip + 0x50057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151d35 : add esi, edx; lea r11, [rip + 0x4a472]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000f460 : mov rax, [rsi + 0x68]; movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x00153913 : add rsi, rdx; lea r11, [rip + 0x48d93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153fd0 : sub rsi, rdx; lea r11, [rip + 0x48496]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e6af : add rsi, rdx; lea r11, [rip + 0x4d6f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154451 : sub esi, edx; lea r11, [rip + 0x48016]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153f14 : add esi, edx; lea r11, [rip + 0x48793]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001512b3 : add rsi, rdx; lea r11, [rip + 0x4aef3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015259a : sub rdi, rdx; lea r11, [rip + 0x499cc]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003f6f7 : mov eax, [rax + 0x38]; mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, [rbp - 0xc0]; call rax
0x00134b75 : movq mm0, [rax + 0x30]; movups xmm[rsi], xmm0; mov rax, [rax + 0x40]; mov [rsi + 0x10], rax; ret
0x0014efdf : add rsi, rdx; lea r11, [rip + 0x4cdc7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012b9c9 : add [rax], al; lea r8, [rip + 0x17e]; mov esi, 4; mov rdi, rbp; lea r9, [rsp + 0x20]; call [rax]
0x00153fd1 : sub esi, edx; lea r11, [rip + 0x48496]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001548d0 : sub rsi, rdx; lea r11, [rip + 0x47b96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154214 : add esi, edx; lea r11, [rip + 0x48493]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00044d6f : mov [rbp - 0x918], ecx; movsxd rax, [rax + rdx*4]; lea rdx, [rip - 0x2fe]; add rax, rdx; jmp rax
0x00153e50 : sub rsi, rdx; lea r11, [rip + 0x48616]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002307c : add ecx, [rcx + rcx*4 - 0x3f]; mov r8, rdx; mov [rdi + 8], rcx; xor eax, eax; mov [rdi], r8; ret
0x00151370 : sub rsi, rdx; lea r11, [rip + 0x4abf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001512b4 : add esi, edx; lea r11, [rip + 0x4aef3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150d71 : sub esi, edx; lea r11, [rip + 0x4b1f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000f461 : mov eax, [rsi + 0x68]; movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x0006be66 : add es:[rax], eax; add [rax - 0x75], cl; push rbx; mov rdi, rbx; sub rdx, rsi; call [r13 + 0x70]
0x0014df95 : add rdi, rdx; lea r11, [rip + 0x4de11]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f670 : add esi, edx; lea r11, [rip + 0x4c737]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00047038 : dec [rcx + rcx*4 - 0x3a]; mov rdi, r13; sub r14, r8; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x00151d34 : add rsi, rdx; lea r11, [rip + 0x4a472]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ca00 : add esi, edx; lea r11, [rip + 0x4f1e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154a51 : sub esi, edx; lea r11, [rip + 0x47a16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154c94 : add esi, edx; lea r11, [rip + 0x47a13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150a04 : add rdi, rdx; lea r11, [rip + 0x4b7a2]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bf7f : add rsi, rdx; lea r11, [rip + 0x4fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000f420 : mov rax, [rsi + 0x68]; movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x0009967f : add [rbx + 0x4568a0e], cl; mov [rdi], ecx; mov [rdi + 4], dl; xor ch, ch; mov [rdi + 5], ch; ret
0x00003fb8 : push rax; push rbx; mov r9, [rsp + 0x30]; mov rsi, [rsp + 0x28]; mov rdi, [rsp + 0x20]; call r15
0x0014e40f : add rsi, rdx; lea r11, [rip + 0x4d997]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000dde3 : add [rdi + rdi*8], bh; cmovne edx, eax; lea rax, [rip + 0x3bdac0]; mov [rip + 0x3bdb17], dl; ret
0x00103311 : add al, bl; nop [rax + rax]; mov rax, [rip + 0x2c9f49]; mov rax, [rax + 0x18]; add [rax], 1; ret
0x00150fb4 : add esi, edx; lea r11, [rip + 0x4b1f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c220 : add esi, edx; lea r11, [rip + 0x4f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004786f : movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x2d2]; add rax, rdi; jmp rax
0x000e071f : add [rbp - 0x7fe38a2e], al; cmp cl, bh; mov [rsi], 0; mov [rsi + 0x10], 0; mov [rsi + 8], 0; ret
0x0007bd74 : mov [rbx + 0x10], r12; mov [rbx + 0x20], rax; mov [rbx + 8], rsi; pop rbx; pop rbp; pop r12; ret
0x00154393 : add rsi, rdx; lea r11, [rip + 0x48313]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009728b : sub rdx, rcx; lea r11, [rip + 0xf70bb]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0004a532 : mov ecx, [rbp - 0x600]; mov r11, [rbp - 0x630]; movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x00153657 : add edi, edx; lea r11, [rip + 0x49050]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154694 : add esi, edx; lea r11, [rip + 0x48013]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001511f0 : sub rsi, rdx; lea r11, [rip + 0x4ad76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152408 : add edi, edx; lea r11, [rip + 0x49d9f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150cb4 : add esi, edx; lea r11, [rip + 0x4b4f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cb50 : add esi, edx; lea r11, [rip + 0x4f097]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154093 : add rsi, rdx; lea r11, [rip + 0x48613]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cca0 : add esi, edx; lea r11, [rip + 0x4ef47]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006d86f : add [rax], al; add [rax], al; add [rax - 0x39], cl; or [rax], al; add [rax], al; add bl, dh; ret
0x00151f71 : sub esi, edx; lea r11, [rip + 0x49ff6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154b13 : add rsi, rdx; lea r11, [rip + 0x47b93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000e4be7 : mov rdx, [rbp - 0x1e0]; add rax, rbx; mov rdi, [rbp - 0x190]; push rax; mov rcx, [r14]; call r12
0x00154815 : add esi, edx; lea r11, [rip + 0x47e92]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154394 : add esi, edx; lea r11, [rip + 0x48313]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001542d0 : sub rsi, rdx; lea r11, [rip + 0x48196]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ebef : add rsi, rdx; lea r11, [rip + 0x4d1b7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154994 : add esi, edx; lea r11, [rip + 0x47d13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154814 : add rsi, rdx; lea r11, [rip + 0x47e92]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00102eb5 : mov rcx, [r8]; mov [rdx + 0x10], rcx; mov [r8], rax; nop ; mov [rip + 0x2c71c5], 0; pop rbp; ret
0x00047de6 : lea rdi, [rip - 0x29d]; add rax, rdi; mov r8, rcx; mov [rbp - 0x510], 1; xor r15d, r15d; jmp rax
0x00150a05 : add edi, edx; lea r11, [rip + 0x4b7a2]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000f6802 : mov eax, [rip + 0x2d661c]; mov [rip + 0x2d6646], eax; lea rax, [rip + 0x2d6613]; add rsp, 8; ret
0x00151133 : add rsi, rdx; lea r11, [rip + 0x4b073]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e560 : add esi, edx; lea r11, [rip + 0x4d847]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012e8d8 : add [rax], al; add [rax - 0x75], cl; cmp ecx, [rcx - 0xdd6b7ff]; mov rbp, rdx; call [rbx + 0x10]
0x00154514 : add esi, edx; lea r11, [rip + 0x48193]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001517f1 : sub esi, edx; lea r11, [rip + 0x4a776]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154213 : add rsi, rdx; lea r11, [rip + 0x48493]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000f40e : add [rax], al; mov rax, [rsi + 0x68]; movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x00151734 : add esi, edx; lea r11, [rip + 0x4aa73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154a50 : sub rsi, rdx; lea r11, [rip + 0x47a16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f27f : add rsi, rdx; lea r11, [rip + 0x4cb27]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154bd1 : sub esi, edx; lea r11, [rip + 0x47896]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00008f78 : push rax; push r13; mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call rbx
0x00064e04 : add [rax - 0x77], cl; fistp [rbx + 0x48]; mov eax, [rax + 0x130]; mov rax, [rax + 0x20]; jmp rax
0x00047de7 : lea edi, [rip - 0x29d]; add rax, rdi; mov r8, rcx; mov [rbp - 0x510], 1; xor r15d, r15d; jmp rax
0x00095bec : sub edx, ecx; lea r11, [rip + 0xf857b]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0000f421 : mov eax, [rsi + 0x68]; movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x00151970 : sub rsi, rdx; lea r11, [rip + 0x4a5f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00052aeb : mov r9, [rbp - 0x598]; mov r11d, [rbp - 0x5a0]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x00095beb : sub rdx, rcx; lea r11, [rip + 0xf857b]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00151bb4 : add esi, edx; lea r11, [rip + 0x4a5f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00065037 : mov rax, [rsp + 0x10]; mov r8, [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call [rax + 8]
0x0012898e : add [rax], al; mov rdx, [r15]; mov [rbx], rax; mov r8, rbp; mov rcx, r14; mov rdi, r13; call r12
0x00150fb3 : add rsi, rdx; lea r11, [rip + 0x4b1f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154c93 : add rsi, rdx; lea r11, [rip + 0x47a13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ba40 : add esi, edx; lea r11, [rip + 0x501a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150b76 : add rdi, rdx; lea r11, [rip + 0x4b630]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151eb3 : add rsi, rdx; lea r11, [rip + 0x4a2f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001515b4 : add esi, edx; lea r11, [rip + 0x4abf3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153a93 : add rsi, rdx; lea r11, [rip + 0x48c13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e94f : add rsi, rdx; lea r11, [rip + 0x4d457]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153d93 : add rsi, rdx; lea r11, [rip + 0x48913]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151070 : sub rsi, rdx; lea r11, [rip + 0x4aef6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013bbc0 : mov eax, [rdx]; lea rsi, [rsp + 0x10]; mov [rsp + 0x10], rax; mov rax, [rdi + 8]; call [rax + 8]
0x00154993 : add rsi, rdx; lea r11, [rip + 0x47d13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b77a : add esi, edx; lea r11, [rip + 0x5046d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151bb3 : add rsi, rdx; lea r11, [rip + 0x4a5f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151c70 : sub rsi, rdx; lea r11, [rip + 0x4a2f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013b30d : add [rax], r8b; mov eax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x00151c71 : sub esi, edx; lea r11, [rip + 0x4a2f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151671 : sub esi, edx; lea r11, [rip + 0x4a8f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00131d22 : add [rcx - 0x48f097be], cl; xchg [rax + 0x66000000], ecx; mov [rdx + 0x6c], eax; mov eax, 1; ret
0x0000f500 : mov rax, [rsi + 0x68]; movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x0014c4bf : add rsi, rdx; lea r11, [rip + 0x4f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00007859 : push rax; push rbx; mov r9, [rsp + 0x30]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x000086fa : push rax; push rbp; mov r9, [rsp + 0x20]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x001548d1 : sub esi, edx; lea r11, [rip + 0x47b96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000067cd : push rax; push rbx; mov r9, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call r15
0x001507f9 : add rdi, rdx; lea r11, [rip + 0x4b5ad]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151a33 : add rsi, rdx; lea r11, [rip + 0x4a773]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f280 : add esi, edx; lea r11, [rip + 0x4cb27]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0011feec : add [rax], al; add [rax], al; add [rax + 0x63], cl; ror [rax + 1], 1; xlatb ; mov [r9], rdi; ret
0x0014cc9f : add rsi, rdx; lea r11, [rip + 0x4ef47]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150cb3 : add rsi, rdx; lea r11, [rip + 0x4b4f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f130 : add esi, edx; lea r11, [rip + 0x4cc77]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154d50 : sub rsi, rdx; lea r11, [rip + 0x47716]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00047989 : movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x1b8]; add rax, rdi; jmp rax
0x00153a94 : add esi, edx; lea r11, [rip + 0x48c13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001550ae : sub rdi, rdx; lea r11, [rip + 0x473b8]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153cd1 : sub esi, edx; lea r11, [rip + 0x48796]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e05a : add rdi, rdx; lea r11, [rip + 0x4dd4c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150d70 : sub rsi, rdx; lea r11, [rip + 0x4b1f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000479d7 : movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x16a]; add rax, rdi; jmp rax
0x0014bcdf : add rsi, rdx; lea r11, [rip + 0x4ff07]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001515b3 : add rsi, rdx; lea r11, [rip + 0x4abf3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001536d7 : sub rsi, rdx; lea r11, [rip + 0x48d8f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000987ec : sub edx, ecx; lea r11, [rip + 0xf5caf]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00152270 : sub rsi, rdx; lea r11, [rip + 0x49cf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001545d1 : sub esi, edx; lea r11, [rip + 0x47e96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b5c5 : add rdi, rdx; lea r11, [rip + 0x50621]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001518b3 : add rsi, rdx; lea r11, [rip + 0x4a8f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000435f0 : push rax; add [rax - 0x77], ecx; push rbp; sub dh, al; add [rip - 0x11d17], ch; jmp [rsi - 0x70]
0x00138ee9 : mov [rsp + 0xc8], rdx; mov rsi, r13; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xd0], 2; call rax
0x0011fe55 : mov [rcx], dl; movzx ecx, [rax + 1]; add rax, 2; mov [r8], ecx; mov [r9], rax; mov eax, edx; ret
0x0000f501 : mov eax, [rsi + 0x68]; movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x0014bce0 : add esi, edx; lea r11, [rip + 0x4ff07]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153f13 : add rsi, rdx; lea r11, [rip + 0x48793]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096b3c : sub edx, ecx; lea r11, [rip + 0xf777f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00160141 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; lea rax, [rdx + 0xb]; ret
0x0005e2b9 : add [rax], al; add [rbp + 0x48117ec0], al; mov eax, [rbx + 0x98]; mov rdi, rax; call [rax + 0x20]
0x00133457 : mov eax, 8; mov [rsp + 0xc], eax; mov rax, [rbp + 8]; mov esi, 8; mov rdi, rbp; call [rax + 0x30]
0x0005d741 : add [rax], al; add [rbp + 0x48247ec0], al; mov eax, [rbx + 0x98]; mov rdi, rax; call [rax + 0x20]
0x00095cbe : add [rax], al; lea r11, [rip + 0xf84a9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0012e72d : push rbp; and rbx, 3; mov rdi, [r13]; add r14, rbx; sub edx, ebx; mov rsi, r14; call [r13 + 0x40]
0x00087209 : push rsp; and al, 8; add rax, rdi; mov [rdi], edx; movzx edx, [rsp + 0xc]; mov [rdi + 4], dx; ret
0x00052aec : mov ecx, [rbp - 0x598]; mov r11d, [rbp - 0x5a0]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x000eb449 : mov eax, [rsp + 0x48]; lea rdx, [rip + 0xa5504]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0009a5de : add [rax], al; mov rcx, rdx; movzx eax, sil; mov rdx, rdi; rep stosb [rdi], al; mov rax, rdx; ret
0x00047036 : mov r14, r15; mov rsi, r8; mov rdi, r13; sub r14, r8; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x0005f01b : add [rax], al; add [rax], al; add [rdx + 0x10], bh; mov rsi, r14; mov rdi, rbp; call [rax + 0x38]
0x00103214 : add [rax], al; add [rax], al; mov rax, [rip + 0x2ca049]; mov rax, [rax + 0x18]; add [rax], 1; ret
0x0006f57d : add [rax], al; add [rax], al; mov [rdi + 0x24], ebp; mov [rdi + 0x10], eax; pop rbx; pop rbp; ret
0x000eb27f : mov eax, [rsp + 0x48]; lea rdx, [rip + 0xa560e]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00160161 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 5]; mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x0003a24d : mov r13, [rbp - 0x4c0]; mov rsi, rbx; mov rdi, r14; sub r13, rbx; mov rdx, r13; call [r15 + 0x38]
0x00160181 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x000488f5 : add [rax], al; mov [rbp - 0x4d8], r8; mov rdx, r14; mov rsi, r11; mov rdi, r13; call [r15 + 0x38]
0x00145118 : lea rcx, [rsi + 0x388]; call [rax + 0x178]; mov [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret
0x00133475 : add [rax], al; add [rax - 0x75], cl; or [r9 + rcx*4 - 0x1a], r9b; mov rdi, rbp; call [rax + 0x48]
0x000996af : add [rbx + 0x3568b0e], cl; mov [rdi], ecx; mov [rdi + 3], edx; xor ch, ch; mov [rdi + 7], ch; ret
0x00097ae1 : mov ecx, [rsi]; mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; lea rax, [rdi + 0xb]; ret
0x0012ebe5 : add [rbp + 0x738d48c0], al; sbb [rbp - 0x4a], dh; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x00047037 : mov esi, edi; mov rsi, r8; mov rdi, r13; sub r14, r8; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x0012deed : push rbx; and rcx, 3; mov rdi, [rbx]; add r13, rcx; sub edx, ecx; mov rsi, r13; call [rbx + 0x40]
0x001601a1 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x00096c90 : mov rcx, [rsi]; mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; lea rax, [rdi + 0xa]; ret
0x00097b20 : mov rcx, [rsi]; mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret
0x0010ee0a : add bh, [rax + 0x40000]; test rdx, rdx; cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret
0x000e4a70 : add [rbp - 0x77], cl; stc ; mov rdx, [r14]; mov rsi, [rbp - 0x1f0]; lea r8, [rax + r13]; call r12
0x00160180 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x00160121 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 7]; mov [rdx + 7], eax; lea rax, [rdx + 0xa]; ret
0x0013b84e : add [rax], al; movzx eax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0003a24e : mov ebp, [rbp - 0x4c0]; mov rsi, rbx; mov rdi, r14; sub r13, rbx; mov rdx, r13; call [r15 + 0x38]
0x000eb18a : mov eax, [rsp + 0x48]; lea rdx, [rip + 0xa5643]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0015270f : add [rax - 0x75], cl; push rsi; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x0003a6c5 : mov [rbp - 0x4c8], ecx; mov rsi, r11; sub r15, r11; mov rdi, r14; mov rdx, r15; call [rax + 0x38]
0x00174409 : add [rcx], eax; add [rcx], eax; add [rcx], eax; add [rcx], eax; imul rax, rdx; shr rax, 0x38; ret
0x0016b2bb : xor [rax], ebx; add [rax], eax; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0003a6c4 : mov [rbp - 0x4c8], rcx; mov rsi, r11; sub r15, r11; mov rdi, r14; mov rdx, r15; call [rax + 0x38]
0x00097b01 : mov ecx, [rsi]; mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; lea rax, [rdi + 0xc]; ret
0x00160031 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x0009736e : add [rax], al; lea r11, [rip + 0xf6fd9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0008734b : add [rax], 0; add [rax], al; mov rdx, [rsp + 0x10]; lea rax, [rdi + rax - 1]; mov [rdi], rdx; ret
0x0000eee0 : mov rax, [rip + 0x3bac11]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x000482ee : add [rax], al; mov [rbp - 0x4d8], r8; mov rdx, r14; mov rsi, r15; mov rdi, r13; call [rax + 0x38]
0x00097b60 : mov rcx, [rsi]; mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret
0x00096cf0 : mov rcx, [rsi]; mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x00097b00 : mov rcx, [rsi]; mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; lea rax, [rdi + 0xc]; ret
0x001345d0 : mov eax, [rsp + 0x10]; lea rdx, [rip + 0x5da55]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00160140 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; lea rax, [rdx + 0xb]; ret
0x00160030 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x00096d10 : mov rcx, [rsi]; mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x00096c91 : mov ecx, [rsi]; mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; lea rax, [rdi + 0xa]; ret
0x0015279f : add [rax - 0x75], cl; push rsi; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x00132660 : add [rcx - 0x75], cl; xchg al, dl; add [rax], al; add [rcx + rcx*4 - 0x19], cl; call [rax + 0x20]
0x0003c025 : movzx eax, [rsi + rax]; movsxd rax, [rdi + rax*4]; lea rdi, [rip - 0x1624]; add rax, rdi; jmp rax
0x00072d53 : add al, 2; add [rax], al; mov rax, [rip + 0x356d92]; mov [rsp + 8], rdx; mov rdi, r15; call [rax]
0x00097b41 : mov ecx, [rsi]; mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret
0x001534d9 : add [rax], al; lea r11, [rip + 0x48f8e]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097ae0 : mov rcx, [rsi]; mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; lea rax, [rdi + 0xb]; ret
0x00096cf1 : mov ecx, [rsi]; mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x00096cb0 : mov rcx, [rsi]; mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; lea rax, [rdi + 0xb]; ret
0x00160160 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 5]; mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x00092275 : movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x00096cd1 : mov ecx, [rsi]; mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x00021e1d : lea edx, [rip + 0x3a464d]; sub rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop ; call [rbx]
0x00138fed : add [rax], al; mov [rsp + 0xd0], 1; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xc8], rdx; call rax
0x0012db71 : push rdi; and rax, 3; mov rdi, [r15]; add r14, rax; sub edx, eax; mov rsi, r14; call [r15 + 0x40]
0x0000eee1 : mov eax, [rip + 0x3bac11]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x00092276 : movlps xmm0, [rcx]; movlpd [rdx], xmm0; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x0013b7ce : add [rax], al; movsx rax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x00048c35 : movzx eax, [rcx + rax]; lea rcx, [rip - 0x10f0]; movsxd rax, [rdi + rax*4]; add rax, rcx; jmp rax
0x00097b21 : mov ecx, [rsi]; mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret
0x00131f11 : add [rax], al; xor eax, eax; mov rsi, [rsp + 0x30]; mov rdi, rbx; mov rcx, [rsp + 0x28]; call rcx
0x0017383c : add [rax], al; add [rax], al; movzx eax, [rdi - 0x10]; movzx edx, [rsi - 0x10]; sub eax, edx; ret
0x00096d11 : mov ecx, [rsi]; mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x0016212b : add [rax], al; add [rax], al; add bl, al; nop [rax + rax]; nop cs:[rax + rax]; mov [rcx], dl; ret
0x0000f57c : add [rax], al; add [rax], al; mov rax, [rsi + 0x70]; movsxd rdi, edi; mov eax, [rax + rdi*4]; ret
0x00145119 : lea ecx, [rsi + 0x388]; call [rax + 0x178]; mov [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret
0x001461b6 : add [rax], al; movsxd rax, ecx; shl rdx, cl; shr rax, 6; or [rdi + rax*8], rdx; xor eax, eax; ret
0x00097b61 : mov ecx, [rsi]; mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret
0x00160120 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 7]; mov [rdx + 7], eax; lea rax, [rdx + 0xa]; ret
0x00142199 : add [rbp + 0x480e74c0], al; lea edx, [rip + 0x2872ab]; mov [rip + 0x2890d4], rdx; add rsp, 8; ret
0x00068f0f : add [rbx + 0x66c3cf27], al; nop cs:[rax + rax]; nop ; mov eax, [rdi]; shr eax, 4; and eax, 1; ret
0x00092295 : movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x00096cd0 : mov rcx, [rsi]; mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x00021e1c : lea rdx, [rip + 0x3a464d]; sub rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop ; call [rbx]
0x00163519 : push rbx; add [rbx], 0; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x000991fe : add [rax], al; lea r11, [rip + 0xf531d]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00039147 : xchg [rcx + 0x4c000008], cl; mov edx, ebp; mov rsi, r9; mov rdi, [rbp - 0x8a8]; call [rbx + 0x38]
0x00097b40 : mov rcx, [rsi]; mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret
0x000ea95b : mov eax, [rsp + 0x48]; lea rdx, [rip + 0xa5cf2]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x001601a0 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x0009628d : add [rax], al; add bl, al; nop [rax + rax]; nop cs:[rax + rax]; mov dl, [rsi]; mov [rdi], dl; ret
0x00096cb1 : mov ecx, [rsi]; mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; lea rax, [rdi + 0xb]; ret
0x00102eb6 : mov ecx, [rax]; mov [rdx + 0x10], rcx; mov [r8], rax; nop ; mov [rip + 0x2c71c5], 0; pop rbp; ret
0x00092296 : movlps xmm0, [rcx]; movlpd [rdx], xmm0; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x0014e4ac : movq [r8], mm0; lea r11, [rip + 0x4d8f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014becc : movq [r8], mm0; lea r11, [rip + 0x4fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001357f9 : mov rax, [r15 + 0x60]; mov esi, [r15 + 0x88]; mov rdi, rbp; mov [r15 + 0x58], 0; call [rax + 0x28]
0x0014f07c : movq [r8], mm0; lea r11, [rip + 0x4cd29]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00134569 : mov [rsp + 0x438], rax; xor eax, eax; mov rax, [rdi + 8]; lea rsi, [rsp + 0x10]; call [rax + 0x10]
0x0012dd96 : sub rax, rdx; sub rbx, rsi; sub rax, 4; bswap eax; mov [rdx], eax; mov edx, ebx; call [r13 + 0x10]
0x0009a351 : adc [rdi + 0x10], ecx; movups xmm[rdi + rdx - 0x10], xmm2; movups xmm[rdi + rdx - 0x20], xmm3; ret
0x0005ab12 : add [rcx - 0x75], cl; nop ; mov [rax], al; add [rax], al; mov [rdx + 8], r9; add [rdx + 4], 1; ret
0x00134c6c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rdi + 0x1c]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x0014e5fc : movq [r8], mm0; lea r11, [rip + 0x4d7a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095cbd : add [rax], r8b; lea r11, [rip + 0xf84a9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0006f141 : mov eax, [rdi + 0x28]; cmp [rdi + 0x10], rax; cmovae rax, [rdi + 0x10]; sub rax, [rdi + 0x18]; ret
0x00152caf : add [rsi - 0x75], ah; push rsi; std ; mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x001529ae : add [rax], al; mov rdx, [rsi - 9]; mov ecx, [rsi - 4]; mov [rdi - 9], rdx; mov [rdi - 4], ecx; ret
0x0014ef2c : movq [r8], mm0; lea r11, [rip + 0x4ce79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000cc96b : add [rax], al; add [rax], al; add dh, al; or [r8 + r15*4], r11b; add al, [rax]; add [rax], al; ret
0x000eb189 : dec [rbx + 0x48482444]; lea edx, [rip + 0xa5643]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00133ce1 : mov edi, esp; mov [rsp + 0x40], 0; mov [rsp + 0x10], rax; mov rax, [rsp + 0x48]; call [rax + 0x28]
0x0014d0be : add [rax], al; mov rcx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0014d86e : add [rax], al; mov edx, [rsi - 5]; mov ecx, [rsi - 4]; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x0014cbec : movq [r8], mm0; lea r11, [rip + 0x4eff9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014badc : movq [r8], mm0; lea r11, [rip + 0x50109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c01c : movq [r8], mm0; lea r11, [rip + 0x4fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bc2c : movq [r8], mm0; lea r11, [rip + 0x4ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138f99 : add [rax], eax; add [rax], al; call [rax + 0x18]; mov rax, [r15 + 8]; mov rdi, r15; call [rax + 8]
0x0014ed43 : movq [r8], mm0; lea r11, [rip + 0x4d062]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0011fe54 : mov [rcx], r10b; movzx ecx, [rax + 1]; add rax, 2; mov [r8], ecx; mov [r9], rax; mov eax, edx; ret
0x00065c5a : lea edx, [rbp - 0x48]; lea rsi, [rbx + 0x50]; push 0; lea r9, [rbp - 0x40]; mov rdi, r15; call r12
0x00065c59 : lea rdx, [rbp - 0x48]; lea rsi, [rbx + 0x50]; push 0; lea r9, [rbp - 0x40]; mov rdi, r15; call r12
0x0014bd7c : movq [r8], mm0; lea r11, [rip + 0x4fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000eb448 : dec [rbx + 0x48482444]; lea edx, [rip + 0xa5504]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0014f46c : movq [r8], mm0; lea r11, [rip + 0x4c939]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c16c : movq [r8], mm0; lea r11, [rip + 0x4fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00139f6a : mov rax, [rbp + 0x18]; lea r12, [rbp + 0x10]; mov [rbp + 0x10], 0; mov rdi, r12; call [rax + 0x28]
0x0014dc6e : add [rax], al; mov edx, [rsi - 7]; mov ecx, [rsi - 4]; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x0014e74c : movq [r8], mm0; lea r11, [rip + 0x4d659]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001357fa : mov eax, [rdi + 0x60]; mov esi, [r15 + 0x88]; mov rdi, rbp; mov [r15 + 0x58], 0; call [rax + 0x28]
0x0001d0d9 : adc [rip + 0x17e719], cl; orps xmm0, xmm[rip + 0x17daba]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret
0x000633b7 : adc [rbp + 0x16], esi; sub rdx, [rcx + 0x10]; mov eax, [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret
0x0014cd3c : movq [r8], mm0; lea r11, [rip + 0x4eea9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000ee0e8 : add [rax], al; add [rax], al; nop [rax]; mov eax, [rdi + 0x10c]; mov [rsi], eax; xor eax, eax; ret
0x0014c94c : movq [r8], mm0; lea r11, [rip + 0x4f299]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000eb27e : dec [rbx + 0x48482444]; lea edx, [rip + 0xa560e]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00063142 : mov rax, [rbx + 0xa0]; mov [rax + 0x40], 0; mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x0001e697 : sbb [rbx + 0x13773ff9], al; mov eax, 1; shl rax, cl; test [rdi], rax; setne al; movzx eax, al; ret
0x000ea95a : dec [rbx + 0x48482444]; lea edx, [rip + 0xa5cf2]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0014f1cc : movq [r8], mm0; lea r11, [rip + 0x4cbd9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ca9c : movq [r8], mm0; lea r11, [rip + 0x4f149]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0001d0fe : adc [rip + 0x17e6f0], cl; orps xmm0, xmm[rip + 0x17da75]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret
0x0014f70c : movq [r8], mm0; lea r11, [rip + 0x4c699]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012d9dc : sub rax, rsi; sub rdx, 4; mov rbp, rax; bswap edx; mov [rcx], edx; mov edx, eax; call [rbx + 0x10]
0x0014ec8c : movq [r8], mm0; lea r11, [rip + 0x4d119]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138f9a : add [rax], al; add bh, bh; push rax; sbb [rcx - 0x75], cl; or [r9 + r9*4 - 1], r9b; call [rax + 8]
0x00141d15 : add [rax - 0x73], cl; push rsp; and al, 8; lea rsi, [rsp + 0x190]; mov rdi, rbp; call [rax + 0x18]
0x0014c2bc : movq [r8], mm0; lea r11, [rip + 0x4f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000f65c : add [rdx], al; add [rax], al; mov fs:[rcx], rdx; mov rdx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x0014e9ec : movq [r8], mm0; lea r11, [rip + 0x4d3b9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0001cd62 : adc [rip + 0x17e3b0], cl; orpd xmm0, xmm[rip + 0x17de00]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret
0x0001cd90 : adc [rip + 0x17e37a], cl; orpd xmm0, xmm[rip + 0x17ddc2]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret
0x00087256 : mov edx, [rsp + 0x18]; lea rax, [rip + 0x106c47]; movsxd rdx, [rax + rdx*4]; add rdx, rax; jmp rdx
0x0014c373 : movq [r8], mm0; lea r11, [rip + 0x4f872]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00061386 : sub [rbx + 0x17], dh; lea rax, [rcx + 4]; mov [rdx + 0x20], rax; mov [rcx], edi; mov eax, edi; ret
0x00133ce0 : mov rdi, r12; mov [rsp + 0x40], 0; mov [rsp + 0x10], rax; mov rax, [rsp + 0x48]; call [rax + 0x28]
0x0009a1aa : movups xmm1, xmm[rsi + rdx - 0x10]; movups xmm[rdi], xmm0; movups xmm[rdi + rdx - 0x10], xmm1; ret
0x0014c40c : movq [r8], mm0; lea r11, [rip + 0x4f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014eddc : movq [r8], mm0; lea r11, [rip + 0x4cfc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c55c : movq [r8], mm0; lea r11, [rip + 0x4f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f5bc : movq [r8], mm0; lea r11, [rip + 0x4c7e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009736d : add [rax], r8b; lea r11, [rip + 0xf6fd9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00141d3b : add [rax], al; add [rbx + 0x440f03fb], al; fmul [rax - 0x75]; add eax, 0x289535; call [rax + 0x28]
0x001396a7 : adc al, ch; xor edx, [rax - 1]; inc [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; add eax, 1; ret
0x00072ed2 : dec [rax + 0x48302454]; mov [rsp + 0x28], esi; mov [rsp + 0x18], r11; mov [rsp + 8], rax; call rcx
0x0012d80d : adc bh, bh; adc [rbp + 0x481074c0], al; mov eax, [rbx + 8]; mov rsi, r12; mov rdi, rbx; call [rax]
0x0012e8d4 : mov [rbx + 0x38], 0; mov rdi, [rbx]; mov [rcx], eax; sub rdx, rsi; mov rbp, rdx; call [rbx + 0x10]
0x0013b7cd : add [rax], r8b; movsx rax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x000997ae : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; xor ch, ch; mov [rdi + 0x10], ch; ret
0x0014c6ac : movq [r8], mm0; lea r11, [rip + 0x4f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012dd97 : sub eax, edx; sub rbx, rsi; sub rax, 4; bswap eax; mov [rdx], eax; mov edx, ebx; call [r13 + 0x10]
0x00142ac3 : sub [rax], al; add [rax], al; add [rax], al; mov [rip + 0x28c540], ax; mov eax, 1; add rsp, 8; ret
0x000404eb : add [rax], al; add [rax], al; add [rbp - 0x2dce00b9], cl; div r8d; add r9d, eax; mov eax, r9d; ret
0x0012b10d : adc [rbp + 0x493f74c0], al; mov edi, [rbp]; mov rsi, r12; mov rax, [rdi + 0x38]; call [rax + 0x10]
0x0014eb3c : movq [r8], mm0; lea r11, [rip + 0x4d269]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00020bde : add [rax], al; mov rdx, [rsp + 0x10]; mov rsi, [r15]; mov rdi, [r13]; mov rax, [rsp + 8]; call rax
0x0014c7fc : movq [r8], mm0; lea r11, [rip + 0x4f3e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012d9dd : sub eax, esi; sub rdx, 4; mov rbp, rax; bswap edx; mov [rcx], edx; mov edx, eax; call [rbx + 0x10]
0x0006f140 : mov rax, [rdi + 0x28]; cmp [rdi + 0x10], rax; cmovae rax, [rdi + 0x10]; sub rax, [rdi + 0x18]; ret
0x0013456a : mov [rsp + 0x438], eax; xor eax, eax; mov rax, [rdi + 8]; lea rsi, [rsp + 0x10]; call [rax + 0x10]
0x0014e89c : movq [r8], mm0; lea r11, [rip + 0x4d509]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013b84d : add [rax], r8b; movzx eax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x000343d5 : add [rax], al; add [rcx], al; add [rcx], dh; fisttp [rax - 0x7b]; ror [rdi], 1; xchg eax, ebp; ret
0x0014da6e : add [rax], al; mov edx, [rsi - 6]; mov ecx, [rsi - 4]; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x00038a9d : xchg [rdx + 0x4800000f], dh; mov edx, ebx; mov rsi, r13; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x00096bf8 : add cl, [rax - 0x73]; add r8b, r11b; nop ; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 3]; ret
0x0013553c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rdi + 0x30]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x0014f31c : movq [r8], mm0; lea r11, [rip + 0x4ca89]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00139f6b : mov eax, [rbp + 0x18]; lea r12, [rbp + 0x10]; mov [rbp + 0x10], 0; mov rdi, r12; call [rax + 0x28]
0x00003b96 : movsx r9, [rdx + 0x1a]; movsx edx, [rdx + 0x1b]; mov [rax + 0x50], ecx; mov [rax + 0x54], edx; ret
0x0012d78e : add [rax], al; movsxd rax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x00063143 : mov eax, [rbx + 0xa0]; mov [rax + 0x40], 0; mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x0008734c : add [rax], al; add [rax], al; mov rdx, [rsp + 0x10]; lea rax, [rdi + rax - 1]; mov [rdi], rdx; ret
0x0003aa92 : movzx eax, [rsi + rax]; lea rsi, [rip + 0x151cf3]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x000f0c33 : lea rcx, [rbx + 0x28]; mov rdi, [rbx + 0x18]; mov rsi, r14; mov edx, [rdx + rax]; call [rbx + 0x40]
0x0014cd3d : movq [rax], mm0; lea r11, [rip + 0x4eea9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0011fc3d : mov [r10], bl; mov [r10 + 1], r8b; add r10, 2; mov [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret
0x00075245 : add [rax], al; sub rdx, rdi; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq [rdi], rax; pop rbx; ret
0x0014badd : movq [rax], mm0; lea r11, [rip + 0x50109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00066ad6 : add [rax], al; lea rcx, [rax + 1]; mov [rdi + 8], rcx; movzx edx, [rax]; mov eax, edx; pop rbx; ret
0x0016cd47 : add rax, rcx; xor edx, edx; lea rax, [rdi + rax]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x0014f31d : movq [rax], mm0; lea r11, [rip + 0x4ca89]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00094f2f : movlps xmm1, [rcx + 8]; movlpd [rdx + 8], xmm1; xor ah, ah; mov [rdx + 0x10], ah; mov rax, rdi; ret
0x0012d78d : add [rax], r8b; movsxd rax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0014e89d : movq [rax], mm0; lea r11, [rip + 0x4d509]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00003b97 : movsx ecx, [rdx + 0x1a]; movsx edx, [rdx + 0x1b]; mov [rax + 0x50], ecx; mov [rax + 0x54], edx; ret
0x0000834f : mov r9, [rsp + 0x20]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r15
0x0014f46d : movq [rax], mm0; lea r11, [rip + 0x4c939]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ef2d : movq [rax], mm0; lea r11, [rip + 0x4ce79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013851f : sub [rax], eax; mov [rip + 0x296925], 2; mov fs:[rbx], rax; mov rax, [rip + 0x2917da]; pop rbx; ret
0x00046c39 : mov rsi, rbx; mov rdi, r13; sub r14, rbx; mov r15, r14; sar r15, 2; mov rdx, r15; call [rax + 0x38]
0x000290f3 : adc [rdi], cl; test dl, ch; or [rax], eax; add [rbp + 0x31], al; inc [rax - 0x80]; jmp [rbp + 0x49]
0x0014c374 : movq [rax], mm0; lea r11, [rip + 0x4f872]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000956ff : add bl, dh; movq mm0, [rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x0014c7fd : movq [rax], mm0; lea r11, [rip + 0x4f3e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bd7d : movq [rax], mm0; lea r11, [rip + 0x4fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00165326 : lea r10, [rip + 0x365c3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00166ef6 : lea r10, [rip + 0x34a33]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0009a643 : movq [rdi + 0x10], mm0; movdqu xmm[rdi + rdx - 0x10], xmm0; movdqu xmm[rdi + rdx - 0x20], xmm0; ret
0x0014e74d : movq [rax], mm0; lea r11, [rip + 0x4d659]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00047d9f : movzx edx, [rax + rdx]; lea rax, [rip + 0x144b66]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x0014f70d : movq [rax], mm0; lea r11, [rip + 0x4c699]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009573f : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x00004891 : mov r9, [rsp + 0x40]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call r14
0x000871f0 : mov edx, [rsp - 0x10]; add rax, rdi; mov [rdi], edx; movzx edx, [rsp - 0xc]; mov [rdi + 4], dl; ret
0x0000a8e1 : mov r8, [rsp + 0x40]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call r14
0x00096c07 : add eax, ebx; nop [rax]; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x0003b3de : movzx edx, [rdx + rax]; lea rax, [rip + 0x151327]; movsxd rax, [rax + rdx*4]; add rax, rsi; jmp rax
0x00005831 : mov r9, [rsp + 0x20]; mov rdx, [rsp + 0x30]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r13
0x00039148 : mov [rax], ecx; add [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, [rbp - 0x8a8]; call [rbx + 0x38]
0x0003cc17 : movzx edx, [rdx + rax]; lea rax, [rip + 0x14faee]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x0014cbed : movq [rax], mm0; lea r11, [rip + 0x4eff9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003b186 : movzx esi, [rsi + rax]; lea rax, [rip + 0x15137f]; movsxd rax, [rax + rsi*4]; add rax, rdi; jmp rax
0x000cc94f : add [rcx - 0x67b7c7ba], cl; movzx eax, [r9 + rax]; mov [rdi + 8], 1; mov [rdi], al; mov eax, 1; ret
0x0006cac9 : sbb [rax - 0x77], cl; adc [r8 - 0x77], r9b; sbb [r8 - 0x77], r9b; push rdi; mov [rdi + 8], rax; ret
0x000f0c34 : lea ecx, [rbx + 0x28]; mov rdi, [rbx + 0x18]; mov rsi, r14; mov edx, [rdx + rax]; call [rbx + 0x40]
0x0010e88d : movq mm0, [r13 - 0x18]; mov [rbp - 0x80], edx; mov rdx, rbx; movups xmm[rbp - 0x78], xmm0; call rax
0x0003afb0 : movzx eax, [rsi + rax]; lea rsi, [rip + 0x1517d5]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x00066c4a : add [rax], al; lea rdx, [rax + 1]; mov [rbx + 8], rdx; movzx edx, [rax]; mov eax, edx; pop rbx; ret
0x000f5216 : add bh, dh; fisub [rcx + rcx*4 + 0x10]; mov rax, [rip + 0x2d49c5]; mov [rax], -1; xor eax, eax; ret
0x0013ce44 : xor eax, eax; movaps xmm[rsp + 0x80], xmm0; pxor xmm0, xmm0; movups xmm[rsp + 0x28], xmm0; call rdx
0x001320ef : mov rax, [rsp + 8]; mov rdi, [r15]; lea rsi, [rax + 0x18]; mov rax, [rdi + 0x38]; call [rax + 0x10]
0x00009538 : mov r9, [rsp + 0x20]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x00138ff5 : add [rcx], al; add [rax], al; add [rdi], cl; adc [rsp + 0xb8], eax; mov [rsp + 0xc8], rdx; call rax
0x0001f670 : mov rdi, [rsp]; shr rbx, 1; mov r15, rbx; imul r15, r13; add r15, [rsp + 8]; mov rsi, r15; call r14
0x0003b43a : movzx eax, [rsi + rax]; lea rsi, [rip + 0x15134b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0014c01d : movq [rax], mm0; lea r11, [rip + 0x4fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c16d : movq [rax], mm0; lea r11, [rip + 0x4fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001320f0 : mov eax, [rsp + 8]; mov rdi, [r15]; lea rsi, [rax + 0x18]; mov rax, [rdi + 0x38]; call [rax + 0x10]
0x0010e95b : mov [rbp - 0x80], edx; lea rdx, [rdi + 0x70]; mov edi, r12d; movups xmm[rbp - 0x78], xmm0; call rax
0x0003b07a : movzx eax, [rsi + rax]; lea rsi, [rip + 0x15170b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0012e024 : push rbx; and r15d, 3; mov rdi, [rbx]; add r13, r15; sub edx, r15d; mov rsi, r13; call [rbx + 0x40]
0x0014f5bd : movq [rax], mm0; lea r11, [rip + 0x4c7e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00047cea : movzx edx, [rax + rdx]; lea rax, [rip + 0x144e1b]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x000956df : add bl, dh; movq mm0, [rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x0003b240 : lea eax, [rip + 0x1513ca]; movsxd rax, [rax + rsi*4]; lea rsi, [rip - 0x841]; add rax, rsi; jmp rax
0x0015dcff : add [rsi - 0x77], ah; adc ebx, eax; nop ; nop cs:[rax + rax]; mov [rcx], dx; mov [rcx + 2], dl; ret
0x0014bc2d : movq [rax], mm0; lea r11, [rip + 0x4ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014620d : add [rax], al; add [rax - 0x7b], cl; div [rbx + rcx - 0x17]; xchg [rdi - 0x12], bh; jmp [rsi + 0xf]
0x000faafe : add [rax], al; add al, ch; sub al, [rbx]; add [rax], al; lea rax, [rip + 0x2d2553]; add rsp, 8; ret
0x001642e7 : lea edx, [rip + 0x375c3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0014becd : movq [rax], mm0; lea r11, [rip + 0x4fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009639f : add bl, dh; movq mm0, [rsi]; mov cl, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; ret
0x0014c55d : movq [rax], mm0; lea r11, [rip + 0x4f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00062fc9 : mov [rax + 0x30], rbp; mov [rax + 0x38], r12; mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x000061ec : mov r9, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; mov rax, [rsp + 0x20]; call rax
0x001385df : sub [rax], eax; mov [rip + 0x296865], 2; mov fs:[rbx], rax; mov rax, [rip + 0x29162a]; pop rbx; ret
0x0000459c : add [rax + 0x4c], dl; mov ecx, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x0016e447 : add rax, rcx; xor edx, edx; lea rax, [rdi + rax]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x000180f7 : add al, 0; add [rbx - 0x7bf0fc08], al; insd [rdi], dx; add al, 0; add [rbx - 0x7bf0fe08], al; ret 4
0x001642e6 : lea r10, [rip + 0x375c3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00166ef7 : lea edx, [rip + 0x34a33]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0010e88e : movq mm0, [rbp - 0x18]; mov [rbp - 0x80], edx; mov rdx, rbx; movups xmm[rbp - 0x78], xmm0; call rax
0x0001d9d0 : mov esi, [rdi + 0x20]; mov r15, [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop ; jmp rdx
0x0013beb3 : mov [rsp + 8], r8; lea rsi, [rsp + 0x10]; mov [rsp + 0x10], rax; mov rax, [rdi + 8]; call [rax + 8]
0x00030e0f : add [rax], al; mov r8, [rdi + 0x28]; mov r9, [rdi + 0x30]; mov rdi, [rdi + 0x68]; xor eax, eax; ret
0x0014c40d : movq [rax], mm0; lea r11, [rip + 0x4f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014eb3d : movq [rax], mm0; lea r11, [rip + 0x4d269]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00163517 : lea edx, [rip + 0x38353]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00062fca : mov [rax + 0x30], ebp; mov [rax + 0x38], r12; mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x0003113f : add [rax], al; mov r8, [rsi + 0x28]; mov r9, [rsi + 0x30]; mov rsi, [rsi + 0x70]; xor eax, eax; ret
0x0003ab30 : movzx edx, [rdx + rax]; lea rax, [rip + 0x151b55]; movsxd rax, [rax + rdx*4]; add rax, rsi; jmp rax
0x0011fc3e : mov [rdx], bl; mov [r10 + 1], r8b; add r10, 2; mov [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret
0x0009ca01 : adc [rdx + 1], ch; push 1; xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx
0x0016e448 : add eax, ecx; xor edx, edx; lea rax, [rdi + rax]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x000998cc : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; xor ch, ch; mov [rdi + 0x19], ch; ret
0x0014ed44 : movq [rax], mm0; lea r11, [rip + 0x4d062]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00163516 : lea r10, [rip + 0x38353]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00165327 : lea edx, [rip + 0x365c3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0012b8da : sub [rsp + 0x30], eax; push [rip + 0x6f684]; push [rip + 0x6f676]; lea r9, [rsp + 0x2c]; call [rax]
0x0010dffb : movq mm0, [rbx + 0x30]; mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x0001d9cf : mov r14, [rdi + 0x20]; mov r15, [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop ; jmp rdx
0x00061385 : sub [rbx + 0x17], sil; lea rax, [rcx + 4]; mov [rdx + 0x20], rax; mov [rcx], edi; mov eax, edi; ret
0x00008b3b : mov r9, [rsp + 0x28]; mov rdx, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call r15
0x0014ca9d : movq [rax], mm0; lea r11, [rip + 0x4f149]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003b01e : movzx eax, [rsi + rax]; lea rsi, [rip + 0x151767]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0012b6fa : sub [rsp + 0x30], eax; push [rip + 0x6f864]; push [rip + 0x6f856]; lea r9, [rsp + 0x2c]; call [rax]
0x0014f1cd : movq [rax], mm0; lea r11, [rip + 0x4cbd9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0001f671 : mov edi, [rsp]; shr rbx, 1; mov r15, rbx; imul r15, r13; add r15, [rsp + 8]; mov rsi, r15; call r14
0x00103b00 : add [rax], al; nop cs:[rax + rax]; nop [rax]; mov rax, [rip + 0x2c6071]; mov eax, [rax + 0x38]; ret
0x0010e2b7 : movq mm0, [rbp - 0x18]; mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x0013869f : sub [rax], eax; mov [rip + 0x2967a5], 2; mov fs:[rbx], rax; mov rax, [rip + 0x291502]; pop rbx; ret
0x0016cd48 : add eax, ecx; xor edx, edx; lea rax, [rdi + rax]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper ; ret
0x0007b997 : movsxd rsi, esi; mov [rbx + 0x30], eax; mov [rbx + 0x48], r9; mov [rbx], rsi; mov rdi, r9; call rcx
0x0014ec8d : movq [rax], mm0; lea r11, [rip + 0x4d119]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000998ed : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; xor ch, ch; mov [rdi + 0x1a], ch; ret
0x00141c14 : add [rbp + 0x481778c0], al; lea eax, [rip + 0x28d3b0]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret
0x0009575f : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x0010e2b6 : movq mm0, [r13 - 0x18]; mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x00138467 : sub [rax], eax; mov [rip + 0x2969dd], 2; mov fs:[rbx], rax; mov rax, [rip + 0x29183a]; pop rbx; ret
0x000474f0 : movzx edx, [rdx + rax]; lea rax, [rip + 0x145595]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x001461b7 : add [rax + 0x63], cl; ror [rax - 0x2d], -0x1e; shr rax, 6; or [rdi + rax*8], rdx; xor eax, eax; ret
0x0003b23f : lea rax, [rip + 0x1513ca]; movsxd rax, [rax + rsi*4]; lea rsi, [rip - 0x841]; add rax, rsi; jmp rax
0x0012b08c : add [rbx + 0x22a8], 1; mov rdi, rbp; mov edx, [rbx + 0x22c0]; mov rsi, [rsp + 8]; call [rax + 0x18]
0x000872c0 : mov eax, [rsp - 0x10]; mov [rdi], eax; movzx eax, [rsp - 0xc]; mov [rdi + 4], al; mov rax, rdi; ret
0x0014e5fd : movq [rax], mm0; lea r11, [rip + 0x4d7a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009023a : xor r8, rax; and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret
0x0016d6d5 : add [rsi + 0x2e], ah; nop [rax + rax]; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper ; ret
0x0009984b : movq [rdi], mm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; xor ch, ch; mov [rdi + 0x15], ch; ret
0x00047493 : movzx edx, [rax + rdx]; lea rax, [rip + 0x145572]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x0000538b : mov r9, [rsp + 0x28]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x00004d53 : mov r9, [rsp + 0x28]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r12
0x0014f07d : movq [rax], mm0; lea r11, [rip + 0x4cd29]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014eddd : movq [rax], mm0; lea r11, [rip + 0x4cfc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00094f2e : movlpd xmm1, [rcx + 8]; movlpd [rdx + 8], xmm1; xor ah, ah; mov [rdx + 0x10], ah; mov rax, rdi; ret
0x00138f03 : add al, [rax]; add [rax], al; call rax; nop [rax]; mov rdi, r15; mov rax, [r15 + 8]; call [rax + 8]
0x0014c6ad : movq [rax], mm0; lea r11, [rip + 0x4f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0007b581 : stosd [rdi], eax; add [rax], al; add [rcx + rcx*4 - 0x11], cl; mov rdx, rbx; mov rsi, r12; call rax
0x0014e4ad : movq [rax], mm0; lea r11, [rip + 0x4d8f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0007d8e7 : add [rax - 0x77], cl; pop rbp; add [rcx], dh; fisttp [rax - 0x77]; fcomp [rbx + 0x5d]; pop r12; ret
0x0014c94d : movq [rax], mm0; lea r11, [rip + 0x4f299]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e9ed : movq [rax], mm0; lea r11, [rip + 0x4d3b9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000ee160 : xchg eax, ebp; add [rax], al; add bl, dh; movq mm0, [rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x0013869e : sub [eax], eax; mov [rip + 0x2967a5], 2; mov fs:[rbx], rax; mov rax, [rip + 0x291502]; pop rbx; ret
0x0014c2bd : movq [rax], mm0; lea r11, [rip + 0x4f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00046c3a : mov esi, ebx; mov rdi, r13; sub r14, rbx; mov r15, r14; sar r15, 2; mov rdx, r15; call [rax + 0x38]
0x000b067b : add eax, esi; mov r14, r13; and r14, r15; and r14d, 1; add r14, rax; mov [rsp + 0xa8], r14; call rbx
0x00103c5d : sub al, 0; mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x000b0a77 : mov [rsp + 0xb8], r15; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x50]; mov rax, [rsp + 0x18]; call rax
0x0013b1bb : mov edi, ebp; lea rsi, [rip + 0x572d0]; mov rax, [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x0010e40d : mov rax, [r12 + 0x80]; mov [rbp - 0x70], rax; mov eax, [r12 + 0x60]; mov [rbp - 0x80], eax; call rcx
0x00135534 : xor bl, al; nop cs:[rax + rax]; movdqu xmm0, xmm[rdi + 0x30]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x00103e1d : sub al, 0; mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x00096e5b : sbb bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x001533bb : add [rax], 0; add [rax], al; mov dx, [rsi + 1]; mov cx, [rsi]; mov [rdi + 1], dx; mov [rdi], cx; ret
0x000061ed : mov ecx, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; mov rax, [rsp + 0x20]; call rax
0x00141d37 : mov ebx, [rax]; mov eax, 2; cmp ebx, 3; cmove ebx, eax; mov rax, [rip + 0x289535]; call [rax + 0x28]
0x00064dff : mov eax, [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x130]; mov rax, [rax + 0x20]; jmp rax
0x0011d1e6 : add [rax], al; add [rbp - 0x7b], al; dec [rdi]; test cl, dh; add [rax], al; add [rcx - 0xa], al; ret
0x00134c64 : add al, bl; nop cs:[rax + rax]; movdqu xmm0, xmm[rdi + 0x1c]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x0009990c : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; xor ch, ch; mov [rdi + 0x1b], ch; ret
0x00137c71 : mov eax, [rsp + 0x20]; mov r8, r15; mov rcx, r14; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax
0x0015bd3e : add [rax], al; mov ax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; mov rax, rdi; ret
0x001725ad : add [rax], al; add [rax - 0x73], cl; or r11b, r8b; nop ; nop cs:[rax + rax]; lea rax, [rdi + 9]; ret
0x000e29ea : mov rdx, [rip + 0x2e7297]; mov ecx, [rip + 0x2ea341]; mov [rdx], ecx; pop rdx; pop rcx; pop rbx; ret
0x0009659d : add [rax], al; add [rax + 0x1f0fc317], cl; add [rsi + 0x2e], ah; nop [rax + rax]; mov [rdi], dx; ret
0x000922d7 : adc al, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx + 6]; movlpd [rdx + 6], xmm1; mov rax, rdi; ret
0x000922b7 : adc al, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx + 5]; movlpd [rdx + 5], xmm1; mov rax, rdi; ret
0x00097cbb : sbb bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret
0x000042aa : mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov rax, [rsp + 0x18]; call rax
0x0009992c : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; xor ch, ch; mov [rdi + 0x1c], ch; ret
0x0000538c : mov ecx, [rsp + 0x28]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x00004d54 : mov ecx, [rsp + 0x28]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r12
0x00008b3c : mov ecx, [rsp + 0x28]; mov rdx, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call r15
0x0015dced : add [rax], al; add [rax + 0x1f0fc311], cl; add [rsi + 0x2e], ah; nop [rax + rax]; mov [rcx], dx; ret
0x000956cb : add [rax], 0; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x00008350 : mov ecx, [rsp + 0x20]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r15
0x00009539 : mov ecx, [rsp + 0x20]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x0000a8e2 : mov eax, [rsp + 0x40]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call r14
0x0013c8a9 : mov esi, esi; mov [rdi + 0x28], eax; mov rax, [rdi + 0x18]; add rsi, rax; mov [rdi + 0x18], rsi; ret
0x000b4c7a : add dh, [rsi + 0x47c7ffff]; and [rax], al; add [rax], al; add cl, ch; mov sil, 0xff; jmp [rsi + 0xf]
0x00131bf3 : adc [rax - 0x77], cl; int1 ; xor eax, eax; mov rsi, rdx; mov [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx
0x0006494d : mov eax, [rax + 0x10]; mov [rsp + 0x10], rax; mov r13, [r15 + 0x98]; mov rdi, r13; call [r13 + 0x20]
0x00004892 : mov ecx, [rsp + 0x40]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call r14
0x00097c9a : sbb bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret
0x000922f7 : adc al, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx + 7]; movlpd [rdx + 7], xmm1; mov rax, rdi; ret
0x00003e86 : mov edx, [rsp + 0x38]; mov rsi, [rsp + 0x28]; mov rdi, [rsp + 0x20]; mov rax, [rsp + 0x10]; call rax
0x0013beb4 : mov [rsp + 8], eax; lea rsi, [rsp + 0x10]; mov [rsp + 0x10], rax; mov rax, [rdi + 8]; call [rax + 8]
0x000b07c2 : mov [rsp + 0xb8], eax; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x50]; mov rax, [rsp + 0x18]; call rax
0x00103bc5 : mov esi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x40; ret
0x00131d21 : add [rax], al; mov [rdx + 0x68], eax; movzx eax, [rdi + 0x88]; mov [rdx + 0x6c], ax; mov eax, 1; ret
0x00063df3 : add [rax], al; mov rax, fs:[0x28]; mov [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call [rbp + 0x20]
0x00135b8d : add [rax], al; add [rbx + rdx + 0x49], esi; mov edi, [rsp]; mov rax, [rdi + 0x38]; call [rax + 0x18]
0x00003e85 : mov rdx, [rsp + 0x38]; mov rsi, [rsp + 0x28]; mov rdi, [rsp + 0x20]; mov rax, [rsp + 0x10]; call rax
0x0009023b : xor eax, eax; and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret
0x000e29eb : mov edx, [rip + 0x2e7297]; mov ecx, [rip + 0x2ea341]; mov [rdx], ecx; pop rdx; pop rcx; pop rbx; ret
0x0015dd82 : adc [rsi - 0x77], esp; push rcx; or bl, al; nop [rax + rax]; mov [rcx], rdx; mov [rcx + 7], edx; ret
0x00064dfe : mov rax, [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x130]; mov rax, [rax + 0x20]; jmp rax
0x00102523 : add [rax], 0; add [rax], al; mov rdx, [rip + 0x2c7669]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00092141 : adc al, [rcx]; movlpd xmm1, [rcx + 8]; movlpd [rdx], xmm0; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x0010e40e : mov eax, [rsp + 0x80]; mov [rbp - 0x70], rax; mov eax, [r12 + 0x60]; mov [rbp - 0x80], eax; call rcx
0x000c5808 : mov ah, 2; add [rax], al; lea rdx, [rip + 0xc9bb1]; movsxd rax, [rdx + rbx*4]; add rax, rdx; jmp rax
0x000b067a : add rax, r14; mov r14, r13; and r14, r15; and r14d, 1; add r14, rax; mov [rsp + 0xa8], r14; call rbx
0x00134b93 : adc [rax - 0x77], cl; int1 ; xor eax, eax; mov rsi, rdx; mov [rdi + 0x68], 2; add rdi, 0x68; jmp rcx
0x00096c06 : add r8d, r11d; nop [rax]; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x0013345a : add [rax], al; mov [rsp + 0xc], eax; mov rax, [rbp + 8]; mov esi, 8; mov rdi, rbp; call [rax + 0x30]
0x000eef53 : add [rax], 0; add [rax], al; mov rdx, [rip + 0x2dac39]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0010411d : sub al, 0; mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x00094e47 : adc al, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx + 8]; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x000eef23 : add [rax], 0; add [rax], al; mov rdx, [rip + 0x2dac69]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0012af8f : add [rax], al; nop [rax]; mov rax, [rbx + 0x20]; mov rsi, [rsp + 0x10]; mov rdi, rbp; call [rax + 8]
0x000b0a78 : mov [rsp + 0xb8], edi; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x50]; mov rax, [rsp + 0x18]; call rax
0x0013b1ba : mov rdi, rbp; lea rsi, [rip + 0x572d0]; mov rax, [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x00096579 : mov cl, [rsi + 0x20]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; mov [rdi + 0x20], cl; ret
0x0012bcc8 : mov rax, [rsp]; mov rsi, [rbx + 0x10]; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call [rbx + 0x18]
0x00021ffd : lea rax, [r8 + rax + 0x10]; mov [rax], 1; add [rip + 0x3ad33f], 1; add rsp, 8; pop rbx; pop rbp; ret
0x000b0bf3 : add eax, ebp; mov r13, r14; and r13, r15; and r13d, 1; add r13, rax; mov [rsp + 0xa8], r13; call rbx
0x00103b64 : mov esi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x38; ret
0x0007b8dc : push rax; dec [rcx + rcx*4 + 0x43]; movsxd rdi, esi; mov [rbx + 0x30], eax; mov [rbx], rdi; call rcx
0x00103b63 : mov rsi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x38; ret
0x000042ab : mov edx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov rax, [rsp + 0x18]; call rax
0x00096e37 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x0006be93 : adc [rax + 0x48000000], -0x75; or [r11 + 0x5d], bl; movzx eax, [rax]; pop r12; pop r13; pop r14; ret
0x00161f13 : add ecx, [rax - 0x73]; add rcx, [rdi]; test [rdx - 0x7ffffffd], esi; cmp [rcx], al; sbb rax, -1; ret
0x000b0bf2 : add rax, r13; mov r13, r14; and r13, r15; and r13d, 1; add r13, rax; mov [rsp + 0xa8], r13; call rbx
0x0006494c : mov rax, [rax + 0x10]; mov [rsp + 0x10], rax; mov r13, [r15 + 0x98]; mov rdi, r13; call [r13 + 0x20]
0x000872d8 : mov eax, [rsp - 0x18]; mov [rdi], eax; movzx eax, [rsp - 0x14]; mov [rdi + 4], ax; mov rax, rdi; ret
0x000b07c1 : mov [rsp + 0xb8], rax; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x50]; mov rax, [rsp + 0x18]; call rax
0x000955cf : add [rax + 0x1f0fc337], cl; add [rsi + 0x2e], ah; nop [rax + rax]; mov dx, [rsi]; mov [rdi], dx; ret
0x00137c70 : mov rax, [rsp + 0x20]; mov r8, r15; mov rcx, r14; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax
0x00097a4d : add [rax], al; add [rbx + 0x4568a0e], cl; mov [rdi], ecx; mov [rdi + 4], dl; lea rax, [rdi + 5]; ret
0x0015dd5f : add [rax - 0x77], cl; adc ebx, eax; nop ; nop cs:[rax + rax]; mov [rcx], rdx; mov [rcx + 8], dl; ret
0x001354c3 : adc [rax - 0x77], cl; int1 ; xor eax, eax; mov rsi, rdx; mov [rdi + 0x58], 2; add rdi, 0x58; jmp rcx
0x00096db6 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x0012bcc9 : mov eax, [rsp]; mov rsi, [rbx + 0x10]; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call [rbx + 0x18]
0x00103bc4 : mov rsi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x40; ret
0x000956de : add bl, sil; movq mm0, [rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x00096d3f : add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret
0x00062464 : add [rax - 0x75], cl; sbb [r9 + rcx*4 - 0x1a], r8b; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax
0x00005832 : mov ecx, [rsp + 0x20]; mov rdx, [rsp + 0x30]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r13
0x001635a5 : add [rax - 0x73], cl; or r14b, al; movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; sub eax, edx; ret
0x000eee0c : add [rax], al; add [rax], al; mov rdx, [rip + 0x2dad81]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x0016ccb4 : mov dh, 7; lea rdx, [rip + 0xfe33]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00096ed5 : movq mm2, [rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x000ed50c : adc [rdi], cl; adc [rdi + 0x20], eax; movups xmm[rdi + 0x30], xmm0; movups xmm[rdi + 0x40], xmm0; ret
0x000388d5 : adc [rax], eax; add [rcx + rcx*4 - 0x16], cl; mov rsi, rbx; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x0012ca0a : add eax, [rbx - 0x1d7c0320]; cld ; lea esi, [rax + rdx + 0x28]; mov rax, [rdi + 8]; call [rax + 0x30]
0x00021ffe : lea eax, [rax + rax + 0x10]; mov [rax], 1; add [rip + 0x3ad33f], 1; add rsp, 8; pop rbx; pop rbp; ret
0x00095861 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x00095841 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x00096d2c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x0009c82d : xor [rdx + 1], ch; push 0; xor r8d, r8d; mov rcx, r13; mov rdi, [r14]; lea r9, [rsp + 0x28]; call r12
0x00038223 : mov esi, [rdi + 0x18]; mov rdx, [r15 + 0x20]; mov rdi, [rbp - 0x8a8]; sub rdx, rsi; call [rbx + 0x38]
0x00102524 : add [rax], al; add [rax], al; mov rdx, [rip + 0x2c7669]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00097d35 : movq mm2, [rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret
0x000d7e07 : xchg esp, edx; sldt [rax]; lea rdi, [rip + 0xb809d]; movsxd rax, [rdi + rax*4]; add rax, rdi; jmp rax
0x00038222 : mov rsi, [r15 + 0x18]; mov rdx, [r15 + 0x20]; mov rdi, [rbp - 0x8a8]; sub rdx, rsi; call [rbx + 0x38]
0x0013bf0b : add [rax], 0; add [rax], al; mov rax, [rdi + 8]; mov [rsp + 8], r8; lea rsi, [rsp + 0x10]; call [rax]
0x00097cfa : sbb bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret
0x00096ef5 : movq mm2, [rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x000956cc : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x000ee0d0 : add [rdi], cl; adc [rsi + 0x60], eax; movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x0017256d : add [rax], al; add [rax - 0x73], cl; add r8d, r11d; nop ; nop cs:[rax + rax]; lea rax, [rdi + 4]; ret
0x0017255d : add [rax], al; add [rax - 0x73], cl; add r8b, r11b; nop ; nop cs:[rax + rax]; lea rax, [rdi + 3]; ret
0x000ab288 : add [rcx + rcx*4 - 0xe], cl; mov rcx, [rsp + 0x20]; mov r9, r15; mov rsi, r13; mov rdi, r12; call rbp
0x0001cbfe : add [rax], al; andpd xmm0, xmm[rip + 0x17df48]; andpd xmm1, xmm[rip + 0x17df30]; orpd xmm0, xmm1; ret
0x001396e6 : xor bh, bh; inc [rbp - 0x38ec8a40]; add eax, [rax]; add [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x00020d06 : mov edx, [rsp + 0x10]; mov rsi, rbp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, [rsp + 8]; call rax
0x000abc2c : xor [rdx + 1], ch; push 0; xor r8d, r8d; mov rcx, r13; mov rdi, [r14]; lea r9, [rsp + 0x30]; call r12
0x00096eb5 : movq mm2, [rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x0017254d : add [rax], al; add [rax - 0x73], cl; add r11d, r8d; nop ; nop cs:[rax + rax]; lea rax, [rdi + 2]; ret
0x00136b7b : add [rax], eax; add [rax], al; lea r8, [rip - 0x7206]; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0015ffd0 : add [rax], al; nop [rax]; nop cs:[rax + rax]; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; ret
0x00068145 : mov eax, [rbx + 8]; mov [rbx + 0x10], rax; mov rax, [rbx + 0x20]; mov [rbx + 0x28], rax; pop rbx; ret
0x0013b17d : mov rdi, rbp; lea rsi, [rip + 0x293df1]; mov rax, [rax + 0x10]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x000afb8d : add [rax], al; add [rax - 0x39], cl; rol [rax + rax], 0; add bl, al; nop [rax + rax]; mov rax, 5; ret
0x000c84b1 : add [rax], al; add [rbx - 0x7bf0d606], al; stosd [rdi], eax; add [rax], al; add [rax - 0x7d], cl; ret
0x000eef54 : add [rax], al; add [rax], al; mov rdx, [rip + 0x2dac39]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00111c7c : add [rax], al; add [rax], al; mov rdx, [rip + 0x2b7f11]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00097a7d : add [rax], al; add [rbx + 0x3568b0e], cl; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 7]; ret
0x001533bc : add [rax], al; add [rax], al; mov dx, [rsi + 1]; mov cx, [rsi]; mov [rdi + 1], dx; mov [rdi], cx; ret
0x000bf77a : mov esi, ebp; push rdx; mov rdx, [rsp + 0x28]; mov rdi, [rsp + 0x20]; mov rax, [rsp + 0x18]; call rax
0x0006ca98 : push rdi; sbb [rax - 0x75], cl; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x00103d89 : mov eax, [rip + 0x2c5da1]; mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x00131ccb : add [rax], al; add [rax], al; add bl, dh; movq mm0, [rdi + 8]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x00096c3d : add [rax], al; add [rbx + 0x3568b0e], cl; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x0013b17e : mov edi, ebp; lea rsi, [rip + 0x293df1]; mov rax, [rax + 0x10]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x000eef24 : add [rax], al; add [rax], al; mov rdx, [rip + 0x2dac69]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x000a549b : add [rax], al; add [rax - 0x77], cl; test [rax + rdx*4], ah; add [rax], al; add [rax + 0x39], cl; ret
0x000962bc : add [rax], al; add [rax], al; mov cx, [rsi]; mov dl, [rsi + 2]; mov [rdi], cx; mov [rdi + 2], dl; ret
0x0005bb0b : mov cl, 3; add [rax], al; lea rcx, [rip + 0x131f52]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x000957c7 : adc [rsi - 0x75], ah; sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x0009577f : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x00068144 : mov rax, [rbx + 8]; mov [rbx + 0x10], rax; mov rax, [rbx + 0x20]; mov [rbx + 0x28], rax; pop rbx; ret
0x0007afef : add [rdi], ecx; test [rdx + 1], ch; add [rax], al; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax
0x0000459b : add [rax], al; push rax; mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x00096e9a : sbb bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x0012d267 : add [rax], eax; add [rax], al; mov rax, [rax + 0x23b8]; xor esi, esi; mov rdi, rbx; call [rax + 0x28]
0x00135628 : mov rax, [rdi + 0x90]; mov eax, [rax + 0xc]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0015bcfe : add [rax + 0x48018b48], dl; mov [rdx], eax; mov rax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x0010234c : add [rax], al; add [rax], al; mov rdx, [rip + 0x2c7841]; neg eax; mov fs:[rdx], eax; mov rax, -1; ret
0x00135629 : mov eax, [rdi + 0x90]; mov eax, [rax + 0xc]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0015e030 : inc [rax + 0xf000679]; test [rbp + 0x48fffffb], ah; mov eax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x0011f1ea : add [rax], al; add [rbp - 0x647af025], al; add [rax], al; add [rax + 0x63], cl; fisttp [rax + 1]; ret
0x00097d15 : movq mm2, [rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret
0x00020d05 : mov rdx, [rsp + 0x10]; mov rsi, rbp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, [rsp + 8]; call rax
0x0015bd3d : add [rax], r8b; mov ax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; mov rax, rdi; ret
0x0016d229 : add [rax], al; add [rcx - 0x876b730], cl; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper ; ret
0x00097d55 : movq mm2, [rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret
0x000cc950 : mov [rsi + 0x38], eax; cdqe ; movzx eax, [r9 + rax]; mov [rdi + 8], 1; mov [rdi], al; mov eax, 1; ret
0x0006652d : add [rax - 0x73], cl; add [rax - 0x77], rcx; sub [rax - 0x78], r8b; cmp [rcx + rcx*4 - 0x30], al; ret
0x00103d88 : mov rax, [rip + 0x2c5da1]; mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x0012b41e : mov r8, [rsp + 0x28]; mov rcx, [rsp + 0x20]; mov rdx, [rsp + 0x18]; mov rsi, [rsp + 0x10]; call [rax]
0x00062436 : sub [rax - 0x75], ecx; sbb [r9 + rcx*4 - 0x1a], r8b; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax
0x00095821 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x00022fe5 : mov [rsi], rax; lea rax, [r10 + r8*4]; mov [rsi + 0x10], r10; mov [rsi + 0x28], rax; xor eax, eax; ret
0x0015bd5e : add [rax], al; mov eax, [rcx]; mov [rdx], eax; mov al, [rcx + 4]; mov [rdx + 4], al; mov rax, rdi; ret
0x0009cf0a : add [rdx], ebp; xor r8d, r8d; mov rcx, r12; mov rdx, r14; lea r9, [rsp + 0x28]; mov rdi, rbp; call rbx
0x0014d65e : add [rax], al; mov rcx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00128e96 : add [rax], al; lea r14, [rsp + 0x58]; xor edx, edx; mov rsi, r13; mov rdi, rbp; mov rcx, r14; call r10
0x0009629d : add [rax], al; add [rdx - 0x3ce877ea], cl; nop ; nop cs:[rax + rax]; mov dx, [rsi]; mov [rdi], dx; ret
0x0016ed00 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2cc63]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016ef41 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2ca23]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00170881 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2b222]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00141d0f : mov rax, [rip + 0x28956a]; lea rdx, [rsp + 8]; lea rsi, [rsp + 0x190]; mov rdi, rbp; call [rax + 0x18]
0x00137f2a : mov rax, [rbx + 8]; movaps xmm[rsp + 0x30], xmm0; push r14; push r13; lea r9, [rsp + 0x3a]; call [rax]
0x0007dbc3 : add [rax], al; add [rdx], al; lea rdx, [rip + 0xefc12]; lea rax, [rip + 0xefbab]; cmovne rax, rdx; ret
0x001327fe : add [rax], al; mov rdi, [rdi + 0x40]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx
0x0016ef40 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2ca23]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0001cbfd : add [rax], r8b; andpd xmm0, xmm[rip + 0x17df48]; andpd xmm1, xmm[rip + 0x17df30]; orpd xmm0, xmm1; ret
0x0017076c : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2b337]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x001725bd : add [rax], al; add [rax - 0x73], cl; or r11d, r8d; nop ; nop cs:[rax + rax]; lea rax, [rdi + 0xa]; ret
0x0015282e : add [rax], al; mov rdx, [rsi - 0xc]; mov ecx, [rsi - 4]; mov [rdi - 0xc], rdx; mov [rdi - 4], ecx; ret
0x001725dd : add [rax], al; add [rax - 0x73], cl; or r8d, r11d; nop ; nop cs:[rax + rax]; lea rax, [rdi + 0xc]; ret
0x0016f251 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c712]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00170948 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2b15c]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0009570c : movnti [r8 + 0x66f0ff3], r10; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; ret
0x0015292e : add [rax], al; mov rdx, [rsi - 0xa]; mov ecx, [rsi - 4]; mov [rdi - 0xa], rdx; mov [rdi - 4], ecx; ret
0x0014d47e : add [rax], al; mov rcx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0015270e : add [rax], al; mov rdx, [rsi - 0xe]; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x00170a7a : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2b02a]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0007daf2 : add [rax], al; add [rdx], al; lea rdx, [rip + 0xf46a3]; lea rax, [rip + 0xf462c]; cmovne rax, rdx; ret
0x0013bf0c : add [rax], al; add [rax], al; mov rax, [rdi + 8]; mov [rsp + 8], r8; lea rsi, [rsp + 0x10]; call [rax]
0x00096e5a : sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x00170d13 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2ad90]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000234cb : add [rax], al; mov [rsi], ax; movabs rax, -0x21131992fffefff5; mov [rsi + 0xc], rax; xor eax, eax; ret
0x000633cc : add [rax], al; add [rax], al; sub rdx, [rcx + 8]; mov eax, [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret
0x0007d9e4 : add [rax], al; add [rdx], al; lea rdx, [rip + 0x1c861]; lea rax, [rip + 0x1c79a]; cmovne rax, rdx; ret
0x00063053 : xor [rcx + rcx*4 + 0x61], cl; cmp [rax + 1], bh; mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x0009d1e9 : add [rdx], ebp; xor r8d, r8d; mov rcx, r12; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x001106e4 : add [rax], al; add [rdx], al; lea rdx, [rip - 0x764af]; lea rax, [rip - 0x76576]; cmovne rax, rdx; ret
0x00170570 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2b533]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016f318 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c64c]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00170947 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2b15c]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00134b74 : movdqu xmm0, xmm[rax + 0x30]; movups xmm[rsi], xmm0; mov rax, [rax + 0x40]; mov [rsi + 0x10], rax; ret
0x0007dba2 : add [rax], al; add [rdx], al; lea rdx, [rip + 0xf4023]; lea rax, [rip + 0xf3fac]; cmovne rax, rdx; ret
0x00135f0f : mov edi, [rsp]; mov rbp, [rsp + 0x30]; mov rax, [rdi + 0x38]; lea rsi, [rbp + 0x18]; call [rax + 0x10]
0x0017033f : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2b765]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0014da4e : add [rax], al; mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00110802 : add [rax], al; add [rdx], al; lea rdx, [rip + 0x613b3]; lea rax, [rip + 0x6133c]; cmovne rax, rdx; ret
0x000ee0f5 : add [rcx - 0x3c3fcefa], cl; nop [rax + rax]; mov eax, [rdi + 0x108]; mov [rsi], eax; xor eax, eax; ret
0x0007de54 : add [rax], al; add [rdx], al; lea rdx, [rip + 0x1c3f1]; lea rax, [rip + 0x1c32a]; cmovne rax, rdx; ret
0x00170571 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2b533]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00128cfb : add [rax], al; lea r13, [rsp + 0x10]; xor edx, edx; mov rsi, r12; mov rdi, rbx; mov rcx, r13; call r10
0x00064d34 : lea rax, [rsp + 0x20]; push rax; push rbx; mov rcx, [rsp + 0x20]; lea r8, [rsp + 0x38]; call [r13 + 8]
0x00099650 : mov cx, [rsi]; mov dl, [rsi + 2]; mov [rdi], cx; mov [rdi + 2], dl; xor ch, ch; mov [rdi + 3], ch; ret
0x00110732 : add [rax], al; add [rdx], al; lea rdx, [rip + 0x614a3]; lea rax, [rip + 0x6142c]; cmovne rax, rdx; ret
0x0009c509 : push 0; xor r8d, r8d; mov rsi, rbp; mov rdi, [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx
0x00096e36 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x0014d84d : add [rax], al; add [rax - 0x75], cl; mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0016f13c : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c827]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0007dea2 : add [rax], al; add [rdx], al; lea rdx, [rip + 0xf3d43]; lea rax, [rip + 0xf3ccc]; cmovne rax, rdx; ret
0x0012b41f : mov eax, [rsp + 0x28]; mov rcx, [rsp + 0x20]; mov rdx, [rsp + 0x18]; mov rsi, [rsp + 0x10]; call [rax]
0x00170c84 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2ae1f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00170d8e : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2ad16]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0008d5c4 : mov dh, 7; lea rdx, [rip + 0xef523]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00141d3a : add al, [rax]; add [rax], al; cmp ebx, 3; cmove ebx, eax; mov rax, [rip + 0x289535]; call [rax + 0x28]
0x00096db5 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x0001cd8e : movsd xmm1, [rip + 0x17e37a]; orpd xmm0, xmm[rip + 0x17ddc2]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret
0x0001f896 : add [rcx + rcx*4 + 0x5c], cl; and al, 8; nop [rax]; mov rsi, r13; mov rdi, r14; mov rdx, r12; call rbp
0x001345cf : add [rbx + 0x48102444], cl; lea edx, [rip + 0x5da55]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x001528ae : add [rax], al; mov rdx, [rsi - 0xb]; mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x001107b4 : add [rax], al; add [rdx], al; lea rdx, [rip - 0x7659f]; lea rax, [rip - 0x76666]; cmovne rax, rdx; ret
0x001355f0 : mov rax, [rdi + 0x90]; mov eax, [rax + 0x10]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x00170d14 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2ad90]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00110753 : add [rax], al; add [rdx], al; lea rdx, [rip + 0x5d092]; lea rax, [rip + 0x5d02b]; cmovne rax, rdx; ret
0x00022fe6 : mov [rsi], eax; lea rax, [r10 + r8*4]; mov [rsi + 0x10], r10; mov [rsi + 0x28], rax; xor eax, eax; ret
0x0016f449 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c51a]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00170803 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2b2a0]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00168d84 : mov dh, 7; lea rdx, [rip + 0x13d63]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0012bd8b : call [rax + 0x20]; mov rsi, [rbp + 0x20]; mov r12d, eax; mov rdi, rbx; xor eax, eax; call [rbp + 0x28]
0x0014d29e : add [rax], al; mov rcx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x001355f1 : mov eax, [rdi + 0x90]; mov eax, [rax + 0x10]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret
0x0017076d : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2b337]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016b304 : mov dh, 7; lea rdx, [rip + 0x117e3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00170440 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2b664]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016f654 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c30f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00170c85 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2ae1f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00170a79 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2b02a]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00131bd4 : movdqu xmm0, xmm[rax + 0x90]; movups xmm[rsi], xmm0; mov rax, [rax + 0xa0]; mov [rsi + 0x10], rax; ret
0x0001d0fc : movss xmm1, [rip + 0x17e6f0]; orps xmm0, xmm[rip + 0x17da75]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret
0x0009cc11 : add [rcx + rcx*4 - 0x17], cl; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x00110662 : add [rax], al; add [rdx], al; lea rdx, [rip + 0x61573]; lea rax, [rip + 0x614fc]; cmovne rax, rdx; ret
0x0007db54 : add [rax], al; add [rdx], al; lea rdx, [rip + 0x1c6d1]; lea rax, [rip + 0x1c60a]; cmovne rax, rdx; ret
0x0012bdb4 : mov rdi, rbx; mov r14, rax; sub rax, r12; mov [rbp + 0x18], rax; mov rax, [rbx + 8]; call [rax + 0x28]
0x00137f2b : mov eax, [rbx + 8]; movaps xmm[rsp + 0x30], xmm0; push r14; push r13; lea r9, [rsp + 0x3a]; call [rax]
0x00092142 : add [rsi + 0xf], esp; adc cl, [rcx + 8]; movlpd [rdx], xmm0; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x0016ee0f : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2cb54]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00170882 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2b222]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00110683 : add [rax], al; add [rdx], al; lea rdx, [rip + 0x5d162]; lea rax, [rip + 0x5d0fb]; cmovne rax, rdx; ret
0x00064d35 : lea eax, [rsp + 0x20]; push rax; push rbx; mov rcx, [rsp + 0x20]; lea r8, [rsp + 0x38]; call [r13 + 8]
0x0016d22a : add [rax], al; mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper ; ret
0x0015dd0d : add [rax], al; add [rsi - 0x77], ah; adc [rax + 0x66c30251], ecx; nop [rax + rax]; mov [rcx], edx; ret
0x0014da4d : add [rax], al; add [rax - 0x75], cl; mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0016f655 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c30f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016f44a : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c51a]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016f75e : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c206]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016f1d3 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c790]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00141d10 : mov eax, [rip + 0x28956a]; lea rdx, [rsp + 8]; lea rsi, [rsp + 0x190]; mov rdi, rbp; call [rax + 0x18]
0x00170d8d : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2ad16]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0012fc40 : add [rbp - 0x74b48b40], al; add eax, [rbp + 0x481574c0]; add esp, 8; mov eax, 1; pop rbx; pop rbp; ret
0x0007dec3 : add [rax], al; add [rdx], al; lea rdx, [rip + 0xef932]; lea rax, [rip + 0xef8cb]; cmovne rax, rdx; ret
0x0015279e : add [rax], al; mov rdx, [rsi - 0xd]; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x0009cc0f : add [rdx], ebp; mov rcx, r13; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx
0x0016f75d : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c206]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016ed01 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2cc63]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00139b8e : add [rax], al; mov rdi, [rdi + 0x48]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx
0x0016f13d : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c827]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0006a085 : add [rsi], 2; add [rax], al; sub r12, r14; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call [rax + 0x40]
0x0016f252 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c712]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00166db4 : mov dh, 7; lea rdx, [rip + 0x15d33]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0016f1d4 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c790]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016f6e4 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c280]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0017033e : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2b765]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0013830b : add [rax], al; nop [rax]; mov rax, [rip + 0x2917b9]; lea rdx, [rip + 0x296b52]; mov fs:[rax], rdx; ret
0x001108c2 : add [rax], al; add [rdx], al; lea rdx, [rip + 0x618c3]; lea rax, [rip + 0x6184c]; cmovne rax, rdx; ret
0x00110614 : add [rax], al; add [rdx], al; lea rdx, [rip - 0x763df]; lea rax, [rip - 0x764a6]; cmovne rax, rdx; ret
0x0012b05f : add [rbp - 0x7b], al; dec [rdi]; test [rdi + 0x48000000], dl; mov eax, [rdi + 0x38]; call [rax + 0x18]
0x00097cba : sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret
0x001725cd : add [rax], al; add [rax - 0x73], cl; or r8b, r11b; nop ; nop cs:[rax + rax]; lea rax, [rdi + 0xb]; ret
0x0016f6e3 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c280]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0016ee10 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2cb54]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00044180 : add [rax], al; add [rbp + rcx*4 + 0x2c], cl; test [rax], eax; add [rax], al; add [rax + 0x29], cl; ret
0x00135f0e : mov rdi, [r12]; mov rbp, [rsp + 0x30]; mov rax, [rdi + 0x38]; lea rsi, [rbp + 0x18]; call [rax + 0x10]
0x0014dc4e : add [rax], al; mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0012fb50 : add [rbp - 0x74c48b40], al; add eax, [rbp + 0x481574c0]; add esp, 8; mov eax, 1; pop rbx; pop rbp; ret
0x0006cb99 : dec [rax - 0x39]; add [rax], al; add [rax], al; mov [rbx + 0x58], 0; mov [rbx + 0x50], 0; pop rbx; ret
0x0016f317 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c64c]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000ed50b : adc [r15], r9b; adc [rdi + 0x20], eax; movups xmm[rdi + 0x30], xmm0; movups xmm[rdi + 0x40], xmm0; ret
0x0014d84e : add [rax], al; mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0015a664 : mov dh, 7; lea rdx, [rip + 0x22483]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0015267e : add [rax], al; mov rdx, [rsi - 0xf]; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x0007da53 : add [rax], al; add [rdx], al; lea rdx, [rip + 0xefda2]; lea rax, [rip + 0xefd3b]; cmovne rax, rdx; ret
0x0003858f : add [rax - 0x73], cl; push rax; add [rax - 0x77], ecx; push rcx; sub dh, al; add [rcx - 0x7d], cl; ret
0x0005fd98 : xchg [rbx + 0x44000000], al; mov ecx, esp; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x48]
0x00097c99 : sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret
0x0007da32 : add [rax], al; add [rdx], al; lea rdx, [rip + 0xf41b3]; lea rax, [rip + 0xf413c]; cmovne rax, rdx; ret
0x0008fc14 : mov dh, 7; lea rdx, [rip + 0xeced3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x001354a4 : movdqu xmm0, xmm[rax + 0x40]; movups xmm[rsi], xmm0; mov rax, [rax + 0x50]; mov [rsi + 0x10], rax; ret
0x0001cd60 : movsd xmm1, [rip + 0x17e3b0]; orpd xmm0, xmm[rip + 0x17de00]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret
0x0006867f : xor [rax + 0x39], cl; adc [r10 + 0x2a], r14b; mov [rdi + 0x18], rax; mov [rsi], rax; xor eax, eax; ret
0x00063e85 : push rdi; mov rdi, rbp; push [rax + 0x38]; mov rcx, [rbx + 8]; mov r9, [rax + 0x10]; call [rbp + 0x18]
0x0012bdb5 : mov edi, ebx; mov r14, rax; sub rax, r12; mov [rbp + 0x18], rax; mov rax, [rbx + 8]; call [rax + 0x28]
0x0017043f : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2b664]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00110823 : add [rax], al; add [rdx], al; lea rdx, [rip + 0x5cfa2]; lea rax, [rip + 0x5cf3b]; cmovne rax, rdx; ret
0x00170804 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x2b2a0]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0001d0d7 : movss xmm1, [rip + 0x17e719]; orps xmm0, xmm[rip + 0x17daba]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret
0x00158104 : mov dh, 7; lea rdx, [rip + 0x249e3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00097b7c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0x10]; ret
0x0009ca79 : mov rdi, [r12 + 0x10]; push 1; xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx
0x0009220e : add [rax], al; xor ah, ah; mov [rdx + 8], ah; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret
0x0014c94f : add [rbp + rcx*4 + 0x1d], cl; cdq ; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003aea2 : mov edi, esi; mov [rbp - 0x4e0], r11; mov rdx, [rbp - 0x510]; mov rsi, [rbp - 0x528]; call [rax + 0x38]
0x0003b917 : mov esi, [rbp - 0x528]; mov [rbp - 0x4e0], r11; mov rdi, r14; mov rdx, [rbp - 0x510]; call [r15 + 0x38]
0x0012d3f4 : add [rax], al; mov rax, [r13 + 8]; mov rsi, [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call [rax + 0x20]
0x0001cfcf : add bl, dh; movups xmm3, xmm[rip + 0x16b6f8]; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret
0x0013b1ec : sub [rax], al; add [rax], al; mov [rsp + 0x38], rax; xor eax, eax; mov [rsp], 2; mov rdi, rsp; call rdx
0x0002268d : add [rax], al; add [rax - 0x7b], cl; call [rbx + 0x74]; cmp dh, [rcx]; rol [rax + 0x375003f], 0x5b; ret
0x00141d36 : mov ebx, fs:[rax]; mov eax, 2; cmp ebx, 3; cmove ebx, eax; mov rax, [rip + 0x289535]; call [rax + 0x28]
0x000bb164 : add [rax], al; lea rsi, [rip + 0xd3e2b]; mov edx, ecx; movsxd rax, [rsi + rdx*4]; add rax, rsi; jmp rax
0x00094e48 : add [rsi + 0xf], esp; adc eax, [rdx]; movlpd xmm1, [rcx + 8]; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x000f4662 : adc ecx, [rbx + 0x77890847]; cmp [rip - 0x1010], ah; or esi, eax; xor eax, eax; mov [rdi + 8], esi; ret
0x00134c1b : add [rax], al; lea rcx, [rip + 0x5d7f0]; mov esi, esi; movsxd rax, [rcx + rsi*4]; add rax, rcx; jmp rax
0x00103b01 : add [rsi + 0x2e], ah; nop [rax + rax]; nop [rax]; mov rax, [rip + 0x2c6071]; mov eax, [rax + 0x38]; ret
0x000872f6 : movzx eax, [rsp + 0xc]; mov [rdi + 4], ax; movzx eax, [rsp + 0xe]; mov [rdi + 6], al; mov rax, rdi; ret
0x001458a9 : mov [rsp + 0x50], edx; mov rdx, [rsp + 0x28]; mov r9d, [rdx]; mov rdx, r14; add r9, [rsp + 8]; call rax
0x000962dc : add [rax], al; add [rax], al; mov ecx, [rsi]; mov dl, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dl; ret
0x00060123 : xchg al, bh; add [rax], al; add [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x58]
0x00131c8b : add [rax], al; lea rcx, [rip + 0x6035c]; mov esi, esi; movsxd rax, [rcx + rsi*4]; add rax, rcx; jmp rax
0x0013b9f2 : xor eax, eax; mov rsi, rsp; test edx, edx; setne al; mov [rsp], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0009631c : add [rax], al; add [rax], al; mov rcx, [rsi]; mov dl, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dl; ret
0x0005fd99 : add [rax], 0; add [rcx + rcx*4 - 0x1f], al; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x48]
0x00096f15 : movq mm2, [rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x000922d8 : add [rsi + 0xf], esp; adc eax, [rdx]; movlpd xmm1, [rcx + 6]; movlpd [rdx + 6], xmm1; mov rax, rdi; ret
0x00097d75 : movq mm2, [rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret
0x000d6e45 : lea ecx, [rip + 0xb8fd1]; movzx eax, dl; mov rbp, rsi; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0003b916 : mov rsi, [rbp - 0x528]; mov [rbp - 0x4e0], r11; mov rdi, r14; mov rdx, [rbp - 0x510]; call [r15 + 0x38]
0x0003aea1 : mov rdi, r14; mov [rbp - 0x4e0], r11; mov rdx, [rbp - 0x510]; mov rsi, [rbp - 0x528]; call [rax + 0x38]
0x00096e99 : sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x000bf4f7 : add [rcx + rcx*4 - 0xf], cl; mov rdx, [rsp + 0x68]; mov rsi, [rsp + 0x60]; mov rdi, [rsp + 8]; call r12
0x0017252c : add [rax], al; add [rax - 0x73], cl; movnti [r14 - 0x70], r12d; nop cs:[rax + rax]; lea rax, [rdi]; ret
0x001354fb : add [rax], al; lea rcx, [rip + 0x5cf50]; mov esi, esi; movsxd rax, [rcx + rsi*4]; add rax, rcx; jmp rax
0x0009561c : add [rax], al; add [rax], al; mov ecx, [rsi]; mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; ret
0x0012c931 : adc bl, al; nop [rax + rax]; movdqu xmm0, xmm[rdi + 0x20]; mov [rsi], 6; movups xmm[rsi + 8], xmm0; ret
0x0012bf02 : pop rdx; pop rcx; mov r10, [rsp + 8]; mov ebp, eax; mov rax, [r10 + 8]; mov rdi, r10; call [rax + 0x20]
0x0009cd62 : push 0; mov rcx, r15; mov rdx, [rsp + 0x10]; mov rsi, [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx
0x0010e589 : mov edx, ebp; movdqu xmm0, xmm[r15 - 0x18]; mov [rbp - 0x80], 0; movups xmm[rbp - 0x78], xmm0; call rax
0x00135817 : add [rax], al; mov rsi, [rsp + 0x28]; mov rdi, rbp; add [rax], 1; mov rax, [r15 + 0x60]; call [rax + 8]
0x000922f8 : add [rsi + 0xf], esp; adc eax, [rdx]; movlpd xmm1, [rcx + 7]; movlpd [rdx + 7], xmm1; mov rax, rdi; ret
0x000922b8 : add [rsi + 0xf], esp; adc eax, [rdx]; movlpd xmm1, [rcx + 5]; movlpd [rdx + 5], xmm1; mov rax, rdi; ret
0x000965bb : add [rax], al; add [rax], al; add [rcx + 0x66c3ff57], cl; nop ; nop cs:[rax + rax]; mov [rdi], edx; ret
0x000b0503 : mov [rsp], eax; mov eax, esi; add eax, r9d; mov [rsp + 0x40], eax; mov rsi, rbp; mov rdi, r12; call rbx
0x0009ca7a : mov edi, [rsp + 0x10]; push 1; xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx
0x000c5bbf : add [rax], al; lea rdx, [rip + 0xc9bd8]; mov esi, esi; movsxd rax, [rdx + rsi*4]; add rax, rdx; jmp rax
0x00099651 : mov ecx, [rsi]; mov dl, [rsi + 2]; mov [rdi], cx; mov [rdi + 2], dl; xor ch, ch; mov [rdi + 3], ch; ret
0x0012af93 : add [rax], 0; add [rax], al; mov rax, [rbx + 0x20]; mov rsi, [rsp + 0x10]; mov rdi, rbp; call [rax + 8]
0x0013560e : add [rax], al; mov rax, [rdx]; mov rdx, [rdi + 0x90]; bswap eax; mov [rdx + 0x10], eax; mov eax, 1; ret
0x000b0502 : mov [rsp], rax; mov eax, esi; add eax, r9d; mov [rsp + 0x40], eax; mov rsi, rbp; mov rdi, r12; call rbx
0x001528af : add [rax - 0x75], cl; push rsi; cmc ; mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x000f7b58 : add bl, al; nop [rax + rax]; mov [rdi], 0; mov [rip + 0x2d53f7], cl; mov rax, rdi; mov [r8 - 1], 0; ret
0x000c4f40 : add [rax], al; lea rdx, [rip + 0xca427]; mov esi, esi; movsxd rax, [rdx + rsi*4]; add rax, rdx; jmp rax
0x0000de6e : add [rax], al; mov rax, [rip + 0x3bbc81]; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax + 0xa8]; ret
0x00135533 : xor r11b, r8b; nop cs:[rax + rax]; movdqu xmm0, xmm[rdi + 0x30]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x0009cfda : push 0; mov rcx, r12; mov r9, [rsp + 0x10]; mov rsi, [rsp + 0x18]; mov rdx, r14; mov rdi, rbp; call rbx
0x00131cad : add [rax], al; add bl, al; nop [rax]; movdqu xmm0, xmm[rdx]; mov eax, 1; movups xmm[rdi + 8], xmm0; ret
0x0013c81f : add [rdi], cl; mov dh, 6; lea rsi, [rsp + 4]; mov [rsp + 4], eax; mov rax, [rdi + 8]; call [rax + 0x48]
0x00065b5a : push 0; xor r8d, r8d; mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x000627b9 : xchg [rdx + 0x48000000], ah; mov eax, [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax
0x000f8321 : add al, ch; sar [rax + rsi*8 - 1], 1; mov [rip + 0x2d4c3e], 0; mov [rip + 0x2d4c43], 0; add rsp, 8; ret
0x001721c2 : add [rdi + 0x12], dh; vmovdqu64 zmm[rdi + rdx - 0x40], zmm0; vmovdqu64 zmm[rdi], zmm0; vzeroupper ; ret
0x0009570d : movnti [rax + 0x66f0ff3], edx; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; ret
0x00095881 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0007ad7d : add [rax], al; mov edi, ebx; call [rip + 0x351901]; mov [rip + 0x3518eb], 1; mov eax, ebx; pop rbx; ret
0x0006597e : push 0; xor r8d, r8d; mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x0003a5f2 : mov [rbp - 0x4e8], ecx; mov [rbp - 0x500], r11; mov rsi, [rbp - 0x4f8]; mov rdi, r14; call [rax + 0x38]
0x00065a62 : leave ; xor edx, edx; xor r8d, r8d; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx
0x00096c0b : add [rax], 0; add [rax], al; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x00145c99 : mov [rsp + 0x30], edx; mov rdx, [rsp + 0x28]; mov r9d, [rdx]; mov rdx, r14; add r9, [rsp + 8]; call rax
0x0003a5f1 : mov [rbp - 0x4e8], rcx; mov [rbp - 0x500], r11; mov rsi, [rbp - 0x4f8]; mov rdi, r14; call [rax + 0x38]
0x00142733 : add [rax], al; add [rax - 0x39], cl; add al, [rax]; add [rax], al; add [rdx - 1], bh; mov eax, edx; ret
0x00096be9 : add ebx, eax; nop [rax + rax]; mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x000d6e44 : lea rcx, [rip + 0xb8fd1]; movzx eax, dl; mov rbp, rsi; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x00138f90 : add [rax], al; mov [rsp + 0xb8], 1; call [rax + 0x18]; mov rax, [r15 + 8]; mov rdi, r15; call [rax + 8]
0x000bb1d7 : add [rax], al; lea rdi, [rip + 0xd3fa4]; mov edx, esi; movsxd rax, [rdi + rdx*4]; add rax, rdi; jmp rax
0x0010e588 : mov rdx, r13; movdqu xmm0, xmm[r15 - 0x18]; mov [rbp - 0x80], 0; movups xmm[rbp - 0x78], xmm0; call rax
0x0016345f : add [rax - 0x75], cl; add [rax - 0x77], ecx; add cl, [rbx + 0x42890841]; or [rax - 0x77], cl; clc ; ret
0x00097cf9 : sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret
0x0013c19e : call [rax + 0x48e08944]; mov esi, esp; mov rdi, rbp; mov [rsp], rax; mov rax, [rbp + 8]; call [rax + 8]
0x000996d0 : mov rcx, [rsi]; mov dl, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dl; xor ch, ch; mov [rdi + 9], ch; ret
0x0014b54f : mov ecx, [rip + 0x27eb0b]; lea r11, [rip + 0x50814]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0011fee4 : add [rbp - 0x17], dh; lea eax, [rdx + 1]; mov [r8], 0; movsxd rdx, eax; add rdi, rdx; mov [r9], rdi; ret
0x001532db : add [rax], 0; add [rax], al; mov edx, [rsi + 1]; mov ecx, [rsi]; mov [rdi + 1], edx; mov [rdi], ecx; ret
0x000c88f1 : xchg [rdx + 0x48000004], esp; lea edx, [rip + 0xc6ef7]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0014e5fb : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d7a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006498f : xor [rcx + rcx*4 - 0x11], cl; mov rax, [rax + 0x60]; sar r8, 2; mov [rsp + 0x30], rax; call [r13 + 0x30]
0x00063aa7 : mov rax, [rdx + 0x20]; cmp [rdx + 8], rax; cmovae rax, [rdx + 8]; sub rax, [rdx + 0x10]; sar rax, 2; ret
0x001386a5 : sub [rax], eax; add al, [rax]; add [rax], al; mov fs:[rbx], rax; mov rax, [rip + 0x291502]; pop rbx; ret
0x0014c40b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015bd3f : add [rsi - 0x75], ah; add [rsi - 0x77], esp; add cl, [rdx + 0x42880241]; add cl, [rax - 0x77]; clc ; ret
0x0012af94 : add [rax], al; add [rax], al; mov rax, [rbx + 0x20]; mov rsi, [rsp + 0x10]; mov rdi, rbp; call [rax + 8]
0x0012c5dd : mov esi, [rsp + 0x68]; ror ax, 8; mov rdi, [rsp]; mov [rsp + 0x1a2], ax; mov rax, [rsp + 0x28]; call rax
0x0014eddb : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cfc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099885 : mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; xor ch, ch; mov [rdi + 0x17], ch; ret
0x000fbc85 : add [rax], al; add [rbx - 0x3d], bl; nop [rax + rax]; mov rax, [rip + 0x2cdf01]; mov fs:[rax], 0x16; ret
0x000997ad : add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; xor ch, ch; mov [rdi + 0x10], ch; ret
0x0014c6ab : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138eee : add [rax], al; add [rcx + rcx*4 - 0x12], cl; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xd0], 2; call rax
0x00134c3c : add bl, al; nop ; movdqu xmm0, xmm[rdx]; mov eax, 1; mov [rdi + 0x18], 1; movups xmm[rdi + 8], xmm0; ret
0x0012c96c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rdi + 0x38]; mov [rsi], 9; movups xmm[rsi + 8], xmm0; ret
0x0014c372 : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f872]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000b8cb6 : add [rax], al; lea rsi, [rip + 0xd60ed]; movzx eax, cl; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x0016007f : add al, bl; nop [rax + rax]; nop cs:[rax + rax]; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx + 3]; ret
0x00096c0c : add [rax], al; add [rax], al; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x0015bdee : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; mov rax, rdi; ret
0x00099864 : mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; xor ch, ch; mov [rdi + 0x16], ch; ret
0x0014c7fb : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f3e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ca9f : add [rbp + rcx*4 + 0x1d], cl; int1 ; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000ca893 : xchg [rcx + 0x48000004], ecx; lea edx, [rip + 0xc50c5]; movsxd rax, [rdx + r15*4]; add rax, rdx; jmp rax
0x0014cd3b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4eea9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ef2b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ce79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000996d1 : mov ecx, [rsi]; mov dl, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dl; xor ch, ch; mov [rdi + 9], ch; ret
0x0014cede : add [rax], al; mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x001381ac : lea esi, [rsp + 8]; mov rdi, rbx; call [rax + 0x10]; mov rax, [rbx + 8]; mov rdi, rbx; call [rax + 0x20]
0x00134c6b : add [rax], al; add [rax], al; add bl, dh; movq mm0, [rdi + 0x1c]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x0013d127 : mov [rdi], edx; mov [rdi + 0x18], rsi; mov [rdi + 0x28], 0; mov [rdi + 0x20], 0; mov [rdi + 8], rax; ret
0x0014bd7b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c16b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f1cb : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cbd9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013846d : sub [rax], eax; add al, [rax]; add [rax], al; mov fs:[rbx], rax; mov rax, [rip + 0x29183a]; pop rbx; ret
0x00092182 : mov [rdx + 3], ah; mov ax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; mov rax, rdi; ret
0x00160053 : add cl, [rax - 0x73]; add al, bl; nop [rax + rax]; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx + 1]; ret
0x00152f5b : add [rax], 0; add [rax], al; mov rdx, [rsi + 5]; mov rcx, [rsi]; mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x0014c94b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f299]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b4ed : mov rcx, [rip + 0x27eb6c]; lea r11, [rip + 0x50835]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0014ca9b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f149]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014dec5 : mov ecx, [rip + 0x27c195]; lea r11, [rip + 0x4e01e]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x00087207 : add [rbx + 0x48082454], cl; add eax, edi; mov [rdi], edx; movzx edx, [rsp + 0xc]; mov [rdi + 4], dx; ret
0x0014c55b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000630d1 : mov [rax], edx; mov [rax + 0x28], rdx; mov [rax + 0x18], rdx; mov [rbx], ecx; xor eax, eax; pop rbx; ret
0x0014f5bb : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c7e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015311b : add [rax], 0; add [rax], al; mov rdx, [rsi + 1]; mov rcx, [rsi]; mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x00099690 : mov ecx, [rsi]; mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; xor ch, ch; mov [rdi + 6], ch; ret
0x000630d0 : mov [rax], rdx; mov [rax + 0x28], rdx; mov [rax + 0x18], rdx; mov [rbx], ecx; xor eax, eax; pop rbx; ret
0x0016345e : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x0014e4ab : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d8f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000cae68 : add [rax], al; lea rdi, [rip + 0xc4b73]; movzx eax, al; movsxd rax, [rdi + rax*4]; add rax, rdi; jmp rax
0x0011e108 : xchg [rbx - 0x75000000], ah; add al, [rbx - 0x79f0f008]; cwde ; add [rax], al; add [rcx - 0x77], al; ret
0x00099865 : mov ecx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; xor ch, ch; mov [rdi + 0x16], ch; ret
0x0014c2bb : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b4ee : mov ecx, [rip + 0x27eb6c]; lea r11, [rip + 0x50835]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0015be0e : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; mov rax, rdi; ret
0x000fc4a1 : sub [rax], al; add [rax], al; nop [rax]; mov rsi, [rax]; mov rdi, [rbp - 0x58]; mov r12d, r14d; call r15
0x0014f07b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cd29]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e9eb : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d3b9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014eb3b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d269]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ed42 : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d062]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015303b : add [rax], 0; add [rax], al; mov rdx, [rsi + 3]; mov rcx, [rsi]; mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x001381ab : lea rsi, [r12 + 8]; mov rdi, rbx; call [rax + 0x10]; mov rax, [rbx + 8]; mov rdi, rbx; call [rax + 0x20]
0x0014e74b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d659]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f31b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ca89]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000f390 : mov rax, [rip + 0x3ba799]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x0014f46b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c939]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000067cc : leave ; push rax; push rbx; mov r9, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call r15
0x0014bc2b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f70b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c699]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012c930 : adc bl, r8b; nop [rax + rax]; movdqu xmm0, xmm[rdi + 0x20]; mov [rsi], 6; movups xmm[rsi + 8], xmm0; ret
0x001530ab : add [rax], 0; add [rax], al; mov rdx, [rsi + 2]; mov rcx, [rsi]; mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x0013cd20 : sbb [rbp + rdx + 0x44], dh; add [rbx + 0x28], esp; mov [rbx + 0x20], r12; pop rbx; pop rbp; pop r12; ret
0x00152eeb : add [rax], 0; add [rax], al; mov rdx, [rsi + 6]; mov rcx, [rsi]; mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x00138525 : sub [rax], eax; add al, [rax]; add [rax], al; mov fs:[rbx], rax; mov rax, [rip + 0x2917da]; pop rbx; ret
0x0014dec4 : mov rcx, [rip + 0x27c195]; lea r11, [rip + 0x4e01e]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x00099680 : mov ecx, [rsi]; mov dl, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dl; xor ch, ch; mov [rdi + 5], ch; ret
0x0009a32d : adc [rdi + rdx - 0x20], ebp; movups xmm[rdi + rdx - 0x30], xmm6; movups xmm[rdi + rdx - 0x40], xmm7; ret
0x0014e89b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d509]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099884 : mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; xor ch, ch; mov [rdi + 0x17], ch; ret
0x0014b54e : mov rcx, [rip + 0x27eb0b]; lea r11, [rip + 0x50814]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x00001130 : add [rax], al; lea rdx, [rip + 0x17a497]; mov eax, eax; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0005fac8 : add [rax], al; add [rcx + rcx*4 - 0x1f], al; mov edx, ebp; mov rsi, r13; mov rdi, rbx; call [r14 + 0x48]
0x0000f391 : mov eax, [rip + 0x3ba799]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x001531fb : add [rax], 0; add [rax], al; mov edx, [rsi + 3]; mov ecx, [rsi]; mov [rdi + 3], edx; mov [rdi], ecx; ret
0x00063aa8 : mov eax, [rdx + 0x20]; cmp [rdx + 8], rax; cmovae rax, [rdx + 8]; sub rax, [rdx + 0x10]; sar rax, 2; ret
0x00096be8 : add r11d, r8d; nop [rax + rax]; mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x0012c5dc : mov rsi, [rsp + 0x68]; ror ax, 8; mov rdi, [rsp]; mov [rsp + 0x1a2], ax; mov rax, [rsp + 0x28]; call rax
0x0014ec8b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d119]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014becb : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099804 : mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; xor ch, ch; mov [rdi + 0x13], ch; ret
0x0014badb : movdqu xmm[r8], xmm0; lea r11, [rip + 0x50109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015326b : add [rax], 0; add [rax], al; mov edx, [rsi + 2]; mov ecx, [rsi]; mov [rdi + 2], edx; mov [rdi], ecx; ret
0x0014df1e : mov rcx, [rip + 0x27c13b]; lea r11, [rip + 0x4e004]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x000997c4 : mov cl, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; xor ch, ch; mov [rdi + 0x11], ch; ret
0x000997e4 : mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; xor ch, ch; mov [rdi + 0x12], ch; ret
0x0014c01b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0001cfce : add bl, sil; movups xmm3, xmm[rip + 0x16b6f8]; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret
0x00138dd2 : add [rax], al; mov r14, rsp; nop [rax + rax]; mov rax, [r15 + 8]; mov rsi, rbp; mov rdi, r15; call [rax]
0x0013553b : add [rax], al; add [rax], al; add bl, dh; movq mm0, [rdi + 0x30]; mov eax, 1; movups xmm[rdx], xmm0; ret
0x00176450 : xchg [rbx + 0x48000002], ebp; lea edx, [rip + 0x265d4]; movsxd r12, [rdx + r12*4]; add rdx, r12; jmp rdx
0x001386a4 : sub [eax], eax; add al, [rax]; add [rax], al; mov fs:[rbx], rax; mov rax, [rip + 0x291502]; pop rbx; ret
0x00045f8d : xchg [rbp + 8], bl; add [rax], al; mov rdx, rbx; mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [r13 + 0x38]
0x0015267f : add [rax - 0x75], cl; push rsi; int1 ; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x0014cbeb : movdqu xmm[r8], xmm0; lea r11, [rip + 0x4eff9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00137f59 : lea esi, [rdx + 8]; mov rdi, rbx; call [rax + 0x10]; mov rax, [rbx + 8]; mov rdi, rbx; call [rax + 0x20]
0x00152e7b : add [rax], 0; add [rax], al; mov rdx, [rsi + 7]; mov rcx, [rsi]; mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x001385e5 : sub [rax], eax; add al, [rax]; add [rax], al; mov fs:[rbx], rax; mov rax, [rip + 0x29162a]; pop rbx; ret
0x00152fcb : add [rax], 0; add [rax], al; mov rdx, [rsi + 4]; mov rcx, [rsi]; mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x0000de6d : add [rax], r8b; mov rax, [rip + 0x3bbc81]; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax + 0xa8]; ret
0x00137f58 : lea rsi, [r10 + 8]; mov rdi, rbx; call [rax + 0x10]; mov rax, [rbx + 8]; mov rdi, rbx; call [rax + 0x20]
0x0012afec : add [rax], al; mov rax, [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov [rbx + 0x18], 1; call [rax + 0x28]
0x0014df1f : mov ecx, [rip + 0x27c13b]; lea r11, [rip + 0x4e004]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0005fd9a : add [rax], al; add [rcx + rcx*4 - 0x1f], al; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call [r13 + 0x48]
0x0011f7ab : inc [rsp + rsi*2]; sub [rbx + 0xba05ff], eax; add [rax], al; add [rax + 0x102], bh; cmovne eax, edx; ret
0x0006a84c : add [rax], al; add [rcx + rcx*4 - 0x3e], cl; mov [rsp], r8; mov rsi, r13; mov rdi, rbx; call [rax + 0x78]
0x0015dd1f : add [rcx + 0x1f0fc311], cl; add [rsi + 0x2e], ah; nop [rax + rax]; mov [rcx], edx; mov [rcx + 4], dl; ret
0x000998ec : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; xor ch, ch; mov [rdi + 0x1a], ch; ret
0x0000feb9 : xchg [rdx + 0x48fffffd], ebx; lea edx, [rip + 0x1782cb]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0010e88c : movdqu xmm0, xmm[r13 - 0x18]; mov [rbp - 0x80], edx; mov rdx, rbx; movups xmm[rbp - 0x78], xmm0; call rax
0x00138efa : add [rax], al; mov [rsp + 0xd0], 2; call rax; nop [rax]; mov rdi, r15; mov rax, [r15 + 8]; call [rax + 8]
0x00099665 : add [rsi + 0x2e], ah; nop [rax + rax]; mov edx, [rsi]; mov [rdi], edx; xor ch, ch; mov [rdi + 4], ch; ret
0x0015072c : add edi, edx; sfence ; lea r11, [rip + 0x4b678]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004a27f : add [rax], al; lea rdx, [rip + 0x1429e4]; movzx eax, al; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0004780e : lea rdi, [rip + 0x33b]; add rax, rdi; mov r8, rcx; mov [rbp - 0x4d8], 1; mov [rbp - 0x4f0], 0x20; jmp rax
0x0006d21e : mov rcx, [rsp + 8]; mov rax, [rsp]; mov rdi, r15; movzx esi, [rcx]; lea rbx, [rcx + 1]; call [rax + 0x18]
0x0015311c : add [rax], al; add [rax], al; mov rdx, [rsi + 1]; mov rcx, [rsi]; mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x0001b76b : add [rax], al; lea r10, [rip + 0x16cb14]; movzx edi, dl; movsxd rdi, [r10 + rdi*4]; add rdi, r10; jmp rdi
0x000fc40b : add [rax], al; add [rax], al; add [rax - 0x75], cl; xor ecx, [rcx + rcx*4 - 0x19]; mov r13, rbx; call rbp
0x0016345d : add [rax], r8b; mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x0009a350 : movups xmm[rdi + 0x10], xmm1; movups xmm[rdi + rdx - 0x10], xmm2; movups xmm[rdi + rdx - 0x20], xmm3; ret
0x0011ef1e : add [rax], al; add bh, al; or [r9], r13b; add [rax], al; add [rcx], dh; ror [rcx - 0x76b7f3a9], 0x3e; ret
0x000965cf : add [rcx + 0x1f0fc317], cl; add [rsi + 0x2e], ah; nop [rax + rax]; mov [rdi], edx; mov [rdi + 4], dl; ret
0x00075d71 : mov [rax], rcx; mov rax, [rip + 0x353f85]; mov [rax], rsi; mov rax, [rip + 0x353e7b]; mov [rax], rdi; ret
0x00141d13 : xchg eax, ebp; sub [rax], al; lea rdx, [rsp + 8]; lea rsi, [rsp + 0x190]; mov rdi, rbp; call [rax + 0x18]
0x00088d45 : xor [rax + 9], cl; int1 ; bsf rcx, rcx; movzx eax, [rax + rcx]; movzx edx, [rdx + rcx]; sub eax, edx; ret
0x0014dd44 : add edi, edx; sfence ; lea r11, [rip + 0x4dea0]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005ba53 : add [rax], al; lea rsi, [rip + 0x131f50]; movzx eax, al; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x001532dc : add [rax], al; add [rax], al; mov edx, [rsi + 1]; mov ecx, [rsi]; mov [rdi + 1], edx; mov [rdi], ecx; ret
0x0006d21f : mov ecx, [rsp + 8]; mov rax, [rsp]; mov rdi, r15; movzx esi, [rcx]; lea rbx, [rcx + 1]; call [rax + 0x18]
0x0010e2b5 : movdqu xmm0, xmm[r13 - 0x18]; mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x00134e22 : push 1; add [rax], al; xor eax, eax; mov rsi, [rsp + 0x30]; mov rdi, rbx; mov rcx, [rsp + 0x28]; call rcx
0x0009213f : movlpd xmm0, [rcx]; movlpd xmm1, [rcx + 8]; movlpd [rdx], xmm0; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x000922b6 : movlps xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx + 5]; movlpd [rdx + 5], xmm1; mov rax, rdi; ret
0x0016cc5c : xchg eax, edx; lea rcx, [rip + 0xfe8c]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x000922f5 : movlpd xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx + 7]; movlpd [rdx + 7], xmm1; mov rax, rdi; ret
0x00138f81 : add [rax], al; add [rax], eax; add [rax], al; mov [rsp + 0xb0], 1; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x00138aa6 : add [rax], al; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x00092184 : add esp, [rsi - 0x75]; add [rsi - 0x77], esp; add cl, [rdx + 0x42880241]; add cl, [rax - 0x77]; clc ; ret
0x0014dd43 : add rdi, rdx; sfence ; lea r11, [rip + 0x4dea0]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015303c : add [rax], al; add [rax], al; mov rdx, [rsi + 3]; mov rcx, [rsi]; mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x00043a01 : adc [rdi + 0x48000000], -0x73; add [rbx - 0x76b7fe3d], rax; sub [r8 + 0x468b4102], r9b; add al, 0x39; ret
0x0010e411 : add [rax], 0; add [rax - 0x77], cl; xchg eax, r8d; mov eax, [r12 + 0x60]; mov [rbp - 0x80], eax; call rcx
0x000922b5 : movlpd xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx + 5]; movlpd [rdx + 5], xmm1; mov rax, rdi; ret
0x000998cb : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; xor ch, ch; mov [rdi + 0x19], ch; ret
0x000922f6 : movlps xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx + 7]; movlpd [rdx + 7], xmm1; mov rax, rdi; ret
0x000873d9 : mov [rdi], edx; movzx edx, [rsp + 0xc]; mov [rdi + 4], dx; movzx edx, [rsp + 0xe]; mov [rdi + 6], dl; ret
0x0015072b : add rdi, rdx; sfence ; lea r11, [rip + 0x4b678]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152e7c : add [rax], al; add [rax], al; mov rdx, [rsi + 7]; mov rcx, [rsi]; mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x0012d85e : push rax; or [rbp + 0x48c074c0], al; mov eax, [rbx + 8]; lea rsi, [rbp + 8]; mov rdi, rbx; call [rax + 8]
0x001531fc : add [rax], al; add [rax], al; mov edx, [rsi + 3]; mov ecx, [rsi]; mov [rdi + 3], edx; mov [rdi], ecx; ret
0x0000b866 : adc [rax - 0x7b], cl; push [rbp + rcx - 0x18]; pushfq ; adc eax, [rax]; mov [rbx + 0x10], 0; pop rbx; ret
0x00094e46 : movlps xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx + 8]; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x00075d72 : mov [rax], ecx; mov rax, [rip + 0x353f85]; mov [rax], rsi; mov rax, [rip + 0x353e7b]; mov [rax], rdi; ret
0x0015326c : add [rax], al; add [rax], al; mov edx, [rsi + 2]; mov ecx, [rsi]; mov [rdi + 2], edx; mov [rdi], ecx; ret
0x001530ac : add [rax], al; add [rax], al; mov rdx, [rsi + 2]; mov rcx, [rsi]; mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x0005bb0a : xchg [rcx + 0x48000003], esi; lea ecx, [rip + 0x131f52]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0012ba89 : mov esi, 4; mov rdi, rbp; lea r8, [rip + 0xb8]; lea rdx, [rip + 0xf781]; lea r9, [rsp + 0x20]; call [rax]
0x0010dffa : movdqu xmm0, xmm[rbx + 0x30]; mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x00064ea0 : push rdi; mov rdi, rbp; push [rax + 0x38]; mov rcx, [rbx + 0x10]; lea r8, [rsp + 0x10]; call [rbp + 0x18]
0x0009984a : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; xor ch, ch; mov [rdi + 0x15], ch; ret
0x0009c676 : adc [rdx + 1], ch; push 0; xor r8d, r8d; mov rsi, r13; lea r9, [rsp + 0x28]; lea rcx, [rax + 4]; call rbx
0x00152fcc : add [rax], al; add [rax], al; mov rdx, [rsi + 4]; mov rcx, [rsi]; mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x0009a642 : movdqu xmm[rdi + 0x10], xmm0; movdqu xmm[rdi + rdx - 0x10], xmm0; movdqu xmm[rdi + rdx - 0x20], xmm0; ret
0x00152eec : add [rax], al; add [rax], al; mov rdx, [rsi + 6]; mov rcx, [rsi]; mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x00092140 : movlps xmm0, [rcx]; movlpd xmm1, [rcx + 8]; movlpd [rdx], xmm0; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x00094e45 : movlpd xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx + 8]; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x000997e5 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; xor ch, ch; mov [rdi + 0x12], ch; ret
0x000922d6 : movlps xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx + 6]; movlpd [rdx + 6], xmm1; mov rax, rdi; ret
0x000922d5 : movlpd xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx + 6]; movlpd [rdx + 6], xmm1; mov rax, rdi; ret
0x0004780f : lea edi, [rip + 0x33b]; add rax, rdi; mov r8, rcx; mov [rbp - 0x4d8], 1; mov [rbp - 0x4f0], 0x20; jmp rax
0x0013cd1f : sbb [r13 + r10 + 0x44], sil; add [rbx + 0x28], esp; mov [rbx + 0x20], r12; pop rbx; pop rbp; pop r12; ret
0x00152f5c : add [rax], al; add [rax], al; mov rdx, [rsi + 5]; mov rcx, [rsi]; mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x0001020a : xchg [rcx + 0x48fffffb], edx; lea edx, [rip + 0x177ffe]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00173835 : add [rsi + 0x2e], ah; nop [rax + rax]; movzx eax, [rdi - 0x10]; movzx edx, [rsi - 0x10]; sub eax, edx; ret
0x0001d0d8 : movups xmm1, xmm[rip + 0x17e719]; orps xmm0, xmm[rip + 0x17daba]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret
0x000996b0 : mov ecx, [rsi]; mov edx, [rsi + 3]; mov [rdi], ecx; mov [rdi + 3], edx; xor ch, ch; mov [rdi + 7], ch; ret
0x0012b9c4 : lea rdx, [rip + 0xf855]; lea r8, [rip + 0x17e]; mov esi, 4; mov rdi, rbp; lea r9, [rsp + 0x20]; call [rax]
0x0001cd8f : movups xmm1, xmm[rip + 0x17e37a]; orpd xmm0, xmm[rip + 0x17ddc2]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret
0x0012b6f9 : movaps xmm[rsp + 0x30], xmm0; push [rip + 0x6f864]; push [rip + 0x6f856]; lea r9, [rsp + 0x2c]; call [rax]
0x00097a1e : add [rax], al; mov cx, [rsi]; mov dl, [rsi + 2]; mov [rdi], cx; mov [rdi + 2], dl; lea rax, [rdi + 3]; ret
0x0013698e : add al, 0; add [rax], al; movdqa xmm0, xmm[rip + 0x64716]; movaps xmm[rsp + 0x20], xmm0; call [rax + 0x28]
0x000998a4 : mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; xor ch, ch; mov [rdi + 0x18], ch; ret
0x00166d67 : xchg eax, edx; lea rcx, [rip + 0x15d81]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x00135521 : add [rax], al; add bl, al; nop [rax]; movdqu xmm0, xmm[rdx]; mov eax, 1; movups xmm[rdi + 0x30], xmm0; ret
0x0010ebd9 : add [rax], al; mov [rbp - 0x70], rdx; mov edx, [r13 + 0x60]; mov [rbp - 0x80], edx; mov rdx, r12; call rax
0x000476e9 : mov [rbp - 0x508], r8; mov rdx, r14; mov rsi, r11; mov [rbp - 0x500], r11; mov rdi, r13; call [r15 + 0x38]
0x0012b9c5 : lea edx, [rip + 0xf855]; lea r8, [rip + 0x17e]; mov esi, 4; mov rdi, rbp; lea r9, [rsp + 0x20]; call [rax]
0x0005e2b5 : add [rbx + 0xc083], cl; add [rbp + 0x48117ec0], al; mov eax, [rbx + 0x98]; mov rdi, rax; call [rax + 0x20]
0x0012b8d9 : movaps xmm[rsp + 0x30], xmm0; push [rip + 0x6f684]; push [rip + 0x6f676]; lea r9, [rsp + 0x2c]; call [rax]
0x00064145 : add [rax], al; mov rsi, [rbx + 0x10]; mov rdx, [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call [r14 + 0x70]
0x0014dec7 : xchg eax, ebp; shl [rdi], 0; lea r11, [rip + 0x4e01e]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0001d361 : mov eax, [rsp - 0x10]; and rax, rcx; or rdx, rax; mov [rsp - 0x20], rdx; movdqa xmm0, xmm[rsp - 0x28]; ret
0x0003b1dc : movsxd rax, [rdi + rax*4]; add rax, rsi; mov r11, rdx; mov [rbp - 0x518], 0; mov [rbp - 0x528], 1; jmp rax
0x0015dd6f : add [rax - 0x77], cl; adc [rax + 0x66c30851], ecx; nop [rax + rax]; mov [rcx], rdx; mov [rcx + 8], dx; ret
0x0016b2b7 : xchg eax, edx; lea rcx, [rip + 0x11831]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0014d0a5 : mov ecx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0010e412 : add [rax], al; add [rax - 0x77], cl; xchg eax, r8d; mov eax, [r12 + 0x60]; mov [rbp - 0x80], eax; call rcx
0x00063148 : add [rax - 0x39], cl; add [rax], al; add [rax], al; mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x000999cd : movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; mov [rdi + 0x20], cl; xor ch, ch; mov [rdi + 0x21], ch; ret
0x0015bd2b : add [rax], al; add [rax], al; add [rsi - 0x75], ah; add [rsi - 0x77], esp; add cl, [rax - 0x77]; clc ; ret
0x0015bcab : add [rax], al; add [rax], al; add [rax - 0x75], cl; add [rax - 0x77], ecx; add cl, [rax - 0x77]; clc ; ret
0x0010e4a1 : add [rax - 0x77], cl; push rbp; nop ; mov edx, [r12 + 0x60]; mov [rbp - 0x80], edx; mov rdx, rbx; call rax
0x00169d97 : lea edx, [rip + 0x32bd3]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0009992b : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; xor ch, ch; mov [rdi + 0x1c], ch; ret
0x000996f0 : mov rcx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; xor ch, ch; mov [rdi + 0xa], ch; ret
0x0010e4a0 : add [rax], al; mov [rbp - 0x70], rdx; mov edx, [r12 + 0x60]; mov [rbp - 0x80], edx; mov rdx, rbx; call rax
0x0000f5ab : mov rax, [rax]; mov rax, [rax]; mov rax, [rax + 0x40]; movzx eax, [rax + rdi*2 + 0x100]; and eax, esi; ret
0x0001d0fd : movups xmm1, xmm[rip + 0x17e6f0]; orps xmm0, xmm[rip + 0x17da75]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret
0x00097a2f : add eax, ebx; nop [rax + rax]; nop cs:[rax + rax]; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 4]; ret
0x000921d2 : mov [rdx + 6], ah; mov eax, [rcx]; mov [rdx], eax; mov ax, [rcx + 4]; mov [rdx + 4], ax; mov rax, rdi; ret
0x0001d360 : mov rax, [rsp - 0x10]; and rax, rcx; or rdx, rax; mov [rsp - 0x20], rdx; movdqa xmm0, xmm[rsp - 0x28]; ret
0x0010ebda : add [rax - 0x77], cl; push rbp; nop ; mov edx, [r13 + 0x60]; mov [rbp - 0x80], edx; mov rdx, r12; call rax
0x00133459 : add [rax], al; add [rcx + 0x480c2444], cl; mov eax, [rbp + 8]; mov esi, 8; mov rdi, rbp; call [rax + 0x30]
0x000921b2 : mov [rdx + 5], ah; mov eax, [rcx]; mov [rdx], eax; mov al, [rcx + 4]; mov [rdx + 4], al; mov rax, rdi; ret
0x0000f5ac : mov eax, [rax]; mov rax, [rax]; mov rax, [rax + 0x40]; movzx eax, [rax + rdi*2 + 0x100]; and eax, esi; ret
0x0016b427 : lea edx, [rip + 0x31583]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0009990b : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; xor ch, ch; mov [rdi + 0x1b], ch; ret
0x000998a5 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; xor ch, ch; mov [rdi + 0x18], ch; ret
0x00099664 : add [rsi + 0x2e], spl; nop [rax + rax]; mov edx, [rsi]; mov [rdi], edx; xor ch, ch; mov [rdi + 4], ch; ret
0x000999a7 : push rsi; adc bl, dh; movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; xor ch, ch; mov [rdi + 0x20], ch; ret
0x000e55b7 : add [rax - 0x7b], cl; dec [rcx + 0xf]; std ; add r9, rax; add rax, [rip + 0x2e45cf]; mov r8, rax; call r12
0x00168d2c : xchg eax, edx; lea rcx, [rip + 0x13dbc]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0005d73d : add [rbx + 0xc083], cl; add [rbp + 0x48247ec0], al; mov eax, [rbx + 0x98]; mov rdi, rax; call [rax + 0x20]
0x00099824 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; xor ch, ch; mov [rdi + 0x14], ch; ret
0x00169d96 : lea r10, [rip + 0x32bd3]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00045845 : xchg [rsi + 0xd], cl; add [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [rbx + 0x38]
0x0014d0a4 : mov rcx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0000f575 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rax, [rsi + 0x70]; movsxd rdi, edi; mov eax, [rax + rdi*4]; ret
0x001776eb : add [rax], al; add [rax], al; add [rbp + 0x31], al; fisttp [rax + 9]; fadd [rcx + 0xf]; xchg eax, ebp; ret
0x0016b426 : lea r10, [rip + 0x31583]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0016006e : add [rax], al; mov ax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x0001cd61 : movups xmm1, xmm[rip + 0x17e3b0]; orpd xmm0, xmm[rip + 0x17de00]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret
0x000996f1 : mov ecx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; xor ch, ch; mov [rdi + 0xa], ch; ret
0x0006168e : sub [rax + 0x3b], cl; xor [rbx + 0x13], sil; lea rsi, [rcx + 1]; mov [rdx + 0x28], rsi; mov [rcx], dil; ret
0x00008b39 : push 0; mov r9, [rsp + 0x28]; mov rdx, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call r15
0x0013699f : call [rax + 0x28]; lea rdx, [rsp + 0x18]; mov esi, 6; mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x28]
0x000473b3 : add [rax], al; mov rdi, r13; mov [rbp - 0x4c0], r8; mov rdx, [rbp - 0x4d8]; mov rsi, r15; call [r14 + 0x38]
0x001373e3 : lea rdx, [rip - 0x781a]; lea r8, [rip - 0x7a71]; mov esi, 8; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x000f69fd : add [rbx + 0x2d642005], cl; add [rcx + 0x5c], al; mov [rip + 0x2d6448], eax; lea rax, [rip + 0x2d6415]; ret
0x0003113b : mov ecx, [rsi + 0x98]; mov r8, [rsi + 0x28]; mov r9, [rsi + 0x30]; mov rsi, [rsi + 0x70]; xor eax, eax; ret
0x0014dc6b : add [rax], al; add [rax], al; add [rbx + 0x4e8bf956], cl; cld ; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x0010bfc8 : add [rax], al; mov r10, [rbp - 0xc8]; mov edi, r12d; mov rdx, rax; mov rsi, [rbp - 0x98]; call [r10 + 0x28]
0x00069684 : add [rax], al; mov rax, [rbx + 0x18]; mov [rbx + 8], rax; mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x0006080e : adc [rax + 0x3b], cl; push rax; or [rbx + 0xb], dh; lea rcx, [rdx + 4]; mov [rax], rcx; mov eax, [rdx]; ret
0x00136ef5 : lea edx, [rip - 0x751b]; lea r8, [rip - 0x7482]; mov esi, 3; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x00096ef4 : movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x0014dc0e : push rsi; clc ; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0012b8e4 : push [rip + 0x6f676]; lea r9, [rsp + 0x2c]; call [rax]; mov rax, [r13 + 8]; mov rdi, r13; call [rax + 0x20]
0x00096ed4 : movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x001373e4 : lea edx, [rip - 0x781a]; lea r8, [rip - 0x7a71]; mov esi, 8; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x00095820 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x00097a1d : add [rax], r8b; mov cx, [rsi]; mov dl, [rsi + 2]; mov [rdi], cx; mov [rdi + 2], dl; lea rax, [rdi + 3]; ret
0x00097a2e : add r8d, r11d; nop [rax + rax]; nop cs:[rax + rax]; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 4]; ret
0x0014d08c : mov dl, [rsi - 1]; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x00096eb4 : movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x00137041 : lea rdx, [rip - 0x7628]; lea r8, [rip - 0x75cf]; mov esi, 6; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x00096d2b : add [rax], al; add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x001371b1 : lea rdx, [rip - 0x7798]; lea r8, [rip - 0x773f]; mov esi, 7; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0014c40f : add [rbp + rcx*4 + 0x1d], cl; fincstp ; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000476ea : mov [rbp - 0x508], eax; mov rdx, r14; mov rsi, r11; mov [rbp - 0x500], r11; mov rdi, r13; call [r15 + 0x38]
0x00136dc5 : lea edx, [rip - 0x73eb]; lea r8, [rip - 0x7352]; mov esi, 2; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0005d73c : add [r11 + 0xc083], r9b; add [rbp + 0x48247ec0], al; mov eax, [rbx + 0x98]; mov rdi, rax; call [rax + 0x20]
0x00137303 : push [rip + 0x63c57]; lea r8, [rip - 0xab40]; mov esi, 4; lea rdx, [rip + 0x3f04]; mov rdi, rbx; call [rax]
0x000e55b6 : add [rax], al; test rdi, rdi; cmove rdi, r13; add r9, rax; add rax, [rip + 0x2e45cf]; mov r8, rax; call r12
0x000d0504 : add [rax], al; lea rcx, [rip + 0xbf7b3]; movzx r14d, r14b; movsxd rax, [rcx + r14*4]; add rax, rcx; jmp rax
0x0014da0e : push rsi; clc ; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00136ef4 : lea rdx, [rip - 0x751b]; lea r8, [rip - 0x7482]; mov esi, 3; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x000b0a12 : add rax, rdx; mov rdx, r14; and rdx, r12; and edx, 1; lea r15, [rax + rdx]; mov [rsp + 0xb8], r15; call r13
0x000f6bdd : add [rbx + 0x2d624005], cl; add [rcx + 0x5c], al; mov [rip + 0x2d6268], eax; lea rax, [rip + 0x2d6235]; ret
0x0014d62d : push rsi; cld ; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00174c8b : add [rax], al; add [rax], al; add [rbp + 0x31], al; fisttp [rcx + 9]; fiadd [rcx + 0xf]; xchg eax, ebp; ret
0x0012e8d7 : add [rax], al; add [rax], al; mov rdi, [rbx]; mov [rcx], eax; sub rdx, rsi; mov rbp, rdx; call [rbx + 0x10]
0x00136b73 : lea rdx, [rip - 0x71da]; mov esi, 1; lea r8, [rip - 0x7206]; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0014d44d : push rsi; cld ; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0016006d : add [rax], r8b; mov ax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x00173834 : add [rsi + 0x2e], spl; nop [rax + rax]; movzx eax, [rdi - 0x10]; movzx edx, [rsi - 0x10]; sub eax, edx; ret
0x000e8909 : add [rax], al; add [rax], al; add [rcx - 0x39], cl; add [r8], r8b; add [rax], al; add [rax - 0x7d], cl; ret
0x0000488f : push 0; mov r9, [rsp + 0x40]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call r14
0x00097d54 : movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret
0x0003113a : mov rcx, [rsi + 0x98]; mov r8, [rsi + 0x28]; mov r9, [rsi + 0x30]; mov rsi, [rsi + 0x70]; xor eax, eax; ret
0x0006f5ac : add [rax], al; add [rax], al; mov rax, [rdi]; nop ; mov [rip + 0x35aa26], 1; mov [rip + 0x35a9f3], rax; ret
0x0015dd9f : add [rax - 0x77], cl; adc [rcx + 0x66c30851], ecx; nop [rax + rax]; mov [rcx], rdx; mov [rcx + 5], rdx; ret
0x0014d26d : push rsi; cld ; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00166ef5 : leave ; lea r10, [rip + 0x34a33]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00136b74 : lea edx, [rip - 0x71da]; mov esi, 1; lea r8, [rip - 0x7206]; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x000d0454 : add [rax], al; lea rsi, [rip + 0xbf693]; movzx r12d, r12b; movsxd rax, [rsi + r12*4]; add rax, rsi; jmp rax
0x00097d14 : movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret
0x0000582f : push 0; mov r9, [rsp + 0x20]; mov rdx, [rsp + 0x30]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r13
0x00138ff4 : add [rax], al; add [rax], eax; add [rax], al; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xc8], rdx; call rax
0x000339d3 : add [rax], al; add [rax], al; add [rcx], al; add [rax + 9], cl; ror [rax - 0x77], 1; or [r8 + 2], r15b; ret
0x001642e5 : leave ; lea r10, [rip + 0x375c3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00005389 : push 0; mov r9, [rsp + 0x28]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x00004d51 : push 0; mov r9, [rsp + 0x28]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r12
0x0014ce9e : push rsi; clc ; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00097d34 : movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret
0x0013b1e5 : mov edx, edi; mov rax, fs:[0x28]; mov [rsp + 0x38], rax; xor eax, eax; mov [rsp], 2; mov rdi, rsp; call rdx
0x00030e0a : mov rcx, [rdi + 0x98]; mov r8, [rdi + 0x28]; mov r9, [rdi + 0x30]; mov rdi, [rdi + 0x68]; xor eax, eax; ret
0x00095840 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x0013b1e4 : mov rdx, rdi; mov rax, fs:[0x28]; mov [rsp + 0x38], rax; xor eax, eax; mov [rsp], 2; mov rdi, rsp; call rdx
0x000b0a13 : add eax, edx; mov rdx, r14; and rdx, r12; and edx, 1; lea r15, [rax + rdx]; mov [rsp + 0xb8], r15; call r13
0x00165325 : leave ; lea r10, [rip + 0x365c3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00087370 : movzx edx, [rsp - 8]; lea rax, [rdi + rax - 1]; mov [rdi], dx; movzx edx, [rsp - 6]; mov [rdi + 2], dl; ret
0x00038d11 : xchg bh, dl; or al, 0; add [rcx + rcx*4 - 0x16], cl; mov rsi, r9; mov rdi, [rbp - 0x8a8]; call [rbx + 0x38]
0x000061ea : push 0; mov r9, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; mov rax, [rsp + 0x20]; call rax
0x00139f91 : inc [rbp - 0x17bf040]; add [rax], al; add [rax - 0x75], cl; sbb [r9 + rcx*4 - 0x19], r9b; call [rax + 0x20]
0x0012bf01 : adc [rdx + 0x59], bl; mov r10, [rsp + 8]; mov ebp, eax; mov rax, [r10 + 8]; mov rdi, r10; call [rax + 0x20]
0x00009536 : push 0; mov r9, [rsp + 0x20]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x0000834d : push 0; mov r9, [rsp + 0x20]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r15
0x001371b2 : lea edx, [rip - 0x7798]; lea r8, [rip - 0x773f]; mov esi, 7; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x00072d52 : mov [rdx + rax], al; add [rax], al; mov rax, [rip + 0x356d92]; mov [rsp + 8], rdx; mov rdi, r15; call [rax]
0x0014d80e : push rsi; clc ; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00163515 : leave ; lea r10, [rip + 0x38353]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0011b9df : xchg eax, esi; add al, [rax]; mov rcx, rbx; mov rdx, r15; mov rsi, r14; lea rdi, [rip + 0x2b2b1e]; call r12
0x00136dc4 : lea rdx, [rip - 0x73eb]; lea r8, [rip - 0x7352]; mov esi, 2; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0014da6b : add [rax], al; add [rax], al; add [rbx + 0x4e8bfa56], cl; cld ; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x00087227 : mov [rdi], edx; movzx edx, [rsp + 0x14]; mov [rdi + 4], dx; movzx edx, [rsp + 0x16]; mov [rdi + 6], dl; ret
0x00095860 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x00030e0b : mov ecx, [rdi + 0x98]; mov r8, [rdi + 0x28]; mov r9, [rdi + 0x30]; mov rdi, [rdi + 0x68]; xor eax, eax; ret
0x0014d86b : add [rax], al; add [rax], al; add [rbx + 0x4e8bfb56], cl; cld ; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x00137042 : lea edx, [rip - 0x7628]; lea r8, [rip - 0x75cf]; mov esi, 6; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x0015dd8f : add [rax - 0x77], cl; adc [rcx + 0x66c30751], ecx; nop [rax + rax]; mov [rcx], rdx; mov [rcx + 8], edx; ret
0x0012ba8c : add [rax], al; mov rdi, rbp; lea r8, [rip + 0xb8]; lea rdx, [rip + 0xf781]; lea r9, [rsp + 0x20]; call [rax]
0x00099790 : mov rcx, [rsi]; mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; xor ch, ch; mov [rdi + 0xf], ch; ret
0x001623ec : mov [rdx], eax; mov rax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; cmp [rax], 1; sbb rax, -1; ret
0x001623eb : mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; cmp [rax], 1; sbb rax, -1; ret
0x0014c0ce : add [rax + 1], cl; salc ; lea r11, [rip + 0x4fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009575e : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x0014e40e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4d997]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f27e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4cb27]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00131d1d : mov eax, [rdi + 0x84]; mov [rdx + 0x68], eax; movzx eax, [rdi + 0x88]; mov [rdx + 0x6c], ax; mov eax, 1; ret
0x0013c02f : add [rcx + rcx*4 - 0x20], al; mov rsi, rsp; mov rdi, rbp; mov [rsp], rax; mov rax, [rbp + 8]; call [rax + 8]
0x00063def : mov ebp, [rdi + 0x98]; mov rax, fs:[0x28]; mov [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call [rbp + 0x20]
0x0006207e : mov [rax + 8], ecx; mov rcx, [rax + 0x10]; mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x0012d25f : add [rax], al; mov [rax + 0x23b0], 1; mov rax, [rax + 0x23b8]; xor esi, esi; mov rdi, rbx; call [rax + 0x28]
0x00097a4e : add [rax], al; mov ecx, [rsi]; mov dl, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dl; lea rax, [rdi + 5]; ret
0x0014e7fe : add [rax + 1], cl; salc ; lea r11, [rip + 0x4d5a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012542a : add [rax], al; add [rax - 0x39], cl; adc [rax], al; add [rax], al; add cl, ch; cmp dh, 0xff; jmp [rsi + 0xf]
0x000620bd : mov rcx, [rax + 0x10]; mov [rax + 8], rdx; mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x0009639e : add [rax], al; movdqu xmm0, xmm[rsi]; mov cl, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; ret
0x0014e55e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4d847]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000921f2 : mov [rdx + 7], ah; mov eax, [rcx]; mov [rdx], eax; mov eax, [rcx + 3]; mov [rdx + 3], eax; mov rax, rdi; ret
0x0014ba3e : add [rax + 1], cl; salc ; lea r11, [rip + 0x501a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013c02e : add [rax], al; mov eax, r12d; mov rsi, rsp; mov rdi, rbp; mov [rsp], rax; mov rax, [rbp + 8]; call [rax + 8]
0x0012b10c : push rax; adc [rbp + 0x493f74c0], al; mov edi, [rbp]; mov rsi, r12; mov rax, [rdi + 0x38]; call [rax + 0x10]
0x0014c21e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f66e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4c737]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ea9e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4d307]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0016ccb3 : movzx eax, [rdi]; lea rdx, [rip + 0xfe33]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x001354c1 : mov edi, [rdi + 0x10]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov [rdi + 0x58], 2; add rdi, 0x58; jmp rcx
0x00097b7b : add [rax], al; add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0x10]; ret
0x00132821 : mov edi, [rdi + 0x40]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov [rdi + 0x10], 2; add rdi, 0x10; jmp rcx
0x0014efde : add [rax + 1], cl; salc ; lea r11, [rip + 0x4cdc7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000473b4 : add [rcx + rcx*4 - 0x11], cl; mov [rbp - 0x4c0], r8; mov rdx, [rbp - 0x4d8]; mov rsi, r15; call [r14 + 0x38]
0x0014bf7e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00134b91 : mov edi, [rdi + 0x10]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov [rdi + 0x68], 2; add rdi, 0x68; jmp rcx
0x0004ab3c : add [rax], al; lea rdx, [rip + 0x1423e3]; movzx r12d, r12b; movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x00132820 : mov rdi, [rdi + 0x40]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov [rdi + 0x10], 2; add rdi, 0x10; jmp rcx
0x00134b90 : mov rdi, [rdi + 0x10]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov [rdi + 0x68], 2; add rdi, 0x68; jmp rcx
0x0014f51e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4c887]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c60e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00023510 : mov [rsi + 0x14], 5; mov [rsi], ax; movabs rax, -0x21131992fffefff5; mov [rsi + 0xc], rax; xor eax, eax; ret
0x00099770 : mov rcx, [rsi]; mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; xor ch, ch; mov [rdi + 0xe], ch; ret
0x0012eabe : add [rax], al; mov rax, [rsp + 0x20]; mov rcx, [rsp + 8]; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax
0x0014cb4e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4f097]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000ee0cf : add [rax], al; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x000956fe : add [rax], al; movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x001320ee : dec [rax - 0x75]; and al, 8; mov rdi, [r15]; lea rsi, [rax + 0x18]; mov rax, [rdi + 0x38]; call [rax + 0x10]
0x0014ee8e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4cf17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097a9e : add [rax], al; mov rcx, [rsi]; mov dl, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dl; lea rax, [rdi + 9]; ret
0x00099750 : mov rcx, [rsi]; mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; xor ch, ch; mov [rdi + 0xd], ch; ret
0x00099791 : mov ecx, [rsi]; mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; xor ch, ch; mov [rdi + 0xf], ch; ret
0x0014c75e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4f487]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00063dee : mov rbp, [rdi + 0x98]; mov rax, fs:[0x28]; mov [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call [rbp + 0x20]
0x00138f76 : mov rsi, r13; mov rdi, r15; mov [rsp + 0xa8], 1; mov [rsp + 0xb0], 1; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x0014c4be : add [rax + 1], cl; salc ; lea r11, [rip + 0x4f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0007cb1f : add bh, bh; rol [rbp + 0x480e74c0], 1; lea eax, [rip + 0x34fc03]; mov [rip + 0x34fbe4], rax; add rsp, 8; ret
0x00131bf1 : mov edi, [rdi + 0x10]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx
0x00045514 : add [rax], al; mov r13, [rbp - 0x8f8]; mov rsi, r12; mov rdi, [rbp - 0x8d0]; mov rdx, r13; call [rbx + 0x38]
0x0014bcde : add [rax + 1], cl; salc ; lea r11, [rip + 0x4ff07]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f3ce : add [rax + 1], cl; salc ; lea r11, [rip + 0x4c9d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006207d : mov [rax + 8], rcx; mov rcx, [rax + 0x10]; mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x0013c71d : int3 ; nop ; movzx eax, [rsi]; lea rsi, [rsp + 4]; mov [rsp + 4], eax; mov rax, [rdi + 8]; call [rax + 0x48]
0x00047812 : add eax, [rax]; add [rax + 1], cl; clc ; mov r8, rcx; mov [rbp - 0x4d8], 1; mov [rbp - 0x4f0], 0x20; jmp rax
0x0016009e : add [rax], al; mov eax, [rcx]; mov [rdx], eax; mov al, [rcx + 4]; mov [rdx + 4], al; lea rax, [rdx + 4]; ret
0x00131bf0 : mov rdi, [rdi + 0x10]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx
0x00099731 : mov ecx, [rsi]; mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; xor ch, ch; mov [rdi + 0xc], ch; ret
0x00138f77 : mov esi, ebp; mov rdi, r15; mov [rsp + 0xa8], 1; mov [rsp + 0xb0], 1; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x0012d84a : mov [rsp + 8], rax; mov rax, [rdi + 8]; movhps xmm0, [rsp + 8]; movaps xmm[rsp + 0x10], xmm0; call [rax + 8]
0x000bb1d5 : sbb [rax + rax], 0; lea rdi, [rip + 0xd3fa4]; mov edx, esi; movsxd rax, [rdi + rdx*4]; add rax, rdi; jmp rax
0x0010ea2c : movq mm0, [r13 + 0x30]; mov [rbp - 0x80], edx; lea rdx, [rcx + 0x70]; movups xmm[rbp - 0x78], xmm0; call rax
0x0010ea2d : movq mm0, [rbp + 0x30]; mov [rbp - 0x80], edx; lea rdx, [rcx + 0x70]; movups xmm[rbp - 0x78], xmm0; call rax
0x00099710 : mov rcx, [rsi]; mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; xor ch, ch; mov [rdi + 0xb], ch; ret
0x00099771 : mov ecx, [rsi]; mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; xor ch, ch; mov [rdi + 0xe], ch; ret
0x001354a3 : adc bl, dh; movq mm0, [rax + 0x40]; movups xmm[rsi], xmm0; mov rax, [rax + 0x50]; mov [rsi + 0x10], rax; ret
0x0014c8ae : add [rax + 1], cl; salc ; lea r11, [rip + 0x4f337]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f12e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4cc77]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00039145 : dec [rdi]; xchg [rcx + 0x4c000008], cl; mov edx, ebp; mov rsi, r9; mov rdi, [rbp - 0x8a8]; call [rbx + 0x38]
0x0013b430 : push rax; or [rbp + 0x485874c0], al; mov eax, [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call [rax + 8]
0x0009cd63 : add [rcx + rcx*4 - 7], cl; mov rdx, [rsp + 0x10]; mov rsi, [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx
0x00134b73 : adc bl, dh; movq mm0, [rax + 0x30]; movups xmm[rsi], xmm0; mov rax, [rax + 0x40]; mov [rsi + 0x10], rax; ret
0x0012d84b : mov [rsp + 8], eax; mov rax, [rdi + 8]; movhps xmm0, [rsp + 8]; movaps xmm[rsp + 0x10], xmm0; call [rax + 8]
0x00099751 : mov ecx, [rsi]; mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; xor ch, ch; mov [rdi + 0xd], ch; ret
0x00060985 : adc [rax + 0x3b], cl; push rax; or [rbx + 0x14], dh; lea rcx, [rdx + 4]; mov [rax], rcx; mov eax, [rdx]; ret
0x00131bd3 : adc bl, dh; movq mm0, [rax + 0x90]; movups xmm[rsi], xmm0; mov rax, [rax + 0xa0]; mov [rsi + 0x10], rax; ret
0x0014e94e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4d457]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00128af1 : add [rax], al; lea rcx, [rsp + 0x20]; xor edx, edx; mov rsi, r15; mov rdi, rbx; mov [rsp + 8], rcx; call r12
0x0009573e : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x0014e6ae : add [rax + 1], cl; salc ; lea r11, [rip + 0x4d6f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ebee : add [rax + 1], cl; salc ; lea r11, [rip + 0x4d1b7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bb8e : add [rax + 1], cl; salc ; lea r11, [rip + 0x50057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c9fe : add [rax + 1], cl; salc ; lea r11, [rip + 0x4f1e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000620be : mov ecx, [rax + 0x10]; mov [rax + 8], rdx; mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x000955ff : add [rbx - 0x3ce876ea], cl; nop ; nop cs:[rax + rax]; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; ret
0x0014d47d : add [rax], al; add [rax - 0x75], cl; cmc ; mov edx, [rsi - 4]; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0013c69d : int3 ; nop ; movsx eax, [rsi]; lea rsi, [rsp + 4]; mov [rsp + 4], eax; mov rax, [rdi + 8]; call [rax + 0x48]
0x001458a8 : sbb [rcx + 0x48502454], cl; mov edx, [rsp + 0x28]; mov r9d, [rdx]; mov rdx, r14; add r9, [rsp + 8]; call rax
0x00099730 : mov rcx, [rsi]; mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; xor ch, ch; mov [rdi + 0xc], ch; ret
0x00139bb1 : mov edi, [rdi + 0x48]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov [rdi + 0x10], 2; add rdi, 0x10; jmp rcx
0x001354c0 : mov rdi, [rdi + 0x10]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov [rdi + 0x58], 2; add rdi, 0x58; jmp rcx
0x0014cc9e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4ef47]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099711 : mov ecx, [rsi]; mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; xor ch, ch; mov [rdi + 0xb], ch; ret
0x0013ca27 : mov [rdi], ecx; mov [rdi + 0x20], rsi; mov [rdi + 0x18], rsi; mov [rdi + 0x28], edx; mov [rdi + 8], rax; ret
0x00139bb0 : mov rdi, [rdi + 0x48]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov [rdi + 0x10], 2; add rdi, 0x10; jmp rcx
0x0014be2e : add [rax + 1], cl; salc ; lea r11, [rip + 0x4fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00145c98 : sbb [rcx + 0x48302454], cl; mov edx, [rsp + 0x28]; mov r9d, [rdx]; mov rdx, r14; add r9, [rsp + 8]; call rax
0x0011067e : add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0x5d162]; lea rax, [rip + 0x5d0fb]; cmovne rax, rdx; ret
0x0012da7d : mov edx, [rdi + 0x48]; and r8d, 3; mov rdi, [r15]; add r14, r8; sub edx, r8d; mov rsi, r14; call [r15 + 0x40]
0x00065a61 : xor ecx, ecx; xor edx, edx; xor r8d, r8d; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx
0x0009742e : add edi, ecx; add rsi, rcx; lea r11, [rip + 0xf6f96]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0011081e : add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0x5cfa2]; lea rax, [rip + 0x5cf3b]; cmovne rax, rdx; ret
0x0014f1cf : add [rbp + rcx*4 + 0x1d], cl; fxch st(3); add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014dc4d : add [rax], al; add [rax - 0x75], cl; int1 ; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0016002e : add [rax + 0x48018b48], dl; mov [rdx], eax; mov rax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x00004596 : mov eax, [rsp + 0xa8]; push rax; mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x0008d5c3 : movzx eax, [rdi]; lea rdx, [rip + 0xef523]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x001635a4 : add [rax], al; lea rcx, [rdx + rcx - 0x10]; movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; sub eax, edx; ret
0x00171ec5 : add [rax], r8; add [rdx - 0xf], ah; dec [rax + 0x6f]; add [rdx - 0xf], esp; dec [rax + 0x6f]; jmp [r10 - 0xf]
0x0015a663 : movzx eax, [rdi]; lea rdx, [rip + 0x22483]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00020f0c : add [rax], al; add [rax], al; mov rdx, [rsp + 0x10]; mov rsi, r15; mov rdi, r13; mov rax, [rsp + 8]; call rax
0x0009bb25 : xor al, [rax]; lea rdx, [rip + 0xc72e2]; test [rax + 0x79], 2; lea rax, [rip + 0x13667]; cmovne rax, rdx; ret
0x0011074e : add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0x5d092]; lea rax, [rip + 0x5d02b]; cmovne rax, rdx; ret
0x000ee199 : add [rax], al; add [rax], al; add [rsi - 0x70], ah; mov eax, [rsi]; mov [rdi + 0x108], eax; xor eax, eax; ret
0x001375d3 : mov eax, [rdi + 0x38]; call [rax + 0x20]; mov rax, [rbx]; mov rdx, [rax + 8]; mov rdi, rax; call [rdx + 0x20]
0x00038a9b : dec [rdi]; xchg [rdx + 0x4800000f], dh; mov edx, ebx; mov rsi, r13; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x00095880 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x00097a9d : add [rax], r8b; mov rcx, [rsi]; mov dl, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dl; lea rax, [rdi + 9]; ret
0x0006f5a4 : add bl, al; nop cs:[rax + rax]; mov rax, [rdi]; nop ; mov [rip + 0x35aa26], 1; mov [rip + 0x35a9f3], rax; ret
0x0006811e : add [rax], al; mov rdx, [rax]; mov [rax + 8], rdx; mov rdx, [rax + 0x18]; mov [rax + 0x20], rdx; pop rbx; ret
0x000992bd : add rdi, rcx; add rsi, rcx; lea r11, [rip + 0xf52da]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00064954 : adc [rbp - 0x75], cl; scasd eax, [rdi]; cwde ; add [rax], al; add [rcx + rcx*4 - 0x11], cl; call [r13 + 0x20]
0x000992be : add edi, ecx; add rsi, rcx; lea r11, [rip + 0xf52da]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00095d7d : add rdi, rcx; add rsi, rcx; lea r11, [rip + 0xf8466]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0016b303 : movzx eax, [rdi]; lea rdx, [rip + 0x117e3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0000f5aa : mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax + 0x40]; movzx eax, [rax + rdi*2 + 0x100]; and eax, esi; ret
0x0007debe : add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0xef932]; lea rax, [rip + 0xef8cb]; cmovne rax, rdx; ret
0x00138c3e : add [rax], al; mov rsi, rsp; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; mov [rsp + 0x20], 5; call [rax + 0x18]
0x0007da4e : add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0xefda2]; lea rax, [rip + 0xefd3b]; cmovne rax, rdx; ret
0x00088b6c : add [rax], al; add [rax], al; bsf rdx, rdx; movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x00095d7e : add edi, ecx; add rsi, rcx; lea r11, [rip + 0xf8466]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00138f87 : mov [rsp + 0xb0], 1; mov [rsp + 0xb8], 1; call [rax + 0x18]; mov rax, [r15 + 8]; mov rdi, r15; call [rax + 8]
0x00139d34 : mov esi, [rsp + 8]; mov rax, [rbx + 0x18]; xor esi, esi; mov [rbx + 0x10], 1; mov rdi, r14; call [rax + 0x28]
0x0010fdf7 : add eax, [rax]; lea rdx, [rip - 0xf0]; test rax, rax; cmove rax, rdx; mov [rip + 0x2be1a2], rax; pop rbp; ret
0x0009a3e3 : adc [rcx - 0x10], esi; movups xmm[rcx - 0x20], xmm7; movups xmm[rcx - 0x30], xmm8; movups xmm[r11], xmm4; ret
0x0013bf0d : add [rax], al; add [rax - 0x75], cl; or [r9 + r9*4 + 0x44], r9b; and al, 8; lea rsi, [rsp + 0x10]; call [rax]
0x00020bd7 : add [rax], al; nop [rax]; mov rdx, [rsp + 0x10]; mov rsi, [r15]; mov rdi, [r13]; mov rax, [rsp + 8]; call rax
0x0009a46b : adc [rdi + 0x10], ebp; movups xmm[rdi + 0x20], xmm6; movups xmm[rdi + 0x30], xmm7; movups xmm[r11], xmm8; ret
0x0012da7c : mov edx, [r15 + 0x48]; and r8d, 3; mov rdi, [r15]; add r14, r8; sub edx, r8d; mov rsi, r14; call [r15 + 0x40]
0x0013c02d : add [rax], r8b; mov eax, r12d; mov rsi, rsp; mov rdi, rbp; mov [rsp], rax; mov rax, [rbp + 8]; call [rax + 8]
0x00097d74 : movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret
0x00139d33 : mov r14, [rsp + 8]; mov rax, [rbx + 0x18]; xor esi, esi; mov [rbx + 0x10], 1; mov rdi, r14; call [rax + 0x28]
0x00158103 : movzx eax, [rdi]; lea rdx, [rip + 0x249e3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x001375d2 : mov rax, [rdi + 0x38]; call [rax + 0x20]; mov rax, [rbx]; mov rdx, [rax + 8]; mov rdi, rax; call [rdx + 0x20]
0x0012bee3 : lea r8, [rip - 0x28a]; mov esi, 5; push [rsp + 0xe8]; mov [rsp + 0x18], r10; lea r9, [rsp + 0x40]; call [rax]
0x0007dbbe : add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0xefc12]; lea rax, [rip + 0xefbab]; cmovne rax, rdx; ret
0x00166db3 : movzx eax, [rdi]; lea rdx, [rip + 0x15d33]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0009742d : add rdi, rcx; add rsi, rcx; lea r11, [rip + 0xf6f96]; movsxd rcx, [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00047986 : mov r8, rcx; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x1b8]; add rax, rdi; jmp rax
0x0008fc13 : movzx eax, [rdi]; lea rdx, [rip + 0xeced3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0006cac8 : push rdi; sbb [rax - 0x77], cl; adc [r8 - 0x77], r9b; sbb [r8 - 0x77], r9b; push rdi; mov [rdi + 8], rax; ret
0x00168d83 : movzx eax, [rdi]; lea rdx, [rip + 0x13d63]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00096f14 : movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x00152cac : add [rax], al; add [rax], al; mov dx, [rsi - 3]; mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x00151bb1 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x4a5f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015444d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48016]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000f3b8 : movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax + 0x58]; mov eax, [rax + rdi*4 + 0x200]; ret
0x00096af1 : add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf77c6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0015196d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4a5f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015474d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x47d16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151bb0 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4a5f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150fb1 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x4b1f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154211 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x48493]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000954f0 : add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf8bf2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0012a6f8 : mov rcx, [rax + 8]; mov edx, [rdi + 0x5c]; lea rsi, [rdi + 0x48]; mov rdi, rax; mov rcx, [rcx + 0x18]; jmp rcx
0x00150eee : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4b076]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00098784 : add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf5d13]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000954d4 : add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf8c0f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001534f7 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x491ac]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015384e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x48c16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d835 : mov ecx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00096c3e : add [rax], al; mov ecx, [rsi]; mov edx, [rsi + 3]; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x00151c6e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4a2f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000067cb : xor ecx, ecx; push rax; push rbx; mov r9, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call r15
0x00150bf4 : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4b36f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150a01 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x4b7a2]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b688 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x5055c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096ad3 : add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf77e3]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014e058 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x4dd4c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154bcd : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x47896]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b776 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5046d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001534f8 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x491ac]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154c91 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x47a13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150d6e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4b1f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154a4d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x47a16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151131 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x4b073]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00142c18 : add [rax], al; add al, ch; and [rdx + 0xabfffed], dh; add [rax], al; add al, ch; or eax, r15d; jmp [rsi + 0xf]
0x00152404 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x49d9f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b5c3 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x50621]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001521b1 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x49ff3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151eb1 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x4a2f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154ef8 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x477ab]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150d6d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4b1f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015474e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x47d16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015226e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x49cf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000f3d8 : movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax + 0x48]; mov eax, [rax + rdi*4 + 0x200]; ret
0x00154091 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x48613]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154b11 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x47b93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138462 : lea rax, [rip + 0x296a07]; mov [rip + 0x2969dd], 2; mov fs:[rbx], rax; mov rax, [rip + 0x29183a]; pop rbx; ret
0x00096dd1 : movq mm0, [rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x0008729e : add [rax], al; movzx eax, [rsp - 8]; mov [rdi], ax; movzx eax, [rsp - 6]; mov [rdi + 2], al; mov rax, rdi; ret
0x00153d90 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48913]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001385da : lea rax, [rip + 0x29688f]; mov [rip + 0x296865], 2; mov fs:[rbx], rax; mov rax, [rip + 0x29162a]; pop rbx; ret
0x0015166e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4a8f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012a6f9 : mov ecx, [rax + 8]; mov edx, [rdi + 0x5c]; lea rsi, [rdi + 0x48]; mov rdi, rax; mov rcx, [rcx + 0x18]; jmp rcx
0x00153791 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x48f13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000987a1 : add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf5cf6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0013851b : lea eax, [rip + 0x29694f]; mov [rip + 0x296925], 2; mov fs:[rbx], rax; mov rax, [rip + 0x2917da]; pop rbx; ret
0x00150cb0 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4b4f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001520ed : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x49e76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151dee : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4a176]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153fcd : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48496]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153a91 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x48c13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154510 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48193]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152030 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4a173]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154d4e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x47716]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153654 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x49050]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d284 : mov rcx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x001545cd : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x47e96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013869a : lea rax, [rip + 0x2967cf]; mov [rip + 0x2967a5], 2; mov fs:[rbx], rax; mov rax, [rip + 0x291502]; pop rbx; ret
0x00151f6d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x49ff6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015196e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4a5f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154811 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x47e92]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001520ee : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x49e76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151c6d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4a2f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154690 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48013]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015106d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4aef6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154210 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48493]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097c51 : movq mm0, [rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret
0x0015136e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4abf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099104 : add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf5413]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00097230 : add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf7112]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00097bd1 : movq mm0, [rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret
0x00152597 : sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x499cc]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014da34 : mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x001542ce : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x48196]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b687 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x5055c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012db70 : mov edx, [rdi + 0x48]; and eax, 3; mov rdi, [r15]; add r14, rax; sub edx, eax; mov rsi, r14; call [r15 + 0x40]
0x0012e72b : mov edx, [r13 + 0x48]; and ebx, 3; mov rdi, [r13]; add r14, rbx; sub edx, ebx; mov rsi, r14; call [r13 + 0x40]
0x00153c10 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48a93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001542cd : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48196]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013851a : lea rax, [rip + 0x29694f]; mov [rip + 0x296925], 2; mov fs:[rbx], rax; mov rax, [rip + 0x2917da]; pop rbx; ret
0x00004a69 : xor edx, edx; push rax; push r12; mov r9, [rsp + 0x40]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call rbx
0x000954d3 : add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf8c0f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00150fb0 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4b1f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0017124d : adc [rdi], rax; vmovups zmm[rdi + 0x40], zmm1; vmovups zmm[r9 - 0x80], zmm2; vmovups zmm[r9 - 0x40], zmm3; ret
0x00154990 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x47d13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00171ec6 : add [rax], eax; add [rdx - 0xf], ah; dec [rax + 0x6f]; add [rdx - 0xf], esp; dec [rax + 0x6f]; jmp [r10 - 0xf]
0x00153c11 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x48a93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000086f8 : xor edx, edx; push rax; push rbp; mov r9, [rsp + 0x20]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x0014df92 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x4de11]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b777 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x5046d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014da35 : mov ecx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x001511ee : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4ad76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099103 : add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf5413]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009a72b : xchg [rbp + 1], ebx; add [rax], al; lea rsi, [rip + 0xf3f19]; movsxd rax, [rsi + rdi*4]; add rax, rsi; jmp rax
0x0014d645 : mov ecx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x001539cd : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48a96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00047987 : mov eax, ecx; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x1b8]; add rax, rdi; jmp rax
0x00099120 : add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf53f6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00154991 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x47d13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154c90 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x47a13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001512b0 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4aef3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d644 : mov rcx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0000f40b : add [rax], 0; add [rax], al; mov rax, [rsi + 0x68]; movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x0009577e : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x00096af0 : add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf77c6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00154511 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x48193]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154090 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48613]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154a4e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x47a16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151d31 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4a472]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150b73 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x4b630]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e147 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x4dc5d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012deec : mov edx, [rbx + 0x48]; and ecx, 3; mov rdi, [rbx]; add r13, rcx; sub edx, ecx; mov rsi, r13; call [rbx + 0x40]
0x00154bce : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x47896]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001514ed : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4aa76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096d51 : movq mm0, [rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x0006597d : add [rdx], ch; xor r8d, r8d; mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x000871ce : add [rax], al; movzx edx, [rsp - 8]; add rax, rdi; mov [rdi], dx; movzx edx, [rsp - 6]; mov [rdi + 2], dl; ret
0x0009c508 : add [rdx], ebp; xor r8d, r8d; mov rsi, rbp; mov rdi, [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx
0x00151430 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4ad73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001511ed : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4ad76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001507f6 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x4b5ad]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e057 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x4dd4c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154390 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48313]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001536d4 : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48d8f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d465 : mov ecx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00138463 : lea eax, [rip + 0x296a07]; mov [rip + 0x2969dd], 2; mov fs:[rbx], rax; mov rax, [rip + 0x29183a]; pop rbx; ret
0x000987a0 : add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf5cf6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00154391 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x48313]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001550ab : sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x473b8]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154b10 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x47b93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150b74 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x4b630]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150bf5 : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4b36f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00008f76 : xor edx, edx; push rax; push r13; mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call rbx
0x001518b1 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x4a8f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151aed : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4a476]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097a7e : add [rax], al; mov ecx, [rsi]; mov edx, [rsi + 3]; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 7]; ret
0x00151130 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4b073]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153cce : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x48796]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153e4e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x48616]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00005043 : xor edx, edx; push rax; push r14; mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r12
0x00153d91 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x48913]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099121 : add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf53f6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001507f7 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x4b5ad]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154d4d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x47716]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097b91 : movq mm0, [rsi]; mov cl, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret
0x00153b4e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x48916]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153910 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48d93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014dc35 : mov ecx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00151a30 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4a773]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153790 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48f13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154691 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x48013]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001539ce : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x48a96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001536d5 : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x48d8f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015414e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x48316]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097231 : add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf7112]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001548cd : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x47b96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001545ce : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x47e96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151f6e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x49ff6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015106e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4aef6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d03b : mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x00151731 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x4aa73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001512b1 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x4aef3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d285 : mov ecx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00153b4d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48916]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154ef9 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x477ab]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153fce : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x48496]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001371b7 : dec [rbp + rcx*4 + 5]; ror [rax + 0x7beffff], 0; add [rax], al; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x00153a90 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48c13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001757fd : xchg [rsi + 3], ecx; add [rax], al; lea rbp, [rip + 0x271e7]; movsxd rax, [rbp + rax*4]; add rbp, rax; jmp rbp
0x00065034 : mov rdx, r12; mov rax, [rsp + 0x10]; mov r8, [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call [rax + 8]
0x00065b59 : add [rdx], ch; xor r8d, r8d; mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx
0x00151ded : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4a176]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095b90 : add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf85d2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00154812 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x47e92]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152405 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x49d9f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d834 : mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00153653 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x49050]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001518b0 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4a8f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097abe : add [rax], al; mov rcx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 0xa]; ret
0x00003fb6 : xor edx, edx; push rax; push rbx; mov r9, [rsp + 0x30]; mov rsi, [rsp + 0x28]; mov rdi, [rsp + 0x20]; call r15
0x00153911 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x48d93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150a02 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x4b7a2]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096ad4 : add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf77e3]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00150cb1 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x4b4f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001517ee : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4a776]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015414d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48316]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097c31 : movq mm0, [rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret
0x00151730 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4aa73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001548ce : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x47b96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00007857 : xor edx, edx; push rax; push rbx; mov r9, [rsp + 0x30]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x000407f8 : lea edx, [rsp + rax*4]; sub rsi, rax; mov rax, [rip + 0x38ad9b]; mov rdi, rbp; mov rcx, r14; call [rax + r8*8]
0x0012c96b : add [rax], al; add [rax], al; add bl, dh; movq mm0, [rdi + 0x38]; mov [rsi], 9; movups xmm[rsi + 8], xmm0; ret
0x001515b1 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x4abf3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001517ed : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4a776]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015444e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x48016]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e146 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4dc5d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150e31 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x4b373]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00005c32 : xor edx, edx; push rax; push r13; mov r9, [rsp + 0x20]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x00065035 : mov edx, esp; mov rax, [rsp + 0x10]; mov r8, [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call [rax + 8]
0x0003b23d : xor al, 6; lea rax, [rip + 0x1513ca]; movsxd rax, [rax + rsi*4]; lea rsi, [rip - 0x841]; add rax, rsi; jmp rax
0x00151eb0 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4a2f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000407f7 : lea rdx, [r12 + rax*4]; sub rsi, rax; mov rax, [rip + 0x38ad9b]; mov rdi, rbp; mov rcx, r14; call [rax + r8*8]
0x001600ce : add [rax], al; mov eax, [rcx]; mov [rdx], eax; mov eax, [rcx + 3]; mov [rdx + 3], eax; lea rax, [rdx + 6]; ret
0x0015384d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48c16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097bb1 : movq mm0, [rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret
0x0014df93 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x4de11]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152031 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x4a173]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000055cb : xor edx, edx; push rax; push rbx; mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x0012db6f : mov edx, [r15 + 0x48]; and eax, 3; mov rdi, [r15]; add r14, rax; sub edx, eax; mov rsi, r14; call [r15 + 0x40]
0x00151d32 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x4a472]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150e30 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4b373]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151431 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x4ad73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012cdc2 : add [rax], al; add [rax + 0x63], cl; sbb [r11 + 0x127703f8], r8b; lea rdx, [rip + 0x29cabb]; jmp [rdx + rax*8]
0x0015166d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4a8f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012bee4 : lea eax, [rip - 0x28a]; mov esi, 5; push [rsp + 0xe8]; mov [rsp + 0x18], r10; lea r9, [rsp + 0x40]; call [rax]
0x001385db : lea eax, [rip + 0x29688f]; mov [rip + 0x296865], 2; mov fs:[rbx], rax; mov rax, [rip + 0x29162a]; pop rbx; ret
0x001550ac : sub esi, edx; sub rdi, rdx; lea r11, [rip + 0x473b8]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001600fe : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 6]; mov [rdx + 6], eax; lea rax, [rdx + 9]; ret
0x001521b0 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x49ff3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096d25 : add [rsi + 0x2e], ah; nop [rax + rax]; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x0014dc34 : mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00153f11 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x48793]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013869b : lea eax, [rip + 0x2967cf]; mov [rip + 0x2967a5], 2; mov fs:[rbx], rax; mov rax, [rip + 0x291502]; pop rbx; ret
0x0012e72c : mov edx, [rbp + 0x48]; and ebx, 3; mov rdi, [r13]; add r14, rbx; sub edx, ebx; mov rsi, r14; call [r13 + 0x40]
0x00153e4d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48616]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015136d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4abf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e4af : add [rbp + rcx*4 + 0x1d], cl; stc ; fadd [rax + rax]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153f10 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48793]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d464 : mov rcx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00151aee : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4a476]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001515b0 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4abf3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095b91 : add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf85d2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00096d71 : movq mm0, [rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x001514ee : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4aa76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150eed : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4b076]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096df1 : movq mm0, [rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x00151a31 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x4a773]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015226d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x49cf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e89f : add [rbp + rcx*4 + 0x1d], cl; or ebp, edx; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00098783 : add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf5d13]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00152598 : sub esi, edx; sub rdi, rdx; lea r11, [rip + 0x499cc]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014b5c2 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x50621]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0017124e : adc [rdi], eax; vmovups zmm[rdi + 0x40], zmm1; vmovups zmm[r9 - 0x80], zmm2; vmovups zmm[r9 - 0x40], zmm3; ret
0x0014cf3f : mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x000954f1 : add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf8bf2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00153ccd : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48796]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ce9d : mov edx, [rsi - 8]; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0009a32c : movups xmm[rdi + rdx - 0x20], xmm5; movups xmm[rdi + rdx - 0x30], xmm6; movups xmm[rdi + rdx - 0x40], xmm7; ret
0x0000f40c : add [rax], al; add [rax], al; mov rax, [rsi + 0x68]; movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x0009cfdb : add [rcx + rcx*4 - 0x1f], cl; mov r9, [rsp + 0x10]; mov rsi, [rsp + 0x18]; mov rdx, r14; mov rdi, rbp; call rbx
0x00136907 : mov edi, [rax]; mov rax, [rdi + 0x38]; call [rax + 0x20]; mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x20]
0x0003a6c2 : mov edi, ecx; mov [rbp - 0x4c8], rcx; mov rsi, r11; sub r15, r11; mov rdi, r14; mov rdx, r15; call [rax + 0x38]
0x00079918 : xchg [rbx + 1], esi; add [rax], al; lea rdx, [rip + 0x1144ec]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0014c6af : add [rbp + rcx*4 + 0x1d], cl; cmp ebp, esi; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00064e02 : add [rax], al; add [rax - 0x77], cl; fistp [rbx + 0x48]; mov eax, [rax + 0x130]; mov rax, [rax + 0x20]; jmp rax
0x000bf4f5 : pop rbx; or [rax], al; mov rcx, r14; mov rdx, [rsp + 0x68]; mov rsi, [rsp + 0x60]; mov rdi, [rsp + 8]; call r12
0x00138aa0 : mov [rsp + 0x30], 3; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x0004786d : add [rax], al; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x2d2]; add rax, rdi; jmp rax
0x0014cf40 : mov [rdi - 0x21], ecx; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x001690d3 : adc [rsi + 0xf], ah; cmp ah, [rbx + 0x1f]; adc dh, [rbx - 0xc]; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret
0x0001b482 : xchg [rsi + 6], edi; add [rax], al; lea rdi, [rip + 0x16cdc2]; movsxd rdx, [rdi + rdx*4]; add rdx, rdi; jmp rdx
0x0000f4fe : add [rax], al; mov rax, [rsi + 0x68]; movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x000957a1 : movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x00138d2b : mov eax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; mov [rsp + 0x30], 2; mov [rsp + 0x40], rdx; call [rax + 0x18]
0x00138b10 : mov [rsp + 0x30], 4; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x0000f45e : add [rax], al; mov rax, [rsi + 0x68]; movsxd rdi, edi; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x00164208 : xchg rdi, rsi; nop [rax + rax]; bsf rdx, rdx; movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x0014da0d : mov edx, [rsi - 8]; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00164209 : xchg edi, esi; nop [rax + rax]; bsf rdx, rdx; movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x0014d44c : mov edx, [rsi - 4]; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x001383a5 : add [rbp + 0x48d575c0], al; lea eax, [rip + 0x296abf]; mov [rip + 0x296a95], 2; mov fs:[rbx], rax; pop rbx; ret
0x0010dff9 : sbb bl, dh; movq mm0, [rbx + 0x30]; mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x0014d80d : mov edx, [rsi - 8]; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0012d262 : xor [rax + 0x1000023], 0; add [rax], al; mov rax, [rax + 0x23b8]; xor esi, esi; mov rdi, rbx; call [rax + 0x28]
0x0014cf87 : mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x000998eb : sbb bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; xor ch, ch; mov [rdi + 0x1a], ch; ret
0x000957c6 : push rsi; adc [rsi - 0x75], ah; sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x0014c2bf : add [rbp + rcx*4 + 0x1d], cl; sub ecx, edi; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138a3a : mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; mov [rsp + 0x30], 0; mov [rsp + 0x38], rdx; call [rax + 0x18]
0x0014ce9c : mov rdx, [rsi - 8]; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00066dcc : mov rax, [rbx + 0x28]; sub rax, [rbx + 0x20]; mov rdx, [rbx + 0xf8]; mov [rdx], rax; xor eax, eax; pop rbx; ret
0x0013bd26 : add [rax], al; mov eax, [rsi]; lea rsi, [rsp + 0x10]; mov [rsp + 0x10], rax; mov rax, [rdi + 8]; call [rax + 8]
0x00138cb0 : mov [rsp + 0x30], 1; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x00138b80 : mov [rsp + 0x30], 5; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x0014dc0c : mov rdx, [rsi - 8]; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00138a3b : mov eax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; mov [rsp + 0x30], 0; mov [rsp + 0x38], rdx; call [rax + 0x18]
0x0003a6c1 : mov r15, rcx; mov [rbp - 0x4c8], rcx; mov rsi, r11; sub r15, r11; mov rdi, r14; mov rdx, r15; call [rax + 0x38]
0x0004748e : mov edi, 1; movzx edx, [rax + rdx]; lea rax, [rip + 0x145572]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x0005ff53 : adc ecx, [rax - 0x75]; xor [rax], 1; add [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x58]
0x0014da0c : mov rdx, [rsi - 8]; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00131d20 : add [rax], al; add [rcx - 0x48f097be], cl; xchg [rax + 0x66000000], ecx; mov [rdx + 0x6c], eax; mov eax, 1; ret
0x00047923 : add [rax], al; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x21c]; add rax, rdi; jmp rax
0x0000f5ed : add [rax], al; add bl, al; nop [rax + rax]; nop cs:[rax + rax]; mov rax, [rip + 0x3ba649]; add rax, fs:[0]; ret
0x0014dc0d : mov edx, [rsi - 8]; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0014c55f : add [rbp + rcx*4 + 0x1d], cl; mov esi, esi; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000873a0 : mov edx, [rsp - 0x10]; lea rax, [rdi + rax - 1]; mov [rdi], edx; movzx edx, [rsp - 0xc]; mov [rdi + 4], dl; ret
0x0014becf : add [rbp + rcx*4 + 0x1d], cl; sbb ebp, edi; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f31f : add [rbp + rcx*4 + 0x1d], cl; mov edx, ecx; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00135812 : mov rax, [r15 + 0x90]; mov rsi, [rsp + 0x28]; mov rdi, rbp; add [rax], 1; mov rax, [r15 + 0x60]; call [rax + 8]
0x00138ee7 : add [rax], al; mov [rsp + 0xc8], rdx; mov rsi, r13; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xd0], 2; call rax
0x0014f46f : add [rbp + rcx*4 + 0x1d], cl; cmp ecx, ecx; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00136906 : mov rdi, [rax]; mov rax, [rdi + 0x38]; call [rax + 0x20]; mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x20]
0x000963ad : adc bl, al; nop ; movdqu xmm0, xmm[rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x00044d6c : movzx eax, al; mov [rbp - 0x918], ecx; movsxd rax, [rax + rdx*4]; lea rdx, [rip - 0x2fe]; add rax, rdx; jmp rax
0x0006498b : lea rsi, [rsp + 0x30]; mov rdi, r13; mov rax, [rax + 0x60]; sar r8, 2; mov [rsp + 0x30], rax; call [r13 + 0x30]
0x00097b75 : add [rsi + 0x2e], ah; nop [rax + rax]; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0x10]; ret
0x0004a52e : movzx esp, ah; mov rcx, [rbp - 0x600]; mov r11, [rbp - 0x630]; movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x000479d5 : add [rax], al; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x16a]; add rax, rdi; jmp rax
0x0014d62c : mov edx, [rsi - 4]; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0003f6f4 : add [rax], al; mov rax, [rax + 0x38]; mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, [rbp - 0xc0]; call rax
0x00066dcd : mov eax, [rbx + 0x28]; sub rax, [rbx + 0x20]; mov rdx, [rbx + 0xf8]; mov [rdx], rax; xor eax, eax; pop rbx; ret
0x0001f7c6 : adc [rbx + rax + 0x6c], cl; and al, 8; lea rbx, [rax + r15]; mov rdx, r12; mov rsi, r14; mov rdi, r13; call rbp
0x000478c5 : add [rax], al; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x27a]; add rax, rdi; jmp rax
0x0014d03c : mov [rdi - 0x21], ecx; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x000998ca : sbb bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; xor ch, ch; mov [rdi + 0x19], ch; ret
0x0000f5cd : add [rax], al; add bl, al; nop [rax + rax]; nop cs:[rax + rax]; mov rax, [rip + 0x3ba621]; add rax, fs:[0]; ret
0x00087206 : add [rax], al; mov edx, [rsp + 8]; add rax, rdi; mov [rdi], edx; movzx edx, [rsp + 0xc]; mov [rdi + 4], dx; ret
0x00138d2a : mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; mov [rsp + 0x30], 2; mov [rsp + 0x40], rdx; call [rax + 0x18]
0x00043a03 : add [rax], al; add [rax - 0x73], cl; add [rbx - 0x76b7fe3d], rax; sub [r8 + 0x468b4102], r9b; add al, 0x39; ret
0x00095721 : movq mm0, [rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x0014f07f : add [rbp + rcx*4 + 0x1d], cl; sub ebp, ecx; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006498c : lea esi, [rsp + 0x30]; mov rdi, r13; mov rax, [rax + 0x60]; sar r8, 2; mov [rsp + 0x30], rax; call [r13 + 0x30]
0x0014ec8f : add [rbp + rcx*4 + 0x1d], cl; sbb ecx, edx; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000386f3 : movzx edx, al; movzx eax, [rdx + rax]; lea rdx, [rip - 0x2a5]; movsxd rax, [rsi + rax*4]; add rax, rdx; jmp rax
0x0014d26c : mov edx, [rsi - 4]; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0014d80c : mov rdx, [rsi - 8]; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00135813 : mov eax, [rdi + 0x90]; mov rsi, [rsp + 0x28]; mov rdi, rbp; add [rax], 1; mov rax, [r15 + 0x60]; call [rax + 8]
0x0014e6ab : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4d6f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00020bdb : add [rax], 0; add [rax], al; mov rdx, [rsp + 0x10]; mov rsi, [r15]; mov rdi, [r13]; mov rax, [rsp + 8]; call rax
0x0014e40b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4d997]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00168ebf : add [rsi + 0xf], ah; cmp ah, [rbx - 0x37]; cmp cl, [rax + 0x63]; leave ; lea rax, [rdi + rcx]; sub rax, rsi; ret
0x0004748d : mov r15d, 1; movzx edx, [rax + rdx]; lea rax, [rip + 0x145572]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x00096d91 : movq mm0, [rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x0014ee8b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4cf17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001642e3 : sub r9, rcx; lea r10, [rip + 0x375c3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0014c4bb : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f3cb : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4c9d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ba3b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x501a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00068065 : add [rbp + 0x48167ec0], al; mov edx, [rdi + 0xa0]; mov rax, [rdx + 0x38]; sub rax, [rdx + 0x30]; sar rax, 2; ret
0x0017195a : adc [rdi], rdx; vmovups zmm[rdi + 0x40], zmm2; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x0014c75b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4f487]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097b1e : add [rax], al; mov rcx, [rsi]; mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret
0x0014c21b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099985 : movq mm2, [rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; xor ch, ch; mov [rdi + 0x1f], ch; ret
0x001345ce : add [rax], al; mov eax, [rsp + 0x10]; lea rdx, [rip + 0x5da55]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00136a85 : dec [rdi]; test [rbp + 0x48fffffe], dl; mov eax, [rdi + 8]; lea rdx, [rsp + 0x18]; mov esi, 6; call [rax + 0x28]
0x00048c33 : add [rax], al; movzx eax, [rcx + rax]; lea rcx, [rip - 0x10f0]; movsxd rax, [rdi + rax*4]; add rax, rcx; jmp rax
0x00146197 : add [rax + 0x63], cl; ror [rax - 0x2d], -0x1e; shr rax, 6; test [rdi + rax*8], rdx; setne al; movzx eax, al; ret
0x00161eed : add cl, [rax - 0x73]; add cl, [rdi]; test ebx, eax; add eax, [rax]; add [rax - 0x7cb7fec8], al; fdivr st(7); ret
0x0000eebc : mov rdx, [rip + 0x3bae35]; mov [rdx], rcx; mov rdx, [rax + 0xc0]; mov rax, [rip + 0x3bac3c]; mov [rax], rdx; ret
0x00099965 : movq mm2, [rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; xor ch, ch; mov [rdi + 0x1e], ch; ret
0x00065c57 : mov ecx, ebp; lea rdx, [rbp - 0x48]; lea rsi, [rbx + 0x50]; push 0; lea r9, [rbp - 0x40]; mov rdi, r15; call r12
0x0014f12b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4cc77]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00133cde : xor esi, esi; mov rdi, r12; mov [rsp + 0x40], 0; mov [rsp + 0x10], rax; mov rax, [rsp + 0x48]; call [rax + 0x28]
0x000996ad : add [rax], al; add [rbx + 0x3568b0e], cl; mov [rdi], ecx; mov [rdi + 3], edx; xor ch, ch; mov [rdi + 7], ch; ret
0x0014cf88 : mov [rdi - 0x21], ecx; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0014e55b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4d847]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009992a : sbb bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; xor ch, ch; mov [rdi + 0x1c], ch; ret
0x00096e11 : movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x0014c0cb : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0016011e : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 7]; mov [rdx + 7], eax; lea rax, [rdx + 0xa]; ret
0x0014cec5 : mov ebx, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x000eac46 : xchg [rbp + 0xa], edi; add [rax], al; lea rdx, [rip + 0xa5ac6]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0014ebeb : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4d1b7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0016019e : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x0014f51b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4c887]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00165323 : sub r9, rcx; lea r10, [rip + 0x365c3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0014be2b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cc9b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4ef47]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013bd25 : add [rax], r8b; mov eax, [rsi]; lea rsi, [rsp + 0x10]; mov [rsp + 0x10], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0016013e : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; lea rax, [rdx + 0xb]; ret
0x0015270d : add [rax], al; add [rax - 0x75], cl; push rsi; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x0015279d : add [rax], al; add [rax - 0x75], cl; push rsi; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x0003a24b : add [rax], al; mov r13, [rbp - 0x4c0]; mov rsi, rbx; mov rdi, r14; sub r13, rbx; mov rdx, r13; call [r15 + 0x38]
0x00096cee : add [rax], al; mov rcx, [rsi]; mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x00096cae : add [rax], al; mov rcx, [rsi]; mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; lea rax, [rdi + 0xb]; ret
0x00044d6b : movzx r8d, r8b; mov [rbp - 0x918], ecx; movsxd rax, [rax + rdx*4]; lea rdx, [rip - 0x2fe]; add rax, rdx; jmp rax
0x00097afe : add [rax], al; mov rcx, [rsi]; mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; lea rax, [rdi + 0xc]; ret
0x00096d0e : add [rax], al; mov rcx, [rsi]; mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x00068175 : add [rbp + 0x48167ec0], al; mov edx, [rdi + 0xa0]; mov rax, [rdx + 0x20]; sub rax, [rdx + 0x18]; sar rax, 2; ret
0x0016015e : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 5]; mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x0017195b : adc [rdi], edx; vmovups zmm[rdi + 0x40], zmm2; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x0014ea9b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4d307]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097bf1 : movq mm0, [rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret
0x00065c56 : mov rcx, r13; lea rdx, [rbp - 0x48]; lea rsi, [rbx + 0x50]; push 0; lea r9, [rbp - 0x40]; mov rdi, r15; call r12
0x0014c60b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00171a9a : adc [rsi], rdx; vmovups zmm[rsi + 0x40], zmm2; vmovups zmm[rsi + 0x80], zmm2; vmovups zmm[rsi + 0xc0], zmm2; ret
0x00138c38 : mov [rsp + 8], 1; mov rsi, rsp; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; mov [rsp + 0x20], 5; call [rax + 0x18]
0x0014cec4 : mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00097b5e : add [rax], al; mov rcx, [rsi]; mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret
0x0014bf7b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e94b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4d457]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000482ec : add [rcx], dl; add [rax], al; mov [rbp - 0x4d8], r8; mov rdx, r14; mov rsi, r15; mov rdi, r13; call [rax + 0x38]
0x0014bb8b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x50057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f27b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4cb27]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000873b8 : mov edx, [rsp - 0x18]; lea rax, [rdi + rax - 1]; mov [rdi], edx; movzx edx, [rsp - 0x14]; mov [rdi + 4], dx; ret
0x0017193a : push rsi; cld ; vmovups zmm[rsi - 0xc0], zmm2; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x0014f66b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4c737]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00166ef3 : sub r9, rcx; lea r10, [rip + 0x34a33]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0014c9fb : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4f1e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000991fc : add [rax], al; add [rax], al; lea r11, [rip + 0xf531d]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00163513 : sub r9, rcx; lea r10, [rip + 0x38353]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00097b3e : add [rax], al; mov rcx, [rsi]; mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret
0x00096cce : add [rax], al; mov rcx, [rsi]; mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x0012e023 : mov edx, [rbx + 0x48]; and r15d, 3; mov rdi, [rbx]; add r13, r15; sub edx, r15d; mov rsi, r13; call [rbx + 0x40]
0x0014cb4b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4f097]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bcdb : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4ff07]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097ade : add [rax], al; mov rcx, [rsi]; mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; lea rax, [rdi + 0xb]; ret
0x00171a9b : adc [rsi], edx; vmovups zmm[rsi + 0x40], zmm2; vmovups zmm[rsi + 0x80], zmm2; vmovups zmm[rsi + 0xc0], zmm2; ret
0x0014e7fb : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4d5a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099945 : movq mm2, [rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; xor ch, ch; mov [rdi + 0x1d], ch; ret
0x00138feb : add [rax], al; add [rax], al; mov [rsp + 0xd0], 1; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xc8], rdx; call rax
0x00052ae9 : adc eax, [rax]; mov r9, [rbp - 0x598]; mov r11d, [rbp - 0x5a0]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x00131bd2 : adc r11b, r14b; movq mm0, [rax + 0x90]; movups xmm[rsi], xmm0; mov rax, [rax + 0xa0]; mov [rsi + 0x10], rax; ret
0x0016017e : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x00163422 : add [rbp + 0x3b], esi; mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x00134b72 : adc r11b, r14b; movq mm0, [rax + 0x30]; movups xmm[rsi], xmm0; mov rax, [rax + 0x40]; mov [rsi + 0x10], rax; ret
0x000488f2 : xchg [rbx + 0x4c00000e], ch; mov [rbp - 0x4d8], eax; mov rdx, r14; mov rsi, r11; mov rdi, r13; call [r15 + 0x38]
0x00096c8e : add [rax], al; mov rcx, [rsi]; mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; lea rax, [rdi + 0xa]; ret
0x001354a2 : adc r11b, r14b; movq mm0, [rax + 0x40]; movups xmm[rsi], xmm0; mov rax, [rax + 0x50]; mov [rsi + 0x10], rax; ret
0x0014c8ab : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4f337]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00098731 : xor [rbp + rcx*4 + 0x1d], cl; imul ebx, [rbp + 0xf], 0; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014efdb : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x4cdc7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000999cc : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; mov [rdi + 0x20], cl; xor ch, ch; mov [rdi + 0x21], ch; ret
0x00097c71 : movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret
0x0000eebd : mov edx, [rip + 0x3bae35]; mov [rdx], rcx; mov rdx, [rax + 0xc0]; mov rax, [rip + 0x3bac3c]; mov [rax], rdx; ret
0x00087205 : add [rax], r8b; mov edx, [rsp + 8]; add rax, rdi; mov [rdi], edx; movzx edx, [rsp + 0xc]; mov [rdi + 4], dx; ret
0x0000eede : add [rax], al; mov rax, [rip + 0x3bac11]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x0014f27c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4cb27]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000695ef : lea rcx, [rip + 0x35d91a]; lea rdi, [rip + 0x35d3d3]; mov [rbx + 0xd8], rcx; mov [rdx + 0x130], rdi; pop rbx; ret
0x0014ea9c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4d307]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001357f7 : add [rax], al; mov rax, [r15 + 0x60]; mov esi, [r15 + 0x88]; mov rdi, rbp; mov [r15 + 0x58], 0; call [rax + 0x28]
0x000448bc : mov rsi, [r14 + 0x18]; mov rdx, [r14 + 0x20]; mov rdi, [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call [rbx + 0x38]
0x0014be2c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bcdc : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4ff07]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bf7c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bb8c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x50057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e94c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4d457]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cd88 : mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x00149d83 : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x4421f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0012c94f : add [rbx + 0x6b7705f8], al; lea r8, [rip + 0x645f4]; mov ecx, eax; movsxd rdx, [r8 + rcx*4]; add rdx, r8; jmp rdx
0x00171210 : adc [rcx - 4], rsp; vmovups zmm[r9 - 0xc0], zmm5; vmovups zmm[r9 - 0x80], zmm6; vmovups zmm[r9 - 0x40], zmm7; ret
0x0005a6ea : add [rax - 0x77], cl; ror [rcx - 0x41], cl; or [rcx], esp; test [rax], dl; or [rcx], spl; test [rax + 9], cl; ret
0x0005c2bf : xchg [rbx + rax], edi; add [rax], al; lea rdx, [rip + 0x1319e1]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0014d0bc : add [rax], al; add [rax], al; mov rcx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00020bdc : add [rax], al; add [rax], al; mov rdx, [rsp + 0x10]; mov rsi, [r15]; mov rdi, [r13]; mov rax, [rsp + 8]; call rax
0x0014c60c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e7fc : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4d5a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009585f : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x000386f2 : movzx r10d, r8b; movzx eax, [rdx + rax]; lea rdx, [rip - 0x2a5]; movsxd rax, [rsi + rax*4]; add rax, rdx; jmp rax
0x000448bd : mov esi, [rsi + 0x18]; mov rdx, [r14 + 0x20]; mov rdi, [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call [rbx + 0x38]
0x0014ba3c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x501a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009a1a8 : adc [rsi], al; movups xmm1, xmm[rsi + rdx - 0x10]; movups xmm[rdi], xmm0; movups xmm[rdi + rdx - 0x10], xmm1; ret
0x0014da6c : add [rax], al; add [rax], al; mov edx, [rsi - 6]; mov ecx, [rsi - 4]; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x0014e40c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4d997]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c9fc : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4f1e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cc9c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4ef47]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e74f : add [rbp + rcx*4 + 0x1d], cl; pop rcx; salc ; add al, 0; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001529ac : add [rax], al; add [rax], al; mov rdx, [rsi - 9]; mov ecx, [rsi - 4]; mov [rdi - 9], rdx; mov [rdi - 4], ecx; ret
0x00171211 : adc [rcx - 4], esp; vmovups zmm[r9 - 0xc0], zmm5; vmovups zmm[r9 - 0x80], zmm6; vmovups zmm[r9 - 0x40], zmm7; ret
0x000695f0 : lea ecx, [rip + 0x35d91a]; lea rdi, [rip + 0x35d3d3]; mov [rbx + 0xd8], rcx; mov [rdx + 0x130], rdi; pop rbx; ret
0x0003b125 : lea rsi, [rip + 0x151464]; movsxd rax, [rsi + rax*4]; add rax, rdi; mov r11, rdx; mov r9d, 1; mov r8d, 1; jmp rax
0x0000f65b : xchg eax, edi; add [rdx], al; add [rax], al; mov fs:[rcx], rdx; mov rdx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x0014f12c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4cc77]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f51c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4c887]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d4df : mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0014cdc6 : mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00163514 : sub ecx, ecx; lea r10, [rip + 0x38353]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0009583f : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x0014cb4c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4f097]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d86c : add [rax], al; add [rax], al; mov edx, [rsi - 5]; mov ecx, [rsi - 4]; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x0014c4bc : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00172155 : xchg [rax], eax; add [rax], al; vmovdqu64 zmm[rdi + rdx - 0x40], zmm0; vmovdqu64 zmm[rdi], zmm0; vzeroupper ; ret
0x0001cfca : add [rax], al; nop [rax]; movss xmm3, [rip + 0x16b6f8]; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret
0x00148b03 : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x4541f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00134567 : add [rax], al; mov [rsp + 0x438], rax; xor eax, eax; mov rax, [rdi + 8]; lea rsi, [rsp + 0x10]; call [rax + 0x10]
0x00158243 : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x35e5f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0014d10f : mov [rdi - 0x22], r9; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0014d6b0 : mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x000998ea : sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; xor ch, ch; mov [rdi + 0x1a], ch; ret
0x0014e6ac : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4d6f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c0cc : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0007ad75 : mov [rip + 0x3518fd], 0; mov edi, ebx; call [rip + 0x351901]; mov [rip + 0x3518eb], 1; mov eax, ebx; pop rbx; ret
0x000998c9 : sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; xor ch, ch; mov [rdi + 0x19], ch; ret
0x0014d8b0 : mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0000a8de : mov rcx, rbx; mov r8, [rsp + 0x40]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call r14
0x000997ac : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; xor ch, ch; mov [rdi + 0x10], ch; ret
0x0014f3cc : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4c9d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00168ebe : add [rsi + 0xf], spl; cmp ah, [rbx - 0x37]; cmp cl, [rax + 0x63]; leave ; lea rax, [rdi + rcx]; sub rax, rsi; ret
0x00165324 : sub ecx, ecx; lea r10, [rip + 0x365c3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00138ef5 : adc [rsp + 0xb8], eax; mov [rsp + 0xd0], 2; call rax; nop [rax]; mov rdi, r15; mov rax, [r15 + 8]; call [rax + 8]
0x001642e4 : sub ecx, ecx; lea r10, [rip + 0x375c3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0014f66c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4c737]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014dab0 : mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00166ef4 : sub ecx, ecx; lea r10, [rip + 0x34a33]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00169e9c : mov dh, 4; pi2fd mm6, [rsi - 0x72b7f1ec]; sub al, 1; add [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret
0x001560d3 : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x37f4f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0014efdc : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4cdc7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013265e : add [rax], eax; add [rcx - 0x75], cl; xchg al, dl; add [rax], al; add [rcx + rcx*4 - 0x19], cl; call [rax + 0x20]
0x0003113c : mov ds, [rax + 0x4c000000]; mov eax, [rsi + 0x28]; mov r9, [rsi + 0x30]; mov rsi, [rsi + 0x70]; xor eax, eax; ret
0x00131f0f : lea eax, [rcx]; add [rax], al; xor eax, eax; mov rsi, [rsp + 0x30]; mov rdi, rbx; mov rcx, [rsp + 0x28]; call rcx
0x0012dd95 : add [rax + 0x29], cl; ror [rax + 0x29], 1; sub rax, 4; bswap eax; mov [rdx], eax; mov edx, ebx; call [r13 + 0x10]
0x0014e55c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4d847]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009581f : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x0014ee8c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4cf17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000a8df : mov ecx, ebx; mov r8, [rsp + 0x40]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call r14
0x0014c8ac : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4f337]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c75c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4f487]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c21c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138f97 : add [rax], al; add [rax], eax; add [rax], al; call [rax + 0x18]; mov rax, [r15 + 8]; mov rdi, r15; call [rax + 8]
0x0003b126 : lea esi, [rip + 0x151464]; movsxd rax, [rsi + rax*4]; add rax, rdi; mov r11, rdx; mov r9d, 1; mov r8d, 1; jmp rax
0x0014d2ef : mov [rdi - 0x23], r9; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0014dc6c : add [rax], al; add [rax], al; mov edx, [rsi - 7]; mov ecx, [rsi - 4]; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x0014ebec : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x4d1b7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138f98 : add [rcx], al; add [rax], al; add bh, bh; push rax; sbb [rcx - 0x75], cl; or [r9 + r9*4 - 1], r9b; call [rax + 8]
0x0010e49a : mov rdx, [r12 + 0x80]; mov [rbp - 0x70], rdx; mov edx, [r12 + 0x60]; mov [rbp - 0x80], edx; mov rdx, rbx; call rax
0x0014c7f9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f3e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c559 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014620b : add [rax], al; add [rax], al; add [rax - 0x7b], cl; div [rbx + rcx - 0x17]; xchg [rdi - 0x12], bh; jmp [rsi + 0xf]
0x0004a52d : movzx r12d, r12b; mov rcx, [rbp - 0x600]; mov r11, [rbp - 0x630]; movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x0014edd9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cfc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00088ee3 : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x10507f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0014f319 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ca89]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0008d703 : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x10095f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0014ef29 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ce79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d2f0 : mov [rdi - 0x23], ecx; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x000e4a68 : mov rdi, [rbp - 0x190]; push 0; mov r9, r15; mov rdx, [r14]; mov rsi, [rbp - 0x1f0]; lea r8, [rax + r13]; call r12
0x0014e5f9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d7a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0010e49b : mov edx, [rsp + 0x80]; mov [rbp - 0x70], rdx; mov edx, [r12 + 0x60]; mov [rbp - 0x80], edx; mov rdx, rbx; call rax
0x0014c169 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000999a5 : movq mm2, [rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; xor ch, ch; mov [rdi + 0x20], ch; ret
0x0000aa01 : lea rcx, [rbp + rbx*4]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; lea r8, [rsp + 0xb0]; xor r9d, r9d; call r15
0x000bf777 : mov r8, r14; mov esi, ebp; push rdx; mov rdx, [rsp + 0x28]; mov rdi, [rsp + 0x20]; mov rax, [rsp + 0x18]; call rax
0x0014c019 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00141d0d : call [rax]; mov rax, [rip + 0x28956a]; lea rdx, [rsp + 8]; lea rsi, [rsp + 0x190]; mov rdi, rbp; call [rax + 0x18]
0x0016cc8d : movzx eax, [rdi + rdx]; lea rdx, [rip + 0xfe58]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0001d9ce : sbb [rbx + rcx*4 + 0x77], cl; and [rbx + rcx*4 + 0x7f], cl; sub [rcx - 0x3b76b310], cl; mov rbp, r9; nop ; jmp rdx
0x0014cd39 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4eea9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000877d3 : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x10670f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0009573d : add [rax], al; add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x0014e899 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d509]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cbe9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4eff9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c6a9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001461b5 : add [rax], al; add [rax + 0x63], cl; ror [rax - 0x2d], -0x1e; shr rax, 6; or [rdi + rax*8], rdx; xor eax, eax; ret
0x0014cd89 : mov [rdi - 0x28], eax; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x000e4a69 : mov edi, [rbp - 0x190]; push 0; mov r9, r15; mov rdx, [r14]; mov rsi, [rbp - 0x1f0]; lea r8, [rax + r13]; call r12
0x0014eb39 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d269]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e9e9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d3b9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001560d4 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x37f4f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00138ff3 : add [rax], al; add [rcx], al; add [rax], al; add [rdi], cl; adc [rsp + 0xb8], eax; mov [rsp + 0xc8], rdx; call rax
0x0014bad9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x50109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bec9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f709 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c699]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097368 : add [rax], al; nop [rax + rax]; lea r11, [rip + 0xf6fd9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0014e4a9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d8f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095cb8 : add [rax], al; nop [rax + rax]; lea r11, [rip + 0xf84a9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0010ebd4 : mov rdx, [r13 + 0x80]; mov [rbp - 0x70], rdx; mov edx, [r13 + 0x60]; mov [rbp - 0x80], edx; mov rdx, r12; call rax
0x0000aa02 : lea ecx, [rbp + rbx*4]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; lea r8, [rsp + 0xb0]; xor r9d, r9d; call r15
0x00099929 : sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; xor ch, ch; mov [rdi + 0x1c], ch; ret
0x0014cdc7 : mov [rdi - 0x28], eax; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0014bc29 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0010ea2b : movdqu xmm0, xmm[r13 + 0x30]; mov [rbp - 0x80], edx; lea rdx, [rcx + 0x70]; movups xmm[rbp - 0x78], xmm0; call rax
0x00158244 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x35e5f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0014c949 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f299]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d110 : mov [rdi - 0x22], ecx; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0014d4e0 : mov [rdi - 0x24], ecx; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0010ebd5 : mov edx, [rbp + 0x80]; mov [rbp - 0x70], rdx; mov edx, [r13 + 0x60]; mov [rbp - 0x80], edx; mov rdx, r12; call rax
0x0014d6b1 : mov [rdi - 0x25], ecx; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0014d8b1 : mov [rdi - 0x26], ecx; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0014dab1 : mov [rdi - 0x27], ecx; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0014bd79 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00161eca : add [rax - 0x73], ecx; add [rdi], rcx; test edi, ebx; add eax, [rax]; add [rax - 0x7cb7fec8], al; fdivr st(7); ret
0x0008b4a3 : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x102b3f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0016b425 : leave ; lea r10, [rip + 0x31583]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00141d35 : add [rbx + rcx*4 + 0x18], ah; mov eax, 2; cmp ebx, 3; cmove ebx, eax; mov rax, [rip + 0x289535]; call [rax + 0x28]
0x0014ca99 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f149]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152ca4 : add [rax], al; nop cs:[rax + rax]; mov dx, [rsi - 3]; mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x0014f5b9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c7e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f1c9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cbd9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f469 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c939]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000956fd : add [rax], al; add bl, dh; movq mm0, [rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x0000459a : add [rax], al; add [rax + 0x4c], dl; mov ecx, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x0006d21d : dec [rax - 0x75]; and al, 8; mov rax, [rsp]; mov rdi, r15; movzx esi, [rcx]; lea rbx, [rcx + 1]; call [rax + 0x18]
0x00169d95 : leave ; lea r10, [rip + 0x32bd3]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0013c8a7 : sub eax, esi; mov esi, esi; mov [rdi + 0x28], eax; mov rax, [rdi + 0x18]; add rsi, rax; mov [rdi + 0x18], rsi; ret
0x0014503b : add [rax], al; nop [rax]; mov rax, [rip + 0x284b41]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax + 0x170]; jmp rax
0x00138bd8 : mov [rsp + 0x20], esi; mov rsi, rsp; mov [rsp + 8], 1; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; call [rax + 0x18]
0x0014f079 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cd29]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009639d : add [rax], al; add bl, dh; movq mm0, [rsi]; mov cl, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; ret
0x0014e749 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d659]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c2b9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00047491 : add [rax], al; movzx edx, [rax + rdx]; lea rax, [rip + 0x145572]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x0014c409 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00149d84 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x4421f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00103aff : inc [rax]; add [rsi + 0x2e], ah; nop [rax + rax]; nop [rax]; mov rax, [rip + 0x2c6071]; mov eax, [rax + 0x38]; ret
0x0009575d : add [rax], al; add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x00092232 : mov [rdx + 9], ah; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov al, [rcx + 8]; mov [rdx + 8], al; mov rax, rdi; ret
0x00148b04 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x4541f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0014ec89 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d119]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000474ee : add [rax], al; movzx edx, [rdx + rax]; lea rax, [rip + 0x145595]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x00047d9d : add [rax], al; movzx edx, [rax + rdx]; lea rax, [rip + 0x144b66]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x000527b0 : xchg [rdx + 0x21], eax; add [rax], al; lea rcx, [rip + 0x13a978]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x000963ac : adc r11b, r8b; nop ; movdqu xmm0, xmm[rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x000f5210 : mov rax, [rip + 0x2d4981]; neg edx; mov fs:[rax], edx; mov rax, [rip + 0x2d49c5]; mov [rax], -1; xor eax, eax; ret
0x000f5211 : mov eax, [rip + 0x2d4981]; neg edx; mov fs:[rax], edx; mov rax, [rip + 0x2d49c5]; mov [rax], -1; xor eax, eax; ret
0x00045f8e : pop rbp; or [rax], al; add [rax - 0x77], cl; fimul [rcx + rcx*4 - 0x1a]; mov rdi, [rbp - 0x8d0]; call [r13 + 0x38]
0x0006e86e : add [rax - 0x75], cl; push rax; or [rbp + 0xb], dh; sub edx, [rax + 0x18]; mov eax, [rdi + 0x10]; sub eax, edx; ret
0x0000edd2 : mov esi, [rdi + 0x78]; mov rcx, [rip + 0x3bae2c]; mov fs:[rcx], rsi; cmp rax, rdx; mov rdx, -1; cmove rax, rdx; ret
0x000bf778 : mov eax, esi; mov esi, ebp; push rdx; mov rdx, [rsp + 0x28]; mov rdi, [rsp + 0x20]; mov rax, [rsp + 0x18]; call rax
0x0009659b : add [rax], al; add [rax], al; add [rax + 0x1f0fc317], cl; add [rsi + 0x2e], ah; nop [rax + rax]; mov [rdi], dx; ret
0x001580e8 : movzx eax, [rdi + rdx]; lea rdx, [rip + 0x249fd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00136989 : lea edx, [rsp + 0x20]; mov esi, 4; movdqa xmm0, xmm[rip + 0x64716]; movaps xmm[rsp + 0x20], xmm0; call [rax + 0x28]
0x00094f2d : add ah, [rsi + 0xf]; adc cl, [rcx + 8]; movlpd [rdx + 8], xmm1; xor ah, ah; mov [rdx + 0x10], ah; mov rax, rdi; ret
0x0006959a : mov [rbx + 0x20], rax; mov [rbx + 0x18], rax; mov [rbx + 8], rax; mov [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret
0x0003f6f5 : add [rax - 0x75], cl; cmp [rbp - 0x77], cl; dec [rcx + rcx*4 - 0x16]; mov rsi, r14; mov rdi, [rbp - 0xc0]; call rax
0x0006cac6 : mov rdx, [rdi + 0x18]; mov [rdi + 0x10], rax; mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x0001f7c3 : mov ebp, [rsp + 0x10]; add r13, [rsp + 8]; lea rbx, [rax + r15]; mov rdx, r12; mov rsi, r14; mov rdi, r13; call rbp
0x000872d6 : add [rax], al; mov eax, [rsp - 0x18]; mov [rdi], eax; movzx eax, [rsp - 0x14]; mov [rdi + 4], ax; mov rax, rdi; ret
0x00136988 : lea rdx, [rsp + 0x20]; mov esi, 4; movdqa xmm0, xmm[rip + 0x64716]; movaps xmm[rsp + 0x20], xmm0; call [rax + 0x28]
0x0006ca96 : mov rdx, [rdi + 0x18]; mov rax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x00094f2c : adc eax, [rdx]; movlpd xmm1, [rcx + 8]; movlpd [rdx + 8], xmm1; xor ah, ah; mov [rdx + 0x10], ah; mov rax, rdi; ret
0x0008d5a8 : movzx eax, [rdi + rdx]; lea rdx, [rip + 0xef53d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00069680 : mov [rbx + 0x90], eax; mov rax, [rbx + 0x18]; mov [rbx + 8], rax; mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x0006ca97 : mov edx, [rdi + 0x18]; mov rax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x00167098 : movzx edx, [rsi + rcx]; lea rcx, [rip + 0x15a4d]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0016548f : movzx edx, [rsi + rcx]; lea rcx, [rip + 0x17656]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00045f8b : dec [rdi]; xchg [rbp + 8], bl; add [rax], al; mov rdx, rbx; mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [r13 + 0x38]
0x0006f574 : mov eax, [rip + 0x35aa6e]; mov [rdi + 0x14], 0; mov [rdi + 0x24], ebp; mov [rdi + 0x10], eax; pop rbx; pop rbp; ret
0x0003a506 : lea esi, [rip + 0x152084]; movsxd rax, [rsi + rax*4]; add rax, rdi; mov r11, rdx; xor r8d, r8d; mov r9d, 1; jmp rax
0x0006494a : add [rax], al; mov rax, [rax + 0x10]; mov [rsp + 0x10], rax; mov r13, [r15 + 0x98]; mov rdi, r13; call [r13 + 0x20]
0x000f831c : sub eax, 0; add al, ch; sar [rax + rsi*8 - 1], 1; mov [rip + 0x2d4c3e], 0; mov [rip + 0x2d4c43], 0; add rsp, 8; ret
0x0006cac7 : mov edx, [rdi + 0x18]; mov [rdi + 0x10], rax; mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x0006f573 : mov rax, [rip + 0x35aa6e]; mov [rdi + 0x14], 0; mov [rdi + 0x24], ebp; mov [rdi + 0x10], eax; pop rbx; pop rbp; ret
0x0016b2e8 : movzx eax, [rdi + rdx]; lea rdx, [rip + 0x117fd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00152ca3 : add [rax], r8b; nop cs:[rax + rax]; mov dx, [rsi - 3]; mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x000877d4 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x10670f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0001f7c2 : mov r13, [rsp + 0x10]; add r13, [rsp + 8]; lea rbx, [rax + r15]; mov rdx, r12; mov rsi, r14; mov rdi, r13; call rbp
0x00168d5d : movzx eax, [rdi + rdx]; lea rdx, [rip + 0x13d88]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0003bcfd : mov [rbp - 0x4c8], r9; mov [rbp - 0x4e8], ecx; mov [rbp - 0x4e0], r11; mov rsi, r8; mov rdi, r14; call [r15 + 0x38]
0x0016b578 : movzx edx, [rsi + rcx]; lea rcx, [rip + 0x1156d]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0007daa4 : add [rax + 0x167404e6], al; test eax, eax; lea rdx, [rip + 0xf01cd]; lea rax, [rip + 0xf0166]; cmovne rax, rdx; ret
0x0009587f : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0006967f : mov [rbx + 0x90], rax; mov rax, [rbx + 0x18]; mov [rbx + 8], rax; mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x0000edd1 : mov rsi, [rdi + 0x78]; mov rcx, [rip + 0x3bae2c]; mov fs:[rcx], rsi; cmp rax, rdx; mov rdx, -1; cmove rax, rdx; ret
0x00141c12 : add [rax], eax; add [rbp + 0x481778c0], al; lea eax, [rip + 0x28d3b0]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret
0x0008b4a4 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x102b3f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00088ee4 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x10507f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00137302 : leave ; push [rip + 0x63c57]; lea r8, [rip - 0xab40]; mov esi, 4; lea rdx, [rip + 0x3f04]; mov rdi, rbx; call [rax]
0x00169e9f : movzx edx, [rsi + rcx]; lea rcx, [rip + 0x12c46]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x000e4be3 : mov r8, [r14 + 8]; mov rdx, [rbp - 0x1e0]; add rax, rbx; mov rdi, [rbp - 0x190]; push rax; mov rcx, [r14]; call r12
0x0008d704 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x10095f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0003a83b : mov [rbp - 0x518], ecx; mov [rbp - 0x510], r11; mov rsi, r8; mov [rbp - 0x500], r8; mov rdi, r14; call [r15 + 0x38]
0x0008fbed : movzx eax, [rdi + rdx]; lea rdx, [rip + 0xecef8]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0003a505 : lea rsi, [rip + 0x152084]; movsxd rax, [rsi + rax*4]; add rax, rdi; mov r11, rdx; xor r8d, r8d; mov r9d, 1; jmp rax
0x0000112e : adc al, 1; add [rax], al; lea rdx, [rip + 0x17a497]; mov eax, eax; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x000955cd : add [rax], al; add [rax + 0x1f0fc337], cl; add [rsi + 0x2e], ah; nop [rax + rax]; mov dx, [rsi]; mov [rdi], dx; ret
0x0015a63d : movzx eax, [rdi + rdx]; lea rdx, [rip + 0x224a8]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0006959b : mov [rbx + 0x20], eax; mov [rbx + 0x18], rax; mov [rbx + 8], rax; mov [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret
0x00110874 : add [rax + 0x167404e6], al; test eax, eax; lea rdx, [rip + 0x5d3ed]; lea rax, [rip + 0x5d386]; cmovne rax, rdx; ret
0x0015dceb : add [rax], al; add [rax], al; add [rax + 0x1f0fc311], cl; add [rsi + 0x2e], ah; nop [rax + rax]; mov [rcx], dx; ret
0x000f831b : sub rax, 0; add al, ch; sar [rax + rsi*8 - 1], 1; mov [rip + 0x2d4c3e], 0; mov [rip + 0x2d4c43], 0; add rsp, 8; ret
0x00166d98 : movzx eax, [rdi + rdx]; lea rdx, [rip + 0x15d4d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00096dd0 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x00103c58 : mov rax, [rip + 0x2c5ed1]; mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x0008739f : add [rbx + 0x48f02454], cl; lea eax, [rdi + rax - 1]; mov [rdi], edx; movzx edx, [rsp - 0xc]; mov [rdi + 4], dl; ret
0x00096e58 : mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x0014506e : add [rdi + rbx + 0x48], dh; mov eax, [rip + 0x284b10]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax + 0x170]; jmp rax
0x00087328 : sbb cl, [rbp + rcx*4 + 5]; pushfq ; imul edx, [rax], 0; mov edx, eax; movsxd rdx, [r8 + rdx*4]; add rdx, r8; jmp rdx
0x000c84b0 : xchg eax, esp; add [rax], al; add [rbx - 0x7bf0d606], al; stosd [rdi], eax; add [rax], al; add [rax - 0x7d], cl; ret
0x001107fc : add [rbp - 0x1a], dh; test [rcx + 0x85], 2; lea rdx, [rip + 0x613b3]; lea rax, [rip + 0x6133c]; cmovne rax, rdx; ret
0x00138b14 : add al, 0; add [rax], al; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x00097a7b : add [rax], al; add [rax], al; add [rbx + 0x3568b0e], cl; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 7]; ret
0x0007db9c : add [rbp - 0x1a], dh; test [rcx + 0x85], 2; lea rdx, [rip + 0xf4023]; lea rax, [rip + 0xf3fac]; cmovne rax, rdx; ret
0x0012bd89 : mov edi, ebx; call [rax + 0x20]; mov rsi, [rbp + 0x20]; mov r12d, eax; mov rdi, rbx; xor eax, eax; call [rbp + 0x28]
0x0013750d : dec [rbp + rcx*4 + 5]; imul eax, [rbp + 0xabeffff], 0; add [rax], al; mov rdi, rax; lea r9, [rsp + 0x1c]; call [r10]
0x00092252 : mov [rdx + 0xa], ah; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov ax, [rcx + 8]; mov [rdx + 8], ax; mov rax, rdi; ret
0x00096d70 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x0014da4b : add [rax], 0; add [rax], al; mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0011065c : add [rbp - 0x1a], dh; test [rcx + 0x85], 2; lea rdx, [rip + 0x61573]; lea rax, [rip + 0x614fc]; cmovne rax, rdx; ret
0x000957c4 : mov rdx, [rsi + 0x10]; mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x00170945 : mov [rax + 0x48], 1; salc ; add rdi, rdx; lea r11, [rip + 0x2b15c]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00171939 : adc [rsi - 4], edx; vmovups zmm[rsi - 0xc0], zmm2; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x0007de9c : add [rbp - 0x1a], dh; test [rcx + 0x85], 2; lea rdx, [rip + 0xf3d43]; lea rax, [rip + 0xf3ccc]; cmovne rax, rdx; ret
0x00097c50 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret
0x000957c5 : mov edx, [rsi + 0x10]; mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x00103c59 : mov eax, [rip + 0x2c5ed1]; mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x0009a46a : movups xmm[rdi + 0x10], xmm5; movups xmm[rdi + 0x20], xmm6; movups xmm[rdi + 0x30], xmm7; movups xmm[r11], xmm8; ret
0x00038220 : add [rax], al; mov rsi, [r15 + 0x18]; mov rdx, [r15 + 0x20]; mov rdi, [rbp - 0x8a8]; sub rdx, rsi; call [rbx + 0x38]
0x0007da2c : add [rbp - 0x1a], dh; test [rcx + 0x85], 2; lea rdx, [rip + 0xf41b3]; lea rax, [rip + 0xf413c]; cmovne rax, rdx; ret
0x0017043d : mov [rax + 0x48], 1; salc ; add rdi, rdx; lea r11, [rip + 0x2b664]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000388d4 : xchg eax, esp; adc [rax], eax; add [rcx + rcx*4 - 0x16], cl; mov rsi, rbx; mov rdi, [rbp - 0x8a8]; call [rax + 0x38]
0x0016f315 : mov [rax + 0x48], 1; salc ; add rdi, rdx; lea r11, [rip + 0x2c64c]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000872d5 : add [rax], r8b; mov eax, [rsp - 0x18]; mov [rdi], eax; movzx eax, [rsp - 0x14]; mov [rdi + 4], ax; mov rax, rdi; ret
0x0017144b : adc [rcx - 4], esp; vmovups zmm[r9 - 0xc0], zmm13; vmovups zmm[r9 - 0x80], zmm14; vmovups zmm[r9 - 0x40], zmm15; ret
0x0003aea0 : add [rcx + rcx*4 - 9], cl; mov [rbp - 0x4e0], r11; mov rdx, [rbp - 0x510]; mov rsi, [rbp - 0x528]; call [rax + 0x38]
0x000e4be4 : mov eax, [rsi + 8]; mov rdx, [rbp - 0x1e0]; add rax, rbx; mov rdi, [rbp - 0x190]; push rax; mov rcx, [r14]; call r12
0x00104119 : mov eax, [rip + 0x2c5a11]; mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x000a5499 : add [rax], al; add [rax], al; add [rax - 0x77], cl; test [rax + rdx*4], ah; add [rax], al; add [rax + 0x39], cl; ret
0x000956da : adc bl, al; nop [rax]; movdqu xmm0, xmm[rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x0006652b : add [rax], al; add [rax - 0x73], cl; add [rax - 0x77], rcx; sub [rax - 0x78], r8b; cmp [rcx + rcx*4 - 0x30], al; ret
0x0009a3e2 : movups xmm[rcx - 0x10], xmm6; movups xmm[rcx - 0x20], xmm7; movups xmm[rcx - 0x30], xmm8; movups xmm[r11], xmm4; ret
0x00169c55 : push rbx; bsf ecx, eax; movzx eax, [rdi + rcx + 0x60]; movzx edx, [rsi + rcx + 0x60]; sub eax, edx; vzeroupper ; ret
0x0003818b : lea edi, [rsi + rsi*8 - 0x77bb0001]; test esp, eax; idiv bh; dec [rcx + rcx*4 - 2]; mov rdi, [rbp - 0x8a8]; call rax
0x000963f4 : mov ecx, [rsi + 0x10]; mov dl, [rsi + 0x14]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; ret
0x0012bdb2 : mov esi, ebp; mov rdi, rbx; mov r14, rax; sub rax, r12; mov [rbp + 0x18], rax; mov rax, [rbx + 8]; call [rax + 0x28]
0x0014dc4b : add [rax], 0; add [rax], al; mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0012bd88 : mov rdi, rbx; call [rax + 0x20]; mov rsi, [rbp + 0x20]; mov r12d, eax; mov rdi, rbx; xor eax, eax; call [rbp + 0x28]
0x0016ee0d : mov [rax + 0x48], 1; salc ; add rdi, rdx; lea r11, [rip + 0x2cb54]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0012d265 : add [rax], al; add [rax], eax; add [rax], al; mov rax, [rax + 0x23b8]; xor esi, esi; mov rdi, rbx; call [rax + 0x28]
0x0017144a : adc [rcx - 4], rsp; vmovups zmm[r9 - 0xc0], zmm13; vmovups zmm[r9 - 0x80], zmm14; vmovups zmm[r9 - 0x40], zmm15; ret
0x00097c17 : mov dl, [rsi + 0x14]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret
0x00096df0 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x0011072c : add [rbp - 0x1a], dh; test [rcx + 0x85], 2; lea rdx, [rip + 0x614a3]; lea rax, [rip + 0x6142c]; cmovne rax, rdx; ret
0x000008b1 : xchg eax, ebx; cmp al, 0; mov rsi, [rsp + 8]; mov edi, [rsp + 0x14]; mov rdx, [rax]; mov rax, [rsp + 0x18]; call rax
0x00096c3b : add [rax], al; add [rax], al; add [rbx + 0x3568b0e], cl; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x00096d50 : movdqu xmm0, xmm[rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x00171938 : adc [rsi - 4], rdx; vmovups zmm[rsi - 0xc0], zmm2; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x00097c98 : mov cl, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret
0x00103d86 : add [rax], al; mov rax, [rip + 0x2c5da1]; mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x00103e19 : mov eax, [rip + 0x2c5d11]; mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x00097bd0 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret
0x00096474 : mov rdx, [rsi + 0x10]; mov cl, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; ret
0x0011ffef : add ecx, 1; shl rdx, 4; xor eax, eax; mov [rdi + 3], cl; movdqu xmm0, xmm[rsi]; movups xmm[rdi + rdx + 8], xmm0; ret
0x0009577d : add [rax], al; add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x00104118 : mov rax, [rip + 0x2c5a11]; mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x0001d596 : add [rax + 0x30e0c148], al; and rdx, rcx; or rdx, rax; mov [rsp + 8], rdx; movdqa xmm0, xmm[rsp]; add rsp, 0x28; ret
0x000ee0ce : add [rax], al; add [rdi], cl; adc [rsi + 0x60], eax; movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x00097c30 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret
0x000ed50a : adc [rdi + 0x10], eax; movups xmm[rdi + 0x20], xmm0; movups xmm[rdi + 0x30], xmm0; movups xmm[rdi + 0x40], xmm0; ret
0x00103e18 : mov rax, [rip + 0x2c5d11]; mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x001108bc : add [rbp - 0x1b], dh; test [rcx + 0x85], 2; lea rdx, [rip + 0x618c3]; lea rax, [rip + 0x6184c]; cmovne rax, rdx; ret
0x0014d84b : add [rax], 0; add [rax], al; mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00096475 : mov edx, [rsi + 0x10]; mov cl, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; ret
0x00097bb0 : movdqu xmm0, xmm[rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret
0x00097cb8 : mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret
0x0001e5d8 : adc [rdi + 0x40], eax; movups xmm[rdi + 0x50], xmm0; movups xmm[rdi + 0x60], xmm0; movups xmm[rdi + 0x70], xmm0; ret
0x0003bcfe : mov [rbp - 0x4c8], ecx; mov [rbp - 0x4e8], ecx; mov [rbp - 0x4e0], r11; mov rsi, r8; mov rdi, r14; call [r15 + 0x38]
0x00097b90 : movdqu xmm0, xmm[rsi]; mov cl, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret
0x000920e9 : add [rax + 0x3850f40], ch; add [rax], eax; add [rsi + 0xf], ah; adc al, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret
0x0007daec : add [rbp - 0x1b], dh; test [rcx + 0x85], 2; lea rdx, [rip + 0xf46a3]; lea rax, [rip + 0xf462c]; cmovne rax, rdx; ret
0x0000488e : push rax; push 0; mov r9, [rsp + 0x40]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call r14
0x00008b38 : push rax; push 0; mov r9, [rsp + 0x28]; mov rdx, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; call r15
0x000873b7 : add [rbx + 0x48e82454], cl; lea eax, [rdi + rax - 1]; mov [rdi], edx; movzx edx, [rsp - 0x14]; mov [rdi + 4], dx; ret
0x00068119 : mov rax, [rbx + 0xa0]; mov rdx, [rax]; mov [rax + 8], rdx; mov rdx, [rax + 0x18]; mov [rax + 0x20], rdx; pop rbx; ret
0x00131ebc : mov rsi, [rsp + 0x10]; lea ebp, [rax - 1]; mov rax, [r12 + 0xd0]; mov [r12 + 0xa8], ebp; bswap ebp; call [rax + 0x18]
0x0014d29c : add [rax], al; add [rax], al; mov rcx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00020d02 : mov eax, [rsp]; mov rdx, [rsp + 0x10]; mov rsi, rbp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, [rsp + 8]; call rax
0x00096e34 : mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x0000582e : push rax; push 0; mov r9, [rsp + 0x20]; mov rdx, [rsp + 0x30]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r13
0x000008ae : mov eax, [rip + 0x3c9324]; mov rsi, [rsp + 8]; mov edi, [rsp + 0x14]; mov rdx, [rax]; mov rax, [rsp + 0x18]; call rax
0x00097cb9 : mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret
0x00046c38 : dec [rax - 0x77]; fimul [rcx + rcx*4 - 0x11]; sub r14, rbx; mov r15, r14; sar r15, 2; mov rdx, r15; call [rax + 0x38]
0x0001ee5b : dec [rcx + 0x3ab07615]; add bl, al; nop [rax + rax]; lea eax, [rdx + 1]; mov [rip + 0x3ab06b], eax; mov eax, edx; ret
0x0001ccb7 : add [rax - 9], cl; ror [rax + 0x21], cl; shl [rsi + 0x48], 1; movd mm1, eax; movsd [rdi], xmm1; subsd xmm0, xmm1; ret
0x001528ac : add [rax], al; add [rax], al; mov rdx, [rsi - 0xb]; mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x000ee0ca : movq mm0, [rdi + 0xe8]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x000061e9 : push rsi; push 0; mov r9, [rsp + 0x38]; mov rsi, [rsp + 0x48]; mov rdi, [rsp + 0x40]; mov rax, [rsp + 0x20]; call rax
0x00096e35 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x0012b06f : sbb [rbp + 0x483e74c0], al; mov eax, [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov [rbx + 0x18], 0; call [rax + 0x28]
0x00134dda : mov rsi, [rsp + 0x10]; lea ebp, [rax - 1]; mov rax, [r12 + 0x70]; mov [r12 + 0x48], ebp; bswap ebp; call [rax + 0x18]
0x0015279c : add [rax], al; add [rax], al; mov rdx, [rsi - 0xd]; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x000ed7d8 : movq mm0, [rdi + 0x68]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0x78]; movups xmm[rsi + 0x70], xmm0; ret
0x00103d85 : add [rax], r8b; mov rax, [rip + 0x2c5da1]; mov edi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 1; ret
0x00020d01 : mov rax, [rsp]; mov rdx, [rsp + 0x10]; mov rsi, rbp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, [rsp + 8]; call rax
0x0003b3db : dec [rax - 0x68]; movzx edx, [rdx + rax]; lea rax, [rip + 0x151327]; movsxd rax, [rax + rdx*4]; add rax, rsi; jmp rax
0x000957a0 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x0015bcfc : add [rax], eax; add [rax + 0x48018b48], dl; mov [rdx], eax; mov rax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x0014d84c : add [rax], al; add [rax], al; mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0015267c : add [rax], al; add [rax], al; mov rdx, [rsi - 0xf]; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x0003a5ef : mov edx, ecx; mov [rbp - 0x4e8], rcx; mov [rbp - 0x500], r11; mov rsi, [rbp - 0x4f8]; mov rdi, r14; call [rax + 0x38]
0x0015292c : add [rax], al; add [rax], al; mov rdx, [rsi - 0xa]; mov ecx, [rsi - 4]; mov [rdi - 0xa], rdx; mov [rdi - 4], ecx; ret
0x0015dd0b : add [rax], al; add [rax], al; add [rsi - 0x77], ah; adc [rax + 0x66c30251], ecx; nop [rax + rax]; mov [rcx], edx; ret
0x0012c8de : sbb [rbp - 0x7caa8b40], al; clc ; add [rbp + 0x38], esi; mov eax, [rdi + 0x20]; mov [rsi], 7; mov [rsi + 8], eax; ret
0x00045843 : dec [rdi]; xchg [rsi + 0xd], cl; add [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [rbx + 0x38]
0x000008ad : mov rax, [rip + 0x3c9324]; mov rsi, [rsp + 8]; mov edi, [rsp + 0x14]; mov rdx, [rax]; mov rax, [rsp + 0x18]; call rax
0x0003cc14 : dec [rax - 0x68]; movzx edx, [rdx + rax]; lea rax, [rip + 0x14faee]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x001721bf : add [rax], 0; add [rdi + 0x12], dh; vmovdqu64 zmm[rdi + rdx - 0x40], zmm0; vmovdqu64 zmm[rdi], zmm0; vzeroupper ; ret
0x00134ddb : mov esi, [rsp + 0x10]; lea ebp, [rax - 1]; mov rax, [r12 + 0x70]; mov [r12 + 0x48], ebp; bswap ebp; call [rax + 0x18]
0x0005fac6 : xchg ch, dl; add [rax], al; add [rcx + rcx*4 - 0x1f], al; mov edx, ebp; mov rsi, r13; mov rdi, rbx; call [r14 + 0x48]
0x001345cd : add [rax], al; add [rbx + 0x48102444], cl; lea edx, [rip + 0x5da55]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x000ee15a : movq mm0, [rsi + 0x60]; movups xmm[rdi + 0xe8], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x00138309 : add [rax], al; add [rax], al; nop [rax]; mov rax, [rip + 0x2917b9]; lea rdx, [rip + 0x296b52]; mov fs:[rax], rdx; ret
0x0014da4c : add [rax], al; add [rax], al; mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0014d47c : add [rax], al; add [rax], al; mov rcx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0015270c : add [rax], al; add [rax], al; mov rdx, [rsi - 0xe]; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x00095720 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x00096db4 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x00171ec4 : xchg [rcx + rax], ecx; add [rdx - 0xf], ah; dec [rax + 0x6f]; add [rdx - 0xf], esp; dec [rax + 0x6f]; jmp [r10 - 0xf]
0x0006811a : mov eax, [rbx + 0xa0]; mov rdx, [rax]; mov [rax + 8], rdx; mov rdx, [rax + 0x18]; mov [rax + 0x20], rdx; pop rbx; ret
0x0015282c : add [rax], al; add [rax], al; mov rdx, [rsi - 0xc]; mov ecx, [rsi - 4]; mov [rdi - 0xc], rdx; mov [rdi - 4], ecx; ret
0x0003a5ee : mov rdx, rcx; mov [rbp - 0x4e8], rcx; mov [rbp - 0x500], r11; mov rsi, [rbp - 0x4f8]; mov rdi, r14; call [rax + 0x38]
0x000ed828 : movq mm0, [rsi + 0x60]; movups xmm[rdi + 0x68], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0x78], xmm0; ret
0x0012d85c : adc bh, bh; push rax; or [rbp + 0x48c074c0], al; mov eax, [rbx + 8]; lea rsi, [rbp + 8]; mov rdi, rbx; call [rax + 8]
0x00131ebd : mov esi, [rsp + 0x10]; lea ebp, [rax - 1]; mov rax, [r12 + 0xd0]; mov [r12 + 0xa8], ebp; bswap ebp; call [rax + 0x18]
0x0012bdb1 : mov esi, r13d; mov rdi, rbx; mov r14, rax; sub rax, r12; mov [rbp + 0x18], rax; mov rax, [rbx + 8]; call [rax + 0x28]
0x00009535 : push rax; push 0; mov r9, [rsp + 0x20]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x0000834c : push rax; push 0; mov r9, [rsp + 0x20]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r15
0x0014d65c : add [rax], al; add [rax], al; mov rcx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0014dc4c : add [rax], al; add [rax], al; mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00096e59 : mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x00004d50 : push rax; push 0; mov r9, [rsp + 0x28]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r12
0x00005388 : push rax; push 0; mov r9, [rsp + 0x28]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call r14
0x0014c0ca : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003b17e : mov r9d, 1; cdqe ; movzx esi, [rsi + rax]; lea rax, [rip + 0x15137f]; movsxd rax, [rax + rsi*4]; add rax, rdi; jmp rax
0x0014dc64 : add [rax], al; nop cs:[rax + rax]; mov edx, [rsi - 7]; mov ecx, [rsi - 4]; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x00044815 : mov [rbp - 0x960], ebx; mov [rbp - 0x940], r8b; mov rsi, r14; mov [rbp - 0x950], r9b; mov rdi, [rbp - 0x8d0]; call rax
0x0006207b : push rax; mov [rax + 8], rcx; mov rcx, [rax + 0x10]; mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x0014cb4a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f097]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097bf0 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret
0x0001d0d6 : add bl, dh; movups xmm1, xmm[rip + 0x17e719]; orps xmm0, xmm[rip + 0x17daba]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret
0x0014e94a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d457]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001529a4 : add [rax], al; nop cs:[rax + rax]; mov rdx, [rsi - 9]; mov ecx, [rsi - 4]; mov [rdi - 9], rdx; mov [rdi - 4], ecx; ret
0x0014f12a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4cc77]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000bb1d4 : xchg [rbx + 0x4800001c], eax; lea edi, [rip + 0xd3fa4]; mov edx, esi; movsxd rax, [rdi + rdx*4]; add rax, rdi; jmp rax
0x000479cd : mov [rbp - 0x500], 1; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x16a]; add rax, rdi; jmp rax
0x00097c70 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret
0x0014c21a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00169c8f : add bl, dh; bsf ecx, eax; movzx eax, [rdi + rcx + 0x40]; movzx edx, [rsi + rcx + 0x40]; sub eax, edx; vzeroupper ; ret
0x00047865 : mov [rbp - 0x4e8], 1; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x2d2]; add rax, rdi; jmp rax
0x0014efda : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4cdc7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bf7a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014dc0b : int1 ; mov rdx, [rsi - 8]; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0012d25b : lea ebx, [rax + 0x23b0]; mov [rax + 0x23b0], 1; mov rax, [rax + 0x23b8]; xor esi, esi; mov rdi, rbx; call [rax + 0x28]
0x00099964 : movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; xor ch, ch; mov [rdi + 0x1e], ch; ret
0x00169c6f : add bl, dh; bsf ecx, eax; movzx eax, [rdi + rcx + 0x20]; movzx edx, [rsi + rcx + 0x20]; sub eax, edx; vzeroupper ; ret
0x0014c4ba : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000620bc : push rax; mov rcx, [rax + 0x10]; mov [rax + 8], rdx; mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x0014be2a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c8aa : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f337]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bb8a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x50057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00092292 : mov [rdx + 0xc], ah; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x0014c60a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000ee0f3 : add [rax], eax; add [rcx - 0x3c3fcefa], cl; nop [rax + rax]; mov eax, [rdi + 0x108]; mov [rsi], eax; xor eax, eax; ret
0x0014c75a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f487]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cc9a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4ef47]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138b83 : xor [rip + 0x48000000], al; mov [rsp + 0x28], eax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x0014e40a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d997]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099944 : movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; xor ch, ch; mov [rdi + 0x1d], ch; ret
0x0014e7fa : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d5a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e6aa : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d6f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001721c0 : add [rax], al; add [rdi + 0x12], dh; vmovdqu64 zmm[rdi + rdx - 0x40], zmm0; vmovdqu64 zmm[rdi], zmm0; vzeroupper ; ret
0x00099984 : movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; xor ch, ch; mov [rdi + 0x1f], ch; ret
0x00023556 : mov [rsi + 0x10], eax; movzx eax, [rdi + 0xc]; mov [rsi + 0xc], ax; mov eax, 1; mov [rsi + 0xe], ax; xor eax, eax; ret
0x00096e78 : mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x0001cd5f : add dl, dh; movups xmm1, xmm[rip + 0x17e3b0]; orpd xmm0, xmm[rip + 0x17de00]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret
0x0014cedb : add [rax], 0; add [rax], al; mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0014ed40 : add edi, edx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d062]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0001cd8d : add dl, dh; movups xmm1, xmm[rip + 0x17e37a]; orpd xmm0, xmm[rip + 0x17ddc2]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret
0x0003b17f : mov ecx, 1; cdqe ; movzx esi, [rsi + rax]; lea rax, [rip + 0x15137f]; movsxd rax, [rax + rsi*4]; add rax, rdi; jmp rax
0x00096e10 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x000478bd : mov [rbp - 0x514], 1; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x27a]; add rax, rdi; jmp rax
0x000f831f : add [rax], al; add al, ch; sar [rax + rsi*8 - 1], 1; mov [rip + 0x2d4c3e], 0; mov [rip + 0x2d4c43], 0; add rsp, 8; ret
0x00092272 : mov [rdx + 0xb], ah; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x0012d25a : lea rbx, [rax + 0x23b0]; mov [rax + 0x23b0], 1; mov rax, [rax + 0x23b8]; xor esi, esi; mov rdi, rbx; call [rax + 0x28]
0x0014f66a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4c737]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d864 : add [rax], al; nop cs:[rax + rax]; mov edx, [rsi - 5]; mov ecx, [rsi - 4]; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x00095804 : mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x0013beb0 : movsxd rax, [rsi]; mov [rsp + 8], r8; lea rsi, [rsp + 0x10]; mov [rsp + 0x10], rax; mov rax, [rdi + 8]; call [rax + 8]
0x00038d0f : dec [rdi]; xchg bh, dl; or al, 0; add [rcx + rcx*4 - 0x16], cl; mov rsi, r9; mov rdi, [rbp - 0x8a8]; call [rbx + 0x38]
0x00038185 : mov rax, [rax + r11*8]; mov [rbp - 0x944], r9d; mov [rbp - 0x920], r8b; mov rsi, r15; mov rdi, [rbp - 0x8a8]; call rax
0x00096e98 : mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x00141d34 : sub [rax], al; mov ebx, fs:[rax]; mov eax, 2; cmp ebx, 3; cmove ebx, eax; mov rax, [rip + 0x289535]; call [rax + 0x28]
0x00096d90 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x0003b914 : add [rax], al; mov rsi, [rbp - 0x528]; mov [rbp - 0x4e0], r11; mov rdi, r14; mov rdx, [rbp - 0x510]; call [r15 + 0x38]
0x0014f27a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4cb27]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095805 : mov edx, [rsi + 0x10]; mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x0012c8dd : sbb [r13 - 0x7caa8b40], r8b; clc ; add [rbp + 0x38], esi; mov eax, [rdi + 0x20]; mov [rsi], 7; mov [rsi + 8], eax; ret
0x0014ba3a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x501a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0001d0fb : add bl, dh; movups xmm1, xmm[rip + 0x17e6f0]; orps xmm0, xmm[rip + 0x17da75]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret
0x000435ed : add [rax - 0x73], cl; push rax; add [rax - 0x77], ecx; push rbp; sub dh, al; add [rip - 0x11d17], ch; jmp [rsi - 0x70]
0x0014ee8a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4cf17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ed3f : add rdi, rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d062]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00047035 : add [rbp - 0x77], cl; dec [rcx + rcx*4 - 0x3a]; mov rdi, r13; sub r14, r8; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x0014c9fa : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f1e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c370 : add edi, edx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f872]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e55a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d847]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bcda : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4ff07]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004791b : mov [rbp - 0x508], 1; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x21c]; add rax, rdi; jmp rax
0x0014ebea : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d1b7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00038186 : mov eax, [rax + rbx*8]; mov [rbp - 0x944], r9d; mov [rbp - 0x920], r8b; mov rsi, r15; mov rdi, [rbp - 0x8a8]; call rax
0x0014c36f : add rdi, rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f872]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152ca5 : add [rsi + 0x2e], ah; nop [rax + rax]; mov dx, [rsi - 3]; mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x0014f51a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4c887]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ea9a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d307]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00134560 : mov rax, fs:[0x28]; mov [rsp + 0x438], rax; xor eax, eax; mov rax, [rdi + 8]; lea rsi, [rsp + 0x10]; call [rax + 0x10]
0x000957e4 : mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x0014f3ca : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4c9d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014da64 : add [rax], al; nop cs:[rax + rax]; mov edx, [rsi - 6]; mov ecx, [rsi - 4]; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x00097cd8 : mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret
0x000957e5 : mov edx, [rsi + 0x10]; mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x0012a5d8 : lea ecx, [rip + 0x66952]; lea rdx, [rsi + 7]; and esi, 7; movsxd rax, [rcx + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax
0x0003ae9f : add [rax], al; mov rdi, r14; mov [rbp - 0x4e0], r11; mov rdx, [rbp - 0x510]; mov rsi, [rbp - 0x528]; call [rax + 0x38]
0x0012a5d7 : lea rcx, [rip + 0x66952]; lea rdx, [rsi + 7]; and esi, 7; movsxd rax, [rcx + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax
0x00023555 : mov [rsi + 0x10], rax; movzx eax, [rdi + 0xc]; mov [rsi + 0xc], ax; mov eax, 1; mov [rsi + 0xe], ax; xor eax, eax; ret
0x00135814 : xchg [rax + 0x48000000], edx; mov esi, [rsp + 0x28]; mov rdi, rbp; add [rax], 1; mov rax, [r15 + 0x60]; call [rax + 8]
0x00097cf8 : mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret
0x0006a84a : xchg ch, dh; add [rax], al; add [rcx + rcx*4 - 0x3e], cl; mov [rsp], r8; mov rsi, r13; mov rdi, rbx; call [rax + 0x78]
0x000450b1 : mov [rbp - 0x928], ecx; mov [rbp - 0x91c], r11d; mov rdx, rbx; mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [r13 + 0x38]
0x0003c022 : add [rax - 0x68], cl; movzx eax, [rsi + rax]; movsxd rax, [rdi + rax*4]; lea rdi, [rip - 0x1624]; add rax, rdi; jmp rax
0x0014dc63 : add [rax], r8b; nop cs:[rax + rax]; mov edx, [rsi - 7]; mov ecx, [rsi - 4]; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x00044814 : mov [rbp - 0x960], r11d; mov [rbp - 0x940], r8b; mov rsi, r14; mov [rbp - 0x950], r9b; mov rdi, [rbp - 0x8d0]; call rax
0x00088e08 : dec [rdi]; test [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, [rax + rcx]; movzx edx, [rdx + rcx]; sub eax, edx; ret
0x0014d863 : add [rax], r8b; nop cs:[rax + rax]; mov edx, [rsi - 5]; mov ecx, [rsi - 4]; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x0000f210 : mov rax, [rip + 0x3ba919]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x001715b2 : adc [rcx + 4], esp; vmovups zmm[r9 + 0x140], zmm13; vmovups zmm[r9 + 0x180], zmm14; vmovups zmm[r9 + 0x1c0], zmm15; ret
0x0000f2b0 : mov rax, [rip + 0x3ba879]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x001715b1 : adc [rcx + 4], rsp; vmovups zmm[r9 + 0x140], zmm13; vmovups zmm[r9 + 0x180], zmm14; vmovups zmm[r9 + 0x1c0], zmm15; ret
0x0000f2b1 : mov eax, [rip + 0x3ba879]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 4; movzx eax, ax; ret
0x001381a9 : add [rax], al; lea rsi, [r12 + 8]; mov rdi, rbx; call [rax + 0x10]; mov rax, [rbx + 8]; mov rdi, rbx; call [rax + 0x20]
0x00137f56 : add [rax], al; lea rsi, [r10 + 8]; mov rdi, rbx; call [rax + 0x10]; mov rax, [rbx + 8]; mov rdi, rbx; call [rax + 0x20]
0x00171b36 : adc [rsi + 4], rdx; vmovups zmm[rsi + 0x140], zmm2; vmovups zmm[rsi + 0x180], zmm2; vmovups zmm[rsi + 0x1c0], zmm2; ret
0x00171b37 : adc [rsi + 4], edx; vmovups zmm[rsi + 0x140], zmm2; vmovups zmm[rsi + 0x180], zmm2; vmovups zmm[rsi + 0x1c0], zmm2; ret
0x0013d125 : sub [rax], al; mov [rdi], edx; mov [rdi + 0x18], rsi; mov [rdi + 0x28], 0; mov [rdi + 0x20], 0; mov [rdi + 8], rax; ret
0x0000f1d1 : mov eax, [rip + 0x3ba959]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x0016b423 : sub r9, rcx; lea r10, [rip + 0x31583]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x000872f4 : mov [rdi], eax; movzx eax, [rsp + 0xc]; mov [rdi + 4], ax; movzx eax, [rsp + 0xe]; mov [rdi + 6], al; mov rax, rdi; ret
0x0014dd40 : add rsi, rdx; add rdi, rdx; sfence ; lea r11, [rip + 0x4dea0]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138f8e : add [rax], eax; add [rax], al; mov [rsp + 0xb8], 1; call [rax + 0x18]; mov rax, [r15 + 8]; mov rdi, r15; call [rax + 8]
0x00139f8f : sub bh, bh; inc [rbp - 0x17bf040]; add [rax], al; add [rax - 0x75], cl; sbb [r9 + rcx*4 - 0x19], r9b; call [rax + 0x20]
0x0014df1c : add [rax], al; mov rcx, [rip + 0x27c13b]; lea r11, [rip + 0x4e004]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x00048c2b : mov [rbp - 0x4f8], 1; movzx eax, [rcx + rax]; lea rcx, [rip - 0x10f0]; movsxd rax, [rdi + rax*4]; add rax, rcx; jmp rax
0x00063aa5 : add [rax], al; mov rax, [rdx + 0x20]; cmp [rdx + 8], rax; cmovae rax, [rdx + 8]; sub rax, [rdx + 0x10]; sar rax, 2; ret
0x0014b4eb : add [rax], al; mov rcx, [rip + 0x27eb6c]; lea r11, [rip + 0x50835]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0014dd41 : add esi, edx; add rdi, rdx; sfence ; lea r11, [rip + 0x4dea0]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00166d66 : add [rdx - 0x7ef272b8], edx; pop rbp; add [rax], eax; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x00150728 : add rsi, rdx; add rdi, rdx; sfence ; lea r11, [rip + 0x4b678]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000f652 : mov rcx, [rip + 0x3ba5af]; lea rdx, [rdi + 0x200]; mov fs:[rcx], rdx; mov rdx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x00169d93 : sub r9, rcx; lea r10, [rip + 0x32bd3]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00048112 : movsxd rax, [rdi + rax*4]; lea rdi, [rip - 0x5cd]; add rax, rdi; mov r8, rcx; mov [rbp - 0x4c0], 1; mov esi, 1; jmp rax
0x0012c5da : add [rax], al; mov rsi, [rsp + 0x68]; ror ax, 8; mov rdi, [rsp]; mov [rsp + 0x1a2], ax; mov rax, [rsp + 0x28]; call rax
0x0003c021 : add [rax], al; cdqe ; movzx eax, [rsi + rax]; movsxd rax, [rdi + rax*4]; lea rdi, [rip - 0x1624]; add rax, rdi; jmp rax
0x00150729 : add esi, edx; add rdi, rdx; sfence ; lea r11, [rip + 0x4b678]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0010330e : add [rsi - 0x77], esp; add al, bl; nop [rax + rax]; mov rax, [rip + 0x2c9f49]; mov rax, [rax + 0x18]; add [rax], 1; ret
0x0000f1d0 : mov rax, [rip + 0x3ba959]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 8; movzx eax, ax; ret
0x00138ee1 : mov [rsp + 0xe0], rsi; mov [rsp + 0xc8], rdx; mov rsi, r13; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xd0], 2; call rax
0x00094f2a : movlpd [rdx], xmm0; movlpd xmm1, [rcx + 8]; movlpd [rdx + 8], xmm1; xor ah, ah; mov [rdx + 0x10], ah; mov rax, rdi; ret
0x0014da63 : add [rax], r8b; nop cs:[rax + rax]; mov edx, [rsi - 6]; mov ecx, [rsi - 4]; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x0000f211 : mov eax, [rip + 0x3ba919]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, [rax + rdi*2]; and eax, 2; movzx eax, ax; ret
0x0014cedc : add [rax], al; add [rax], al; mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x001529a3 : add [rax], r8b; nop cs:[rax + rax]; mov rdx, [rsi - 9]; mov ecx, [rsi - 4]; mov [rdi - 9], rdx; mov [rdi - 4], ecx; ret
0x0012ba8a : add al, 0; add [rax], al; mov rdi, rbp; lea r8, [rip + 0xb8]; lea rdx, [rip + 0xf781]; lea r9, [rsp + 0x20]; call [rax]
0x0000f653 : mov ecx, [rip + 0x3ba5af]; lea rdx, [rdi + 0x200]; mov fs:[rcx], rdx; mov rdx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x00094f2b : movlps [rdx], xmm0; movlpd xmm1, [rcx + 8]; movlpd [rdx + 8], xmm1; xor ah, ah; mov [rdx + 0x10], ah; mov rax, rdi; ret
0x00004595 : push rax; mov eax, [rsp + 0xa8]; push rax; mov r9, [rsp + 0x28]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; call rbx
0x0002350e : mov bh, 7; mov [rsi + 0x14], 5; mov [rsi], ax; movabs rax, -0x21131992fffefff5; mov [rsi + 0xc], rax; xor eax, eax; ret
0x00139f6d : sbb [rbp + rcx*4 + 0x65], cl; adc bh, al; adc [r8], r8b; add [rax], al; add [rcx + rcx*4 - 0x19], cl; call [rax + 0x28]
0x00138ee2 : mov [rsp + 0xe0], esi; mov [rsp + 0xc8], rdx; mov rsi, r13; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xd0], 2; call rax
0x000180f6 : movsd [rdi], [rsi]; add al, 0; add [rbx - 0x7bf0fc08], al; insd [rdi], dx; add al, 0; add [rbx - 0x7bf0fe08], al; ret 4
0x0014b54c : add [rax], al; mov rcx, [rip + 0x27eb0b]; lea r11, [rip + 0x50814]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x00064dfb : push [rdx + 0x48]; mov eax, [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x130]; mov rax, [rax + 0x20]; jmp rax
0x0000de69 : add [rax], al; nop [rax + rax]; mov rax, [rip + 0x3bbc81]; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax + 0xa8]; ret
0x0009213d : add [rax], al; movlpd xmm0, [rcx]; movlpd xmm1, [rcx + 8]; movlpd [rdx], xmm0; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x0003123a : add [rax + 0x39], ecx; sar [rbp + 0xa], 1; mov rax, [r8 + rcx + 8]; mov [rsi + rcx + 8], rax; xor eax, eax; pop rbx; ret
0x00047984 : adc al, 0; mov r8, rcx; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x1b8]; add rax, rdi; jmp rax
0x00138ef4 : movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xd0], 2; call rax; nop [rax]; mov rdi, r15; mov rax, [r15 + 8]; call [rax + 8]
0x000965cd : add [rax], al; add [rcx + 0x1f0fc317], cl; add [rsi + 0x2e], ah; nop [rax + rax]; mov [rdi], edx; mov [rdi + 4], dl; ret
0x0015dd1d : add [rax], al; add [rcx + 0x1f0fc311], cl; add [rsi + 0x2e], ah; nop [rax + rax]; mov [rcx], edx; mov [rcx + 4], dl; ret
0x0010e586 : push rbp; cwde ; mov rdx, r13; movdqu xmm0, xmm[r15 - 0x18]; mov [rbp - 0x80], 0; movups xmm[rbp - 0x78], xmm0; call rax
0x000f6bd8 : mov [rip + 0x2d6272], eax; mov eax, [rip + 0x2d6240]; pop r12; mov [rip + 0x2d6268], eax; lea rax, [rip + 0x2d6235]; ret
0x0003b019 : mov r11, rdx; cdqe ; movzx eax, [rsi + rax]; lea rsi, [rip + 0x151767]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0014d526 : int3 ; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00169d94 : sub ecx, ecx; lea r10, [rip + 0x32bd3]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0010e88a : push rbp; sal bl, 1; movq mm0, [r13 - 0x18]; mov [rbp - 0x80], edx; mov rdx, rbx; movups xmm[rbp - 0x78], xmm0; call rax
0x00139f6c : sbb [r13 + rcx*4 + 0x65], r9b; adc bh, al; adc [r8], r8b; add [rax], al; add [rcx + rcx*4 - 0x19], cl; call [rax + 0x28]
0x00065033 : push rax; mov rdx, r12; mov rax, [rsp + 0x10]; mov r8, [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call [rax + 8]
0x000fbc83 : add eax, [rax]; add [rax], al; add [rbx - 0x3d], bl; nop [rax + rax]; mov rax, [rip + 0x2cdf01]; mov fs:[rax], 0x16; ret
0x000999a4 : movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; xor ch, ch; mov [rdi + 0x20], ch; ret
0x0010e2b3 : push rbp; sal bl, 1; movq mm0, [r13 - 0x18]; mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x0016b424 : sub ecx, ecx; lea r10, [rip + 0x31583]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0010ea2a : sbb bl, dh; movq mm0, [r13 + 0x30]; mov [rbp - 0x80], edx; lea rdx, [rcx + 0x70]; movups xmm[rbp - 0x78], xmm0; call rax
0x0003b01a : mov ebx, edx; cdqe ; movzx eax, [rsi + rax]; lea rsi, [rip + 0x151767]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x00133454 : mov [rbx + 0x60], eax; mov eax, 8; mov [rsp + 0xc], eax; mov rax, [rbp + 8]; mov esi, 8; mov rdi, rbp; call [rax + 0x30]
0x000f69f8 : mov [rip + 0x2d6452], eax; mov eax, [rip + 0x2d6420]; pop r12; mov [rip + 0x2d6448], eax; lea rax, [rip + 0x2d6415]; ret
0x000439ff : xor [rdi], cl; adc [rdi + 0x48000000], -0x73; add [rbx - 0x76b7fe3d], rax; sub [r8 + 0x468b4102], r9b; add al, 0x39; ret
0x0015dd6d : add [rax], al; add [rax - 0x77], cl; adc [rax + 0x66c30851], ecx; nop [rax + rax]; mov [rcx], rdx; mov [rcx + 8], dx; ret
0x0010dff8 : push rbx; sbb bl, dh; movq mm0, [rbx + 0x30]; mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x0009bb20 : mov rax, [rip + 0x32e061]; lea rdx, [rip + 0xc72e2]; test [rax + 0x79], 2; lea rax, [rip + 0x13667]; cmovne rax, rdx; ret
0x0014daf7 : leave ; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0003afad : add [rax - 0x68], cl; movzx eax, [rsi + rax]; lea rsi, [rip + 0x1517d5]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x00087225 : add eax, edi; mov [rdi], edx; movzx edx, [rsp + 0x14]; mov [rdi + 4], dx; movzx edx, [rsp + 0x16]; mov [rdi + 6], dl; ret
0x00138a39 : sub [rax - 0x75], cl; or [r15], r9b; adc [rsp + 0x18], eax; mov [rsp + 0x30], 0; mov [rsp + 0x38], rdx; call [rax + 0x18]
0x0003b183 : add [rax - 0x68], cl; movzx esi, [rsi + rax]; lea rax, [rip + 0x15137f]; movsxd rax, [rax + rsi*4]; add rax, rdi; jmp rax
0x00047d95 : mov [rbp - 0x4c0], 1; movzx edx, [rax + rdx]; lea rax, [rip + 0x144b66]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x0003aa8f : add [rax - 0x68], cl; movzx eax, [rsi + rax]; lea rsi, [rip + 0x151cf3]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0012e8d1 : mov esi, [rbx + 0x18]; mov [rbx + 0x38], 0; mov rdi, [rbx]; mov [rcx], eax; sub rdx, rsi; mov rbp, rdx; call [rbx + 0x10]
0x00092314 : adc [rsi + 0xf], ah; adc al, [rcx]; movlpd xmm1, [rcx + 8]; movlpd [rdx], xmm0; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x00087224 : add rax, rdi; mov [rdi], edx; movzx edx, [rsp + 0x14]; mov [rdi + 4], dx; movzx edx, [rsp + 0x16]; mov [rdi + 6], dl; ret
0x0009a1a7 : movups xmm0, xmm[rsi]; movups xmm1, xmm[rsi + rdx - 0x10]; movups xmm[rdi], xmm0; movups xmm[rdi + rdx - 0x10], xmm1; ret
0x00139f66 : mov rbp, [rdi + 0x48]; mov rax, [rbp + 0x18]; lea r12, [rbp + 0x10]; mov [rbp + 0x10], 0; mov rdi, r12; call [rax + 0x28]
0x0000a8dc : push 0; mov rcx, rbx; mov r8, [rsp + 0x40]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; call r14
0x00139f67 : mov ebp, [rdi + 0x48]; mov rax, [rbp + 0x18]; lea r12, [rbp + 0x10]; mov [rbp + 0x10], 0; mov rdi, r12; call [rax + 0x28]
0x0012e8d0 : mov rsi, [rbx + 0x18]; mov [rbx + 0x38], 0; mov rdi, [rbx]; mov [rcx], eax; sub rdx, rsi; mov rbp, rdx; call [rbx + 0x10]
0x000997c1 : movq mm0, [rsi]; mov cl, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; xor ch, ch; mov [rdi + 0x11], ch; ret
0x0003b182 : add [rax], al; cdqe ; movzx esi, [rsi + rax]; lea rax, [rip + 0x15137f]; movsxd rax, [rax + rsi*4]; add rax, rdi; jmp rax
0x00099861 : movq mm0, [rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; xor ch, ch; mov [rdi + 0x16], ch; ret
0x00046f0a : movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0xc3b]; add rax, rdi; mov r8, rcx; mov [rbp - 0x4c0], 1; xor esi, esi; jmp rax
0x00099881 : movq mm0, [rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; xor ch, ch; mov [rdi + 0x17], ch; ret
0x00138aa4 : add eax, [rax]; add [rax], al; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x000633b4 : add [rax - 0x75], ecx; adc [rbp + 0x16], esi; sub rdx, [rcx + 0x10]; mov eax, [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret
0x0003b077 : add [rax - 0x68], cl; movzx eax, [rsi + rax]; lea rsi, [rip + 0x15170b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0003b076 : add [rax], al; cdqe ; movzx eax, [rsi + rax]; lea rsi, [rip + 0x15170b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0007b992 : mov [rbx + 0x40], r8; movsxd rsi, esi; mov [rbx + 0x30], eax; mov [rbx + 0x48], r9; mov [rbx], rsi; mov rdi, r9; call rcx
0x000476e7 : add [rax], al; mov [rbp - 0x508], r8; mov rdx, r14; mov rsi, r11; mov [rbp - 0x500], r11; mov rdi, r13; call [r15 + 0x38]
0x0009bb21 : mov eax, [rip + 0x32e061]; lea rdx, [rip + 0xc72e2]; test [rax + 0x79], 2; lea rax, [rip + 0x13667]; cmovne rax, rdx; ret
0x000997e1 : movq mm0, [rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; xor ch, ch; mov [rdi + 0x12], ch; ret
0x0003afac : add [rax], al; cdqe ; movzx eax, [rsi + rax]; lea rsi, [rip + 0x1517d5]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0005e2b3 : add [rax], al; add [rbx + 0xc083], cl; add [rbp + 0x48117ec0], al; mov eax, [rbx + 0x98]; mov rdi, rax; call [rax + 0x20]
0x0012d259 : lea rbx, ds:[rax + 0x23b0]; mov [rax + 0x23b0], 1; mov rax, [rax + 0x23b8]; xor esi, esi; mov rdi, rbx; call [rax + 0x28]
0x00138cb4 : add [rax], eax; add [rax], al; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x00137301 : xor ecx, ecx; push [rip + 0x63c57]; lea r8, [rip - 0xab40]; mov esi, 4; lea rdx, [rip + 0x3f04]; mov rdi, rbx; call [rax]
0x0009a34e : adc [rdi], eax; movups xmm[rdi + 0x10], xmm1; movups xmm[rdi + rdx - 0x10], xmm2; movups xmm[rdi + rdx - 0x20], xmm3; ret
0x00138d29 : sub [rax - 0x75], cl; or [r15], r9b; adc [rsp + 0x18], eax; mov [rsp + 0x30], 2; mov [rsp + 0x40], rdx; call [rax + 0x18]
0x0003b436 : add [rax], al; cdqe ; movzx eax, [rsi + rax]; lea rsi, [rip + 0x15134b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0009213e : add [rsi + 0xf], ah; adc al, [rcx]; movlpd xmm1, [rcx + 8]; movlpd [rdx], xmm0; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x00169c53 : sub eax, -1; tzcnt ecx, eax; movzx eax, [rdi + rcx + 0x60]; movzx edx, [rsi + rcx + 0x60]; sub eax, edx; vzeroupper ; ret
0x00099801 : movq mm0, [rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; xor ch, ch; mov [rdi + 0x13], ch; ret
0x0003b437 : add [rax - 0x68], cl; movzx eax, [rsi + rax]; lea rsi, [rip + 0x15134b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0003aa8e : add [rax], al; cdqe ; movzx eax, [rsi + rax]; lea rsi, [rip + 0x151cf3]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x00131d1e : xchg [rax + rax + 0x42890000], eax; push -0x777848f1; add [rax], al; add [rsi - 0x77], ah; insb [rdi], dx; mov eax, 1; ret
0x00003e80 : mov r9, [rsp + 0x30]; mov rdx, [rsp + 0x38]; mov rsi, [rsp + 0x28]; mov rdi, [rsp + 0x20]; mov rax, [rsp + 0x10]; call rax
0x00171714 : adc [rdi - 5], esp; vmovups zmm[rdi - 0x180], zmm13; vmovups zmm[rdi - 0x1c0], zmm14; vmovups zmm[rdi - 0x200], zmm15; ret
0x00152403 : add [rax + 1], cl; salc ; add rdi, rdx; lea r11, [rip + 0x49d9f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00003b94 : mov [rax + 0x4c], ecx; movsx ecx, [rdx + 0x1a]; movsx edx, [rdx + 0x1b]; mov [rax + 0x50], ecx; mov [rax + 0x54], edx; ret
0x00153652 : add [rax + 1], cl; salc ; add rdi, rdx; lea r11, [rip + 0x49050]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014da65 : add [rsi + 0x2e], ah; nop [rax + rax]; mov edx, [rsi - 6]; mov ecx, [rsi - 4]; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x001529a5 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rdx, [rsi - 9]; mov ecx, [rsi - 4]; mov [rdi - 9], rdx; mov [rdi - 4], ecx; ret
0x0009583e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x0012ca6a : add [rdi], ecx; test edi, edi; add [rax], al; add [rax - 0x75], cl; or [r14 + 0x20], r15b; mov rdi, rbp; call [rax + 0x30]
0x000b0265 : mov [rsp - 0x18], rsi; fild [rsp - 0x20]; fild [rsp - 0x18]; fsubp st(1); fstp [rsp - 0x10]; movsd xmm0, [rsp - 0x10]; ret
0x00096d6f : add bl, dh; movq mm0, [rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x0015dd9d : add [rax], al; add [rax - 0x77], cl; adc [rcx + 0x66c30851], ecx; nop [rax + rax]; mov [rcx], rdx; mov [rcx + 5], rdx; ret
0x00096dcf : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x0014dc65 : add [rsi + 0x2e], ah; nop [rax + rax]; mov edx, [rsi - 7]; mov ecx, [rsi - 4]; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x000d0451 : xchg [rip + 0x48000001], esi; lea esi, [rip + 0xbf693]; movzx r12d, r12b; movsxd rax, [rsi + r12*4]; add rax, rsi; jmp rax
0x00152924 : add [rax], al; nop cs:[rax + rax]; mov rdx, [rsi - 0xa]; mov ecx, [rsi - 4]; mov [rdi - 0xa], rdx; mov [rdi - 4], ecx; ret
0x0012b088 : mov eax, [rbx + 0x20]; add [rbx + 0x22a8], 1; mov rdi, rbp; mov edx, [rbx + 0x22c0]; mov rsi, [rsp + 8]; call [rax + 0x18]
0x0012e8d3 : sbb bh, al; cmp [r8], al; add [rax], al; add [rax - 0x75], cl; cmp ecx, [rcx - 0xdd6b7ff]; mov rbp, rdx; call [rbx + 0x10]
0x00154ef7 : add [rax + 1], cl; salc ; add rdi, rdx; lea r11, [rip + 0x477ab]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00047ce3 : mov r8, [rbp - 0x520]; movzx edx, [rax + rdx]; lea rax, [rip + 0x144e1b]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x0007b993 : mov [rbx + 0x40], eax; movsxd rsi, esi; mov [rbx + 0x30], eax; mov [rbx + 0x48], r9; mov [rbx], rsi; mov rdi, r9; call rcx
0x000042a5 : mov r9, [rsp + 0x28]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov rax, [rsp + 0x18]; call rax
0x00152674 : add [rax], al; nop cs:[rax + rax]; mov rdx, [rsi - 0xf]; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x00152794 : add [rax], al; nop cs:[rax + rax]; mov rdx, [rsi - 0xd]; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x0015dd8d : add [rax], al; add [rax - 0x77], cl; adc [rcx + 0x66c30751], ecx; nop [rax + rax]; mov [rcx], rdx; mov [rcx + 8], edx; ret
0x00152824 : add [rax], al; nop cs:[rax + rax]; mov rdx, [rsi - 0xc]; mov ecx, [rsi - 4]; mov [rdi - 0xc], rdx; mov [rdi - 4], ecx; ret
0x00171713 : adc [rdi - 5], rsp; vmovups zmm[rdi - 0x180], zmm13; vmovups zmm[rdi - 0x1c0], zmm14; vmovups zmm[rdi - 0x200], zmm15; ret
0x0009585e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x00097c4f : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret
0x0008736e : add [rax], al; movzx edx, [rsp - 8]; lea rax, [rdi + rax - 1]; mov [rdi], dx; movzx edx, [rsp - 6]; mov [rdi + 2], dl; ret
0x00152704 : add [rax], al; nop cs:[rax + rax]; mov rdx, [rsi - 0xe]; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x00097b8f : add bl, dh; movq mm0, [rsi]; mov cl, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret
0x00150b72 : add [rax + 1], cl; salc ; add rdi, rdx; lea r11, [rip + 0x4b630]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030e08 : add [rax], al; mov rcx, [rdi + 0x98]; mov r8, [rdi + 0x28]; mov r9, [rdi + 0x30]; mov rdi, [rdi + 0x68]; xor eax, eax; ret
0x0009581e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x0013ce3f : mov [rsp + 0x18], rax; xor eax, eax; movaps xmm[rsp + 0x80], xmm0; pxor xmm0, xmm0; movups xmm[rsp + 0x28], xmm0; call rdx
0x0009a63f : movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm0; movdqu xmm[rdi + rdx - 0x10], xmm0; movdqu xmm[rdi + rdx - 0x20], xmm0; ret
0x001371b5 : mov bh, bh; dec [rbp + rcx*4 + 5]; ror [rax + 0x7beffff], 0; add [rax], al; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x000b0266 : mov [rsp - 0x18], esi; fild [rsp - 0x20]; fild [rsp - 0x18]; fsubp st(1); fstp [rsp - 0x10]; movsd xmm0, [rsp - 0x10]; ret
0x00097bcf : add bl, dh; movq mm0, [rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret
0x000f0c30 : mov edx, [rbx + 0x38]; lea rcx, [rbx + 0x28]; mov rdi, [rbx + 0x18]; mov rsi, r14; mov edx, [rdx + rax]; call [rbx + 0x40]
0x000f0c2f : mov rdx, [rbx + 0x38]; lea rcx, [rbx + 0x28]; mov rdi, [rbx + 0x18]; mov rsi, r14; mov edx, [rdx + rax]; call [rbx + 0x40]
0x00139f8e : sub dil, r15b; inc [rbp - 0x17bf040]; add [rax], al; add [rax - 0x75], cl; sbb [r9 + rcx*4 - 0x19], r9b; call [rax + 0x20]
0x00031138 : add [rax], al; mov rcx, [rsi + 0x98]; mov r8, [rsi + 0x28]; mov r9, [rsi + 0x30]; mov rsi, [rsi + 0x70]; xor eax, eax; ret
0x0014d865 : add [rsi + 0x2e], ah; nop [rax + rax]; mov edx, [rsi - 5]; mov ecx, [rsi - 4]; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x0013ce40 : mov [rsp + 0x18], eax; xor eax, eax; movaps xmm[rsp + 0x80], xmm0; pxor xmm0, xmm0; movups xmm[rsp + 0x28], xmm0; call rdx
0x0000a9ff : push 0; lea rcx, [rbp + rbx*4]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; lea r8, [rsp + 0xb0]; xor r9d, r9d; call r15
0x00097baf : add bl, dh; movq mm0, [rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret
0x00096def : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x0009639b : add [rax], 0; add [rax], al; movdqu xmm0, xmm[rsi]; mov cl, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; ret
0x00097c2f : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret
0x0012b087 : mov rax, [rbx + 0x20]; add [rbx + 0x22a8], 1; mov rdi, rbp; mov edx, [rbx + 0x22c0]; mov rsi, [rsp + 8]; call [rax + 0x18]
0x00007219 : mov r9, [rsp + 0x30]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov rax, [rsp + 0x18]; call rax
0x001528a4 : add [rax], al; nop cs:[rax + rax]; mov rdx, [rsi - 0xb]; mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x00153c0f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x48a93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152703 : add [rax], r8b; nop cs:[rax + rax]; mov rdx, [rsi - 0xe]; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x0003b23b : movzx esi, [rsi + rax]; lea rax, [rip + 0x1513ca]; movsxd rax, [rax + rsi*4]; lea rsi, [rip - 0x841]; add rax, rsi; jmp rax
0x0015390f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x48d93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152923 : add [rax], r8b; nop cs:[rax + rax]; mov rdx, [rsi - 0xa]; mov ecx, [rsi - 4]; mov [rdi - 0xa], rdx; mov [rdi - 4], ecx; ret
0x00154b0f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x47b93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000ee0c9 : movdqu xmm0, xmm[rdi + 0xe8]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x0015378f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x48f13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015172f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x4aa73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0007dbbb : add [rax], 0; add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0xefc12]; lea rax, [rip + 0xefbab]; cmovne rax, rdx; ret
0x0009575c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x0012d260 : add bh, al; xor [rax + 0x1000023], 0; add [rax], al; mov rax, [rax + 0x23b8]; xor esi, esi; mov rdi, rbx; call [rax + 0x28]
0x00099821 : movq mm0, [rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; xor ch, ch; mov [rdi + 0x14], ch; ret
0x0015142f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x4ad73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152793 : add [rax], r8b; nop cs:[rax + rax]; mov rdx, [rsi - 0xd]; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x00154810 : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x47e92]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000ed827 : movdqu xmm0, xmm[rsi + 0x60]; movups xmm[rdi + 0x68], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0x78], xmm0; ret
0x0011081b : add [rax], 0; add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0x5cfa2]; lea rax, [rip + 0x5cf3b]; cmovne rax, rdx; ret
0x0015468f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x48013]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0010e957 : movq mm0, [rbp + 0x30]; mov [rbp - 0x80], edx; lea rdx, [rdi + 0x70]; mov edi, r12d; movups xmm[rbp - 0x78], xmm0; call rax
0x00045512 : mov [rax], ss; add [rax], al; mov r13, [rbp - 0x8f8]; mov rsi, r12; mov rdi, [rbp - 0x8d0]; mov rdx, r13; call [rbx + 0x38]
0x0015420f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x48493]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00047de2 : movsxd rax, [rdi + rax*4]; lea rdi, [rip - 0x29d]; add rax, rdi; mov r8, rcx; mov [rbp - 0x510], 1; xor r15d, r15d; jmp rax
0x00169c8e : add [rax], al; tzcnt ecx, eax; movzx eax, [rdi + rcx + 0x40]; movzx edx, [rsi + rcx + 0x40]; sub eax, edx; vzeroupper ; ret
0x0007da4b : add [rax], 0; add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0xefda2]; lea rax, [rip + 0xefd3b]; cmovne rax, rdx; ret
0x001521af : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x49ff3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003ab2a : inc [rbx - 0x67b7df18]; movzx edx, [rdx + rax]; lea rax, [rip + 0x151b55]; movsxd rax, [rax + rdx*4]; add rax, rsi; jmp rax
0x0015438f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x48313]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015202f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x4a173]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00103b5e : mov rdi, [rsp + 0x20]; mov rsi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x38; ret
0x0011074b : add [rax], 0; add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0x5d092]; lea rax, [rip + 0x5d02b]; cmovne rax, rdx; ret
0x00150caf : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x4b4f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009579f : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x000474e9 : lea rcx, [rip + 0x660]; movzx edx, [rdx + rax]; lea rax, [rip + 0x145595]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x000ed7d7 : movdqu xmm0, xmm[rdi + 0x68]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0x78]; movups xmm[rsi + 0x70], xmm0; ret
0x00169c6e : add [rax], al; tzcnt ecx, eax; movzx eax, [rdi + rcx + 0x20]; movzx edx, [rsi + rcx + 0x20]; sub eax, edx; vzeroupper ; ret
0x00052ae5 : lea ecx, [rip + 0x13a849]; mov r9, [rbp - 0x598]; mov r11d, [rbp - 0x5a0]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0015498f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x47d13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000042a6 : mov ecx, [rsp + 0x28]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov rax, [rsp + 0x18]; call rax
0x00052ae4 : lea rcx, [rip + 0x13a849]; mov r9, [rbp - 0x598]; mov r11d, [rbp - 0x5a0]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0015450f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x48193]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0013ca25 : sub [rax], al; mov [rdi], ecx; mov [rdi + 0x20], rsi; mov [rdi + 0x18], rsi; mov [rdi + 0x28], edx; mov [rdi + 8], rax; ret
0x0010e40a : mov [rbp - 0x78], eax; mov rax, [r12 + 0x80]; mov [rbp - 0x70], rax; mov eax, [r12 + 0x60]; mov [rbp - 0x80], eax; call rcx
0x0007debb : add [rax], 0; add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0xef932]; lea rax, [rip + 0xef8cb]; cmovne rax, rdx; ret
0x00154c8f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x47a13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151a2f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x4a773]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015408f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x48613]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001515af : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x4abf3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001534f6 : sbb [rax + 1], ecx; salc ; add rdi, rdx; lea r11, [rip + 0x491ac]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015112f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x4b073]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00044d69 : adc al, 0; movzx r8d, r8b; mov [rbp - 0x918], ecx; movsxd rax, [rax + rdx*4]; lea rdx, [rip - 0x2fe]; add rax, rdx; jmp rax
0x000ed509 : movups xmm[rdi + 0x10], xmm0; movups xmm[rdi + 0x20], xmm0; movups xmm[rdi + 0x30], xmm0; movups xmm[rdi + 0x40], xmm0; ret
0x00152673 : add [rax], r8b; nop cs:[rax + rax]; mov rdx, [rsi - 0xf]; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x001518af : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x4a8f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000721a : mov ecx, [rsp + 0x30]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov rax, [rsp + 0x18]; call rax
0x001512af : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x4aef3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150a00 : sbb [rax + 1], ecx; salc ; add rdi, rdx; lea r11, [rip + 0x4b7a2]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00103bbf : mov rdi, [rsp + 0x20]; mov rsi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x40; ret
0x000956fc : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x00152823 : add [rax], r8b; nop cs:[rax + rax]; mov rdx, [rsi - 0xc]; mov ecx, [rsi - 4]; mov [rdi - 0xc], rdx; mov [rdi - 4], ecx; ret
0x0001e5d7 : movups xmm[rdi + 0x40], xmm0; movups xmm[rdi + 0x50], xmm0; movups xmm[rdi + 0x60], xmm0; movups xmm[rdi + 0x70], xmm0; ret
0x00151baf : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x4a5f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000998a1 : movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; xor ch, ch; mov [rdi + 0x18], ch; ret
0x00150e2f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x4b373]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000f67fc : mov [rip + 0x2d664e], eax; mov eax, [rip + 0x2d661c]; mov [rip + 0x2d6646], eax; lea rax, [rip + 0x2d6613]; add rsp, 8; ret
0x00003e81 : mov ecx, [rsp + 0x30]; mov rdx, [rsp + 0x38]; mov rsi, [rsp + 0x28]; mov rdi, [rsp + 0x20]; mov rax, [rsp + 0x10]; call rax
0x00047ce4 : mov eax, [rbp - 0x520]; movzx edx, [rax + rdx]; lea rax, [rip + 0x144e1b]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x00153a8f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x48c13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00103bc0 : mov edi, [rsp + 0x20]; mov rsi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x40; ret
0x0009573c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x0007cb1d : add [rax], al; add bh, bh; rol [rbp + 0x480e74c0], 1; lea eax, [rip + 0x34fc03]; mov [rip + 0x34fbe4], rax; add rsp, 8; ret
0x00150faf : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x4b1f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009639c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; mov cl, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; ret
0x0011067b : add [rax], 0; add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0x5d162]; lea rax, [rip + 0x5d0fb]; cmovne rax, rdx; ret
0x0010e956 : movq mm0, [r13 + 0x30]; mov [rbp - 0x80], edx; lea rdx, [rdi + 0x70]; mov edi, r12d; movups xmm[rbp - 0x78], xmm0; call rax
0x00151d30 : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x4a472]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153f0f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x48793]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001528a3 : add [rax], r8b; nop cs:[rax + rax]; mov rdx, [rsi - 0xb]; mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x0012b41b : add [rdx + 0x19], ch; mov r8, [rsp + 0x28]; mov rcx, [rsp + 0x20]; mov rdx, [rsp + 0x18]; mov rsi, [rsp + 0x10]; call [rax]
0x000ee159 : movdqu xmm0, xmm[rsi + 0x60]; movups xmm[rdi + 0xe8], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x00103b5f : mov edi, [rsp + 0x20]; mov rsi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x38; ret
0x0010e409 : mov [rbp - 0x78], rax; mov rax, [r12 + 0x80]; mov [rbp - 0x70], rax; mov eax, [r12 + 0x60]; mov [rbp - 0x80], eax; call rcx
0x00153d8f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x48913]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000474ea : lea ecx, [rip + 0x660]; movzx edx, [rdx + rax]; lea rax, [rip + 0x145595]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x00151eaf : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x4a2f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006ca94 : pop r8; mov rdx, [rdi + 0x18]; mov rax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x000488f0 : dec [rdi]; xchg [rbx + 0x4c00000e], ch; mov [rbp - 0x4d8], eax; mov rdx, r14; mov rsi, r11; mov rdi, r13; call [r15 + 0x38]
0x0011074c : add [rax], al; add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0x5d092]; lea rax, [rip + 0x5d02b]; cmovne rax, rdx; ret
0x00098781 : add edi, ecx; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf5d13]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00131c88 : xchg [rbx + 1], ebx; add [rax], al; lea rcx, [rip + 0x6035c]; mov esi, esi; movsxd rax, [rcx + rsi*4]; add rax, rcx; jmp rax
0x00097d51 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret
0x00096575 : movq mm2, [rsi + 0x10]; mov cl, [rsi + 0x20]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; mov [rdi + 0x20], cl; ret
0x00096eb1 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x00169c6d : add [rax], r8b; tzcnt ecx, eax; movzx eax, [rdi + rcx + 0x20]; movzx edx, [rsi + rcx + 0x20]; sub eax, edx; vzeroupper ; ret
0x00096ed1 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x00096e57 : adc [rsi - 0x75], ah; sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x00099101 : add edi, ecx; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf5413]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000c4f3d : xchg [rsi + 2], esi; add [rax], al; lea rdx, [rip + 0xca427]; mov esi, esi; movsxd rax, [rdx + rsi*4]; add rax, rdx; jmp rax
0x0006ca95 : pop rax; mov rdx, [rdi + 0x18]; mov rax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x00097c6f : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret
0x00097d31 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret
0x00139d31 : add [rax], al; mov r14, [rsp + 8]; mov rax, [rbx + 0x18]; xor esi, esi; mov [rbx + 0x10], 1; mov rdi, r14; call [rax + 0x28]
0x00138f85 : add [rax], al; mov [rsp + 0xb0], 1; mov [rsp + 0xb8], 1; call [rax + 0x18]; mov rax, [r15 + 8]; mov rdi, r15; call [rax + 8]
0x00097bef : add bl, dh; movq mm0, [rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret
0x00096ad1 : add edi, ecx; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf77e3]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0009587e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0011081c : add [rax], al; add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0x5cfa2]; lea rax, [rip + 0x5cf3b]; cmovne rax, rdx; ret
0x00096d8f : add bl, dh; movq mm0, [rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x0007dbbc : add [rax], al; add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0xefc12]; lea rax, [rip + 0xefbab]; cmovne rax, rdx; ret
0x000954d0 : add rdi, rcx; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf8c0f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0007da4c : add [rax], al; add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0xefda2]; lea rax, [rip + 0xefd3b]; cmovne rax, rdx; ret
0x00096ad0 : add rdi, rcx; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf77e3]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00097d11 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret
0x00021e15 : lea rax, [rip + 0x3a465b]; lea rdx, [rip + 0x3a464d]; sub rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop ; call [rbx]
0x0006cac5 : pop rax; mov rdx, [rdi + 0x18]; mov [rdi + 0x10], rax; mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x0014d3bc : int 0x4c; mov [rdi - 0x23], ecx; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x001354f8 : xchg [rbx + 1], eax; add [rax], al; lea rcx, [rip + 0x5cf50]; mov esi, esi; movsxd rax, [rcx + rsi*4]; add rax, rcx; jmp rax
0x00096e0f : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x000c5bbc : xchg [rdi + 1], edx; add [rax], al; lea rdx, [rip + 0xc9bd8]; mov esi, esi; movsxd rax, [rdx + rsi*4]; add rax, rdx; jmp rax
0x00099100 : add rdi, rcx; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf5413]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0011067c : add [rax], al; add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0x5d162]; lea rax, [rip + 0x5d0fb]; cmovne rax, rdx; ret
0x00098780 : add rdi, rcx; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf5d13]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00021e16 : lea eax, [rip + 0x3a465b]; lea rdx, [rip + 0x3a464d]; sub rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop ; call [rbx]
0x00097cb7 : adc [rsi - 0x75], ah; sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret
0x00096ef1 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x0007debc : add [rax], al; add [rax], al; test [rcx + 0x85], 2; lea rdx, [rip + 0xef932]; lea rax, [rip + 0xef8cb]; cmovne rax, rdx; ret
0x000954d1 : add edi, ecx; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf8c0f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001515ae : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4abf3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015498e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x47d13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153172 : movq [rdi + 0x18], mm0; lddqu xmm0, xmm[rsi + 8]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 8], xmm0; movdqu xmm[rdi], xmm1; ret
0x000954ee : add [rax], al; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf8bf2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00096aee : add [rax], al; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf77c6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001539cb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48a96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152595 : add [rax], al; sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x499cc]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00131bd1 : mov eax, [rdi + 0x10]; movdqu xmm0, xmm[rax + 0x90]; movups xmm[rsi], xmm0; mov rax, [rax + 0xa0]; mov [rsi + 0x10], rax; ret
0x00151d2f : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4a472]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001520eb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x49e76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150cae : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4b4f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153252 : movq [rdi + 0x16], mm0; lddqu xmm0, xmm[rsi + 6]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 6], xmm0; movdqu xmm[rdi], xmm1; ret
0x00154c8e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x47a13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151a2e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4a773]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154ef6 : add [rax], al; add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x477ab]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154a4b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x47a16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015474b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x47d16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00131bd0 : mov rax, [rdi + 0x10]; movdqu xmm0, xmm[rax + 0x90]; movups xmm[rsi], xmm0; mov rax, [rax + 0xa0]; mov [rsi + 0x10], rax; ret
0x00150bf2 : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4b36f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004a52b : adc al, 0; movzx r12d, r12b; mov rcx, [rbp - 0x600]; mov r11, [rbp - 0x630]; movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x001517eb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4a776]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153651 : add [rax], al; add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x49050]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015480f : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x47e92]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150e2e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4b373]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138c3c : add [rax], eax; add [rax], al; mov rsi, rsp; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; mov [rsp + 0x20], 5; call [rax + 0x18]
0x001354a1 : mov eax, [rdi + 0x10]; movdqu xmm0, xmm[rax + 0x40]; movups xmm[rsi], xmm0; mov rax, [rax + 0x50]; mov [rsi + 0x10], rax; ret
0x0009722e : add [rax], al; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf7112]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001542cb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48196]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009577c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x0015142e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4ad73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001536d2 : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48d8f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154bcb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x47896]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154b0e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x47b93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151bae : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4a5f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001550aa : add [rax + 0x29], cl; salc ; sub rdi, rdx; lea r11, [rip + 0x473b8]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004748a : mov r8, rcx; mov r15d, 1; movzx edx, [rax + rdx]; lea rax, [rip + 0x145572]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x0015384b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48c16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015196b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4a5f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001512ae : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4aef3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015468e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48013]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153e4b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48616]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153482 : movq [rdi + 0x11], mm0; lddqu xmm0, xmm[rsi + 1]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 1], xmm0; movdqu xmm[rdi], xmm1; ret
0x0015106b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4aef6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015226b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x49cf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015438e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48313]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153ccb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48796]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153412 : movq [rdi + 0x12], mm0; lddqu xmm0, xmm[rsi + 2]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 2], xmm0; movdqu xmm[rdi], xmm1; ret
0x0016002c : add [rax], eax; add [rax + 0x48018b48], dl; mov [rdx], eax; mov rax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x001548cb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x47b96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00064d2f : mov [rsp + 0x30], rax; lea rax, [rsp + 0x20]; push rax; push rbx; mov rcx, [rsp + 0x20]; lea r8, [rsp + 0x38]; call [r13 + 8]
0x001354a0 : mov rax, [rdi + 0x10]; movdqu xmm0, xmm[rax + 0x40]; movups xmm[rsi], xmm0; mov rax, [rax + 0x50]; mov [rsi + 0x10], rax; ret
0x00150eeb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4b076]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015408e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48613]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015378e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48f13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153fcb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48496]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153c0e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48a93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015420e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48493]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153a8e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48c13]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00137f25 : mov [rsp + 0x40], rax; mov rax, [rbx + 8]; movaps xmm[rsp + 0x30], xmm0; push r14; push r13; lea r9, [rsp + 0x3a]; call [rax]
0x00152596 : add [rax + 0x29], cl; salc ; sub rdi, rdx; lea r11, [rip + 0x499cc]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153f0e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48793]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015444b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48016]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001533a2 : movq [rdi + 0x13], mm0; lddqu xmm0, xmm[rsi + 3]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 3], xmm0; movdqu xmm[rdi], xmm1; ret
0x00151eae : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4a2f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151f6b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x49ff6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0016ecfd : add [rax + 0x48], esi; add esi, edx; add rdi, rdx; lea r11, [rip + 0x2cc63]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0009911e : add [rax], al; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf53f6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00064d30 : mov [rsp + 0x30], eax; lea rax, [rsp + 0x20]; push rax; push rbx; mov rcx, [rsp + 0x20]; lea r8, [rsp + 0x38]; call [r13 + 8]
0x00153b4b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48916]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001545cb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x47e96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00063e81 : mov [rax + 0x60], rcx; push rdi; mov rdi, rbp; push [rax + 0x38]; mov rcx, [rbx + 8]; mov r9, [rax + 0x10]; call [rbp + 0x18]
0x00150d6b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4b1f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001511eb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4ad76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009879e : add [rax], al; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf5cf6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001521ae : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x49ff3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015450e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48193]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00063e82 : mov [rax + 0x60], ecx; push rdi; mov rdi, rbp; push [rax + 0x38]; mov rcx, [rbx + 8]; mov r9, [rax + 0x10]; call [rbp + 0x18]
0x0010320d : add [rcx + 0x1f0fc302], ecx; add [rax], 0; add [rax], al; mov rax, [rip + 0x2ca049]; mov rax, [rax + 0x18]; add [rax], 1; ret
0x00151aeb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4a476]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151c6b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4a2f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153d8e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48913]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015136b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4abf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154d4b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x47716]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009a3e1 : sub [rdi], ecx; adc [rcx - 0x10], esi; movups xmm[rcx - 0x20], xmm7; movups xmm[rcx - 0x30], xmm8; movups xmm[r11], xmm4; ret
0x00137f26 : mov [rsp + 0x40], eax; mov rax, [rbx + 8]; movaps xmm[rsp + 0x30], xmm0; push r14; push r13; lea r9, [rsp + 0x3a]; call [rax]
0x00153102 : movq [rdi + 0x19], mm0; lddqu xmm0, xmm[rsi + 9]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 9], xmm0; movdqu xmm[rdi], xmm1; ret
0x001550a9 : add [rax], al; sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x473b8]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00134b70 : mov rax, [rdi + 0x10]; movdqu xmm0, xmm[rax + 0x30]; movups xmm[rsi], xmm0; mov rax, [rax + 0x40]; mov [rsi + 0x10], rax; ret
0x0015390e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x48d93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150b71 : add [rax], al; add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x4b630]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001518ae : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4a8f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001514eb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4aa76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00150fae : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4b1f3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015172e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4aa73]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00134b71 : mov eax, [rdi + 0x10]; movdqu xmm0, xmm[rax + 0x30]; movups xmm[rsi], xmm0; mov rax, [rax + 0x40]; mov [rsi + 0x10], rax; ret
0x0015414b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x48316]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001532c2 : movq [rdi + 0x15], mm0; lddqu xmm0, xmm[rsi + 5]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 5], xmm0; movdqu xmm[rdi], xmm1; ret
0x0015166b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4a8f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015202e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4a173]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001531e2 : movq [rdi + 0x17], mm0; lddqu xmm0, xmm[rsi + 7]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 7], xmm0; movdqu xmm[rdi], xmm1; ret
0x00151deb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4a176]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153332 : movq [rdi + 0x14], mm0; lddqu xmm0, xmm[rsi + 4]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 4], xmm0; movdqu xmm[rdi], xmm1; ret
0x00152402 : add [rax], al; add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x49d9f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015112e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4b073]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0010e585 : mov [rbp - 0x68], edx; mov rdx, r13; movdqu xmm0, xmm[r15 - 0x18]; mov [rbp - 0x80], 0; movups xmm[rbp - 0x78], xmm0; call rax
0x0009911d : add [rax], r8b; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf53f6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x001520ec : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x49e76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002350d : movzx eax, [rdi]; mov [rsi + 0x14], 5; mov [rsi], ax; movabs rax, -0x21131992fffefff5; mov [rsi + 0xc], rax; xor eax, eax; ret
0x001548cc : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x47b96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009879d : add [rax], r8b; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf5cf6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0015444c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x48016]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154bcc : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x47896]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000f5a8 : movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax + 0x40]; movzx eax, [rax + rdi*2 + 0x100]; and eax, esi; ret
0x00096f11 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x00153fcc : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x48496]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152925 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rdx, [rsi - 0xa]; mov ecx, [rsi - 4]; mov [rdi - 0xa], rdx; mov [rdi - 4], ecx; ret
0x0005ba50 : xchg [rbx + 4], ebx; add [rax], al; lea rsi, [rip + 0x131f50]; movzx eax, al; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x00150eec : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x4b076]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153e4c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x48616]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00154d4c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x47716]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015196c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x4a5f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153ccc : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x48796]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004a27c : xchg [rdi + 9], edx; add [rax], al; lea rdx, [rip + 0x1429e4]; movzx eax, al; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00152705 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rdx, [rsi - 0xe]; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x0015106c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x4aef6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152675 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rdx, [rsi - 0xf]; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x00151c6c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x4a2f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001458a5 : mov edi, [rsp + 0x18]; mov [rsp + 0x50], edx; mov rdx, [rsp + 0x28]; mov r9d, [rdx]; mov rdx, r14; add r9, [rsp + 8]; call rax
0x00150d6c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x4b1f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0016ccb0 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0xfe33]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x001458a4 : mov rdi, [rsp + 0x18]; mov [rsp + 0x50], edx; mov rdx, [rsp + 0x28]; mov r9d, [rdx]; mov rdx, r14; add r9, [rsp + 8]; call rax
0x001539cc : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x48a96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015166c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x4a8f6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138b0e : add [rax], al; mov [rsp + 0x30], 4; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x00152825 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rdx, [rsi - 0xc]; mov ecx, [rsi - 4]; mov [rdi - 0xc], rdx; mov [rdi - 4], ecx; ret
0x001545cc : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x47e96]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00096aed : add [rax], r8b; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf77c6]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00145c95 : mov edi, [rsp + 0x18]; mov [rsp + 0x30], edx; mov rdx, [rsp + 0x28]; mov r9d, [rdx]; mov rdx, r14; add r9, [rsp + 8]; call rax
0x00022fe2 : lea eax, [rdx + rax*4]; mov [rsi], rax; lea rax, [r10 + r8*4]; mov [rsi + 0x10], r10; mov [rsi + 0x28], rax; xor eax, eax; ret
0x001511ec : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x4ad76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003c019 : mov [rbp - 0x500], 1; cdqe ; movzx eax, [rsi + rax]; movsxd rax, [rdi + rax*4]; lea rdi, [rip - 0x1624]; add rax, rdi; jmp rax
0x001514ec : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x4aa76]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000922d2 : mov [rdx + 0xe], ah; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx + 6]; movlpd [rdx + 6], xmm1; mov rax, rdi; ret
0x00138b7e : add [rax], al; mov [rsp + 0x30], 5; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x00151aec : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x4a476]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00153b4c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x48916]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000922b2 : mov [rdx + 0xd], ah; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx + 5]; movlpd [rdx + 5], xmm1; mov rax, rdi; ret
0x00145c94 : mov rdi, [rsp + 0x18]; mov [rsp + 0x30], edx; mov rdx, [rsp + 0x28]; mov r9d, [rdx]; mov rdx, r14; add r9, [rsp + 8]; call rax
0x000954ed : add [rax], r8b; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf8bf2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0015414c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x48316]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00135b87 : add [rbx + 0x8424ac], al; add [rax], al; add [rbx + rdx + 0x49], esi; mov edi, [rsp]; mov rax, [rdi + 0x38]; call [rax + 0x18]
0x00022fe1 : lea rax, [r10 + rax*4]; mov [rsi], rax; lea rax, [r10 + r8*4]; mov [rsi + 0x10], r10; mov [rsi + 0x28], rax; xor eax, eax; ret
0x0015474c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x47d16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0010e584 : mov [rbp - 0x68], rdx; mov rdx, r13; movdqu xmm0, xmm[r15 - 0x18]; mov [rbp - 0x80], 0; movups xmm[rbp - 0x78], xmm0; call rax
0x0015384c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x48c16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138cae : add [rax], al; mov [rsp + 0x30], 1; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x00154a4c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x47a16]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015226c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x49cf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000922f2 : mov [rdx + 0xf], ah; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx + 7]; movlpd [rdx + 7], xmm1; mov rax, rdi; ret
0x0008739e : add [rax], al; mov edx, [rsp - 0x10]; lea rax, [rdi + rax - 1]; mov [rdi], edx; movzx edx, [rsp - 0xc]; mov [rdi + 4], dl; ret
0x001536d3 : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x48d8f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012c92d : add [rax - 0x77], cl; adc bl, r8b; nop [rax + rax]; movdqu xmm0, xmm[rdi + 0x20]; mov [rsi], 6; movups xmm[rsi + 8], xmm0; ret
0x001542cc : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x48196]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000eed6 : adc bl, al; nop [rax + rax]; mov rax, [rip + 0x3bac11]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x00152795 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rdx, [rsi - 0xd]; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x00097d71 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret
0x00151f6c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x49ff6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001517ec : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x4a776]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138a9e : add [rax], al; mov [rsp + 0x30], 3; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x0004748b : mov eax, ecx; mov r15d, 1; movzx edx, [rax + rdx]; lea rax, [rip + 0x145572]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x0015136c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x4abf6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00043a02 : xchg eax, edi; add [rax], al; add [rax - 0x73], cl; add [rbx - 0x76b7fe3d], rax; sub [r8 + 0x468b4102], r9b; add al, 0x39; ret
0x00150bf3 : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x4b36f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00151dec : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x4a176]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001528a5 : add [rsi + 0x2e], ah; nop [rax + rax]; mov rdx, [rsi - 0xb]; mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x00138b13 : xor [rax + rax], al; add [rax], al; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x0014c6a8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bad7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x50109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00166db0 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0x15d33]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000998e8 : mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; xor ch, ch; mov [rdi + 0x1a], ch; ret
0x0014e4a8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d8f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000eedc : add [rax], al; add [rax], al; mov rax, [rip + 0x3bac11]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x0014c408 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c2b7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000ee0ef : add [rbx + 0x10c87], cl; add [rcx - 0x3c3fcefa], cl; nop [rax + rax]; mov eax, [rdi + 0x108]; mov [rsi], eax; xor eax, eax; ret
0x0014c7f7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f3e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004786b : add [rax], eax; add [rax], al; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x2d2]; add rax, rdi; jmp rax
0x00136904 : mov eax, [rbx]; mov rdi, [rax]; mov rax, [rdi + 0x38]; call [rax + 0x20]; mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x20]
0x0014ef28 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ce79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00168d80 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0x13d63]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0014bad8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x50109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f1c7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cbd9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000997e0 : movdqu xmm0, xmm[rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; xor ch, ch; mov [rdi + 0x12], ch; ret
0x00047921 : add [rax], eax; add [rax], al; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x21c]; add rax, rdi; jmp rax
0x0014ef27 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ce79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0008fc10 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0xeced3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0014eb37 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d269]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c7f8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f3e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f5b7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c7e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0008d5c0 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0xef523]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0014f468 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c939]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c558 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00063aa1 : mov edx, [rdi + 0xa0]; mov rax, [rdx + 0x20]; cmp [rdx + 8], rax; cmovae rax, [rdx + 8]; sub rax, [rdx + 0x10]; sar rax, 2; ret
0x0014edd7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cfc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00063aa0 : mov rdx, [rdi + 0xa0]; mov rax, [rdx + 0x20]; cmp [rdx + 8], rax; cmovae rax, [rdx + 8]; sub rax, [rdx + 0x10]; sar rax, 2; ret
0x0014e747 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d659]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cbe7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4eff9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099847 : mov dl, [rsi + 0x14]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; xor ch, ch; mov [rdi + 0x15], ch; ret
0x00068fa6 : add [rax - 0x75], cl; or [r8 + 0x3b], r9b; adc [r11 + 0xf], r14b; lea rdx, [rax + 1]; mov [rdi + 8], rdx; movzx eax, [rax]; ret
0x0014f707 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c699]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f077 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cd29]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bec7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f1c8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cbd9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c6a7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00092312 : mov [rdx + 0x10], ah; movlpd xmm0, [rcx]; movlpd xmm1, [rcx + 8]; movlpd [rdx], xmm0; movlpd [rdx + 8], xmm1; mov rax, rdi; ret
0x0014e898 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d509]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c407 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c167 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f5b8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c7e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f467 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c939]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e4a7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d8f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00136903 : mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi + 0x38]; call [rax + 0x20]; mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x20]
0x0014e5f7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d7a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014eb38 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d269]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ec87 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d119]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d089 : mov ecx, [rsi - 9]; mov dl, [rsi - 1]; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x00021e14 : lea rax, es:[rip + 0x3a465b]; lea rdx, [rip + 0x3a464d]; sub rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop ; call [rbx]
0x0014bd77 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e9e8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d3b9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e748 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d659]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d088 : mov rcx, [rsi - 9]; mov dl, [rsi - 1]; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x00158100 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0x249e3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0000eeba : add [rax], al; mov rdx, [rip + 0x3bae35]; mov [rdx], rcx; mov rdx, [rax + 0xc0]; mov rax, [rip + 0x3bac3c]; mov [rax], rdx; ret
0x0014c168 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014edd8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cfc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00068173 : add [rax], al; add [rbp + 0x48167ec0], al; mov edx, [rdi + 0xa0]; mov rax, [rdx + 0x20]; sub rax, [rdx + 0x18]; sar rax, 2; ret
0x0014c017 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bec8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00099860 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; xor ch, ch; mov [rdi + 0x16], ch; ret
0x0014bd78 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ca97 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f149]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bc28 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000435e9 : sub [rdx + 0x48000003], -0x73; push rax; add [rax - 0x77], ecx; push rbp; sub dh, al; add [rip - 0x11d17], ch; jmp [rsi - 0x70]
0x000479d3 : add [rax], eax; add [rax], al; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x16a]; add rax, rdi; jmp rax
0x0014c018 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cbe8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4eff9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e897 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d509]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000997c0 : movdqu xmm0, xmm[rsi]; mov cl, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cl; xor ch, ch; mov [rdi + 0x11], ch; ret
0x00099880 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; xor ch, ch; mov [rdi + 0x17], ch; ret
0x0014e9e7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d3b9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bc27 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c948 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f299]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000998c8 : mov cl, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; xor ch, ch; mov [rdi + 0x19], ch; ret
0x0014f078 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cd29]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f317 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ca89]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ca98 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f149]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c2b8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f708 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c699]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015a660 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0x22483]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0014cd37 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4eea9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ec88 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d119]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000478c3 : add [rax], eax; add [rax], al; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x27a]; add rax, rdi; jmp rax
0x0014cd38 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4eea9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c947 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f299]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000112d : xchg [rcx + rax], edx; add [rax], al; lea rdx, [rip + 0x17a497]; mov eax, eax; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0012b06e : push rax; sbb [rbp + 0x483e74c0], al; mov eax, [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov [rbx + 0x18], 0; call [rax + 0x28]
0x00068063 : add [rax], al; add [rbp + 0x48167ec0], al; mov edx, [rdi + 0xa0]; mov rax, [rdx + 0x38]; sub rax, [rdx + 0x30]; sar rax, 2; ret
0x00099800 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; xor ch, ch; mov [rdi + 0x13], ch; ret
0x0014f318 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ca89]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0016b300 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0x117e3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0014e5f8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d7a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c557 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00064df8 : add [rbx + 0x2274fff8], al; mov rax, [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x130]; mov rax, [rax + 0x20]; jmp rax
0x00133cdb : mov eax, [rsp]; xor esi, esi; mov rdi, r12; mov [rsp + 0x40], 0; mov [rsp + 0x10], rax; mov rax, [rsp + 0x48]; call [rax + 0x28]
0x00096d4e : adc bl, al; movdqu xmm0, xmm[rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x0012bcc3 : add [rbp + 0x48d374c0], al; mov eax, [rsp]; mov rsi, [rbx + 0x10]; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call [rbx + 0x18]
0x0000f656 : movsd [rdi], [rsi]; cmp eax, [rax]; lea rdx, [rdi + 0x200]; mov fs:[rcx], rdx; mov rdx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x000695ed : add [rax], al; lea rcx, [rip + 0x35d91a]; lea rdi, [rip + 0x35d3d3]; mov [rbx + 0xd8], rcx; mov [rdx + 0x130], rdi; pop rbx; ret
0x0009581d : add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x0003afa4 : mov [rbp - 0x510], 1; cdqe ; movzx eax, [rsi + rax]; lea rsi, [rip + 0x1517d5]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0010e889 : mov edx, [rbp - 0x30]; movdqu xmm0, xmm[r13 - 0x18]; mov [rbp - 0x80], edx; mov rdx, rbx; movups xmm[rbp - 0x78], xmm0; call rax
0x0009583d : add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x00148b01 : xchg edi, esi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x4541f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00134565 : sub [rax], al; add [rax], al; mov [rsp + 0x438], rax; xor eax, eax; mov rax, [rdi + 8]; lea rsi, [rsp + 0x10]; call [rax + 0x10]
0x0009a34d : movups xmm[rdi], xmm0; movups xmm[rdi + 0x10], xmm1; movups xmm[rdi + rdx - 0x10], xmm2; movups xmm[rdi + rdx - 0x20], xmm3; ret
0x00148b00 : xchg rdi, rsi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x4541f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x001560d1 : xchg edi, esi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x37f4f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00158240 : xchg rdi, rsi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x35e5f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00138f72 : mov rax, [r15 + 8]; mov rsi, r13; mov rdi, r15; mov [rsp + 0xa8], 1; mov [rsp + 0xb0], 1; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x0003bcfa : mov rdx, r9; mov [rbp - 0x4c8], r9; mov [rbp - 0x4e8], ecx; mov [rbp - 0x4e0], r11; mov rsi, r8; mov rdi, r14; call [r15 + 0x38]
0x0003b06e : mov [rbp - 0x508], 1; cdqe ; movzx eax, [rsi + rax]; lea rsi, [rip + 0x15170b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x00095754 : add [rax], al; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x00064e9c : mov [rax + 0x60], rcx; push rdi; mov rdi, rbp; push [rax + 0x38]; mov rcx, [rbx + 0x10]; lea r8, [rsp + 0x10]; call [rbp + 0x18]
0x00068f6f : add [rax - 0x75], cl; or [r8 + 0x3b], r9b; adc [r11 + 0x16], r14b; lea rdx, [rax + 1]; mov [rdi + 8], rdx; movzx eax, [rax]; ret
0x0010e2b1 : mov edx, [r13 - 0x30]; movdqu xmm0, xmm[r13 - 0x18]; mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x00149d80 : xchg rdi, rsi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x4421f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00158241 : xchg edi, esi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x35e5f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00048c31 : add [rax], eax; add [rax], al; movzx eax, [rcx + rax]; lea rcx, [rip - 0x10f0]; movsxd rax, [rdi + rax*4]; add rax, rcx; jmp rax
0x0003aa86 : mov [rbp - 0x4f8], 1; cdqe ; movzx eax, [rsi + rax]; lea rsi, [rip + 0x151cf3]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x000b8cb3 : xchg [rax + 0x16], esi; add [rax], al; lea rsi, [rip + 0xd60ed]; movzx eax, cl; movsxd rax, [rsi + rax*4]; add rax, rsi; jmp rax
0x0009a1a6 : add [rdi], cl; adc [rsi], al; movups xmm1, xmm[rsi + rdx - 0x10]; movups xmm[rdi], xmm0; movups xmm[rdi + rdx - 0x10], xmm1; ret
0x00149d81 : xchg edi, esi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x4421f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0010e2b2 : mov edx, [rbp - 0x30]; movdqu xmm0, xmm[r13 - 0x18]; mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x00133cda : mov rax, [rsp]; xor esi, esi; mov rdi, r12; mov [rsp + 0x40], 0; mov [rsp + 0x10], rax; mov rax, [rsp + 0x48]; call [rax + 0x28]
0x00138f73 : mov eax, [rdi + 8]; mov rsi, r13; mov rdi, r15; mov [rsp + 0xa8], 1; mov [rsp + 0xb0], 1; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x000956f4 : add [rax], al; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x0003b42e : mov [rbp - 0x520], 1; cdqe ; movzx eax, [rsi + rax]; lea rsi, [rip + 0x15134b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0010dff7 : mov edx, [rbx + 0x18]; movdqu xmm0, xmm[rbx + 0x30]; mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x0009585d : add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x0012c94d : add [rax], al; add [rbx + 0x6b7705f8], al; lea r8, [rip + 0x645f4]; mov ecx, eax; movsxd rdx, [r8 + rcx*4]; add rdx, r8; jmp rdx
0x001560d0 : xchg rdi, rsi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x37f4f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000998e9 : mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; xor ch, ch; mov [rdi + 0x1a], ch; ret
0x000448ba : add [rax], al; mov rsi, [r14 + 0x18]; mov rdx, [r14 + 0x20]; mov rdi, [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call [rbx + 0x38]
0x00064e9d : mov [rax + 0x60], ecx; push rdi; mov rdi, rbp; push [rax + 0x38]; mov rcx, [rbx + 0x10]; lea r8, [rsp + 0x10]; call [rbp + 0x18]
0x0010e888 : mov edx, [r13 - 0x30]; movdqu xmm0, xmm[r13 - 0x18]; mov [rbp - 0x80], edx; mov rdx, rbx; movups xmm[rbp - 0x78], xmm0; call rax
0x0009a63e : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm0; movdqu xmm[rdi + rdx - 0x10], xmm0; movdqu xmm[rdi + rdx - 0x20], xmm0; ret
0x00152e62 : movq [rdi + 0x1f], mm0; lddqu xmm0, xmm[rsi + 0xf]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xf], xmm0; movdqu xmm[rdi], xmm1; ret
0x00088ee0 : xchg rdi, rsi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x10507f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000ee158 : add bl, dh; movq mm0, [rsi + 0x60]; movups xmm[rdi + 0xe8], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x00099820 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; xor ch, ch; mov [rdi + 0x14], ch; ret
0x000877d0 : xchg rdi, rsi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x10670f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00088ee1 : xchg edi, esi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x10507f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0014d0a1 : mov ebx, [rsi - 0x11]; mov rcx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00152ed2 : movq [rdi + 0x1e], mm0; lddqu xmm0, xmm[rsi + 0xe]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xe], xmm0; movdqu xmm[rdi], xmm1; ret
0x000f69f7 : pop rbp; mov [rip + 0x2d6452], eax; mov eax, [rip + 0x2d6420]; pop r12; mov [rip + 0x2d6448], eax; lea rax, [rip + 0x2d6415]; ret
0x0013703e : add [rdx + 0x1e], ch; lea rdx, [rip - 0x7628]; lea r8, [rip - 0x75cf]; mov esi, 6; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x000956f3 : add [rax], r8b; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x0014d0a0 : mov r11, [rsi - 0x11]; mov rcx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x000f6bd7 : pop rbp; mov [rip + 0x2d6272], eax; mov eax, [rip + 0x2d6240]; pop r12; mov [rip + 0x2d6268], eax; lea rax, [rip + 0x2d6235]; ret
0x0005c2ba : xor [rbx - 0x78f0c808], al; cmp al, 3; add [rax], al; lea rdx, [rip + 0x1319e1]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x0012d845 : movd [rsp + 8], mm0; mov [rsp + 8], rax; mov rax, [rdi + 8]; movhps xmm0, [rsp + 8]; movaps xmm[rsp + 0x10], xmm0; call [rax + 8]
0x000997a2 : movnti [rsi - 0x70], esp; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; xor ch, ch; mov [rdi + 0x10], ch; ret
0x00152fb2 : movq [rdi + 0x1c], mm0; lddqu xmm0, xmm[rsi + 0xc]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xc], xmm0; movdqu xmm[rdi], xmm1; ret
0x0008d700 : xchg rdi, rsi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x10095f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0003bcfb : mov edx, ecx; mov [rbp - 0x4c8], r9; mov [rbp - 0x4e8], ecx; mov [rbp - 0x4e0], r11; mov rsi, r8; mov rdi, r14; call [r15 + 0x38]
0x00152f42 : movq [rdi + 0x1d], mm0; lddqu xmm0, xmm[rsi + 0xd]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xd], xmm0; movdqu xmm[rdi], xmm1; ret
0x0008d701 : xchg edi, esi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x10095f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000877d1 : xchg edi, esi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x10670f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0005bb05 : xor [rbx - 0x78f0c808], al; mov cl, 3; add [rax], al; lea rcx, [rip + 0x131f52]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x00099928 : mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; xor ch, ch; mov [rdi + 0x1c], ch; ret
0x0008b4a0 : xchg rdi, rsi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x102b3f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00141d0b : sub [rax], al; call [rax]; mov rax, [rip + 0x28956a]; lea rdx, [rsp + 8]; lea rsi, [rsp + 0x190]; mov rdi, rbp; call [rax + 0x18]
0x0000a9fe : add [rdx], ch; lea rcx, [rbp + rbx*4]; mov rsi, [rsp + 0x38]; mov rdi, [rsp + 0x30]; lea r8, [rsp + 0xb0]; xor r9d, r9d; call r15
0x0005d739 : add [rax - 0x77], cl; add [r11 + 0xc083], r9b; add [rbp + 0x48247ec0], al; mov eax, [rbx + 0x98]; mov rdi, rax; call [rax + 0x20]
0x0010e955 : movdqu xmm0, xmm[r13 + 0x30]; mov [rbp - 0x80], edx; lea rdx, [rdi + 0x70]; mov edi, r12d; movups xmm[rbp - 0x78], xmm0; call rax
0x000998a0 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; xor ch, ch; mov [rdi + 0x18], ch; ret
0x0014d060 : mov dl, [rsi - 1]; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x0012c5d4 : movzx eax, [rsp + 0xa0]; mov rsi, [rsp + 0x68]; ror ax, 8; mov rdi, [rsp]; mov [rsp + 0x1a2], ax; mov rax, [rsp + 0x28]; call rax
0x00136ef1 : add [rdx + 0x1e], ch; lea rdx, [rip - 0x751b]; lea r8, [rip - 0x7482]; mov esi, 3; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x00153092 : movq [rdi + 0x1a], mm0; lddqu xmm0, xmm[rsi + 0xa]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xa], xmm0; movdqu xmm[rdi], xmm1; ret
0x001371ae : add [rdx + 0x1e], ch; lea rdx, [rip - 0x7798]; lea r8, [rip - 0x773f]; mov esi, 7; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x00153022 : movq [rdi + 0x1b], mm0; lddqu xmm0, xmm[rsi + 0xb]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xb], xmm0; movdqu xmm[rdi], xmm1; ret
0x00173997 : adc [rdi], cl; test [rcx + rax - 0x67d0000], al; adc [rdi], ecx; test [rbx], bl; add al, [rax]; add [rbx - 0x7bf0ed07], al; ret 2
0x00136dc1 : add [rdx + 0x1e], ch; lea rdx, [rip - 0x73eb]; lea r8, [rip - 0x7352]; mov esi, 2; mov rdi, rax; lea r9, [rsp + 0x14]; call [r10]
0x00099908 : mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; xor ch, ch; mov [rdi + 0x1b], ch; ret
0x0008b4a1 : xchg edi, esi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x102b3f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0012b8de : push [rip + 0x6f684]; push [rip + 0x6f676]; lea r9, [rsp + 0x2c]; call [rax]; mov rax, [r13 + 8]; mov rdi, r13; call [rax + 0x20]
0x00095753 : add [rax], r8b; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x00031133 : mov rdx, [rsi + 0x88]; mov rcx, [rsi + 0x98]; mov r8, [rsi + 0x28]; mov r9, [rsi + 0x30]; mov rsi, [rsi + 0x70]; xor eax, eax; ret
0x0003cc0f : mov ebx, [rbp - 0x530]; cdqe ; movzx edx, [rdx + rax]; lea rax, [rip + 0x14faee]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x00139d32 : add [rbx + rcx*4 + 0x74], cl; and al, 8; mov rax, [rbx + 0x18]; xor esi, esi; mov [rbx + 0x10], 1; mov rdi, r14; call [rax + 0x28]
0x0003b3d6 : mov ebx, [rbp - 0x530]; cdqe ; movzx edx, [rdx + rax]; lea rax, [rip + 0x151327]; movsxd rax, [rax + rdx*4]; add rax, rsi; jmp rax
0x00141d30 : mov eax, [rip + 0x287e62]; mov ebx, fs:[rax]; mov eax, 2; cmp ebx, 3; cmove ebx, eax; mov rax, [rip + 0x289535]; call [rax + 0x28]
0x0007b991 : add [rcx + rcx*4 + 0x43], ecx; movsxd rsi, esi; mov [rbx + 0x30], eax; mov [rbx + 0x48], r9; mov [rbx], rsi; mov rdi, r9; call rcx
0x00095774 : add [rax], al; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x000439fe : push rbp; xor [rdi], cl; adc [rdi + 0x48000000], -0x73; add [rbx - 0x76b7fe3d], rax; sub [r8 + 0x468b4102], r9b; add al, 0x39; ret
0x0009587d : add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0012d844 : movq xmm0, [rsp + 8]; mov [rsp + 8], rax; mov rax, [rdi + 8]; movhps xmm0, [rsp + 8]; movaps xmm[rsp + 0x10], xmm0; call [rax + 8]
0x00097d30 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret
0x0012b6f4 : movhps xmm0, [rsp + 8]; movaps xmm[rsp + 0x30], xmm0; push [rip + 0x6f864]; push [rip + 0x6f856]; lea r9, [rsp + 0x2c]; call [rax]
0x000473b0 : xchg [rcx + 0x20], ah; add [rax], al; mov rdi, r13; mov [rbp - 0x4c0], r8; mov rdx, [rbp - 0x4d8]; mov rsi, r15; call [r14 + 0x38]
0x000042a3 : push 0; mov r9, [rsp + 0x28]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov rax, [rsp + 0x18]; call rax
0x0003b1d6 : lea esi, [rip - 0x7cc]; movsxd rax, [rdi + rax*4]; add rax, rsi; mov r11, rdx; mov [rbp - 0x518], 0; mov [rbp - 0x528], 1; jmp rax
0x0010ea29 : push rbp; sbb bl, dh; movq mm0, [r13 + 0x30]; mov [rbp - 0x80], edx; lea rdx, [rcx + 0x70]; movups xmm[rbp - 0x78], xmm0; call rax
0x00068fa5 : add ss:[rax - 0x75], cl; or [r8 + 0x3b], r9b; adc [r11 + 0xf], r14b; lea rdx, [rax + 1]; mov [rdi + 8], rdx; movzx eax, [rax]; ret
0x00031134 : mov edx, [rsi + 0x88]; mov rcx, [rsi + 0x98]; mov r8, [rsi + 0x28]; mov r9, [rsi + 0x30]; mov rsi, [rsi + 0x70]; xor eax, eax; ret
0x00030e03 : mov rdx, [rdi + 0x88]; mov rcx, [rdi + 0x98]; mov r8, [rdi + 0x28]; mov r9, [rdi + 0x30]; mov rdi, [rdi + 0x68]; xor eax, eax; ret
0x00096574 : movdqu xmm2, xmm[rsi + 0x10]; mov cl, [rsi + 0x20]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; mov [rdi + 0x20], cl; ret
0x00138f7c : mov [rsp + 0xa8], 1; mov [rsp + 0xb0], 1; mov [rsp + 0xb8], 1; call [rax + 0x18]; mov rax, [r15 + 8]; mov rdi, r15; call [rax + 8]
0x00096eb0 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x00131ed8 : sbb [rbp + 0xfed89c0], al; test [rbp + 0x49000001], bh; mov eax, [rsp + 0xd0]; mov rsi, [rsp + 0x18]; mov rdi, rbx; call [rax + 8]
0x00134b6f : dec [rax - 0x75]; adc r11b, r14b; movq mm0, [rax + 0x30]; movups xmm[rsi], xmm0; mov rax, [rax + 0x40]; mov [rsi + 0x10], rax; ret
0x00047d9b : add [rax], eax; add [rax], al; movzx edx, [rax + rdx]; lea rax, [rip + 0x144b66]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x00061514 : sbb ecx, [rax - 0x75]; and [rax + 0x3b], cl; sub [rbx + 0x11], sil; lea rsi, [rcx + 4]; mov [rdx + 0x20], rsi; mov [rcx], eax; ret
0x00007217 : push 0; mov r9, [rsp + 0x30]; mov rdx, [rsp + 0x48]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov rax, [rsp + 0x18]; call rax
0x0003b1d5 : lea rsi, [rip - 0x7cc]; movsxd rax, [rdi + rax*4]; add rax, rsi; mov r11, rdx; mov [rbp - 0x518], 0; mov [rbp - 0x528], 1; jmp rax
0x0013699b : sub [rsp + 0x20], eax; call [rax + 0x28]; lea rdx, [rsp + 0x18]; mov esi, 6; mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x28]
0x0007daa2 : add al, [rax]; add [rax + 0x167404e6], al; test eax, eax; lea rdx, [rip + 0xf01cd]; lea rax, [rip + 0xf0166]; cmovne rax, rdx; ret
0x00096ed0 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x0013580f : call [rax + 0x28]; mov rax, [r15 + 0x90]; mov rsi, [rsp + 0x28]; mov rdi, rbp; add [rax], 1; mov rax, [r15 + 0x60]; call [rax + 8]
0x00097d50 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret
0x00003e7e : push 0; mov r9, [rsp + 0x30]; mov rdx, [rsp + 0x38]; mov rsi, [rsp + 0x28]; mov rdi, [rsp + 0x20]; mov rax, [rsp + 0x10]; call rax
0x00096ef0 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x00030e04 : mov edx, [rdi + 0x88]; mov rcx, [rdi + 0x98]; mov r8, [rdi + 0x28]; mov r9, [rdi + 0x30]; mov rdi, [rdi + 0x68]; xor eax, eax; ret
0x0004748f : add [rax], eax; add [rax], al; movzx edx, [rax + rdx]; lea rax, [rip + 0x145572]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x00110872 : add al, [rax]; add [rax + 0x167404e6], al; test eax, eax; lea rdx, [rip + 0x5d3ed]; lea rax, [rip + 0x5d386]; cmovne rax, rdx; ret
0x0003cc0e : mov r11, [rbp - 0x530]; cdqe ; movzx edx, [rdx + rax]; lea rax, [rip + 0x14faee]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x00097d10 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret
0x0003b3d5 : mov r11, [rbp - 0x530]; cdqe ; movzx edx, [rdx + rax]; lea rax, [rip + 0x151327]; movsxd rax, [rax + rdx*4]; add rax, rsi; jmp rax
0x00141d2f : mov rax, [rip + 0x287e62]; mov ebx, fs:[rax]; mov eax, 2; cmp ebx, 3; cmove ebx, eax; mov rax, [rip + 0x289535]; call [rax + 0x28]
0x001531e1 : movdqu xmm[rdi + 0x17], xmm0; lddqu xmm0, xmm[rsi + 7]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 7], xmm0; movdqu xmm[rdi], xmm1; ret
0x00097c2e : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret
0x0016439a : xchg [rbp + 0xe], ah; add [rax], al; lea rcx, [rdx + rcx - 0x10]; movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; sub eax, edx; ret
0x0014506c : add [rax], al; add [rdi + rbx + 0x48], dh; mov eax, [rip + 0x284b10]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax + 0x170]; jmp rax
0x001533a1 : movdqu xmm[rdi + 0x13], xmm0; lddqu xmm0, xmm[rsi + 3]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 3], xmm0; movdqu xmm[rdi], xmm1; ret
0x00096dee : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x00153411 : movdqu xmm[rdi + 0x12], xmm0; lddqu xmm0, xmm[rsi + 2]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 2], xmm0; movdqu xmm[rdi], xmm1; ret
0x00097c4e : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret
0x0007de9a : xor cl, [rdi]; add [rbp - 0x1a], dh; test [rcx + 0x85], 2; lea rdx, [rip + 0xf3d43]; lea rax, [rip + 0xf3ccc]; cmovne rax, rdx; ret
0x00095773 : add [rax], r8b; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x00153331 : movdqu xmm[rdi + 0x14], xmm0; lddqu xmm0, xmm[rsi + 4]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 4], xmm0; movdqu xmm[rdi], xmm1; ret
0x0001e5d6 : xor [rdi], cl; adc [rdi + 0x40], eax; movups xmm[rdi + 0x50], xmm0; movups xmm[rdi + 0x60], xmm0; movups xmm[rdi + 0x70], xmm0; ret
0x000620ba : mov [rax + 0x50], ecx; mov rcx, [rax + 0x10]; mov [rax + 8], rdx; mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x000ed825 : pop r8; movdqu xmm0, xmm[rsi + 0x60]; movups xmm[rdi + 0x68], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0x78], xmm0; ret
0x000873d4 : lea rax, [rdi + rax - 1]; mov [rdi], edx; movzx edx, [rsp + 0xc]; mov [rdi + 4], dx; movzx edx, [rsp + 0xe]; mov [rdi + 6], dl; ret
0x000478ba : mov r8, rcx; mov [rbp - 0x514], 1; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x27a]; add rax, rdi; jmp rax
0x000873d5 : lea eax, [rdi + rax - 1]; mov [rdi], edx; movzx edx, [rsp + 0xc]; mov [rdi + 4], dx; movzx edx, [rsp + 0xe]; mov [rdi + 6], dl; ret
0x00131d1a : mov [rdx + 0x60], eax; mov eax, [rdi + 0x84]; mov [rdx + 0x68], eax; movzx eax, [rdi + 0x88]; mov [rdx + 0x6c], ax; mov eax, 1; ret
0x00153101 : movdqu xmm[rdi + 0x19], xmm0; lddqu xmm0, xmm[rsi + 9]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 9], xmm0; movdqu xmm[rdi], xmm1; ret
0x00096d6e : add [rax], al; movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x00096dce : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x0006207a : mov edx, [rax + 0x40]; mov [rax + 8], rcx; mov rcx, [rax + 0x10]; mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x000d6e3e : xor [rax + 0x607724fa], al; lea rcx, [rip + 0xb8fd1]; movzx eax, dl; mov rbp, rsi; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x00153481 : movdqu xmm[rdi + 0x11], xmm0; lddqu xmm0, xmm[rsi + 1]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 1], xmm0; movdqu xmm[rdi], xmm1; ret
0x00097bae : add [rax], al; movdqu xmm0, xmm[rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret
0x00047862 : mov r8, rcx; mov [rbp - 0x4e8], 1; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x2d2]; add rax, rdi; jmp rax
0x001108ba : adc [rsi], al; add [rbp - 0x1b], dh; test [rcx + 0x85], 2; lea rdx, [rip + 0x618c3]; lea rax, [rip + 0x6184c]; cmovne rax, rdx; ret
0x0013d121 : lea eax, [rip + 0x28c289]; mov [rdi], edx; mov [rdi + 0x18], rsi; mov [rdi + 0x28], 0; mov [rdi + 0x20], 0; mov [rdi + 8], rax; ret
0x001532c1 : movdqu xmm[rdi + 0x15], xmm0; lddqu xmm0, xmm[rsi + 5]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 5], xmm0; movdqu xmm[rdi], xmm1; ret
0x000620b9 : mov [rax + 0x50], rcx; mov rcx, [rax + 0x10]; mov [rax + 8], rdx; mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x00153171 : movdqu xmm[rdi + 0x18], xmm0; lddqu xmm0, xmm[rsi + 8]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 8], xmm0; movdqu xmm[rdi], xmm1; ret
0x00131d19 : mov [rdx + 0x60], rax; mov eax, [rdi + 0x84]; mov [rdx + 0x68], eax; movzx eax, [rdi + 0x88]; mov [rdx + 0x6c], ax; mov eax, 1; ret
0x00047918 : mov r8, rcx; mov [rbp - 0x508], 1; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x21c]; add rax, rdi; jmp rax
0x000ee0cc : xchg eax, ebp; add [rax], al; add [rdi], cl; adc [rsi + 0x60], eax; movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x00096d4d : adc r11b, r8b; movdqu xmm0, xmm[rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x00062079 : mov rdx, [rax + 0x40]; mov [rax + 8], rcx; mov rcx, [rax + 0x10]; mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x00097bce : add [rax], al; movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret
0x00153251 : movdqu xmm[rdi + 0x16], xmm0; lddqu xmm0, xmm[rsi + 6]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 6], xmm0; movdqu xmm[rdi], xmm1; ret
0x000479ca : mov r8, rcx; mov [rbp - 0x500], 1; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x16a]; add rax, rdi; jmp rax
0x0008739d : add [rax], al; add [rbx + 0x48f02454], cl; lea eax, [rdi + rax - 1]; mov [rdi], edx; movzx edx, [rsp - 0xc]; mov [rdi + 4], dl; ret
0x00152e08 : movq [rdi + 0x20], mm0; lddqu xmm0, xmm[rsi + 0x10]; movdqu xmm[rdi + 0x10], xmm0; lddqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; ret
0x0013d120 : lea rax, [rip + 0x28c289]; mov [rdi], edx; mov [rdi + 0x18], rsi; mov [rdi + 0x28], 0; mov [rdi + 0x20], 0; mov [rdi + 8], rax; ret
0x0014f127 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4cc77]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cc97 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4ef47]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c758 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f487]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c608 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f668 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4c737]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000956f5 : add [rsi + 0x2e], ah; nop [rax + rax]; movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x0014c0c7 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c217 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00047919 : mov eax, ecx; mov [rbp - 0x508], 1; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x21c]; add rax, rdi; jmp rax
0x0014bb87 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x50057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00047863 : mov eax, ecx; mov [rbp - 0x4e8], 1; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x2d2]; add rax, rdi; jmp rax
0x0014f278 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4cb27]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00048c28 : mov r8, rdx; mov [rbp - 0x4f8], 1; movzx eax, [rcx + rax]; lea rcx, [rip - 0x10f0]; movsxd rax, [rdi + rax*4]; add rax, rcx; jmp rax
0x0014efd8 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4cdc7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cb47 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f097]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138c35 : mov eax, [rdi + 8]; mov [rsp + 8], 1; mov rsi, rsp; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; mov [rsp + 0x20], 5; call [rax + 0x18]
0x0014bcd8 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4ff07]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f667 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4c737]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e6a8 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d6f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0001e5d5 : xor [r15], r9b; adc [rdi + 0x40], eax; movups xmm[rdi + 0x50], xmm0; movups xmm[rdi + 0x60], xmm0; movups xmm[rdi + 0x70], xmm0; ret
0x00065032 : adc [rax + 0x4c], dl; mov edx, esp; mov rax, [rsp + 0x10]; mov r8, [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call [rax + 8]
0x0014c8a8 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f337]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000008ab : add [rax], al; mov rax, [rip + 0x3c9324]; mov rsi, [rsp + 8]; mov edi, [rsp + 0x14]; mov rdx, [rax]; mov rax, [rsp + 0x18]; call rax
0x0014cb48 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f097]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f3c8 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4c9d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e558 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d847]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ba37 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x501a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00075d6b : mov eax, [rip + 0x353ea7]; mov [rax], rcx; mov rax, [rip + 0x353f85]; mov [rax], rsi; mov rax, [rip + 0x353e7b]; mov [rax], rdi; ret
0x0014bf78 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009579e : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x0014f518 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4c887]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014be28 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000ed826 : pop rax; movdqu xmm0, xmm[rsi + 0x60]; movups xmm[rdi + 0x68], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0x78], xmm0; ret
0x0014e947 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d457]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e7f8 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d5a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009a468 : adc [rdi], esp; movups xmm[rdi + 0x10], xmm5; movups xmm[rdi + 0x20], xmm6; movups xmm[rdi + 0x30], xmm7; movups xmm[r11], xmm8; ret
0x0014e7f7 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d5a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e6a7 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d6f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bb88 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x50057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c757 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f487]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ee88 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4cf17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f3c7 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4c9d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e408 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d997]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000479cb : mov eax, ecx; mov [rbp - 0x500], 1; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x16a]; add rax, rdi; jmp rax
0x0004780a : movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x33b]; add rax, rdi; mov r8, rcx; mov [rbp - 0x4d8], 1; mov [rbp - 0x4f0], 0x20; jmp rax
0x0009a3e0 : adc [rcx], ebp; movups xmm[rcx - 0x10], xmm6; movups xmm[rcx - 0x20], xmm7; movups xmm[rcx - 0x30], xmm8; movups xmm[r11], xmm4; ret
0x00138b08 : mov [rsp + 0x10], 0; mov [rsp + 0x30], 4; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x0014ebe8 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d1b7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ba38 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x501a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c218 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097d70 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret
0x0014f128 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4cc77]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c8a7 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f337]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c9f8 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f1e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bcd7 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4ff07]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000478bb : mov eax, ecx; mov [rbp - 0x514], 1; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x27a]; add rax, rdi; jmp rax
0x0003a5ec : add [rax], al; mov rdx, rcx; mov [rbp - 0x4e8], rcx; mov [rbp - 0x500], r11; mov rsi, [rbp - 0x4f8]; mov rdi, r14; call [rax + 0x38]
0x00138ca8 : mov [rsp + 0x10], 0; mov [rsp + 0x30], 1; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x0014e948 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d457]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x001345cb : xchg esi, ecx; add [rax], al; add [rbx + 0x48102444], cl; lea edx, [rip + 0x5da55]; movsxd rax, [rdx + rax*4]; add rax, rdx; jmp rax
0x00095755 : add [rsi + 0x2e], ah; nop [rax + rax]; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x00096f10 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x0014f277 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4cb27]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ebe7 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d1b7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ea97 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d307]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138c34 : mov rax, [rdi + 8]; mov [rsp + 8], 1; mov rsi, rsp; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; mov [rsp + 0x20], 5; call [rax + 0x18]
0x0014e407 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d997]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d037 : mov [rdi - 0x29], r8; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x0014e557 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d847]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c9f7 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f1e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00131eba : add [rax], al; mov rsi, [rsp + 0x10]; lea ebp, [rax - 1]; mov rax, [r12 + 0xd0]; mov [r12 + 0xa8], ebp; bswap ebp; call [rax + 0x18]
0x0014c607 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00095735 : add [rsi + 0x2e], ah; nop [rax + rax]; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x00075d6a : mov rax, [rip + 0x353ea7]; mov [rax], rcx; mov rax, [rip + 0x353f85]; mov [rax], rsi; mov rax, [rip + 0x353e7b]; mov [rax], rdi; ret
0x0014efd7 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4cdc7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c0c8 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014be27 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bf77 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ea98 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4d307]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138b78 : mov [rsp + 0x10], 0; mov [rsp + 0x30], 5; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x001534f4 : add [rbx + 0x19], dh; add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x491ac]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c4b7 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00138a98 : mov [rsp + 0x10], 0; mov [rsp + 0x30], 3; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x0014ee87 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4cf17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c4b8 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00171ec2 : add [rdi], cl; xchg [rcx + rax], ecx; add [rdx - 0xf], ah; dec [rax + 0x6f]; add [rdx - 0xf], esp; dec [rax + 0x6f]; jmp [r10 - 0xf]
0x0014cc98 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4ef47]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f517 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x4c887]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00097bee : add [rax], al; movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret
0x0014d600 : mov edx, [rsi - 4]; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0014d281 : mov ebx, [rsi - 0x12]; mov rcx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0014d808 : mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00097c6e : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret
0x0014dc09 : mov ecx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0014d809 : mov ecx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00048c29 : mov eax, edx; mov [rbp - 0x4f8], 1; movzx eax, [rcx + rax]; lea rcx, [rip - 0x10f0]; movsxd rax, [rdi + rax*4]; add rax, rcx; jmp rax
0x00166eef : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x34a33]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x001642df : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x375c3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0014da31 : mov ebx, [rsi - 0x16]; mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0014d268 : mov rcx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0014ce70 : mov rdx, [rsi - 8]; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00096d8e : add [rax], al; movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x0014d280 : mov r11, [rsi - 0x12]; mov rcx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0014d830 : mov r11, [rsi - 0x15]; mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0014d240 : mov edx, [rsi - 4]; mov [rdi - 0x22], r9; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0013455e : add [rax], al; mov rax, fs:[0x28]; mov [rsp + 0x438], rax; xor eax, eax; mov rax, [rdi + 8]; lea rsi, [rsp + 0x10]; call [rax + 0x10]
0x0014d449 : mov ecx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0014d461 : mov ebx, [rsi - 0x13]; mov rcx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x000ed7d6 : push rax; movdqu xmm0, xmm[rdi + 0x68]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0x78]; movups xmm[rsi + 0x70], xmm0; ret
0x00095734 : add [rsi + 0x2e], spl; nop [rax + rax]; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x0006f137 : inc [rbx - 0x3ca4f7f5]; nop [rax]; mov rax, [rdi + 0x28]; cmp [rdi + 0x10], rax; cmovae rax, [rdi + 0x10]; sub rax, [rdi + 0x18]; ret
0x0014da30 : mov r11, [rsi - 0x16]; mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0014d448 : mov rcx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0012bedc : lea rdx, [rip - 0x1f3]; lea r8, [rip - 0x28a]; mov esi, 5; push [rsp + 0xe8]; mov [rsp + 0x18], r10; lea r9, [rsp + 0x40]; call [rax]
0x0014d420 : mov edx, [rsi - 4]; mov [rdi - 0x23], r9; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0014d629 : mov ecx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00138edf : mov edi, edi; mov [rsp + 0xe0], rsi; mov [rsp + 0xc8], rdx; mov rsi, r13; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xd0], 2; call rax
0x0014d7e1 : mov edx, [rsi - 8]; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00133453 : add [rcx + 0x8b86043], cl; add [rax], al; add [rcx + 0x480c2444], cl; mov eax, [rbp + 8]; mov esi, 8; mov rdi, rbp; call [rax + 0x30]
0x0014d269 : mov ecx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0014dc31 : mov ebx, [rsi - 0x17]; mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0014d641 : mov ebx, [rsi - 0x14]; mov rcx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0014d460 : mov r11, [rsi - 0x13]; mov rcx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0014cf3c : mov [rdi - 0x29], ecx; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x000450af : add [rax], al; mov [rbp - 0x928], ecx; mov [rbp - 0x91c], r11d; mov rdx, rbx; mov rsi, r12; mov rdi, [rbp - 0x8d0]; call [r13 + 0x38]
0x0014d640 : mov r11, [rsi - 0x14]; mov rcx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00096471 : movq mm0, [rsi]; mov rdx, [rsi + 0x10]; mov cl, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; ret
0x0014d628 : mov rcx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0016350f : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x38353]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0014da08 : mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x000ee0c8 : push rax; movdqu xmm0, xmm[rdi + 0xe8]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x00138ede : mov rdi, r15; mov [rsp + 0xe0], rsi; mov [rsp + 0xc8], rdx; mov rsi, r13; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xd0], 2; call rax
0x0014dbe1 : mov edx, [rsi - 8]; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0014d831 : mov ebx, [rsi - 0x15]; mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0014d7e0 : mov rdx, [rsi - 8]; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0014dc08 : mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x000957c1 : movq mm0, [rsi]; mov rdx, [rsi + 0x10]; mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x0012bedd : lea edx, [rip - 0x1f3]; lea r8, [rip - 0x28a]; mov esi, 5; push [rsp + 0xe8]; mov [rsp + 0x18], r10; lea r9, [rsp + 0x40]; call [rax]
0x0011f7a7 : add esi, [rsi + rdx - 0x7d]; inc [rsp + rsi*2]; sub [rbx + 0xba05ff], eax; add [rax], al; add [rax + 0x102], bh; cmovne eax, edx; ret
0x0016531f : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x365c3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00096e0e : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x0014cfc1 : mov [rdi - 0x29], r8; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0014ce71 : mov edx, [rsi - 8]; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0014d038 : mov [rdi - 0x29], eax; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x0013beae : add [rax], al; movsxd rax, [rsi]; mov [rsp + 8], r8; lea rsi, [rsp + 0x10]; mov [rsp + 0x10], rax; mov rax, [rdi + 8]; call [rax + 8]
0x0014d9e0 : mov rdx, [rsi - 8]; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0014dc30 : mov r11, [rsi - 0x17]; mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0014da09 : mov ecx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x000963f1 : movq mm0, [rsi]; mov ecx, [rsi + 0x10]; mov dl, [rsi + 0x14]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; ret
0x0014d9e1 : mov edx, [rsi - 8]; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0014cf3b : mov [rdi - 0x29], rcx; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x0014dbe0 : mov rdx, [rsi - 8]; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00138d26 : mov [rsp + 0x28], eax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; mov [rsp + 0x30], 2; mov [rsp + 0x40], rdx; call [rax + 0x18]
0x00165320 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x365c3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00138a35 : mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; mov [rsp + 0x30], 0; mov [rsp + 0x38], rdx; call [rax + 0x18]
0x000474e7 : adc al, 0; lea rcx, [rip + 0x660]; movzx edx, [rdx + rax]; lea rax, [rip + 0x145595]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x0014ce99 : mov ebx, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0014cfc2 : mov [rdi - 0x29], eax; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x001375cf : push [rdx + rcx + 0x48]; mov eax, [rdi + 0x38]; call [rax + 0x20]; mov rax, [rbx]; mov rdx, [rax + 8]; mov rdi, rax; call [rdx + 0x20]
0x0003c020 : add [rax], al; add [rax - 0x68], cl; movzx eax, [rsi + rax]; movsxd rax, [rdi + rax*4]; lea rdi, [rip - 0x1624]; add rax, rdi; jmp rax
0x001642e0 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x375c3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00139f8c : add al, ch; sub dil, r15b; inc [rbp - 0x17bf040]; add [rax], al; add [rax - 0x75], cl; sbb [r9 + rcx*4 - 0x19], r9b; call [rax + 0x20]
0x00047d92 : mov r8, rcx; mov [rbp - 0x4c0], 1; movzx edx, [rax + rdx]; lea rax, [rip + 0x144b66]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x0013549f : add [rax - 0x75], cl; adc r11b, r14b; movq mm0, [rax + 0x40]; movups xmm[rsi], xmm0; mov rax, [rax + 0x50]; mov [rsi + 0x10], rax; ret
0x00163510 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x38353]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00096db1 : movq mm0, [rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x00166ef0 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x34a33]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x000999c9 : mov cl, [rsi + 0x20]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; mov [rdi + 0x20], cl; xor ch, ch; mov [rdi + 0x21], ch; ret
0x00138bd4 : mov rax, [rdi + 8]; mov [rsp + 0x20], esi; mov rsi, rsp; mov [rsp + 8], 1; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; call [rax + 0x18]
0x00138a36 : mov [rsp + 0x28], eax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; mov [rsp + 0x30], 0; mov [rsp + 0x38], rdx; call [rax + 0x18]
0x00064988 : mov edx, [rdi + 0x18]; lea rsi, [rsp + 0x30]; mov rdi, r13; mov rax, [rax + 0x60]; sar r8, 2; mov [rsp + 0x30], rax; call [r13 + 0x30]
0x00095775 : add [rsi + 0x2e], ah; nop [rax + rax]; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x00131bcf : add [rax - 0x75], cl; adc r11b, r14b; movq mm0, [rax + 0x90]; movups xmm[rsi], xmm0; mov rax, [rax + 0xa0]; mov [rsi + 0x10], rax; ret
0x00064987 : mov rdx, [r15 + 0x18]; lea rsi, [rsp + 0x30]; mov rdi, r13; mov rax, [rax + 0x60]; sar r8, 2; mov [rsp + 0x30], rax; call [r13 + 0x30]
0x00138d25 : mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; mov [rsp + 0x30], 2; mov [rsp + 0x40], rdx; call [rax + 0x18]
0x00138bd5 : mov eax, [rdi + 8]; mov [rsp + 0x20], esi; mov rsi, rsp; mov [rsp + 8], 1; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; call [rax + 0x18]
0x00096e31 : movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x0014ce98 : mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00152e61 : movdqu xmm[rdi + 0x1f], xmm0; lddqu xmm0, xmm[rsi + 0xf]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xf], xmm0; movdqu xmm[rdi], xmm1; ret
0x0014cf83 : movq [rdi - 0x31], mm1; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0014daac : mov [rdi - 0x2f], r8; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0014cff9 : movq [rdi - 0x31], mm0; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0014d4db : mov [rdi - 0x2c], r8; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0000eeb6 : mov ecx, [rax + 0xb8]; mov rdx, [rip + 0x3bae35]; mov [rdx], rcx; mov rdx, [rax + 0xc0]; mov rax, [rip + 0x3bac3c]; mov [rax], rdx; ret
0x0000f64f : mov [rcx], rdx; mov rcx, [rip + 0x3ba5af]; lea rdx, [rdi + 0x200]; mov fs:[rcx], rdx; mov rdx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x00095801 : movq mm0, [rsi]; mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x00047d93 : mov eax, ecx; mov [rbp - 0x4c0], 1; movzx edx, [rax + rdx]; lea rax, [rip + 0x144b66]; movsxd rax, [rax + rdx*4]; add rax, rdi; jmp rax
0x00152ed1 : movdqu xmm[rdi + 0x1e], xmm0; lddqu xmm0, xmm[rsi + 0xe]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xe], xmm0; movdqu xmm[rdi], xmm1; ret
0x00136984 : mov rax, [rdi + 8]; lea rdx, [rsp + 0x20]; mov esi, 4; movdqa xmm0, xmm[rip + 0x64716]; movaps xmm[rsp + 0x20], xmm0; call [rax + 0x28]
0x00031139 : add [rax - 0x75], cl; mov ds, [rax + 0x4c000000]; mov eax, [rsi + 0x28]; mov r9, [rsi + 0x30]; mov rsi, [rsi + 0x70]; xor eax, eax; ret
0x00153091 : movdqu xmm[rdi + 0x1a], xmm0; lddqu xmm0, xmm[rsi + 0xa]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xa], xmm0; movdqu xmm[rdi], xmm1; ret
0x0014cec0 : mov r10, [rsi - 0x18]; mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0013ca21 : lea eax, [rip + 0x28c929]; mov [rdi], ecx; mov [rdi + 0x20], rsi; mov [rdi + 0x18], rsi; mov [rdi + 0x28], edx; mov [rdi + 8], rax; ret
0x0014d10b : mov [rdi - 0x2a], r8; mov [rdi - 0x22], r9; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0013ca20 : lea rax, [rip + 0x28c929]; mov [rdi], ecx; mov [rdi + 0x20], rsi; mov [rdi + 0x18], rsi; mov [rdi + 0x28], edx; mov [rdi + 8], rax; ret
0x00099941 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; xor ch, ch; mov [rdi + 0x1d], ch; ret
0x0014d8ac : mov [rdi - 0x2e], r8; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00099981 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; xor ch, ch; mov [rdi + 0x1f], ch; ret
0x00153021 : movdqu xmm[rdi + 0x1b], xmm0; lddqu xmm0, xmm[rsi + 0xb]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xb], xmm0; movdqu xmm[rdi], xmm1; ret
0x0000f650 : mov [rcx], edx; mov rcx, [rip + 0x3ba5af]; lea rdx, [rdi + 0x200]; mov fs:[rcx], rdx; mov rdx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x00136985 : mov eax, [rdi + 8]; lea rdx, [rsp + 0x20]; mov esi, 4; movdqa xmm0, xmm[rip + 0x64716]; movaps xmm[rsp + 0x20], xmm0; call [rax + 0x28]
0x0000eeb5 : mov rcx, [rax + 0xb8]; mov rdx, [rip + 0x3bae35]; mov [rdx], rcx; mov rdx, [rax + 0xc0]; mov rax, [rip + 0x3bac3c]; mov [rax], rdx; ret
0x000957e1 : movq mm0, [rsi]; mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x0014cec1 : mov edx, [rsi - 0x18]; mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00152fb1 : movdqu xmm[rdi + 0x1c], xmm0; lddqu xmm0, xmm[rsi + 0xc]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xc], xmm0; movdqu xmm[rdi], xmm1; ret
0x0014d2eb : mov [rdi - 0x2b], r8; mov [rdi - 0x23], r9; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x000407f2 : movsxd r8, [rsp + 0x18]; lea rdx, [r12 + rax*4]; sub rsi, rax; mov rax, [rip + 0x38ad9b]; mov rdi, rbp; mov rcx, r14; call [rax + r8*8]
0x00152f41 : movdqu xmm[rdi + 0x1d], xmm0; lddqu xmm0, xmm[rsi + 0xd]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xd], xmm0; movdqu xmm[rdi], xmm1; ret
0x00099961 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; xor ch, ch; mov [rdi + 0x1e], ch; ret
0x0010e954 : sbb bl, dh; movq mm0, [r13 + 0x30]; mov [rbp - 0x80], edx; lea rdx, [rdi + 0x70]; mov edi, r12d; movups xmm[rbp - 0x78], xmm0; call rax
0x0014d6ac : mov [rdi - 0x2d], r8; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00096eaf : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x000695e8 : mov rdx, [rbx + 0xa0]; lea rcx, [rip + 0x35d91a]; lea rdi, [rip + 0x35d3d3]; mov [rbx + 0xd8], rcx; mov [rdx + 0x130], rdi; pop rbx; ret
0x0003b075 : add [rax], al; add [rax - 0x68], cl; movzx eax, [rsi + rax]; lea rsi, [rip + 0x15170b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0006816f : add [rbx + 0xc087], cl; add [rbp + 0x48167ec0], al; mov edx, [rdi + 0xa0]; mov rax, [rdx + 0x20]; sub rax, [rdx + 0x18]; sar rax, 2; ret
0x0014cdc2 : mov [rdi - 0x30], rcx; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0004797f : lea rdi, [rip + 0x14520a]; mov r8, rcx; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x1b8]; add rax, rdi; jmp rax
0x0003821d : xchg [rdi + 7], dh; add [rax], al; mov rsi, [r15 + 0x18]; mov rdx, [r15 + 0x20]; mov rdi, [rbp - 0x8a8]; sub rdx, rsi; call [rbx + 0x38]
0x000476e4 : xchg [rip + 0x4c00001e], cl; mov [rbp - 0x508], eax; mov rdx, r14; mov rsi, r11; mov [rbp - 0x500], r11; mov rdi, r13; call [r15 + 0x38]
0x00097d4f : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret
0x00138bd1 : push -0x74b73fcf; or [r9 + 0x48202474], r9b; mov esi, esp; mov [rsp + 8], 1; mov [rsp + 0x10], 1; mov [rsp + 0x18], 1; call [rax + 0x18]
0x0003aa8d : add [rax], al; add [rax - 0x68], cl; movzx eax, [rsi + rax]; lea rsi, [rip + 0x151cf3]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x00095815 : sbb bl, al; nop [rax + rax]; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x0003b435 : add [rax], al; add [rax - 0x68], cl; movzx eax, [rsi + rax]; lea rsi, [rip + 0x15134b]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x0006805f : add [rbx + 0xc087], cl; add [rbp + 0x48167ec0], al; mov edx, [rdi + 0xa0]; mov rax, [rdx + 0x38]; sub rax, [rdx + 0x30]; sar rax, 2; ret
0x00096ecf : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x000695e9 : mov edx, [rbx + 0xa0]; lea rcx, [rip + 0x35d91a]; lea rdi, [rip + 0x35d3d3]; mov [rbx + 0xd8], rcx; mov [rdx + 0x130], rdi; pop rbx; ret
0x0014d6ad : mov [rdi - 0x2d], eax; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0014d4dc : mov [rdi - 0x2c], eax; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00047980 : lea edi, [rip + 0x14520a]; mov r8, rcx; movzx eax, [rax + rdx]; movsxd rax, [rdi + rax*4]; lea rdi, [rip + 0x1b8]; add rax, rdi; jmp rax
0x0009a1a5 : add [rax], al; movups xmm0, xmm[rsi]; movups xmm1, xmm[rsi + rdx - 0x10]; movups xmm[rdi], xmm0; movups xmm[rdi + rdx - 0x10], xmm1; ret
0x00097d2f : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret
0x0014cdc3 : mov [rdi - 0x30], ecx; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00097d0f : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret
0x00096eef : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x0014d8ad : mov [rdi - 0x2e], eax; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0014daad : mov [rdi - 0x2f], eax; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0003b181 : add [rax], al; add [rax - 0x68], cl; movzx esi, [rsi + rax]; lea rax, [rip + 0x15137f]; movsxd rax, [rax + rsi*4]; add rax, rdi; jmp rax
0x0014d10c : mov [rdi - 0x2a], eax; mov [rdi - 0x22], r9; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0014d2ec : mov [rdi - 0x2b], eax; mov [rdi - 0x23], r9; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0003afab : add [rax], al; add [rax - 0x68], cl; movzx eax, [rsi + rax]; lea rsi, [rip + 0x1517d5]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x00153170 : sbb bl, dh; movq [rdi + 0x18], mm0; lddqu xmm0, xmm[rsi + 8]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 8], xmm0; movdqu xmm[rdi], xmm1; ret
0x0000f3b0 : mov rax, [rip + 0x3ba741]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax + 0x58]; mov eax, [rax + rdi*4 + 0x200]; ret
0x0014d3b9 : movq [rdi - 0x33], mm0; mov [rdi - 0x23], r9; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0010ea28 : mov edx, [rbp + 0x18]; movdqu xmm0, xmm[r13 + 0x30]; mov [rbp - 0x80], edx; lea rdx, [rcx + 0x70]; movups xmm[rbp - 0x78], xmm0; call rax
0x000f0c2d : add [rax], al; mov rdx, [rbx + 0x38]; lea rcx, [rbx + 0x28]; mov rdi, [rbx + 0x18]; mov rsi, r14; mov edx, [rdx + rax]; call [rbx + 0x40]
0x0009583c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x0010e496 : mov [rbp - 0x78], rdx; mov rdx, [r12 + 0x80]; mov [rbp - 0x70], rdx; mov edx, [r12 + 0x60]; mov [rbp - 0x80], edx; mov rdx, rbx; call rax
0x000999a1 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; xor ch, ch; mov [rdi + 0x20], ch; ret
0x00139f8b : add r8b, r13b; sub dil, r15b; inc [rbp - 0x17bf040]; add [rax], al; add [rax - 0x75], cl; sbb [r9 + rcx*4 - 0x19], r9b; call [rax + 0x20]
0x0010ebd1 : mov [rbp - 0x78], edx; mov rdx, [r13 + 0x80]; mov [rbp - 0x70], rdx; mov edx, [r13 + 0x60]; mov [rbp - 0x80], edx; mov rdx, r12; call rax
0x0010ea27 : mov edx, [r13 + 0x18]; movdqu xmm0, xmm[r13 + 0x30]; mov [rbp - 0x80], edx; lea rdx, [rcx + 0x70]; movups xmm[rbp - 0x78], xmm0; call rax
0x0009581c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x00152e07 : movdqu xmm[rdi + 0x20], xmm0; lddqu xmm0, xmm[rsi + 0x10]; movdqu xmm[rdi + 0x10], xmm0; lddqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; ret
0x0014cdfa : movq [rdi - 0x38], mm0; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x0000f3b1 : mov eax, [rip + 0x3ba741]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax + 0x58]; mov eax, [rax + rdi*4 + 0x200]; ret
0x0014d1d9 : movq [rdi - 0x32], mm0; mov [rdi - 0x22], r9; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00153410 : adc dh, bl; movq [rdi + 0x12], mm0; lddqu xmm0, xmm[rsi + 2]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 2], xmm0; movdqu xmm[rdi], xmm1; ret
0x0014d523 : movq [rdi - 0x34], mm1; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0009585c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x0013699a : movaps xmm[rsp + 0x20], xmm0; call [rax + 0x28]; lea rdx, [rsp + 0x18]; mov esi, 6; mov rdi, [rbx]; mov rax, [rdi + 8]; call [rax + 0x28]
0x0000f3d1 : mov eax, [rip + 0x3ba721]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax + 0x48]; mov eax, [rax + rdi*4 + 0x200]; ret
0x0014d96a : movq [rdi - 0x36], mm0; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0014d6f4 : movq [rdi - 0x35], mm1; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00171247 : adc [rcx - 1], bl; vmovups zmm[rdi], zmm0; vmovups zmm[rdi + 0x40], zmm1; vmovups zmm[r9 - 0x80], zmm2; vmovups zmm[r9 - 0x40], zmm3; ret
0x0014daf4 : movq [rdi - 0x37], mm1; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0012cdbd : sub bh, al; cmp [rax], al; add [rax], al; add [rax + 0x63], cl; sbb [r11 + 0x127703f8], r8b; lea rdx, [rip + 0x29cabb]; jmp [rdx + rax*8]
0x0010e497 : mov [rbp - 0x78], edx; mov rdx, [r12 + 0x80]; mov [rbp - 0x70], rdx; mov edx, [r12 + 0x60]; mov [rbp - 0x80], edx; mov rdx, rbx; call rax
0x0014cd84 : movq [rdi - 0x38], mm1; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x0014d599 : movq [rdi - 0x34], mm0; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0014d76e : movq [rdi - 0x35], mm0; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0010ebd0 : mov [rbp - 0x78], rdx; mov rdx, [r13 + 0x80]; mov [rbp - 0x70], rdx; mov edx, [r13 + 0x60]; mov [rbp - 0x80], edx; mov rdx, r12; call rax
0x0014db6a : movq [rdi - 0x37], mm0; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0014d8f4 : movq [rdi - 0x36], mm1; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00132658 : inc [rbp + 0x6f840fc0]; add [rax], eax; add [rcx - 0x75], cl; xchg al, dl; add [rax], al; add [rcx + rcx*4 - 0x19], cl; call [rax + 0x20]
0x0000f3d0 : mov rax, [rip + 0x3ba721]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax + 0x48]; mov eax, [rax + rdi*4 + 0x200]; ret
0x0006cac2 : mov [rdi + 0x58], rdx; mov rdx, [rdi + 0x18]; mov [rdi + 0x10], rax; mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x00097d6f : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret
0x00138515 : add [rbp + 0x48c575c0], al; lea eax, [rip + 0x29694f]; mov [rip + 0x296925], 2; mov fs:[rbx], rax; mov rax, [rip + 0x2917da]; pop rbx; ret
0x000008a4 : mov fs:[0x300], rax; mov rax, [rip + 0x3c9324]; mov rsi, [rsp + 8]; mov edi, [rsp + 0x14]; mov rdx, [rax]; mov rax, [rsp + 0x18]; call rax
0x0000f64e : mov fs:[rcx], rdx; mov rcx, [rip + 0x3ba5af]; lea rdx, [rdi + 0x200]; mov fs:[rcx], rdx; mov rdx, [rip + 0x3ba5e5]; mov fs:[rdx], rax; ret
0x0006ca92 : mov [rdi + 0x58], rax; mov rdx, [rdi + 0x18]; mov rax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x0006ca93 : mov [rdi + 0x58], eax; mov rdx, [rdi + 0x18]; mov rax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x00096f0f : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x000ee157 : add [rax], al; movdqu xmm0, xmm[rsi + 0x60]; movups xmm[rdi + 0xe8], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x0003a834 : mov [rbp - 0x508], r9; mov [rbp - 0x518], ecx; mov [rbp - 0x510], r11; mov rsi, r8; mov [rbp - 0x500], r8; mov rdi, r14; call [r15 + 0x38]
0x00171a94 : div [rdx - 0x27]; vmovups zmm[rsi], zmm2; vmovups zmm[rsi + 0x40], zmm2; vmovups zmm[rsi + 0x80], zmm2; vmovups zmm[rsi + 0xc0], zmm2; ret
0x001385d5 : add [rbp + 0x48c575c0], al; lea eax, [rip + 0x29688f]; mov [rip + 0x296865], 2; mov fs:[rbx], rax; mov rax, [rip + 0x29162a]; pop rbx; ret
0x00138695 : add [rbp + 0x48c575c0], al; lea eax, [rip + 0x2967cf]; mov [rip + 0x2967a5], 2; mov fs:[rbx], rax; mov rax, [rip + 0x291502]; pop rbx; ret
0x0006cac3 : mov [rdi + 0x58], edx; mov rdx, [rdi + 0x18]; mov [rdi + 0x10], rax; mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x00052ae2 : add [rax], al; lea rcx, [rip + 0x13a849]; mov r9, [rbp - 0x598]; mov r11d, [rbp - 0x5a0]; movsxd rax, [rcx + rax*4]; add rax, rcx; jmp rax
0x0013845d : add [rbp + 0x48d575c0], al; lea eax, [rip + 0x296a07]; mov [rip + 0x2969dd], 2; mov fs:[rbx], rax; mov rax, [rip + 0x29183a]; pop rbx; ret
0x0016cc89 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0xfe58]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000957c0 : movdqu xmm0, xmm[rsi]; mov rdx, [rsi + 0x10]; mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x0009a3df : movups xmm[rcx], xmm5; movups xmm[rcx - 0x10], xmm6; movups xmm[rcx - 0x20], xmm7; movups xmm[rcx - 0x30], xmm8; movups xmm[r11], xmm4; ret
0x0015a639 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0x224a8]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00097c14 : mov ecx, [rsi + 0x10]; mov dl, [rsi + 0x14]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret
0x001580e4 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0x249fd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0015316f : sbb bl, r14b; movq [rdi + 0x18], mm0; lddqu xmm0, xmm[rsi + 8]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 8], xmm0; movdqu xmm[rdi], xmm1; ret
0x0013839f : add [rbx + 0x296aaa05], cl; add [rbp + 0x48d575c0], al; lea eax, [rip + 0x296abf]; mov [rip + 0x296a95], 2; mov fs:[rbx], rax; pop rbx; ret
0x00097c95 : mov edx, [rsi + 0x10]; mov cl, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret
0x00096470 : movdqu xmm0, xmm[rsi]; mov rdx, [rsi + 0x10]; mov cl, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; ret
0x000963f0 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0x10]; mov dl, [rsi + 0x14]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dl; ret
0x001533a0 : adc esi, ebx; movq [rdi + 0x13], mm0; lddqu xmm0, xmm[rsi + 3]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 3], xmm0; movdqu xmm[rdi], xmm1; ret
0x00153100 : sbb ebx, esi; movq [rdi + 0x19], mm0; lddqu xmm0, xmm[rsi + 9]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 9], xmm0; movdqu xmm[rdi], xmm1; ret
0x0003a835 : mov [rbp - 0x508], ecx; mov [rbp - 0x518], ecx; mov [rbp - 0x510], r11; mov rsi, r8; mov [rbp - 0x500], r8; mov rdi, r14; call [r15 + 0x38]
0x00097cb4 : mov rdx, [rsi + 0x10]; mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret
0x00095814 : sbb r11b, r8b; nop [rax + rax]; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x0015340f : adc r14b, bl; movq [rdi + 0x12], mm0; lddqu xmm0, xmm[rsi + 2]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 2], xmm0; movdqu xmm[rdi], xmm1; ret
0x00167094 : movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; lea rcx, [rip + 0x15a4d]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00169e9b : movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; lea rcx, [rip + 0x12c46]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0016b574 : movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; lea rcx, [rip + 0x1156d]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x000ed507 : adc [rdi], eax; movups xmm[rdi + 0x10], xmm0; movups xmm[rdi + 0x20], xmm0; movups xmm[rdi + 0x30], xmm0; movups xmm[rdi + 0x40], xmm0; ret
0x0016b2e4 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0x117fd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0009a467 : movups xmm[rdi], xmm4; movups xmm[rdi + 0x10], xmm5; movups xmm[rdi + 0x20], xmm6; movups xmm[rdi + 0x30], xmm7; movups xmm[r11], xmm8; ret
0x00096e55 : mov edx, [rsi + 0x10]; mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x00044d64 : lea rax, [rip + 0x147b25]; movzx r8d, r8b; mov [rbp - 0x918], ecx; movsxd rax, [rax + rdx*4]; lea rdx, [rip - 0x2fe]; add rax, rdx; jmp rax
0x00168d59 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0x13d88]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0009587c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0008d5a4 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0xef53d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0008fbe9 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0xecef8]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00044d65 : lea eax, [rip + 0x147b25]; movzx r8d, r8b; mov [rbp - 0x918], ecx; movsxd rax, [rax + rdx*4]; lea rdx, [rip - 0x2fe]; add rax, rdx; jmp rax
0x00096e54 : mov rdx, [rsi + 0x10]; mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x00153480 : adc ebx, esi; movq [rdi + 0x11], mm0; lddqu xmm0, xmm[rsi + 1]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 1], xmm0; movdqu xmm[rdi], xmm1; ret
0x0016548b : movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; lea rcx, [rip + 0x17656]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00166d94 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0x15d4d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00097cb5 : mov edx, [rsi + 0x10]; mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret
0x00097c94 : mov rdx, [rsi + 0x10]; mov cl, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret
0x00134dd5 : mov edx, [r12 + 0x60]; mov rsi, [rsp + 0x10]; lea ebp, [rax - 1]; mov rax, [r12 + 0x70]; mov [r12 + 0x48], ebp; bswap ebp; call [rax + 0x18]
0x0009a328 : adc [rdi + rdx - 0x10], esp; movups xmm[rdi + rdx - 0x20], xmm5; movups xmm[rdi + rdx - 0x30], xmm6; movups xmm[rdi + rdx - 0x40], xmm7; ret
0x00131ed7 : push rax; sbb [rbp + 0xfed89c0], al; test [rbp + 0x49000001], bh; mov eax, [rsp + 0xd0]; mov rsi, [rsp + 0x18]; mov rdi, rbx; call [rax + 8]
0x0015347f : adc ebx, r14d; movq [rdi + 0x11], mm0; lddqu xmm0, xmm[rsi + 1]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 1], xmm0; movdqu xmm[rdi], xmm1; ret
0x00135811 : sub [rcx - 0x75], cl; xchg [rax + 0x48000000], edx; mov esi, [rsp + 0x28]; mov rdi, rbp; add [rax], 1; mov rax, [r15 + 0x60]; call [rax + 8]
0x0003b911 : xchg [rdx + 0xd], bh; add [rax], al; mov rsi, [rbp - 0x528]; mov [rbp - 0x4e0], r11; mov rdi, r14; mov rdx, [rbp - 0x510]; call [r15 + 0x38]
0x0000eeb7 : mov [rax + 0x48000000], bh; mov edx, [rip + 0x3bae35]; mov [rdx], rcx; mov rdx, [rax + 0xc0]; mov rax, [rip + 0x3bac3c]; mov [rax], rdx; ret
0x00169d8f : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x32bd3]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00096e30 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x00096db0 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x00134dd6 : mov edx, [rsp + 0x60]; mov rsi, [rsp + 0x10]; lea ebp, [rax - 1]; mov rax, [r12 + 0x70]; mov [r12 + 0x48], ebp; bswap ebp; call [rax + 0x18]
0x00131bce : add [rax], al; mov rax, [rdi + 0x10]; movdqu xmm0, xmm[rax + 0x90]; movups xmm[rsi], xmm0; mov rax, [rax + 0xa0]; mov [rsi + 0x10], rax; ret
0x00131eb4 : mov edx, [r12 + 0xc0]; mov rsi, [rsp + 0x10]; lea ebp, [rax - 1]; mov rax, [r12 + 0xd0]; mov [r12 + 0xa8], ebp; bswap ebp; call [rax + 0x18]
0x00131eb5 : mov edx, [rsp + 0xc0]; mov rsi, [rsp + 0x10]; lea ebp, [rax - 1]; mov rax, [r12 + 0xd0]; mov [r12 + 0xa8], ebp; bswap ebp; call [rax + 0x18]
0x0015339f : adc r14d, ebx; movq [rdi + 0x13], mm0; lddqu xmm0, xmm[rsi + 3]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 3], xmm0; movdqu xmm[rdi], xmm1; ret
0x001530ff : sbb ebx, r14d; movq [rdi + 0x19], mm0; lddqu xmm0, xmm[rsi + 9]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 9], xmm0; movdqu xmm[rdi], xmm1; ret
0x0016b41f : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x31583]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00096e94 : mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x00096400 : adc [rax - 0x6f3ceba9], cl; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x0014ed3c : sub [rdi - 0x10], ebp; add rdi, rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d062]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0016b420 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x31583]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0012b084 : call [rax + 0x28]; mov rax, [rbx + 0x20]; add [rbx + 0x22a8], 1; mov rdi, rbp; mov edx, [rbx + 0x22c0]; mov rsi, [rsp + 8]; call [rax + 0x18]
0x0014c36c : sub [rdi - 0x10], ebp; add rdi, rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f872]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000957e0 : movdqu xmm0, xmm[rsi]; mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x0010e582 : add [rcx], al; mov [rbp - 0x68], rdx; mov rdx, r13; movdqu xmm0, xmm[r15 - 0x18]; mov [rbp - 0x80], 0; movups xmm[rbp - 0x78], xmm0; call rax
0x00095800 : movdqu xmm0, xmm[rsi]; mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x00099960 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; xor ch, ch; mov [rdi + 0x1e], ch; ret
0x00097cd4 : mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret
0x0004a526 : lea rdx, [rip + 0x1427fb]; movzx r12d, r12b; mov rcx, [rbp - 0x600]; mov r11, [rbp - 0x630]; movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x00097cf4 : mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret
0x00096e74 : mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x00099940 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; xor ch, ch; mov [rdi + 0x1d], ch; ret
0x0014cf82 : movdqu xmm[rdi - 0x31], xmm1; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00096e95 : mov edx, [rsi + 0x10]; mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x0004a527 : lea edx, [rip + 0x1427fb]; movzx r12d, r12b; mov rcx, [rbp - 0x600]; mov r11, [rbp - 0x630]; movsxd rax, [rdx + r12*4]; add rax, rdx; jmp rax
0x00153090 : sbb dh, bl; movq [rdi + 0x1a], mm0; lddqu xmm0, xmm[rsi + 0xa]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xa], xmm0; movdqu xmm[rdi], xmm1; ret
0x00141d07 : mov eax, [rip + 0x289573]; call [rax]; mov rax, [rip + 0x28956a]; lea rdx, [rsp + 8]; lea rsi, [rsp + 0x190]; mov rdi, rbp; call [rax + 0x18]
0x000963ff : adc [r8 - 0x6f3ceba9], r9b; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x00097cf5 : mov edx, [rsi + 0x10]; mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret
0x00099980 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; xor ch, ch; mov [rdi + 0x1f], ch; ret
0x00096e75 : mov edx, [rsi + 0x10]; mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x00138cac : add [rax], al; add [rax], al; mov [rsp + 0x30], 1; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x00138a9c : add [rax], al; add [rax], al; mov [rsp + 0x30], 3; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x00141d06 : mov rax, [rip + 0x289573]; call [rax]; mov rax, [rip + 0x28956a]; lea rdx, [rsp + 8]; lea rsi, [rsp + 0x190]; mov rdi, rbp; call [rax + 0x18]
0x00138b7c : add [rax], al; add [rax], al; mov [rsp + 0x30], 5; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x0014cff8 : movdqu xmm[rdi - 0x31], xmm0; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00097cd5 : mov edx, [rsi + 0x10]; mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret
0x00138b0c : add [rax], al; add [rax], al; mov [rsp + 0x30], 4; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x00169d90 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x32bd3]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00135b85 : add eax, [rax]; add [rbx + 0x8424ac], al; add [rax], al; add [rbx + rdx + 0x49], esi; mov edi, [rsp]; mov rax, [rdi + 0x38]; call [rax + 0x18]
0x000f6bd5 : add [rbx + 0x5d], bl; mov [rip + 0x2d6272], eax; mov eax, [rip + 0x2d6240]; pop r12; mov [rip + 0x2d6268], eax; lea rax, [rip + 0x2d6235]; ret
0x000f69f5 : add [rbx + 0x5d], bl; mov [rip + 0x2d6452], eax; mov eax, [rip + 0x2d6420]; pop r12; mov [rip + 0x2d6448], eax; lea rax, [rip + 0x2d6415]; ret
0x0014ec85 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d119]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0015308f : sbb r14b, bl; movq [rdi + 0x1a], mm0; lddqu xmm0, xmm[rsi + 0xa]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xa], xmm0; movdqu xmm[rdi], xmm1; ret
0x0014cd35 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4eea9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ef25 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ce79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c6a5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e9e5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d3b9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00044811 : mov eax, [rax + rsi*8]; mov [rbp - 0x960], r11d; mov [rbp - 0x940], r8b; mov rsi, r14; mov [rbp - 0x950], r9b; mov rdi, [rbp - 0x8d0]; call rax
0x0014d1d8 : movdqu xmm[rdi - 0x32], xmm0; mov [rdi - 0x22], r9; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0014f1c5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cbd9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c555 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f705 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c699]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e5f5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d7a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d6f3 : movdqu xmm[rdi - 0x35], xmm1; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0014daf3 : movdqu xmm[rdi - 0x37], xmm1; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0014f465 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c939]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d522 : movdqu xmm[rdi - 0x34], xmm1; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0014ca95 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f149]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c405 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bd75 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d8f3 : movdqu xmm[rdi - 0x36], xmm1; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0014e745 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d659]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c165 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bc25 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f075 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cd29]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cbe5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4eff9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cd83 : movdqu xmm[rdi - 0x38], xmm1; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x0014d969 : movdqu xmm[rdi - 0x36], xmm0; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0014d3b8 : movdqu xmm[rdi - 0x33], xmm0; mov [rdi - 0x23], r9; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0014db69 : movdqu xmm[rdi - 0x37], xmm0; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0014cdf9 : movdqu xmm[rdi - 0x38], xmm0; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x00153020 : sbb esi, ebx; movq [rdi + 0x1b], mm0; lddqu xmm0, xmm[rsi + 0xb]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xb], xmm0; movdqu xmm[rdi], xmm1; ret
0x0014d76d : movdqu xmm[rdi - 0x35], xmm0; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0014bec5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014eb35 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d269]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c945 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f299]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c015 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009bb1d : add [rsi - 0x70], ah; mov rax, [rip + 0x32e061]; lea rdx, [rip + 0xc72e2]; test [rax + 0x79], 2; lea rax, [rip + 0x13667]; cmovne rax, rdx; ret
0x0014e4a5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d8f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bad5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x50109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00044810 : mov rax, [rax + rsi*8]; mov [rbp - 0x960], r11d; mov [rbp - 0x940], r8b; mov rsi, r14; mov [rbp - 0x950], r9b; mov rdi, [rbp - 0x8d0]; call rax
0x0014f5b5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c7e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c7f5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f3e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c2b5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f315 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ca89]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014d598 : movdqu xmm[rdi - 0x34], xmm0; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0014edd5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cfc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e895 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d509]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000999a0 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; xor ch, ch; mov [rdi + 0x20], ch; ret
0x00138f71 : add [rcx - 0x75], cl; or [r9 + r9*4 - 0x12], r9b; mov rdi, r15; mov [rsp + 0xa8], 1; mov [rsp + 0xb0], 1; mov [rsp + 0xb8], 1; call [rax + 0x18]
0x0001d9c9 : adc [ebx + ecx*4 + 0x6f], cl; sbb [rbx + rcx*4 + 0x77], cl; and [rbx + rcx*4 + 0x7f], cl; sub [rcx - 0x3b76b310], cl; mov rbp, r9; nop ; jmp rdx
0x0015301f : sbb r14d, ebx; movq [rdi + 0x1b], mm0; lddqu xmm0, xmm[rsi + 0xb]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xb], xmm0; movdqu xmm[rdi], xmm1; ret
0x0012d842 : mov esi, ebp; movq xmm0, [rsp + 8]; mov [rsp + 8], rax; mov rax, [rdi + 8]; movhps xmm0, [rsp + 8]; movaps xmm[rsp + 0x10], xmm0; call [rax + 8]
0x0001d0f4 : pop rbx; andps xmm0, xmm[rip + 0x17da94]; movss xmm1, [rip + 0x17e6f0]; orps xmm0, xmm[rip + 0x17da75]; mulss xmm1, xmm0; movaps xmm0, xmm1; ret
0x0005d737 : add [rax], al; add [rax - 0x77], cl; add [r11 + 0xc083], r9b; add [rbp + 0x48247ec0], al; mov eax, [rbx + 0x98]; mov rdi, rax; call [rax + 0x20]
0x00171209 : adc [rdi + 3], rbx; vmovups zmm[r9 - 0x100], zmm4; vmovups zmm[r9 - 0xc0], zmm5; vmovups zmm[r9 - 0x80], zmm6; vmovups zmm[r9 - 0x40], zmm7; ret
0x0009a1a4 : add [rax], eax; add [rdi], cl; adc [rsi], al; movups xmm1, xmm[rsi + rdx - 0x10]; movups xmm[rdi], xmm0; movups xmm[rdi + rdx - 0x10], xmm1; ret
0x0017120a : adc [rdi + 3], ebx; vmovups zmm[r9 - 0x100], zmm4; vmovups zmm[r9 - 0xc0], zmm5; vmovups zmm[r9 - 0x80], zmm6; vmovups zmm[r9 - 0x40], zmm7; ret
0x000ee156 : add [rax], al; add bl, dh; movq mm0, [rsi + 0x60]; movups xmm[rdi + 0xe8], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x0001d9ca : adc [rbx + rcx*4 + 0x6f], cl; sbb [rbx + rcx*4 + 0x77], cl; and [rbx + rcx*4 + 0x7f], cl; sub [rcx - 0x3b76b310], cl; mov rbp, r9; nop ; jmp rdx
0x0012d841 : mov rsi, rbp; movq xmm0, [rsp + 8]; mov [rsp + 8], rax; mov rax, [rdi + 8]; movhps xmm0, [rsp + 8]; movaps xmm[rsp + 0x10], xmm0; call [rax + 8]
0x00152b88 : movq [rdi - 0x25], mm0; lddqu xmm0, xmm[rsi - 0x15]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x15], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0003bcf9 : add [rcx + rcx*4 - 0x36], cl; mov [rbp - 0x4c8], r9; mov [rbp - 0x4e8], ecx; mov [rbp - 0x4e0], r11; mov rsi, r8; mov rdi, r14; call [r15 + 0x38]
0x00097d4e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret
0x001526e8 : movq [rdi - 0x2e], mm0; lddqu xmm0, xmm[rsi - 0x1e]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1e], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152808 : movq [rdi - 0x2c], mm0; lddqu xmm0, xmm[rsi - 0x1c]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1c], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00096eae : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x00152988 : movq [rdi - 0x29], mm0; lddqu xmm0, xmm[rsi - 0x19]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x19], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00097d2e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret
0x00152a88 : movq [rdi - 0x27], mm0; lddqu xmm0, xmm[rsi - 0x17]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x17], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152a08 : movq [rdi - 0x28], mm0; lddqu xmm0, xmm[rsi - 0x18]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x18], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152908 : movq [rdi - 0x2a], mm0; lddqu xmm0, xmm[rsi - 0x1a]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1a], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0003b015 : inc [rbx - 0x76b6df18]; ror [rax - 0x68], cl; movzx eax, [rsi + rax]; lea rsi, [rip + 0x151767]; movsxd rax, [rsi + rax*4]; add rax, rdi; jmp rax
0x00152c88 : movq [rdi - 0x23], mm0; lddqu xmm0, xmm[rsi - 0x13]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x13], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152b08 : movq [rdi - 0x26], mm0; lddqu xmm0, xmm[rsi - 0x16]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x16], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0003817f : mov eax, [rip + 0x397203]; mov rax, [rax + r11*8]; mov [rbp - 0x944], r9d; mov [rbp - 0x920], r8b; mov rsi, r15; mov rdi, [rbp - 0x8a8]; call rax
0x00096eee : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x00152778 : movq [rdi - 0x2d], mm0; lddqu xmm0, xmm[rsi - 0x1d]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1d], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152c08 : movq [rdi - 0x24], mm0; lddqu xmm0, xmm[rsi - 0x14]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x14], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152d98 : movq [rdi - 0x21], mm0; lddqu xmm0, xmm[rsi - 0x11]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x11], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0003b238 : add [rax - 0x68], cl; movzx esi, [rsi + rax]; lea rax, [rip + 0x1513ca]; movsxd rax, [rax + rsi*4]; lea rsi, [rip - 0x841]; add rax, rsi; jmp rax
0x00096ece : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x001525e8 : movq [rdi - 0x30], mm0; lddqu xmm0, xmm[rsi - 0x20]; movdqu xmm[rdi - 0x20], xmm0; lddqu xmm0, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x10], xmm0; ret
0x00097d0e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret
0x00152888 : movq [rdi - 0x2b], mm0; lddqu xmm0, xmm[rsi - 0x1b]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1b], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0003817e : mov rax, [rip + 0x397203]; mov rax, [rax + r11*8]; mov [rbp - 0x944], r9d; mov [rbp - 0x920], r8b; mov rsi, r15; mov rdi, [rbp - 0x8a8]; call rax
0x00152d18 : movq [rdi - 0x22], mm0; lddqu xmm0, xmm[rsi - 0x12]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x12], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0013ce3b : sub [rsp + 0x70], ecx; mov [rsp + 0x18], rax; xor eax, eax; movaps xmm[rsp + 0x80], xmm0; pxor xmm0, xmm0; movups xmm[rsp + 0x28], xmm0; call rdx
0x00152658 : movq [rdi - 0x2f], mm0; lddqu xmm0, xmm[rsi - 0x1f]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1f], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x000ed506 : movups xmm[rdi], xmm0; movups xmm[rdi + 0x10], xmm0; movups xmm[rdi + 0x20], xmm0; movups xmm[rdi + 0x30], xmm0; movups xmm[rdi + 0x40], xmm0; ret
0x00096ead : add [rax], r8b; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x00095835 : add [rsi + 0x2e], ah; nop [rax + rax]; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x000ee153 : adc [rdi + 0xd8], eax; movdqu xmm0, xmm[rsi + 0x60]; movups xmm[rdi + 0xe8], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x000ee0c6 : adc [rsi + 0x50], eax; movdqu xmm0, xmm[rdi + 0xe8]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x0012b8d1 : sub [rsp + 0x20], eax; pxor xmm0, xmm0; movaps xmm[rsp + 0x30], xmm0; push [rip + 0x6f684]; push [rip + 0x6f676]; lea r9, [rsp + 0x2c]; call [rax]
0x0010e405 : mov eax, [rsp + 0x78]; mov [rbp - 0x78], rax; mov rax, [r12 + 0x80]; mov [rbp - 0x70], rax; mov eax, [r12 + 0x60]; mov [rbp - 0x80], eax; call rcx
0x00047cdd : lea ecx, [rip - 0x193]; mov r8, [rbp - 0x520]; movzx edx, [rax + rdx]; lea rax, [rip + 0x144e1b]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x0009a466 : int3 ; movups xmm[rdi], xmm4; movups xmm[rdi + 0x10], xmm5; movups xmm[rdi + 0x20], xmm6; movups xmm[rdi + 0x30], xmm7; movups xmm[r11], xmm8; ret
0x00047cdc : lea rcx, [rip - 0x193]; mov r8, [rbp - 0x520]; movzx edx, [rax + rdx]; lea rax, [rip + 0x144e1b]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x0010e404 : mov rax, [r12 + 0x78]; mov [rbp - 0x78], rax; mov rax, [r12 + 0x80]; mov [rbp - 0x70], rax; mov eax, [r12 + 0x60]; mov [rbp - 0x80], eax; call rcx
0x000ed7d4 : adc [rsi + 0x50], eax; movdqu xmm0, xmm[rdi + 0x68]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0x78]; movups xmm[rsi + 0x70], xmm0; ret
0x00095855 : add [rsi + 0x2e], ah; nop [rax + rax]; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x000ed824 : adc [rdi + 0x58], eax; movdqu xmm0, xmm[rsi + 0x60]; movups xmm[rdi + 0x68], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0x78], xmm0; ret
0x0001e5d4 : adc [rdi + 0x30], eax; movups xmm[rdi + 0x40], xmm0; movups xmm[rdi + 0x50], xmm0; movups xmm[rdi + 0x60], xmm0; movups xmm[rdi + 0x70], xmm0; ret
0x00138edd : add [rcx + rcx*4 - 1], cl; mov [rsp + 0xe0], rsi; mov [rsp + 0xc8], rdx; mov rsi, r13; movups xmm[rsp + 0xb8], xmm0; mov [rsp + 0xd0], 2; call rax
0x00097d0d : add [rax], r8b; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret
0x00096f0e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x00096571 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0x10]; mov cl, [rsi + 0x20]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; mov [rdi + 0x20], cl; ret
0x00003b90 : movsx ecx, [rdx + 0x19]; mov [rax + 0x4c], ecx; movsx ecx, [rdx + 0x1a]; movsx edx, [rdx + 0x1b]; mov [rax + 0x50], ecx; mov [rax + 0x54], edx; ret
0x00097d6e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret
0x00003b8f : movsx rcx, [rdx + 0x19]; mov [rax + 0x4c], ecx; movsx ecx, [rdx + 0x1a]; movsx edx, [rdx + 0x1b]; mov [rax + 0x50], ecx; mov [rax + 0x54], edx; ret
0x0009a327 : movups xmm[rdi + rdx - 0x10], xmm4; movups xmm[rdi + rdx - 0x20], xmm5; movups xmm[rdi + rdx - 0x30], xmm6; movups xmm[rdi + rdx - 0x40], xmm7; ret
0x00171443 : adc [rcx - 5], rbx; vmovups zmm[r9 - 0x100], zmm12; vmovups zmm[r9 - 0xc0], zmm13; vmovups zmm[r9 - 0x80], zmm14; vmovups zmm[r9 - 0x40], zmm15; ret
0x00171932 : adc [rdi + 3], edx; vmovups zmm[rsi - 0x100], zmm2; vmovups zmm[rsi - 0xc0], zmm2; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x00171931 : adc [rdi + 3], rdx; vmovups zmm[rsi - 0x100], zmm2; vmovups zmm[rsi - 0xc0], zmm2; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x00095875 : add [rsi + 0x2e], ah; nop [rax + rax]; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x00171a3b : adc [rsi - 5], edx; vmovups zmm[rsi - 0x100], zmm2; vmovups zmm[rsi - 0xc0], zmm2; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x0014c36b : movaps xmm[rdi - 0x10], xmm5; add rdi, rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f872]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ed3b : movaps xmm[rdi - 0x10], xmm5; add rdi, rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d062]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00171a3a : adc [rsi - 5], rdx; vmovups zmm[rsi - 0x100], zmm2; vmovups zmm[rsi - 0xc0], zmm2; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x00171444 : adc [rcx - 5], ebx; vmovups zmm[r9 - 0x100], zmm12; vmovups zmm[r9 - 0xc0], zmm13; vmovups zmm[r9 - 0x80], zmm14; vmovups zmm[r9 - 0x40], zmm15; ret
0x00138a33 : add [rax], al; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; mov [rsp + 0x30], 0; mov [rsp + 0x38], rdx; call [rax + 0x18]
0x00138d23 : add [rax], al; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; mov [rsp + 0x30], 2; mov [rsp + 0x40], rdx; call [rax + 0x18]
0x0014f5b4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c7e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000f67f5 : mov [rip + 0x2d664c], rdx; mov [rip + 0x2d664e], eax; mov eax, [rip + 0x2d661c]; mov [rip + 0x2d6646], eax; lea rax, [rip + 0x2d6613]; add rsp, 8; ret
0x000474e2 : lea rdx, [rip + 0x145727]; lea rcx, [rip + 0x660]; movzx edx, [rdx + rax]; lea rax, [rip + 0x145595]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x0014ef24 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ce79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e4a4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d8f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cbe4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4eff9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000474e3 : lea edx, [rip + 0x145727]; lea rcx, [rip + 0x660]; movzx edx, [rdx + rax]; lea rax, [rip + 0x145595]; movsxd rax, [rax + rdx*4]; add rax, rcx; jmp rax
0x0014f074 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cd29]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f464 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c939]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012b6ef : mov [rsp + 8], rbx; movhps xmm0, [rsp + 8]; movaps xmm[rsp + 0x30], xmm0; push [rip + 0x6f864]; push [rip + 0x6f856]; lea r9, [rsp + 0x2c]; call [rax]
0x000f67f6 : mov [rip + 0x2d664c], edx; mov [rip + 0x2d664e], eax; mov eax, [rip + 0x2d661c]; mov [rip + 0x2d6646], eax; lea rax, [rip + 0x2d6613]; add rsp, 8; ret
0x0014bad4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x50109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bd74 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0017170e : pop rdi; cld ; vmovups zmm[rdi - 0x140], zmm12; vmovups zmm[rdi - 0x180], zmm13; vmovups zmm[rdi - 0x1c0], zmm14; vmovups zmm[rdi - 0x200], zmm15; ret
0x0014bc24 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0012b6f0 : mov [rsp + 8], ebx; movhps xmm0, [rsp + 8]; movaps xmm[rsp + 0x30], xmm0; push [rip + 0x6f864]; push [rip + 0x6f856]; lea r9, [rsp + 0x2c]; call [rax]
0x0014c7f4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f3e9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c404 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e5f4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d7a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c6a4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014eb34 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d269]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014cd34 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4eea9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c014 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c2b4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ca94 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f149]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e894 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d509]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00136982 : add [rax], al; mov rax, [rdi + 8]; lea rdx, [rsp + 0x20]; mov esi, 4; movdqa xmm0, xmm[rip + 0x64716]; movaps xmm[rsp + 0x20], xmm0; call [rax + 0x28]
0x0014c944 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f299]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c164 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e9e4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d3b9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014edd4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cfc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014e744 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d659]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014ec84 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4d119]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014c554 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f314 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4ca89]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f1c4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4cbd9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014f704 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4c699]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0014bec4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x4fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00152b07 : movdqu xmm[rdi - 0x26], xmm0; lddqu xmm0, xmm[rsi - 0x16]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x16], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152657 : movdqu xmm[rdi - 0x2f], xmm0; lddqu xmm0, xmm[rsi - 0x1f]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1f], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152987 : movdqu xmm[rdi - 0x29], xmm0; lddqu xmm0, xmm[rsi - 0x19]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x19], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x001715aa : adc [rcx + 3], rbx; vmovups zmm[r9 + 0x100], zmm12; vmovups zmm[r9 + 0x140], zmm13; vmovups zmm[r9 + 0x180], zmm14; vmovups zmm[r9 + 0x1c0], zmm15; ret
0x0010e885 : mov [rbp - 0x68], edx; mov edx, [r13 - 0x30]; movdqu xmm0, xmm[r13 - 0x18]; mov [rbp - 0x80], edx; mov rdx, rbx; movups xmm[rbp - 0x78], xmm0; call rax
0x001715ab : adc [rcx + 3], ebx; vmovups zmm[r9 + 0x100], zmm12; vmovups zmm[r9 + 0x140], zmm13; vmovups zmm[r9 + 0x180], zmm14; vmovups zmm[r9 + 0x1c0], zmm15; ret
0x00152c07 : movdqu xmm[rdi - 0x24], xmm0; lddqu xmm0, xmm[rsi - 0x14]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x14], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152777 : movdqu xmm[rdi - 0x2d], xmm0; lddqu xmm0, xmm[rsi - 0x1d]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1d], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152887 : movdqu xmm[rdi - 0x2b], xmm0; lddqu xmm0, xmm[rsi - 0x1b]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1b], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0010e2ad : mov [rbp - 0x68], rdx; mov edx, [r13 - 0x30]; movdqu xmm0, xmm[r13 - 0x18]; mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x00152a07 : movdqu xmm[rdi - 0x28], xmm0; lddqu xmm0, xmm[rsi - 0x18]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x18], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152c87 : movdqu xmm[rdi - 0x23], xmm0; lddqu xmm0, xmm[rsi - 0x13]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x13], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152807 : movdqu xmm[rdi - 0x2c], xmm0; lddqu xmm0, xmm[rsi - 0x1c]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1c], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152907 : movdqu xmm[rdi - 0x2a], xmm0; lddqu xmm0, xmm[rsi - 0x1a]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1a], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0010e2ae : mov [rbp - 0x68], edx; mov edx, [r13 - 0x30]; movdqu xmm0, xmm[r13 - 0x18]; mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x00152a87 : movdqu xmm[rdi - 0x27], xmm0; lddqu xmm0, xmm[rsi - 0x17]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x17], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x001526e7 : movdqu xmm[rdi - 0x2e], xmm0; lddqu xmm0, xmm[rsi - 0x1e]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1e], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0010dff3 : mov [rbp - 0x68], rdx; mov edx, [rbx + 0x18]; movdqu xmm0, xmm[rbx + 0x30]; mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x00152b87 : movdqu xmm[rdi - 0x25], xmm0; lddqu xmm0, xmm[rsi - 0x15]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x15], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152d17 : movdqu xmm[rdi - 0x22], xmm0; lddqu xmm0, xmm[rsi - 0x12]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x12], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00152d97 : movdqu xmm[rdi - 0x21], xmm0; lddqu xmm0, xmm[rsi - 0x11]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x11], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00171b2f : adc [rsi + 3], rdx; vmovups zmm[rsi + 0x100], zmm2; vmovups zmm[rsi + 0x140], zmm2; vmovups zmm[rsi + 0x180], zmm2; vmovups zmm[rsi + 0x1c0], zmm2; ret
0x0010e884 : mov [rbp - 0x68], rdx; mov edx, [r13 - 0x30]; movdqu xmm0, xmm[r13 - 0x18]; mov [rbp - 0x80], edx; mov rdx, rbx; movups xmm[rbp - 0x78], xmm0; call rax
0x001525e7 : movdqu xmm[rdi - 0x30], xmm0; lddqu xmm0, xmm[rsi - 0x20]; movdqu xmm[rdi - 0x20], xmm0; lddqu xmm0, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x10], xmm0; ret
0x0010dff4 : mov [rbp - 0x68], edx; mov edx, [rbx + 0x18]; movdqu xmm0, xmm[rbx + 0x30]; mov [rbp - 0x80], edx; mov rdx, r12; movups xmm[rbp - 0x78], xmm0; call rax
0x00171b30 : adc [rsi + 3], edx; vmovups zmm[rsi + 0x100], zmm2; vmovups zmm[rsi + 0x140], zmm2; vmovups zmm[rsi + 0x180], zmm2; vmovups zmm[rsi + 0x1c0], zmm2; ret
0x0013ce3a : movaps xmm[rsp + 0x70], xmm1; mov [rsp + 0x18], rax; xor eax, eax; movaps xmm[rsp + 0x80], xmm0; pxor xmm0, xmm0; movups xmm[rsp + 0x28], xmm0; call rdx
0x00095812 : adc [rcx + 0x66c3184f], cl; nop [rax + rax]; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x0010e952 : mov edx, [rbp + 0x18]; movdqu xmm0, xmm[r13 + 0x30]; mov [rbp - 0x80], edx; lea rdx, [rdi + 0x70]; mov edi, r12d; movups xmm[rbp - 0x78], xmm0; call rax
0x0010e951 : mov edx, [r13 + 0x18]; movdqu xmm0, xmm[r13 + 0x30]; mov [rbp - 0x80], edx; lea rdx, [rdi + 0x70]; mov edi, r12d; movups xmm[rbp - 0x78], xmm0; call rax
0x0012b8d0 : movaps xmm[rsp + 0x20], xmm0; pxor xmm0, xmm0; movaps xmm[rsp + 0x30], xmm0; push [rip + 0x6f684]; push [rip + 0x6f676]; lea r9, [rsp + 0x2c]; call [rax]
0x0012cdba : sbb [rcx + 0x40c72850], cl; cmp [rax], al; add [rax], al; add [rax + 0x63], cl; sbb [r11 + 0x127703f8], r8b; lea rdx, [rip + 0x29cabb]; jmp [rdx + rax*8]
0x000ed7d3 : movups xmm[rsi + 0x50], xmm0; movdqu xmm0, xmm[rdi + 0x68]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0x78]; movups xmm[rsi + 0x70], xmm0; ret
0x0016d7b5 : add [rax], al; vmovdqu ymm0, ymm[rsi]; vmovdqu ymm1, ymm[rsi + rdx - 0x20]; vmovdqu ymm[rdi], ymm0; vmovdqu ymm[rdi + rdx - 0x20], ymm1; vzeroupper ; ret
0x0001e5d3 : movups xmm[rdi + 0x30], xmm0; movups xmm[rdi + 0x40], xmm0; movups xmm[rdi + 0x50], xmm0; movups xmm[rdi + 0x60], xmm0; movups xmm[rdi + 0x70], xmm0; ret
0x000ed823 : movups xmm[rdi + 0x58], xmm0; movdqu xmm0, xmm[rsi + 0x60]; movups xmm[rdi + 0x68], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0x78], xmm0; ret
0x000ee0c5 : movups xmm[rsi + 0x50], xmm0; movdqu xmm0, xmm[rdi + 0xe8]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x000ee152 : movups xmm[rdi + 0xd8], xmm0; movdqu xmm0, xmm[rsi + 0x60]; movups xmm[rdi + 0xe8], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x0012cdb9 : sbb [r9 + 0x40c72850], r9b; cmp [rax], al; add [rax], al; add [rax + 0x63], cl; sbb [r11 + 0x127703f8], r8b; lea rdx, [rip + 0x29cabb]; jmp [rdx + rax*8]
0x00096570 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; mov cl, [rsi + 0x20]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; mov [rdi + 0x20], cl; ret
0x0009a326 : xor [rdi], cl; adc [rdi + rdx - 0x10], esp; movups xmm[rdi + rdx - 0x20], xmm5; movups xmm[rdi + rdx - 0x30], xmm6; movups xmm[rdi + rdx - 0x40], xmm7; ret
0x00138a2d : mov [rsp + 0x10], 0; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; mov [rsp + 0x30], 0; mov [rsp + 0x38], rdx; call [rax + 0x18]
0x0017170d : adc [rdi - 4], ebx; vmovups zmm[rdi - 0x140], zmm12; vmovups zmm[rdi - 0x180], zmm13; vmovups zmm[rdi - 0x1c0], zmm14; vmovups zmm[rdi - 0x200], zmm15; ret
0x0017170c : adc [rdi - 4], rbx; vmovups zmm[rdi - 0x140], zmm12; vmovups zmm[rdi - 0x180], zmm13; vmovups zmm[rdi - 0x1c0], zmm14; vmovups zmm[rdi - 0x200], zmm15; ret
0x00138d1d : mov [rsp + 0x10], 0; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; mov [rsp + 0x30], 2; mov [rsp + 0x40], rdx; call [rax + 0x18]
0x00138ca4 : movq mm0, [rdi + 0x28]; mov [rsp + 0x10], 0; mov [rsp + 0x30], 1; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x0009a349 : adc [rsi + rdx - 0x20], bl; movups xmm[rdi], xmm0; movups xmm[rdi + 0x10], xmm1; movups xmm[rdi + rdx - 0x10], xmm2; movups xmm[rdi + rdx - 0x20], xmm3; ret
0x00138b04 : movq mm0, [rdi + 0x28]; mov [rsp + 0x10], 0; mov [rsp + 0x30], 4; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x00138a94 : movq mm0, [rdi + 0x28]; mov [rsp + 0x10], 0; mov [rsp + 0x30], 3; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x00138b74 : movq mm0, [rdi + 0x28]; mov [rsp + 0x10], 0; mov [rsp + 0x30], 5; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x000ed504 : xor eax, eax; movups xmm[rdi], xmm0; movups xmm[rdi + 0x10], xmm0; movups xmm[rdi + 0x20], xmm0; movups xmm[rdi + 0x30], xmm0; movups xmm[rdi + 0x40], xmm0; ret
0x0010ea24 : mov [rbp - 0x68], edx; mov edx, [r13 + 0x18]; movdqu xmm0, xmm[r13 + 0x30]; mov [rbp - 0x80], edx; lea rdx, [rcx + 0x70]; movups xmm[rbp - 0x78], xmm0; call rax
0x0010ea23 : mov [rbp - 0x68], rdx; mov edx, [r13 + 0x18]; movdqu xmm0, xmm[r13 + 0x30]; mov [rbp - 0x80], edx; lea rdx, [rcx + 0x70]; movups xmm[rbp - 0x78], xmm0; call rax
0x00171a91 : add [rax + 0x39], cl; div [rdx - 0x27]; vmovups zmm[rsi], zmm2; vmovups zmm[rsi + 0x40], zmm2; vmovups zmm[rsi + 0x80], zmm2; vmovups zmm[rsi + 0xc0], zmm2; ret
0x000ee0c4 : add [rdi], cl; adc [rsi + 0x50], eax; movdqu xmm0, xmm[rdi + 0xe8]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x00171b98 : add [rax], al; vmovdqu64 zmm0, zmm[rsi]; vmovdqu64 zmm1, zmm[rsi + rdx - 0x40]; vmovdqu64 zmm[rdi], zmm0; vmovdqu64 zmm[rdi + rdx - 0x40], zmm1; vzeroupper ; ret
0x000ed7d1 : pop r8; movups xmm[rsi + 0x50], xmm0; movdqu xmm0, xmm[rdi + 0x68]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0x78]; movups xmm[rsi + 0x70], xmm0; ret
0x00138a93 : movdqu xmm0, xmm[rdi + 0x28]; mov [rsp + 0x10], 0; mov [rsp + 0x30], 3; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x00138ca3 : movdqu xmm0, xmm[rdi + 0x28]; mov [rsp + 0x10], 0; mov [rsp + 0x30], 1; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x000ed7d2 : pop rax; movups xmm[rsi + 0x50], xmm0; movdqu xmm0, xmm[rdi + 0x68]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0x78]; movups xmm[rsi + 0x70], xmm0; ret
0x00138b73 : movdqu xmm0, xmm[rdi + 0x28]; mov [rsp + 0x10], 0; mov [rsp + 0x30], 5; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x00138b03 : movdqu xmm0, xmm[rdi + 0x28]; mov [rsp + 0x10], 0; mov [rsp + 0x30], 4; mov [rsp + 0x28], rax; mov rax, [rdi + 8]; movups xmm[rsp + 0x18], xmm0; call [rax + 0x18]
0x000ee151 : push rax; movups xmm[rdi + 0xd8], xmm0; movdqu xmm0, xmm[rsi + 0x60]; movups xmm[rdi + 0xe8], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x000ed822 : push rax; movups xmm[rdi + 0x58], xmm0; movdqu xmm0, xmm[rsi + 0x60]; movups xmm[rdi + 0x68], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0x78], xmm0; ret
0x0009a348 : movups xmm3, xmm[rsi + rdx - 0x20]; movups xmm[rdi], xmm0; movups xmm[rdi + 0x10], xmm1; movups xmm[rdi + rdx - 0x10], xmm2; movups xmm[rdi + rdx - 0x20], xmm3; ret
0x0009a325 : pop rdi; xor [rdi], cl; adc [rdi + rdx - 0x10], esp; movups xmm[rdi + rdx - 0x20], xmm5; movups xmm[rdi + rdx - 0x30], xmm6; movups xmm[rdi + rdx - 0x40], xmm7; ret
0x0016dcb9 : add [rdi + 0x19], dh; vmovdqu ymm[rdi], ymm0; vmovdqu ymm[rdi + 0x20], ymm0; vmovdqu ymm[rdi + rdx - 0x20], ymm0; vmovdqu ymm[rdi + rdx - 0x40], ymm0; vzeroupper ; ret
0x000ee0c3 : add [rax], al; movups xmm[rsi + 0x50], xmm0; movdqu xmm0, xmm[rdi + 0xe8]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x00171240 : adc [rcx - 2], dl; vmovups zmm3, zmm[rcx - 0x40]; vmovups zmm[rdi], zmm0; vmovups zmm[rdi + 0x40], zmm1; vmovups zmm[r9 - 0x80], zmm2; vmovups zmm[r9 - 0x40], zmm3; ret
0x0009a324 : adc [rdi + 0x30], ebx; movups xmm[rdi + rdx - 0x10], xmm4; movups xmm[rdi + rdx - 0x20], xmm5; movups xmm[rdi + rdx - 0x30], xmm6; movups xmm[rdi + rdx - 0x40], xmm7; ret
0x001721e6 : add [rdi + 0x21], dh; vmovdqu64 zmm[rdi], zmm0; vmovdqu64 zmm[rdi + 0x40], zmm0; vmovdqu64 zmm[rdi + rdx - 0x40], zmm0; vmovdqu64 zmm[rdi + rdx - 0x80], zmm0; vzeroupper ; ret
0x00171203 : adc [rdi + 2], edx; vmovups zmm[rdi + 0xc0], zmm3; vmovups zmm[r9 - 0x100], zmm4; vmovups zmm[r9 - 0xc0], zmm5; vmovups zmm[r9 - 0x80], zmm6; vmovups zmm[r9 - 0x40], zmm7; ret
0x00171202 : adc [rdi + 2], rdx; vmovups zmm[rdi + 0xc0], zmm3; vmovups zmm[r9 - 0x100], zmm4; vmovups zmm[r9 - 0xc0], zmm5; vmovups zmm[r9 - 0x80], zmm6; vmovups zmm[r9 - 0x40], zmm7; ret
0x0001e5d0 : adc [rdi + 0x20], eax; movups xmm[rdi + 0x30], xmm0; movups xmm[rdi + 0x40], xmm0; movups xmm[rdi + 0x50], xmm0; movups xmm[rdi + 0x60], xmm0; movups xmm[rdi + 0x70], xmm0; ret
0x000ee14e : movq mm0, [rsi + 0x50]; movups xmm[rdi + 0xd8], xmm0; movdqu xmm0, xmm[rsi + 0x60]; movups xmm[rdi + 0xe8], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x000ee0be : movq mm0, [rdi + 0xd8]; movups xmm[rsi + 0x50], xmm0; movdqu xmm0, xmm[rdi + 0xe8]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x0009a323 : movups xmm[rdi + 0x30], xmm3; movups xmm[rdi + rdx - 0x10], xmm4; movups xmm[rdi + rdx - 0x20], xmm5; movups xmm[rdi + rdx - 0x30], xmm6; movups xmm[rdi + rdx - 0x40], xmm7; ret
0x000ed7cf : movq mm0, [rdi + 0x58]; movups xmm[rsi + 0x50], xmm0; movdqu xmm0, xmm[rdi + 0x68]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0x78]; movups xmm[rsi + 0x70], xmm0; ret
0x000ed81f : movq mm0, [rsi + 0x50]; movups xmm[rdi + 0x58], xmm0; movdqu xmm0, xmm[rsi + 0x60]; movups xmm[rdi + 0x68], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0x78], xmm0; ret
0x0017192a : adc [rdi + 2], rdx; vmovups zmm[rdi + 0xc0], zmm2; vmovups zmm[rsi - 0x100], zmm2; vmovups zmm[rsi - 0xc0], zmm2; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x0017192b : adc [rdi + 2], edx; vmovups zmm[rdi + 0xc0], zmm2; vmovups zmm[rsi - 0x100], zmm2; vmovups zmm[rsi - 0xc0], zmm2; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x0017143c : adc [rcx - 6], rdx; vmovups zmm[r9 - 0x140], zmm11; vmovups zmm[r9 - 0x100], zmm12; vmovups zmm[r9 - 0xc0], zmm13; vmovups zmm[r9 - 0x80], zmm14; vmovups zmm[r9 - 0x40], zmm15; ret
0x00171a34 : adc [rsi - 6], edx; vmovups zmm[rsi - 0x140], zmm2; vmovups zmm[rsi - 0x100], zmm2; vmovups zmm[rsi - 0xc0], zmm2; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x0017143d : adc [rcx - 6], edx; vmovups zmm[r9 - 0x140], zmm11; vmovups zmm[r9 - 0x100], zmm12; vmovups zmm[r9 - 0xc0], zmm13; vmovups zmm[r9 - 0x80], zmm14; vmovups zmm[r9 - 0x40], zmm15; ret
0x00171a33 : adc [rsi - 6], rdx; vmovups zmm[rsi - 0x140], zmm2; vmovups zmm[rsi - 0x100], zmm2; vmovups zmm[rsi - 0xc0], zmm2; vmovups zmm[rsi - 0x80], zmm2; vmovups zmm[rsi - 0x40], zmm2; ret
0x00171b29 : adc [rsi + 2], edx; vmovups zmm[rsi + 0xc0], zmm2; vmovups zmm[rsi + 0x100], zmm2; vmovups zmm[rsi + 0x140], zmm2; vmovups zmm[rsi + 0x180], zmm2; vmovups zmm[rsi + 0x1c0], zmm2; ret
0x001715a3 : adc [rcx + 2], rdx; vmovups zmm[r9 + 0xc0], zmm11; vmovups zmm[r9 + 0x100], zmm12; vmovups zmm[r9 + 0x140], zmm13; vmovups zmm[r9 + 0x180], zmm14; vmovups zmm[r9 + 0x1c0], zmm15; ret
0x001715a4 : adc [rcx + 2], edx; vmovups zmm[r9 + 0xc0], zmm11; vmovups zmm[r9 + 0x100], zmm12; vmovups zmm[r9 + 0x140], zmm13; vmovups zmm[r9 + 0x180], zmm14; vmovups zmm[r9 + 0x1c0], zmm15; ret
0x00171b28 : adc [rsi + 2], rdx; vmovups zmm[rsi + 0xc0], zmm2; vmovups zmm[rsi + 0x100], zmm2; vmovups zmm[rsi + 0x140], zmm2; vmovups zmm[rsi + 0x180], zmm2; vmovups zmm[rsi + 0x1c0], zmm2; ret
0x000ee14d : movdqu xmm0, xmm[rsi + 0x50]; movups xmm[rdi + 0xd8], xmm0; movdqu xmm0, xmm[rsi + 0x60]; movups xmm[rdi + 0xe8], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0xf8], xmm0; ret
0x0001e5cf : movups xmm[rdi + 0x20], xmm0; movups xmm[rdi + 0x30], xmm0; movups xmm[rdi + 0x40], xmm0; movups xmm[rdi + 0x50], xmm0; movups xmm[rdi + 0x60], xmm0; movups xmm[rdi + 0x70], xmm0; ret
0x000ee0bd : movdqu xmm0, xmm[rdi + 0xd8]; movups xmm[rsi + 0x50], xmm0; movdqu xmm0, xmm[rdi + 0xe8]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0xf8]; movups xmm[rsi + 0x70], xmm0; ret
0x000ed7ce : movdqu xmm0, xmm[rdi + 0x58]; movups xmm[rsi + 0x50], xmm0; movdqu xmm0, xmm[rdi + 0x68]; movups xmm[rsi + 0x60], xmm0; movdqu xmm0, xmm[rdi + 0x78]; movups xmm[rsi + 0x70], xmm0; ret
0x000ed81e : movdqu xmm0, xmm[rsi + 0x50]; movups xmm[rdi + 0x58], xmm0; movdqu xmm0, xmm[rsi + 0x60]; movups xmm[rdi + 0x68], xmm0; movdqu xmm0, xmm[rsi + 0x70]; movups xmm[rdi + 0x78], xmm0; ret
0x00171706 : adc [rdi - 3], edx; vmovups zmm[rdi - 0x100], zmm11; vmovups zmm[rdi - 0x140], zmm12; vmovups zmm[rdi - 0x180], zmm13; vmovups zmm[rdi - 0x1c0], zmm14; vmovups zmm[rdi - 0x200], zmm15; ret
0x00171705 : adc [rdi - 3], rdx; vmovups zmm[rdi - 0x100], zmm11; vmovups zmm[rdi - 0x140], zmm12; vmovups zmm[rdi - 0x180], zmm13; vmovups zmm[rdi - 0x1c0], zmm14; vmovups zmm[rdi - 0x200], zmm15; ret
0x0009a344 : adc [rsi + rdx - 0x10], dl; movups xmm3, xmm[rsi + rdx - 0x20]; movups xmm[rdi], xmm0; movups xmm[rdi + 0x10], xmm1; movups xmm[rdi + rdx - 0x10], xmm2; movups xmm[rdi + rdx - 0x20], xmm3; ret
0x0009a320 : adc [rdi + 0x20], edx; movups xmm[rdi + 0x30], xmm3; movups xmm[rdi + rdx - 0x10], xmm4; movups xmm[rdi + rdx - 0x20], xmm5; movups xmm[rdi + rdx - 0x30], xmm6; movups xmm[rdi + rdx - 0x40], xmm7; ret
0x0009a343 : movups xmm2, xmm[rsi + rdx - 0x10]; movups xmm3, xmm[rsi + rdx - 0x20]; movups xmm[rdi], xmm0; movups xmm[rdi + 0x10], xmm1; movups xmm[rdi + rdx - 0x10], xmm2; movups xmm[rdi + rdx - 0x20], xmm3; ret
0x0009a31f : movups xmm[rdi + 0x20], xmm2; movups xmm[rdi + 0x30], xmm3; movups xmm[rdi + rdx - 0x10], xmm4; movups xmm[rdi + rdx - 0x20], xmm5; movups xmm[rdi + rdx - 0x30], xmm6; movups xmm[rdi + rdx - 0x40], xmm7; ret
