


Gadgets
=======


0x0000000140008782: adc al, 0x24; mov r11, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x0000000140002efa: adc al, 0x48; add esp, 0x28; ret; 
0x0000000140008d96: adc al, 0xca; call 0x1ee8; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140001e46: adc al, ch; fsubr qword ptr [rip - 0x45f10000]; imul ebx, dword ptr [rax], 0xf; add rsp, 0x20; pop rbx; ret; 
0x00000001400082fc: adc byte ptr [r11 + 0x48000863], al; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x00000001400082f8: adc byte ptr [r8 - 0x75], cl; adc byte ptr [r11 + 0x48000863], al; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x00000001400082f9: adc byte ptr [rax - 0x75], cl; adc byte ptr [r11 + 0x48000863], al; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x00000001400017ed: adc byte ptr [rax - 0x7d], cl; rol dword ptr [rax + 0x48], 0xf; ret; 
0x0000000140006151: adc byte ptr [rax], al; add byte ptr [rax + 0x3b], cl; ret 0xf48; 
0x000000014000200b: adc byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x00000001400082fd: adc byte ptr [rbx + 0x48000863], al; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140003379: adc byte ptr [rbx - 0xe8de908], al; xor eax, eax; ret; 
0x0000000140007603: adc byte ptr [rcx + 0x5f], al; pop r14; pop r13; pop r12; pop rbp; ret; 
0x000000014000769c: adc byte ptr [rcx - 0x75], cl; jae 0x76b9; mov rsp, r11; pop rdi; ret; 
0x0000000140005b5f: adc byte ptr [rdx + rdx*8 - 0x97bf58c], al; jne 0x5b21; lea rax, [rcx + rax - 1]; ret; 
0x0000000140008a8c: adc byte ptr [rdx + rdx*8 - 0x97bfb8c], al; jne 0x8a20; xor eax, eax; ret; 
0x0000000140008c38: adc byte ptr [rdx + rdx*8 - 0x97bfb8c], al; jne 0x8bc9; xor rax, rax; ret; 
0x0000000140007602: adc byte ptr gs:[rcx + 0x5f], al; pop r14; pop r13; pop r12; pop rbp; ret; 
0x00000001400017e3: adc dword ptr [rax + 0xf], ecx; ret; 
0x0000000140001792: adc dword ptr [rax - 1], ecx; ror dword ptr [rcx - 1], 0xc8; jne 0x1791; ret; 
0x0000000140001e45: adc dword ptr [rax], edx; call 0x4c28; bts dword ptr [rbx + 0x18], 0xf; add rsp, 0x20; pop rbx; ret; 
0x0000000140002e9b: adc dword ptr [rdi + 6], esi; mov eax, 0xd; ret; 
0x0000000140008dd9: adc eax, 0x28a; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140005dd8: adc eax, 0x329b; mov qword ptr [rip + 0x86bc], rax; add rsp, 0x28; ret; 
0x00000001400043c7: adc eax, 0x4d64; mov eax, 1; add rsp, 0x28; ret; 
0x0000000140002f98: adc eax, 0x6093; xor eax, eax; add rsp, 0x28; ret; 
0x0000000140001ae5: adc eax, 0x7536; add rsp, 0x88; ret; 
0x00000001400089d4: adc eax, 0x817; add rsp, 0x28; ret; 
0x00000001400089aa: adc eax, 0x859; mov qword ptr [rip + 0x4b12], rax; add rsp, 0x48; ret; 
0x0000000140003161: adc eax, 0xbe02; xor eax, eax; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140008592: adc eax, 0xc61; test eax, eax; je 0x8574; movzx eax, word ptr [rsp + 0x40]; add rsp, 0x38; ret; 
0x00000001400064fe: adc ecx, dword ptr [rcx - 0x7d]; ret 0x6602; 
0x0000000140003581: adc edi, edi; ret 0xff49; 
0x0000000140001e44: adc qword ptr [rax], r10; call 0x4c28; bts dword ptr [rbx + 0x18], 0xf; add rsp, 0x20; pop rbx; ret; 
0x000000014000656d: add ah, byte ptr [rsi - 0x7b]; sal byte ptr [rbp - 0xc], cl; sub rax, rcx; sar rax, 1; dec rax; ret; 
0x0000000140002f80: add ah, cl; xor eax, eax; add rsp, 0x28; ret; 
0x00000001400083e1: add al, 0; add byte ptr [rax + 0x3b], cl; ret; 
0x0000000140001ade: add al, 0; ror byte ptr [rax - 0x75], 0xc8; call qword ptr [rip + 0x7536]; add rsp, 0x88; ret; 
0x0000000140002ed6: add al, 0x48; add eax, 0x10; add rsp, 0x28; ret; 
0x0000000140002ef6: add al, 0x48; add eax, 0x14; add rsp, 0x28; ret; 
0x0000000140008a90: add al, 0x84; div byte ptr [rbp - 0x75]; xor eax, eax; ret; 
0x0000000140008c3c: add al, 0x84; div byte ptr [rbp - 0x78]; xor rax, rax; ret; 
0x00000001400051e8: add al, 0x8b; ret; 
0x0000000140002fd2: add al, 0x8b; retf; call rax; add rsp, 0x20; pop rbx; ret; 
0x0000000140001adf: add al, al; mov rcx, rax; call qword ptr [rip + 0x7536]; add rsp, 0x88; ret; 
0x0000000140008ddb: add al, byte ptr [rax]; add byte ptr [rax + 0x20c48348], dl; pop rbp; ret; 
0x0000000140008d26: add al, ch; cld; mov ebp, 0x4890ffff; add esp, 0x20; pop rbp; ret; 
0x0000000140008ca9: add al, ch; cmp dword ptr [rdx + 0x4890ffff], edx; add esp, 0x20; pop rbp; ret; 
0x0000000140008dba: add al, ch; push -0x6f000043; add rsp, 0x20; pop rbp; ret; 
0x0000000140005d9d: add al, ch; sub eax, 0x48fffffe; add esp, 0x38; ret; 
0x00000001400016ec: add al, ch; test byte ptr [rdi], 0; add byte ptr [rbx - 0x3b7cb739], cl; sub byte ptr [rdi + 0x5b], bl; ret; 
0x000000014000565f: add al, dh; add dword ptr [rax + 0x160], r9d; mov rax, rcx; ret; 
0x00000001400055bf: add al, dh; inc dword ptr [rax + 0x160]; ret; 
0x0000000140008dd7: add bh, bh; adc eax, 0x28a; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140005fcb: add bh, bh; ret 0x5489; 
0x0000000140005472: add bh, bh; ret 0xe1eb; 
0x0000000140005451: add bh, bh; ret 0xe2eb; 
0x0000000140004f3e: add bh, bh; ret 0xff48; 
0x0000000140004839: add bh, bh; ret; 
0x0000000140003070: add bh, bh; ror byte ptr [rax - 0x7d], 1; ret; 
0x00000001400030aa: add bh, bh; ror dword ptr [rax - 0x7d], 1; ret; 
0x0000000140003162: add bh, byte ptr [rsi - 0x3fcd0000]; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140002ed4: add bl, ch; add al, 0x48; add eax, 0x10; add rsp, 0x28; ret; 
0x0000000140002ef4: add bl, ch; add al, 0x48; add eax, 0x14; add rsp, 0x28; ret; 
0x00000001400065e4: add bl, ch; ret 0xc033; 
0x0000000140003ab9: add byte ptr [r8 - 1], r9b; ret; 
0x00000001400089b3: add byte ptr [r8], al; add rsp, 0x48; ret; 
0x00000001400044c9: add byte ptr [r8], r8b; add rsp, 0x4d8; ret; 
0x00000001400043c9: add byte ptr [r8], r8b; mov eax, 1; add rsp, 0x28; ret; 
0x0000000140003ab5: add byte ptr [r9 - 1], r8b; add byte ptr [r8 - 1], r9b; ret; 
0x0000000140008ddd: add byte ptr [rax + 0x20c48348], dl; pop rbp; ret; 
0x0000000140006153: add byte ptr [rax + 0x3b], cl; ret 0xf48; 
0x00000001400083e3: add byte ptr [rax + 0x3b], cl; ret; 
0x00000001400089a2: add byte ptr [rax + 0x44], al; mov dword ptr [rsp + 0x20], eax; call qword ptr [rip + 0x859]; mov qword ptr [rip + 0x4b12], rax; add rsp, 0x48; ret; 
0x00000001400017df: add byte ptr [rax + 0xf], cl; ret; 
0x00000001400043cb: add byte ptr [rax + 1], bh; add rsp, 0x28; ret; 
0x00000001400011ca: add byte ptr [rax - 0x3914f5fc], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000140001984: add byte ptr [rax - 0x74b73875], dl; pop rsp; and al, 0x48; add rsp, 0x30; pop rdi; ret; 
0x00000001400036e5: add byte ptr [rax - 0x75], cl; and dword ptr [rax + 0x48000000], 0xffffff83; ret 0x4c10; 
0x00000001400083db: add byte ptr [rax - 0x75], cl; fsubr st(0); pop rax; add al, 0; add byte ptr [rax + 0x3b], cl; ret; 
0x0000000140004111: add byte ptr [rax - 0x75], cl; pop rsp; and al, 0x30; add rsp, 0x20; pop rdi; ret; 
0x00000001400042ef: add byte ptr [rax - 0x75], cl; pop rsp; and al, 0x38; add rsp, 0x20; pop rdi; ret; 
0x000000014000447f: add byte ptr [rax - 0x75], cl; pop rsp; and al, 0x40; add rsp, 0x20; pop rdi; ret; 
0x000000014000886f: add byte ptr [rax - 0x75], cl; ret 0xe283; 
0x0000000140004195: add byte ptr [rax - 0x75], cl; ret; 
0x00000001400089ae: add byte ptr [rax - 0x77], cl; add eax, 0x4b12; add rsp, 0x48; ret; 
0x0000000140005ddc: add byte ptr [rax - 0x77], cl; add eax, 0x86bc; add rsp, 0x28; ret; 
0x0000000140005bb6: add byte ptr [rax - 0x77], cl; add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000140005df2: add byte ptr [rax - 0x77], cl; or eax, 0x86b6; mov qword ptr [rip + 0x86b7], rcx; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005df9: add byte ptr [rax - 0x77], cl; or eax, 0x86b7; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005e00: add byte ptr [rax - 0x77], cl; or eax, 0x86b8; ret; 
0x0000000140002003: add byte ptr [rax - 0x7d], cl; and eax, dword ptr [rax]; and qword ptr [rbx + 0x10], 0; add rsp, 0x20; pop rbx; ret; 
0x0000000140003d7e: add byte ptr [rax - 0x7d], cl; ret 0x4858; 
0x00000001400036ec: add byte ptr [rax - 0x7d], cl; ret 0x4c10; 
0x0000000140004ae4: add byte ptr [rax - 0x7d], cl; ret; 
0x0000000140003aba: add byte ptr [rax - 1], cl; ret; 
0x0000000140008ca7: add byte ptr [rax], al; add al, ch; cmp dword ptr [rdx + 0x4890ffff], edx; add esp, 0x20; pop rbp; ret; 
0x0000000140008db8: add byte ptr [rax], al; add al, ch; push -0x6f000043; add rsp, 0x20; pop rbp; ret; 
0x0000000140004f3c: add byte ptr [rax], al; add bh, bh; ret 0xff48; 
0x00000001400065e2: add byte ptr [rax], al; add bl, ch; ret 0xc033; 
0x00000001400036e3: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and dword ptr [rax + 0x48000000], 0xffffff83; ret 0x4c10; 
0x00000001400036ea: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4c10; 
0x0000000140006c4d: add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret; 
0x000000014000450c: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000140001369: add byte ptr [rax], al; add byte ptr [rbx], al; ret 0xff25; 
0x0000000140001370: add byte ptr [rax], al; add byte ptr [rbx], ch; ret 0x9848; 
0x000000014000248b: add byte ptr [rax], al; add byte ptr [rbx], ch; ret 0xf8d1; 
0x000000014000186a: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x0000000140005a83: add byte ptr [rax], al; add ch, bh; add rsp, 0x40; pop rbx; ret; 
0x000000014000552f: add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; add rsp, 0x28; ret; 
0x0000000140001098: add byte ptr [rax], al; add rsp, 0x1e8; ret; 
0x000000014000160a: add byte ptr [rax], al; add rsp, 0x28; ret; 
0x00000001400013f7: add byte ptr [rax], al; add rsp, 0x298; ret; 
0x00000001400089b4: add byte ptr [rax], al; add rsp, 0x48; ret; 
0x00000001400044ca: add byte ptr [rax], al; add rsp, 0x4d8; ret; 
0x0000000140001162: add byte ptr [rax], al; add rsp, 0x58; ret; 
0x0000000140005c96: add byte ptr [rax], al; add rsp, 0x60; pop rdi; pop rsi; pop rbp; ret; 
0x0000000140001589: add byte ptr [rax], al; add rsp, 0x78; ret; 
0x0000000140001ae8: add byte ptr [rax], al; add rsp, 0x88; ret; 
0x0000000140001e4a: add byte ptr [rax], al; bts dword ptr [rbx + 0x18], 0xf; add rsp, 0x20; pop rbx; ret; 
0x0000000140008ca8: add byte ptr [rax], al; call 0x1ee8; nop; add rsp, 0x20; pop rbp; ret; 
0x000000014000661d: add byte ptr [rax], al; call 0x2e58; or eax, 0xffffffff; add rsp, 0x28; ret; 
0x000000014000836a: add byte ptr [rax], al; call 0x2e58; or rax, 0xffffffffffffffff; add rsp, 0x28; ret; 
0x0000000140004cbd: add byte ptr [rax], al; call 0x2e58; xor eax, eax; add rsp, 0x28; ret; 
0x0000000140003627: add byte ptr [rax], al; call 0x3390; add rsp, 0x28; ret; 
0x000000014000361d: add byte ptr [rax], al; call 0x3390; mov ecx, 0xff; call 0x3390; add rsp, 0x28; ret; 
0x0000000140007fb5: add byte ptr [rax], al; call 0x4770; add rsp, 0x20; pop rbx; ret; 
0x0000000140008cea: add byte ptr [rax], al; call 0x4b28; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140008dd6: add byte ptr [rax], al; call qword ptr [rip + 0x28a]; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140002ead: add byte ptr [rax], al; cmp ecx, 0xe; cmovbe eax, r8d; ret; 
0x0000000140004526: add byte ptr [rax], al; cmp word ptr [rax], cx; je 0x4530; xor eax, eax; ret; 
0x0000000140008021: add byte ptr [rax], al; je 0x802a; call 0x4770; add rsp, 0x20; pop rbx; ret; 
0x000000014000812b: add byte ptr [rax], al; je 0x8134; call 0x4770; add rsp, 0x20; pop rbx; ret; 
0x000000014000565e: add byte ptr [rax], al; lock add dword ptr [rax + 0x160], r9d; mov rax, rcx; ret; 
0x00000001400055be: add byte ptr [rax], al; lock inc dword ptr [rax + 0x160]; ret; 
0x00000001400089a1: add byte ptr [rax], al; mov dword ptr [rsp + 0x20], r8d; call qword ptr [rip + 0x859]; mov qword ptr [rip + 0x4b12], rax; add rsp, 0x48; ret; 
0x00000001400043ca: add byte ptr [rax], al; mov eax, 1; add rsp, 0x28; ret; 
0x00000001400016f0: add byte ptr [rax], al; mov eax, edi; add rsp, 0x28; pop rdi; pop rbx; ret; 
0x0000000140001ada: add byte ptr [rax], al; mov edx, 0xc0000409; mov rcx, rax; call qword ptr [rip + 0x7536]; add rsp, 0x88; ret; 
0x00000001400089ad: add byte ptr [rax], al; mov qword ptr [rip + 0x4b12], rax; add rsp, 0x48; ret; 
0x0000000140005df1: add byte ptr [rax], al; mov qword ptr [rip + 0x86b6], rcx; mov qword ptr [rip + 0x86b7], rcx; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005df8: add byte ptr [rax], al; mov qword ptr [rip + 0x86b7], rcx; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005dff: add byte ptr [rax], al; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005ddb: add byte ptr [rax], al; mov qword ptr [rip + 0x86bc], rax; add rsp, 0x28; ret; 
0x0000000140005666: add byte ptr [rax], al; mov rax, rcx; ret; 
0x0000000140004110: add byte ptr [rax], al; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x00000001400042ee: add byte ptr [rax], al; mov rbx, qword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x000000014000447e: add byte ptr [rax], al; mov rbx, qword ptr [rsp + 0x40]; add rsp, 0x20; pop rdi; ret; 
0x0000000140001088: add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x1d8]; xor rcx, rsp; call 0x1630; add rsp, 0x1e8; ret; 
0x00000001400013e7: add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x280]; xor rcx, rsp; call 0x1630; add rsp, 0x298; ret; 
0x0000000140008ddc: add byte ptr [rax], al; nop; add rsp, 0x20; pop rbp; ret; 
0x000000014000109f: add byte ptr [rax], al; ret; 
0x000000014000170e: add byte ptr [rax], al; sete al; ret; 
0x0000000140005a84: add byte ptr [rax], al; std; add rsp, 0x40; pop rbx; ret; 
0x0000000140008595: add byte ptr [rax], al; test eax, eax; je 0x8574; movzx eax, word ptr [rsp + 0x40]; add rsp, 0x38; ret; 
0x0000000140002f9b: add byte ptr [rax], al; xor eax, eax; add rsp, 0x28; ret; 
0x0000000140003164: add byte ptr [rax], al; xor eax, eax; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140001701: add byte ptr [rax], al; xor eax, eax; or rcx, 1; cmp qword ptr [rip + 0xbdd8], rcx; sete al; ret; 
0x00000001400043c2: add byte ptr [rax], al; xor edx, edx; call qword ptr [rip + 0x4d64]; mov eax, 1; add rsp, 0x28; ret; 
0x0000000140001090: add byte ptr [rax], al; xor rcx, rsp; call 0x1630; add rsp, 0x1e8; ret; 
0x00000001400013ef: add byte ptr [rax], al; xor rcx, rsp; call 0x1630; add rsp, 0x298; ret; 
0x000000014000877a: add byte ptr [rbp + 0x3b], cl; sal dword ptr [rbp - 0x10], cl; mov r10, qword ptr [rsp]; mov r11, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x0000000140008596: add byte ptr [rbp + 0xfd974c0], al; mov bh, 0x44; and al, 0x40; add rsp, 0x38; ret; 
0x00000001400080a5: add byte ptr [rbp + rax - 0x18], dh; ret; 
0x0000000140004a66: add byte ptr [rbp - 0xd98b40], al; ret; 
0x0000000140001152: add byte ptr [rbx + 0x48282444], cl; mov ecx, dword ptr [rsp + 0x48]; xor rcx, rsp; call 0x1630; add rsp, 0x58; ret; 
0x00000001400069b4: add byte ptr [rbx + 0x5c8b48c7], cl; and al, 0x30; add rsp, 0x20; pop rdi; ret; 
0x0000000140004847: add byte ptr [rbx + 0x5c8b48c7], cl; and al, 0x40; mov rsi, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rdi; ret; 
0x00000001400016f1: add byte ptr [rbx - 0x3b7cb739], cl; sub byte ptr [rdi + 0x5b], bl; ret; 
0x000000014000136b: add byte ptr [rbx], al; ret 0xff25; 
0x0000000140001372: add byte ptr [rbx], ch; ret 0x9848; 
0x000000014000248d: add byte ptr [rbx], ch; ret 0xf8d1; 
0x0000000140002771: add byte ptr [rbx], ch; ret; 
0x0000000140003165: add byte ptr [rbx], dh; ror byte ptr [rax - 0x75], 0x5c; and al, 0x30; add rsp, 0x20; pop rdi; ret; 
0x0000000140001702: add byte ptr [rbx], dh; ror byte ptr [rax - 0x7d], 0xc9; add dword ptr [rax + 0x39], ecx; or eax, 0xbdd8; sete al; ret; 
0x00000001400043c3: add byte ptr [rbx], dh; sar bh, cl; adc eax, 0x4d64; mov eax, 1; add rsp, 0x28; ret; 
0x0000000140004834: add byte ptr [rcx - 0x7d], cl; and al, 0xf3; add bh, bh; ret; 
0x0000000140003ab6: add byte ptr [rcx - 1], al; add byte ptr [r8 - 1], r9b; ret; 
0x0000000140004f3a: add byte ptr [rcx], al; add byte ptr [rax], al; add bh, bh; ret 0xff48; 
0x0000000140001e4b: add byte ptr [rdi], cl; mov edx, 0x480f186b; add esp, 0x20; pop rbx; ret; 
0x000000014000186c: add byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x0000000140001adb: add byte ptr [rdx - 0x3ffffbf7], bh; mov rcx, rax; call qword ptr [rip + 0x7536]; add rsp, 0x88; ret; 
0x0000000140005a78: add byte ptr [rsp + rcx + 0x48], dh; mov ecx, dword ptr [rsp + 0x30]; and dword ptr [rcx + 0xc8], 0xfffffffd; add rsp, 0x40; pop rbx; ret; 
0x00000001400043c8: add byte ptr fs:[r8], r8b; mov eax, 1; add rsp, 0x28; ret; 
0x0000000140005a85: add ch, bh; add rsp, 0x40; pop rbx; ret; 
0x00000001400066f9: add ch, bh; mov rbx, qword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x58]; add rsp, 0x40; pop rdi; ret; 
0x0000000140007874: add ch, bh; mov rbx, qword ptr [rsp + 0x70]; mov rsi, qword ptr [rsp + 0x78]; add rsp, 0x60; pop rdi; ret; 
0x0000000140007555: add ch, bl; fld qword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000140006fdf: add cl, byte ptr [rax - 0x7d]; ret 0x4802; 
0x0000000140006fe3: add cl, byte ptr [rax - 0x7d]; ret 0x6602; 
0x0000000140001643: add dh, bl; ret; 
0x0000000140008442: add dh, byte ptr [rbx]; ror byte ptr [rax - 0x75], 0x5c; and al, 0x30; add rsp, 0x20; pop rdi; ret; 
0x0000000140005662: add dword ptr [rax + 0x160], ecx; mov rax, rcx; ret; 
0x0000000140005661: add dword ptr [rax + 0x160], r9d; mov rax, rcx; ret; 
0x0000000140001708: add dword ptr [rax + 0x39], ecx; or eax, 0xbdd8; sete al; ret; 
0x00000001400020ab: add dword ptr [rax - 0x75], ecx; ret; 
0x0000000140001d6c: add dword ptr [rax - 0x7d], ecx; ret 0x4830; 
0x000000014000565d: add dword ptr [rax], eax; add al, dh; add dword ptr [rax + 0x160], r9d; mov rax, rcx; ret; 
0x00000001400055bd: add dword ptr [rax], eax; add al, dh; inc dword ptr [rax + 0x160]; ret; 
0x0000000140006c02: add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x0000000140001608: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x0000000140005531: add dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; add rsp, 0x28; ret; 
0x000000014000276f: add dword ptr [rax], eax; add byte ptr [rbx], ch; ret; 
0x0000000140002ed8: add eax, 0x10; add rsp, 0x28; ret; 
0x0000000140002ef8: add eax, 0x14; add rsp, 0x28; ret; 
0x00000001400055b1: add eax, 0x20; dec r8; jne 0x5585; mov rax, qword ptr [rcx + 0x158]; lock inc dword ptr [rax + 0x160]; ret; 
0x0000000140008c6d: add eax, 0x25ff0000; ret 5; 
0x00000001400089b1: add eax, 0x4b12; add rsp, 0x48; ret; 
0x0000000140005ddf: add eax, 0x86bc; add rsp, 0x28; ret; 
0x000000014000552c: add eax, 0x9a23; add dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; add rsp, 0x28; ret; 
0x0000000140001cf6: add eax, 0xa565; ret; 
0x000000014000582c: add eax, 0xfffe3ae8; dec dword ptr [rax - 0x75]; ret; 
0x00000001400023a5: add eax, dword ptr [rcx - 0x75]; retf 0x6348; ret 0x6348; 
0x0000000140003385: add eax, eax; mov rax, qword ptr [r8 + rax*8 + 8]; ret; 
0x0000000140005b95: add eax, edi; ret; 
0x0000000140005b94: add eax, r15d; ret; 
0x0000000140005b77: add ebp, edi; ret; 
0x0000000140005b76: add ebp, r15d; ret; 
0x0000000140005b83: add ebx, edi; ret; 
0x0000000140005b82: add ebx, r15d; ret; 
0x0000000140004587: add ecx, 0x28; cmp r9d, r11d; jb 0x4571; xor eax, eax; ret; 
0x0000000140002ea4: add ecx, 0xffffff44; mov eax, 0x16; cmp ecx, 0xe; cmovbe eax, r8d; ret; 
0x0000000140005bb9: add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000140003a96: add ecx, dword ptr [rax - 1]; ret; 
0x000000014000651a: add ecx, dword ptr [rcx - 0x7d]; ret; 
0x0000000140005b8f: add ecx, edi; ret; 
0x0000000140005b8e: add ecx, r15d; ret; 
0x0000000140005b6b: add edi, edi; ret; 
0x0000000140005b6a: add edi, r15d; ret; 
0x0000000140003377: add edx, 0x10; cmp eax, 0x16; jb 0x3370; xor eax, eax; ret; 
0x0000000140005b89: add edx, edi; ret; 
0x0000000140005b88: add edx, r15d; ret; 
0x0000000140005b71: add esi, edi; ret; 
0x0000000140005b70: add esi, r15d; ret; 
0x000000014000878a: add esp, 0x10; ret; 
0x000000014000109b: add esp, 0x1e8; ret; 
0x000000014000733b: add esp, 0x20; pop r12; pop rdi; pop rsi; ret; 
0x0000000140001fd3: add esp, 0x20; pop r12; ret; 
0x0000000140004c20: add esp, 0x20; pop r13; ret; 
0x0000000140003af9: add esp, 0x20; pop r14; pop r13; pop r12; ret; 
0x000000014000894f: add esp, 0x20; pop r14; ret; 
0x0000000140008cb1: add esp, 0x20; pop rbp; ret; 
0x0000000140001dd7: add esp, 0x20; pop rbx; ret; 
0x000000014000214c: add esp, 0x20; pop rdi; ret; 
0x00000001400016f5: add esp, 0x28; pop rdi; pop rbx; ret; 
0x00000001400011d6: add esp, 0x28; ret; 
0x00000001400013fa: add esp, 0x298; ret; 
0x000000014000550c: add esp, 0x30; pop r13; ret; 
0x0000000140004a06: add esp, 0x30; pop r15; pop r13; pop r12; ret; 
0x000000014000198e: add esp, 0x30; pop rdi; ret; 
0x0000000140002e72: add esp, 0x38; ret; 
0x0000000140003cea: add esp, 0x40; pop r12; ret; 
0x00000001400050b7: add esp, 0x40; pop rbx; ret; 
0x0000000140006706: add esp, 0x40; pop rdi; ret; 
0x00000001400089b7: add esp, 0x48; ret; 
0x00000001400044cd: add esp, 0x4d8; ret; 
0x00000001400085fe: add esp, 0x50; pop rbp; ret; 
0x0000000140001165: add esp, 0x58; ret; 
0x0000000140005c99: add esp, 0x60; pop rdi; pop rsi; pop rbp; ret; 
0x0000000140007881: add esp, 0x60; pop rdi; ret; 
0x000000014000158c: add esp, 0x78; ret; 
0x0000000140001aeb: add esp, 0x88; ret; 
0x0000000140005b7d: add esp, edi; ret; 
0x0000000140005b7c: add esp, r15d; ret; 
0x0000000140002ed7: add rax, 0x10; add rsp, 0x28; ret; 
0x0000000140002ef7: add rax, 0x14; add rsp, 0x28; ret; 
0x00000001400055b0: add rax, 0x20; dec r8; jne 0x5585; mov rax, qword ptr [rcx + 0x158]; lock inc dword ptr [rax + 0x160]; ret; 
0x0000000140003384: add rax, rax; mov rax, qword ptr [r8 + rax*8 + 8]; ret; 
0x0000000140004586: add rcx, 0x28; cmp r9d, r11d; jb 0x4571; xor eax, eax; ret; 
0x0000000140003376: add rdx, 0x10; cmp eax, 0x16; jb 0x3370; xor eax, eax; ret; 
0x0000000140008789: add rsp, 0x10; ret; 
0x000000014000109a: add rsp, 0x1e8; ret; 
0x000000014000733a: add rsp, 0x20; pop r12; pop rdi; pop rsi; ret; 
0x0000000140001fd2: add rsp, 0x20; pop r12; ret; 
0x0000000140004c1f: add rsp, 0x20; pop r13; ret; 
0x0000000140003af8: add rsp, 0x20; pop r14; pop r13; pop r12; ret; 
0x000000014000894e: add rsp, 0x20; pop r14; ret; 
0x0000000140008cb0: add rsp, 0x20; pop rbp; ret; 
0x0000000140001dd6: add rsp, 0x20; pop rbx; ret; 
0x000000014000214b: add rsp, 0x20; pop rdi; ret; 
0x00000001400016f4: add rsp, 0x28; pop rdi; pop rbx; ret; 
0x00000001400011d5: add rsp, 0x28; ret; 
0x00000001400013f9: add rsp, 0x298; ret; 
0x000000014000550b: add rsp, 0x30; pop r13; ret; 
0x0000000140004a05: add rsp, 0x30; pop r15; pop r13; pop r12; ret; 
0x000000014000198d: add rsp, 0x30; pop rdi; ret; 
0x0000000140002e71: add rsp, 0x38; ret; 
0x0000000140003ce9: add rsp, 0x40; pop r12; ret; 
0x00000001400050b6: add rsp, 0x40; pop rbx; ret; 
0x0000000140006705: add rsp, 0x40; pop rdi; ret; 
0x00000001400089b6: add rsp, 0x48; ret; 
0x00000001400044cc: add rsp, 0x4d8; ret; 
0x00000001400085fd: add rsp, 0x50; pop rbp; ret; 
0x0000000140001164: add rsp, 0x58; ret; 
0x0000000140005c98: add rsp, 0x60; pop rdi; pop rsi; pop rbp; ret; 
0x0000000140007880: add rsp, 0x60; pop rdi; ret; 
0x000000014000158b: add rsp, 0x78; ret; 
0x0000000140001aea: add rsp, 0x88; ret; 
0x0000000140002002: and al, 0; and qword ptr [rbx], 0; and qword ptr [rbx + 0x10], 0; add rsp, 0x20; pop rbx; ret; 
0x00000001400011d3: and al, 0x10; add rsp, 0x28; ret; 
0x0000000140005d9b: and al, 0x20; add al, ch; sub eax, 0x48fffffe; add esp, 0x38; ret; 
0x00000001400089a7: and al, 0x20; call qword ptr [rip + 0x859]; mov qword ptr [rip + 0x4b12], rax; add rsp, 0x48; ret; 
0x00000001400044c0: and al, 0x20; mov qword ptr [rsp + 0x28], r8; call 0x8c52; add rsp, 0x4d8; ret; 
0x00000001400044c5: and al, 0x28; call 0x8c52; add rsp, 0x4d8; ret; 
0x0000000140001155: and al, 0x28; mov rcx, qword ptr [rsp + 0x48]; xor rcx, rsp; call 0x1630; add rsp, 0x58; ret; 
0x0000000140004659: and al, 0x30; add rsp, 0x20; pop r12; ret; 
0x000000014000307f: and al, 0x30; add rsp, 0x20; pop rdi; ret; 
0x0000000140005a7e: and al, 0x30; and dword ptr [rcx + 0xc8], 0xfffffffd; add rsp, 0x40; pop rbx; ret; 
0x000000014000882d: and al, 0x30; mov rbp, qword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x0000000140001fcb: and al, 0x30; mov rdi, qword ptr [rsp + 0x38]; add rsp, 0x20; pop r12; ret; 
0x00000001400067c9: and al, 0x30; mov rsi, qword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x0000000140001fd0: and al, 0x38; add rsp, 0x20; pop r12; ret; 
0x00000001400042f3: and al, 0x38; add rsp, 0x20; pop rdi; ret; 
0x00000001400081c4: and al, 0x38; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140004a83: and al, 0x38; mov rdi, qword ptr [rsp + 0x40]; add rsp, 0x20; pop r12; ret; 
0x0000000140004c18: and al, 0x38; mov rdi, qword ptr [rsp + 0x40]; add rsp, 0x20; pop r13; ret; 
0x0000000140008942: and al, 0x38; mov rdi, qword ptr [rsp + 0x40]; mov r12, qword ptr [rsp + 0x48]; add rsp, 0x20; pop r14; ret; 
0x0000000140002144: and al, 0x38; mov rsi, qword ptr [rsp + 0x40]; add rsp, 0x20; pop rdi; ret; 
0x00000001400021e8: and al, 0x38; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x48]; add rsp, 0x20; pop r12; ret; 
0x0000000140004a88: and al, 0x40; add rsp, 0x20; pop r12; ret; 
0x0000000140004c1d: and al, 0x40; add rsp, 0x20; pop r13; ret; 
0x0000000140002149: and al, 0x40; add rsp, 0x20; pop rdi; ret; 
0x000000014000859e: and al, 0x40; add rsp, 0x38; ret; 
0x0000000140008947: and al, 0x40; mov r12, qword ptr [rsp + 0x48]; add rsp, 0x20; pop r14; ret; 
0x0000000140002e35: and al, 0x40; mov rbp, qword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x50]; add rsp, 0x30; pop rdi; ret; 
0x00000001400021ed: and al, 0x40; mov rdi, qword ptr [rsp + 0x48]; add rsp, 0x20; pop r12; ret; 
0x0000000140005a38: and al, 0x40; mov rsi, qword ptr [rsp + 0x48]; add rsp, 0x20; pop rdi; ret; 
0x000000014000484d: and al, 0x40; mov rsi, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rdi; ret; 
0x00000001400021f2: and al, 0x48; add rsp, 0x20; pop r12; ret; 
0x000000014000894c: and al, 0x48; add rsp, 0x20; pop r14; ret; 
0x0000000140005a3d: and al, 0x48; add rsp, 0x20; pop rdi; ret; 
0x000000014000198b: and al, 0x48; add rsp, 0x30; pop rdi; ret; 
0x00000001400054ff: and al, 0x48; mov rdi, qword ptr [rsp + 0x50]; mov r12, qword ptr [rsp + 0x58]; add rsp, 0x30; pop r13; ret; 
0x0000000140002e3a: and al, 0x48; mov rsi, qword ptr [rsp + 0x50]; add rsp, 0x30; pop rdi; ret; 
0x000000014000115a: and al, 0x48; xor rcx, rsp; call 0x1630; add rsp, 0x58; ret; 
0x0000000140008783: and al, 0x4c; mov ebx, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x0000000140007338: and al, 0x50; add rsp, 0x20; pop r12; pop rdi; pop rsi; ret; 
0x00000001400061dd: and al, 0x50; add rsp, 0x20; pop r14; pop r13; pop r12; ret; 
0x0000000140002e3f: and al, 0x50; add rsp, 0x30; pop rdi; ret; 
0x0000000140005504: and al, 0x50; mov r12, qword ptr [rsp + 0x58]; add rsp, 0x30; pop r13; ret; 
0x0000000140003bed: and al, 0x50; mov rsi, qword ptr [rsp + 0x58]; add rsp, 0x30; pop rdi; ret; 
0x00000001400066fe: and al, 0x50; mov rsi, qword ptr [rsp + 0x58]; add rsp, 0x40; pop rdi; ret; 
0x0000000140003af6: and al, 0x58; add rsp, 0x20; pop r14; pop r13; pop r12; ret; 
0x0000000140005509: and al, 0x58; add rsp, 0x30; pop r13; ret; 
0x0000000140003bf2: and al, 0x58; add rsp, 0x30; pop rdi; ret; 
0x0000000140006703: and al, 0x58; add rsp, 0x40; pop rdi; ret; 
0x0000000140003cdd: and al, 0x58; mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x68]; add rsp, 0x40; pop r12; ret; 
0x0000000140004a03: and al, 0x60; add rsp, 0x30; pop r15; pop r13; pop r12; ret; 
0x0000000140003ce2: and al, 0x60; mov rdi, qword ptr [rsp + 0x68]; add rsp, 0x40; pop r12; ret; 
0x0000000140001581: and al, 0x60; xor rcx, rsp; call 0x1630; add rsp, 0x78; ret; 
0x0000000140003ce7: and al, 0x68; add rsp, 0x40; pop r12; ret; 
0x00000001400085f1: and al, 0x68; mov rdi, qword ptr [rsp + 0x70]; mov r12, qword ptr [rsp + 0x78]; add rsp, 0x50; pop rbp; ret; 
0x00000001400085f6: and al, 0x70; mov r12, qword ptr [rsp + 0x78]; add rsp, 0x50; pop rbp; ret; 
0x0000000140007697: and al, 0x70; mov rbx, qword ptr [r11 + 0x10]; mov rsi, qword ptr [r11 + 0x18]; mov rsp, r11; pop rdi; ret; 
0x0000000140007879: and al, 0x70; mov rsi, qword ptr [rsp + 0x78]; add rsp, 0x60; pop rdi; ret; 
0x00000001400085fb: and al, 0x78; add rsp, 0x50; pop rbp; ret; 
0x000000014000787e: and al, 0x78; add rsp, 0x60; pop rdi; ret; 
0x0000000140004837: and al, 0xf3; add bh, bh; ret; 
0x0000000140008787: and al, 8; add rsp, 0x10; ret; 
0x000000014000767b: and al, ch; ret; 
0x00000001400089a8: and bh, bh; adc eax, 0x859; mov qword ptr [rip + 0x4b12], rax; add rsp, 0x48; ret; 
0x00000001400073db: and bh, bh; ret 0x15ff; 
0x0000000140005d9c: and byte ptr [rax], al; call 0x5bd0; add rsp, 0x38; ret; 
0x000000014000733d: and byte ptr [rcx + 0x5c], al; pop rdi; pop rsi; ret; 
0x0000000140001fd5: and byte ptr [rcx + 0x5c], al; ret; 
0x0000000140004c22: and byte ptr [rcx + 0x5d], al; ret; 
0x0000000140007261: and byte ptr [rcx + 0x5e], al; pop r13; pop r12; pop rdi; pop rsi; ret; 
0x0000000140003afb: and byte ptr [rcx + 0x5e], al; pop r13; pop r12; ret; 
0x0000000140008951: and byte ptr [rcx + 0x5e], al; ret; 
0x00000001400044c1: and byte ptr [rcx + rcx*4 + 0x44], cl; and al, 0x28; call 0x8c52; add rsp, 0x4d8; ret; 
0x0000000140004f66: and byte ptr [rcx - 0x75], cl; jnp 0x4f93; mov rsp, r11; pop rbp; ret; 
0x00000001400036e8: and dword ptr [rax + 0x48000000], 0xffffff83; ret 0x4c10; 
0x0000000140002009: and dword ptr [rbx + 0x10], 0; add rsp, 0x20; pop rbx; ret; 
0x00000001400069b1: and dword ptr [rbx + 0x18], 0; mov eax, edi; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140002000: and dword ptr [rbx + 0x24], 0; and qword ptr [rbx], 0; and qword ptr [rbx + 0x10], 0; add rsp, 0x20; pop rbx; ret; 
0x00000001400082fe: and dword ptr [rbx + 8], 0; mov qword ptr [rbx], rax; add rsp, 0x20; pop rbx; ret; 
0x0000000140002005: and dword ptr [rbx], 0; and qword ptr [rbx + 0x10], 0; add rsp, 0x20; pop rbx; ret; 
0x00000001400060d4: and dword ptr [rbx], 0; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140005a80: and dword ptr [rcx + 0xc8], 0xfffffffd; add rsp, 0x40; pop rbx; ret; 
0x000000014000448c: and dword ptr [rip + 0xa88d], 0; ret; 
0x0000000140005d99: and dword ptr [rsp + 0x20], 0; call 0x5bd0; add rsp, 0x38; ret; 
0x0000000140002006: and eax, dword ptr [rax]; and qword ptr [rbx + 0x10], 0; add rsp, 0x20; pop rbx; ret; 
0x00000001400060d5: and eax, dword ptr [rax]; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x000000014000552d: and ebx, dword ptr [rdx + 0x10000]; add byte ptr [rax], al; xor eax, eax; add rsp, 0x28; ret; 
0x0000000140002008: and qword ptr [rbx + 0x10], 0; add rsp, 0x20; pop rbx; ret; 
0x0000000140002004: and qword ptr [rbx], 0; and qword ptr [rbx + 0x10], 0; add rsp, 0x20; pop rbx; ret; 
0x00000001400060d3: and qword ptr [rbx], 0; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140005d98: and qword ptr [rsp + 0x20], 0; call 0x5bd0; add rsp, 0x38; ret; 
0x0000000140008b69: bswap eax; bswap rcx; cmp rax, rcx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000140008b6c: bswap ecx; cmp rax, rcx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000140008b68: bswap rax; bswap rcx; cmp rax, rcx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000140008b6b: bswap rcx; cmp rax, rcx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000140001e4c: bts dword ptr [rbx + 0x18], 0xf; add rsp, 0x20; pop rbx; ret; 
0x0000000140001602: call 0x1590; mov eax, 1; add rsp, 0x28; ret; 
0x0000000140001095: call 0x1630; add rsp, 0x1e8; ret; 
0x00000001400013f4: call 0x1630; add rsp, 0x298; ret; 
0x000000014000115f: call 0x1630; add rsp, 0x58; ret; 
0x0000000140001586: call 0x1630; add rsp, 0x78; ret; 
0x0000000140008e5d: call 0x1e9c; nop; add rsp, 0x20; pop rbp; ret; 
0x00000001400016ed: call 0x1ee8; mov eax, edi; add rsp, 0x28; pop rdi; pop rbx; ret; 
0x0000000140008caa: call 0x1ee8; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140002e6c: call 0x2de8; add rsp, 0x38; ret; 
0x000000014000661f: call 0x2e58; or eax, 0xffffffff; add rsp, 0x28; ret; 
0x000000014000836c: call 0x2e58; or rax, 0xffffffffffffffff; add rsp, 0x28; ret; 
0x0000000140004cbf: call 0x2e58; xor eax, eax; add rsp, 0x28; ret; 
0x0000000140002f38: call 0x2e78; mov dword ptr [r10], eax; add rsp, 0x20; pop rbx; ret; 
0x00000001400047a0: call 0x2e78; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140006614: call 0x2ec0; mov dword ptr [rax], 0x16; call 0x2e58; or eax, 0xffffffff; add rsp, 0x28; ret; 
0x0000000140008361: call 0x2ec0; mov dword ptr [rax], 0x16; call 0x2e58; or rax, 0xffffffffffffffff; add rsp, 0x28; ret; 
0x0000000140008897: call 0x2ec0; mov dword ptr [rax], 9; call 0x2e58; or rax, 0xffffffffffffffff; add rsp, 0x28; ret; 
0x0000000140004cb4: call 0x2ec0; mov dword ptr [rax], 9; call 0x2e58; xor eax, eax; add rsp, 0x28; ret; 
0x0000000140008e43: call 0x3004; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140003629: call 0x3390; add rsp, 0x28; ret; 
0x000000014000361f: call 0x3390; mov ecx, 0xff; call 0x3390; add rsp, 0x28; ret; 
0x0000000140008cc8: call 0x3634; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140004370: call 0x4040; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140007fb7: call 0x4770; add rsp, 0x20; pop rbx; ret; 
0x0000000140007fab: call 0x4770; mov rcx, qword ptr [rbx + 0x2b8]; call 0x4770; add rsp, 0x20; pop rbx; ret; 
0x0000000140008cec: call 0x4b28; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140001e47: call 0x4c28; bts dword ptr [rbx + 0x18], 0xf; add rsp, 0x20; pop rbx; ret; 
0x0000000140005d9e: call 0x5bd0; add rsp, 0x38; ret; 
0x0000000140005dc1: call 0x8318; add rsp, 0x28; ret; 
0x0000000140008e76: call 0x8958; nop; add rsp, 0x20; pop rbp; ret; 
0x00000001400044c7: call 0x8c52; add rsp, 0x4d8; ret; 
0x0000000140008cae: call qword ptr [rax + 0x20c48348]; pop rbp; ret; 
0x0000000140008dd8: call qword ptr [rip + 0x28a]; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140005dd7: call qword ptr [rip + 0x329b]; mov qword ptr [rip + 0x86bc], rax; add rsp, 0x28; ret; 
0x00000001400043c6: call qword ptr [rip + 0x4d64]; mov eax, 1; add rsp, 0x28; ret; 
0x0000000140002f97: call qword ptr [rip + 0x6093]; xor eax, eax; add rsp, 0x28; ret; 
0x0000000140001ae4: call qword ptr [rip + 0x7536]; add rsp, 0x88; ret; 
0x00000001400089d3: call qword ptr [rip + 0x817]; add rsp, 0x28; ret; 
0x00000001400089a9: call qword ptr [rip + 0x859]; mov qword ptr [rip + 0x4b12], rax; add rsp, 0x48; ret; 
0x0000000140003160: call qword ptr [rip + 0xbe02]; xor eax, eax; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140008591: call qword ptr [rip + 0xc61]; test eax, eax; je 0x8574; movzx eax, word ptr [rsp + 0x40]; add rsp, 0x38; ret; 
0x0000000140002fd5: call rax; add rsp, 0x20; pop rbx; ret; 
0x0000000140003382: cdqe; add rax, rax; mov rax, qword ptr [r8 + rax*8 + 8]; ret; 
0x0000000140002eb7: cdqe; mov eax, dword ptr [r9 + rax*8 + 4]; ret; 
0x0000000140002e9a: clc; adc dword ptr [rdi + 6], esi; mov eax, 0xd; ret; 
0x0000000140001869: clc; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x0000000140006578: clc; dec rax; ret; 
0x0000000140005b96: clc; ret; 
0x0000000140008d28: cld; mov ebp, 0x4890ffff; add esp, 0x20; pop rbp; ret; 
0x0000000140005b7e: cld; ret; 
0x0000000140005b8a: cli; ret; 
0x0000000140002eb3: cmovbe eax, eax; ret; 
0x0000000140002eb2: cmovbe eax, r8d; ret; 
0x0000000140001471: cmp byte ptr [rax - 0x47], cl; ret; 
0x0000000140002145: cmp byte ptr [rax - 0x75], cl; je 0x216e; add rsp, 0x20; pop rdi; ret; 
0x00000001400021e9: cmp byte ptr [rax - 0x75], cl; je 0x2212; mov rdi, qword ptr [rsp + 0x48]; add rsp, 0x20; pop r12; ret; 
0x00000001400037f8: cmp byte ptr [rax - 0x75], cl; je 0x3821; add rsp, 0x20; pop rdi; ret; 
0x0000000140004b1b: cmp byte ptr [rax - 0x75], cl; je 0x4b44; add rsp, 0x20; pop rdi; ret; 
0x0000000140004d74: cmp byte ptr [rax - 0x75], cl; je 0x4d9d; add rsp, 0x20; pop rdi; ret; 
0x0000000140004a84: cmp byte ptr [rax - 0x75], cl; jl 0x4aad; add rsp, 0x20; pop r12; ret; 
0x0000000140004c19: cmp byte ptr [rax - 0x75], cl; jl 0x4c42; add rsp, 0x20; pop r13; ret; 
0x0000000140008943: cmp byte ptr [rax - 0x75], cl; jl 0x896c; mov r12, qword ptr [rsp + 0x48]; add rsp, 0x20; pop r14; ret; 
0x00000001400081c5: cmp byte ptr [rax - 0x75], cl; pop rsp; and al, 0x30; add rsp, 0x20; pop rdi; ret; 
0x0000000140005d97: cmp byte ptr [rax - 0x7d], cl; and al, 0x20; add al, ch; sub eax, 0x48fffffe; add esp, 0x38; ret; 
0x0000000140008e5e: cmp dl, byte ptr [rax + 0x4890ffff]; add esp, 0x20; pop rbp; ret; 
0x0000000140004529: cmp dword ptr [rax], ecx; je 0x4530; xor eax, eax; ret; 
0x0000000140008cab: cmp dword ptr [rdx + 0x4890ffff], edx; add esp, 0x20; pop rbp; ret; 
0x000000014000170a: cmp dword ptr [rip + 0xbdd8], ecx; sete al; ret; 
0x0000000140002e99: cmp eax, 0x11; ja 0x2ea4; mov eax, 0xd; ret; 
0x000000014000337a: cmp eax, 0x16; jb 0x3370; xor eax, eax; ret; 
0x0000000140008b6f: cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000140002870: cmp ebp, dword ptr [rip + 0xf410875]; mov edx, 0xff4808ed; ret; 
0x0000000140003078: cmp ebx, edi; jb 0x3069; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x00000001400030b2: cmp ebx, edi; jb 0x309f; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140003fed: cmp ebx, edi; jb 0x3fde; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140004025: cmp ebx, edi; jb 0x4016; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x00000001400089ce: cmp ecx, -2; je 0x89d9; call qword ptr [rip + 0x817]; add rsp, 0x28; ret; 
0x0000000140002eaf: cmp ecx, 0xe; cmovbe eax, r8d; ret; 
0x000000014000458b: cmp ecx, ebx; jb 0x4571; xor eax, eax; ret; 
0x000000014000877c: cmp edx, ebx; jne 0x8770; mov r10, qword ptr [rsp]; mov r11, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x0000000140004831: cmp esp, dword ptr [rdi - 0x7cb70000]; and al, 0xf3; add bh, bh; ret; 
0x0000000140001709: cmp qword ptr [rip + 0xbdd8], rcx; sete al; ret; 
0x000000014000877b: cmp r10, r11; jne 0x8770; mov r10, qword ptr [rsp]; mov r11, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000014000458a: cmp r9d, r11d; jb 0x4571; xor eax, eax; ret; 
0x0000000140008b6e: cmp rax, rcx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000140003077: cmp rbx, rdi; jb 0x3069; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x00000001400030b1: cmp rbx, rdi; jb 0x309f; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140003fec: cmp rbx, rdi; jb 0x3fde; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140004024: cmp rbx, rdi; jb 0x4016; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x00000001400089cd: cmp rcx, -2; je 0x89d9; call qword ptr [rip + 0x817]; add rsp, 0x28; ret; 
0x0000000140004528: cmp word ptr [rax], cx; je 0x4530; xor eax, eax; ret; 
0x0000000140003383: cwde; add rax, rax; mov rax, qword ptr [r8 + rax*8 + 8]; ret; 
0x0000000140001868: cwde; clc; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x0000000140002eb8: cwde; mov eax, dword ptr [r9 + rax*8 + 4]; ret; 
0x00000001400041be: dec dword ptr [rax - 0x75]; ret; 
0x0000000140003f81: dec dword ptr [rax - 0x7d]; ret; 
0x00000001400061f4: dec dword ptr [rax - 9]; fcomp dword ptr [rbx]; sal bh, 0xd8; dec eax; add rsp, 0x28; ret; 
0x000000014000482d: dec dword ptr [rbx + rcx*4 + 0x1d]; cmp esp, dword ptr [rdi - 0x7cb70000]; and al, 0xf3; add bh, bh; ret; 
0x00000001400061fc: dec eax; add rsp, 0x28; ret; 
0x0000000140001797: dec eax; jne 0x1791; ret; 
0x00000001400055b5: dec eax; jne 0x5585; mov rax, qword ptr [rcx + 0x158]; lock inc dword ptr [rax + 0x160]; ret; 
0x0000000140005655: dec eax; jne 0x5623; mov rax, qword ptr [rcx + 0x158]; lock add dword ptr [rax + 0x160], r9d; mov rax, rcx; ret; 
0x0000000140008aeb: dec eax; jne 0x8ae0; xor rax, rax; ret; 
0x000000014000657a: dec eax; ret; 
0x0000000140001dd0: dec ecx; jne 0x1d91; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140005bbf: dec edi; jne 0x5bae; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140001796: dec r8; jne 0x1791; ret; 
0x00000001400055b4: dec r8; jne 0x5585; mov rax, qword ptr [rcx + 0x158]; lock inc dword ptr [rax + 0x160]; ret; 
0x0000000140005654: dec r8; jne 0x5623; mov rax, qword ptr [rcx + 0x158]; lock add dword ptr [rax + 0x160], r9d; mov rax, rcx; ret; 
0x0000000140008aea: dec r8; jne 0x8ae0; xor rax, rax; ret; 
0x0000000140001dcf: dec r9; jne 0x1d91; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140006579: dec rax; ret; 
0x0000000140005bbe: dec rdi; jne 0x5bae; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140005b65: div byte ptr [rbp - 0x47]; lea rax, [rcx + rax - 1]; ret; 
0x0000000140008a92: div byte ptr [rbp - 0x75]; xor eax, eax; ret; 
0x0000000140008c3e: div byte ptr [rbp - 0x78]; xor rax, rax; ret; 
0x000000014000108e: fadd dword ptr [rcx]; add byte ptr [rax], al; xor rcx, rsp; call 0x1630; add rsp, 0x1e8; ret; 
0x0000000140003079: fbstp tbyte ptr [rdx - 0x13]; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x00000001400030b3: fbstp tbyte ptr [rdx - 0x17]; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x00000001400061f7: fcomp dword ptr [rbx]; sal bh, 0xd8; dec eax; add rsp, 0x28; ret; 
0x0000000140004917: fcomp dword ptr [rbx]; shr bl, 2; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x000000014000594f: fdiv dword ptr [rsi + rcx - 0x18]; popfq; ret; 
0x0000000140008a60: fdivr st(7); ret; 
0x000000014000895e: fisub word ptr [rbx]; add byte ptr [rax - 0x75], cl; ret 0xe283; 
0x0000000140007557: fld qword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000001400017f6: fmul dword ptr [rax + 0xf]; ret; 
0x0000000140001e48: fsubr qword ptr [rip - 0x45f10000]; imul ebx, dword ptr [rax], 0xf; add rsp, 0x20; pop rbx; ret; 
0x00000001400083de: fsubr st(0); pop rax; add al, 0; add byte ptr [rax + 0x3b], cl; ret; 
0x0000000140006572: hlt; sub rax, rcx; sar rax, 1; dec rax; ret; 
0x0000000140001e4e: imul ebx, dword ptr [rax], 0xf; add rsp, 0x20; pop rbx; ret; 
0x000000014000544f: in al, 0; add bh, bh; ret 0xe2eb; 
0x0000000140001c57: in eax, 0x8b; ret 0x348; 
0x0000000140002e98: in eax, dx; cmp eax, 0x11; ja 0x2ea4; mov eax, 0xd; ret; 
0x000000014000307b: in eax, dx; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140002877: in eax, dx; or byte ptr [rax - 1], cl; ret; 
0x00000001400055c1: inc dword ptr [rax + 0x160]; ret; 
0x0000000140003625: inc dword ptr [rax]; add byte ptr [rax], al; call 0x3390; add rsp, 0x28; ret; 
0x000000014000843d: inc dword ptr [rbx + 0x2ebffc8]; xor eax, eax; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140004ce4: inc dword ptr [rbx + 0x3ebffc8]; mov eax, dword ptr [rcx + 0x1c]; add rsp, 0x28; ret; 
0x0000000140001fff: inc dword ptr [rbx + 0x48002463]; and dword ptr [rbx], 0; and qword ptr [rbx + 0x10], 0; add rsp, 0x20; pop rbx; ret; 
0x00000001400020f6: inc dword ptr [rbx]; add rsp, 0x20; pop rbx; ret; 
0x0000000140003374: inc eax; add rdx, 0x10; cmp eax, 0x16; jb 0x3370; xor eax, eax; ret; 
0x0000000140004584: inc ecx; add rcx, 0x28; cmp r9d, r11d; jb 0x4571; xor eax, eax; ret; 
0x0000000140001794: inc ecx; dec r8; jne 0x1791; ret; 
0x0000000140008ae8: inc ecx; dec r8; jne 0x8ae0; xor rax, rax; ret; 
0x0000000140004583: inc r9d; add rcx, 0x28; cmp r9d, r11d; jb 0x4571; xor eax, eax; ret; 
0x0000000140001793: inc rcx; dec r8; jne 0x1791; ret; 
0x0000000140008ae7: inc rcx; dec r8; jne 0x8ae0; xor rax, rax; ret; 
0x0000000140008831: insb byte ptr [rdi], dx; and al, 0x38; add rsp, 0x20; pop rdi; ret; 
0x0000000140002143: insb byte ptr [rdi], dx; and al, 0x38; mov rsi, qword ptr [rsp + 0x40]; add rsp, 0x20; pop rdi; ret; 
0x0000000140005a37: insb byte ptr [rdi], dx; and al, 0x40; mov rsi, qword ptr [rsp + 0x48]; add rsp, 0x20; pop rdi; ret; 
0x0000000140002e39: insb byte ptr [rdi], dx; and al, 0x48; mov rsi, qword ptr [rsp + 0x50]; add rsp, 0x30; pop rdi; ret; 
0x000000014000337e: int1; xor eax, eax; ret; 
0x0000000140008aee: int1; xor rax, rax; ret; 
0x0000000140005bc0: iretd; jne 0x5bae; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140002e9c: ja 0x2ea4; mov eax, 0xd; ret; 
0x0000000140002da9: jae 0x2ddb; mov rsp, r11; pop r12; pop rdi; pop rbp; ret; 
0x00000001400035e2: jae 0x361c; mov rsp, r11; pop r13; pop r12; pop rdi; ret; 
0x0000000140004f65: jae 0x4f87; mov rdi, qword ptr [r11 + 0x28]; mov rsp, r11; pop rbp; ret; 
0x000000014000769f: jae 0x76b9; mov rsp, r11; pop rdi; ret; 
0x0000000140002e94: jb 0x2e88; lea eax, [rcx - 0x13]; cmp eax, 0x11; ja 0x2ea4; mov eax, 0xd; ret; 
0x000000014000307a: jb 0x3069; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x00000001400030b4: jb 0x309f; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x000000014000337d: jb 0x3370; xor eax, eax; ret; 
0x0000000140003fef: jb 0x3fde; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140004027: jb 0x4016; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x000000014000458d: jb 0x4571; xor eax, eax; ret; 
0x000000014000178f: je 0x179b; mov byte ptr [rcx], dl; inc rcx; dec r8; jne 0x1791; ret; 
0x0000000140002148: je 0x216e; add rsp, 0x20; pop rdi; ret; 
0x00000001400021ec: je 0x2212; mov rdi, qword ptr [rsp + 0x48]; add rsp, 0x20; pop r12; ret; 
0x0000000140002e3e: je 0x2e64; push rax; add rsp, 0x30; pop rdi; ret; 
0x0000000140002fd1: je 0x2fd7; mov ecx, ebx; call rax; add rsp, 0x20; pop rbx; ret; 
0x00000001400037fb: je 0x3821; add rsp, 0x20; pop rdi; ret; 
0x00000001400038fc: je 0x3922; push rax; add rsp, 0x30; pop rdi; ret; 
0x0000000140003bf1: je 0x3c17; pop rax; add rsp, 0x30; pop rdi; ret; 
0x000000014000452b: je 0x4530; xor eax, eax; ret; 
0x0000000140004851: je 0x4877; add rsp, 0x30; pop rdi; ret; 
0x0000000140004a82: je 0x4aa8; cmp byte ptr [rax - 0x75], cl; jl 0x4aad; add rsp, 0x20; pop r12; ret; 
0x0000000140004b1e: je 0x4b44; add rsp, 0x20; pop rdi; ret; 
0x0000000140004c17: je 0x4c3d; cmp byte ptr [rax - 0x75], cl; jl 0x4c42; add rsp, 0x20; pop r13; ret; 
0x0000000140004d77: je 0x4d9d; add rsp, 0x20; pop rdi; ret; 
0x00000001400054fe: je 0x5524; mov rdi, qword ptr [rsp + 0x50]; mov r12, qword ptr [rsp + 0x58]; add rsp, 0x30; pop r13; ret; 
0x0000000140005a3c: je 0x5a62; add rsp, 0x20; pop rdi; ret; 
0x0000000140005a79: je 0x5a87; mov rcx, qword ptr [rsp + 0x30]; and dword ptr [rcx + 0xc8], 0xfffffffd; add rsp, 0x40; pop rbx; ret; 
0x0000000140005ac3: je 0x5ad1; mov rcx, qword ptr [rsp + 0x30]; and dword ptr [rcx + 0xc8], 0xfffffffd; add rsp, 0x40; pop rbx; ret; 
0x0000000140005b62: je 0x5b6e; test dh, dh; jne 0x5b21; lea rax, [rcx + rax - 1]; ret; 
0x0000000140006702: je 0x6728; pop rax; add rsp, 0x40; pop rdi; ret; 
0x000000014000787d: je 0x78a3; js 0x78c9; add esp, 0x60; pop rdi; ret; 
0x0000000140008023: je 0x802a; call 0x4770; add rsp, 0x20; pop rbx; ret; 
0x000000014000812d: je 0x8134; call 0x4770; add rsp, 0x20; pop rbx; ret; 
0x0000000140008599: je 0x8574; movzx eax, word ptr [rsp + 0x40]; add rsp, 0x38; ret; 
0x00000001400089d1: je 0x89d9; call qword ptr [rip + 0x817]; add rsp, 0x28; ret; 
0x00000001400089cb: je 0x89d9; cmp rcx, -2; je 0x89d9; call qword ptr [rip + 0x817]; add rsp, 0x28; ret; 
0x0000000140008a8f: je 0x8a95; test dh, dh; jne 0x8a20; xor eax, eax; ret; 
0x0000000140008c3b: je 0x8c41; test dh, dh; jne 0x8bc9; xor rax, rax; ret; 
0x00000001400021f1: jl 0x2217; add rsp, 0x20; pop r12; ret; 
0x0000000140003ce6: jl 0x3d0c; push 0x40c48348; pop r12; ret; 
0x0000000140004a87: jl 0x4aad; add rsp, 0x20; pop r12; ret; 
0x0000000140004c1c: jl 0x4c42; add rsp, 0x20; pop r13; ret; 
0x0000000140005503: jl 0x5529; push rax; mov r12, qword ptr [rsp + 0x58]; add rsp, 0x30; pop r13; ret; 
0x00000001400073d1: jl 0x73f7; sub byte ptr [rbx - 0x76b7f71e], al; jl 0x73ff; and bh, bh; ret 0x15ff; 
0x00000001400073d9: jl 0x73ff; and bh, bh; ret 0x15ff; 
0x00000001400085f5: jl 0x861b; jo 0x8645; mov esp, dword ptr [rsp + 0x78]; add rsp, 0x50; pop rbp; ret; 
0x0000000140008946: jl 0x896c; mov r12, qword ptr [rsp + 0x48]; add rsp, 0x20; pop r14; ret; 
0x0000000140001799: jne 0x1791; ret; 
0x0000000140001ad9: jne 0x1adb; add byte ptr [rdx - 0x3ffffbf7], bh; mov rcx, rax; call qword ptr [rip + 0x7536]; add rsp, 0x88; ret; 
0x0000000140001dd2: jne 0x1d91; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x00000001400055b7: jne 0x5585; mov rax, qword ptr [rcx + 0x158]; lock inc dword ptr [rax + 0x160]; ret; 
0x0000000140005657: jne 0x5623; mov rax, qword ptr [rcx + 0x158]; lock add dword ptr [rax + 0x160], r9d; mov rax, rcx; ret; 
0x0000000140005b66: jne 0x5b21; lea rax, [rcx + rax - 1]; ret; 
0x0000000140005bc1: jne 0x5bae; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140006571: jne 0x6567; sub rax, rcx; sar rax, 1; dec rax; ret; 
0x000000014000877e: jne 0x8770; mov r10, qword ptr [rsp]; mov r11, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x0000000140008a93: jne 0x8a20; xor eax, eax; ret; 
0x0000000140008aed: jne 0x8ae0; xor rax, rax; ret; 
0x0000000140008ae5: jne 0x8af3; inc rcx; dec r8; jne 0x8ae0; xor rax, rax; ret; 
0x0000000140008c3f: jne 0x8bc9; xor rax, rax; ret; 
0x0000000140003fb6: jnp 0x3fe8; mov rsp, r11; pop r14; pop r13; pop r12; ret; 
0x0000000140004f69: jnp 0x4f93; mov rsp, r11; pop rbp; ret; 
0x0000000140006053: jns 0x5fd9; add byte ptr [rax], al; ret; 
0x000000014000605b: jns 0x5fe1; add byte ptr [rax], al; ret; 
0x0000000140006063: jns 0x5fe9; add byte ptr [rax], al; ret; 
0x0000000140007698: jo 0x76e3; mov ebx, dword ptr [rbx + 0x10]; mov rsi, qword ptr [r11 + 0x18]; mov rsp, r11; pop rdi; ret; 
0x000000014000787a: jo 0x78c4; mov esi, dword ptr [rsp + 0x78]; add rsp, 0x60; pop rdi; ret; 
0x00000001400085f7: jo 0x8645; mov esp, dword ptr [rsp + 0x78]; add rsp, 0x50; pop rbp; ret; 
0x000000014000787f: js 0x78c9; add esp, 0x60; pop rdi; ret; 
0x00000001400085fc: js 0x8646; add esp, 0x50; pop rbp; ret; 
0x0000000140005b69: lea eax, [rcx + rax - 1]; ret; 
0x0000000140005b6f: lea eax, [rcx + rax - 2]; ret; 
0x0000000140005b75: lea eax, [rcx + rax - 3]; ret; 
0x0000000140005b7b: lea eax, [rcx + rax - 4]; ret; 
0x0000000140005b81: lea eax, [rcx + rax - 5]; ret; 
0x0000000140005b87: lea eax, [rcx + rax - 6]; ret; 
0x0000000140005b8d: lea eax, [rcx + rax - 7]; ret; 
0x0000000140005b93: lea eax, [rcx + rax - 8]; ret; 
0x0000000140002e96: lea eax, [rcx - 0x13]; cmp eax, 0x11; ja 0x2ea4; mov eax, 0xd; ret; 
0x0000000140001cf5: lea eax, [rip + 0xa565]; ret; 
0x0000000140001e43: lea ecx, [rcx + rdx + 0x10]; call 0x4c28; bts dword ptr [rbx + 0x18], 0xf; add rsp, 0x20; pop rbx; ret; 
0x0000000140005dd1: lea ecx, [rip - 0x2f]; call qword ptr [rip + 0x329b]; mov qword ptr [rip + 0x86bc], rax; add rsp, 0x28; ret; 
0x0000000140002f91: lea ecx, [rip - 0x4f]; call qword ptr [rip + 0x6093]; xor eax, eax; add rsp, 0x28; ret; 
0x0000000140005b68: lea rax, [rcx + rax - 1]; ret; 
0x0000000140005b6e: lea rax, [rcx + rax - 2]; ret; 
0x0000000140005b74: lea rax, [rcx + rax - 3]; ret; 
0x0000000140005b7a: lea rax, [rcx + rax - 4]; ret; 
0x0000000140005b80: lea rax, [rcx + rax - 5]; ret; 
0x0000000140005b86: lea rax, [rcx + rax - 6]; ret; 
0x0000000140005b8c: lea rax, [rcx + rax - 7]; ret; 
0x0000000140005b92: lea rax, [rcx + rax - 8]; ret; 
0x0000000140001cf4: lea rax, [rip + 0xa565]; ret; 
0x0000000140005dd0: lea rcx, [rip - 0x2f]; call qword ptr [rip + 0x329b]; mov qword ptr [rip + 0x86bc], rax; add rsp, 0x28; ret; 
0x0000000140002f90: lea rcx, [rip - 0x4f]; call qword ptr [rip + 0x6093]; xor eax, eax; add rsp, 0x28; ret; 
0x0000000140001707: leave; add dword ptr [rax + 0x39], ecx; or eax, 0xbdd8; sete al; ret; 
0x0000000140002e6b: leave; call 0x2de8; add rsp, 0x38; ret; 
0x0000000140008e2c: leave; call 0x4b28; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140008b6d: leave; cmp rax, rcx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000140001dd1: leave; jne 0x1d91; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x00000001400044bc: leave; mov qword ptr [rsp + 0x20], rsp; mov qword ptr [rsp + 0x28], r8; call 0x8c52; add rsp, 0x4d8; ret; 
0x0000000140005660: lock add dword ptr [rax + 0x160], r9d; mov rax, rcx; ret; 
0x00000001400055c0: lock inc dword ptr [rax + 0x160]; ret; 
0x0000000140004ce2: loope 0x4ce3; inc dword ptr [rbx + 0x3ebffc8]; mov eax, dword ptr [rcx + 0x1c]; add rsp, 0x28; ret; 
0x0000000140008dda: mov al, byte ptr [rdx]; add byte ptr [rax], al; nop; add rsp, 0x20; pop rbp; ret; 
0x000000014000859c: mov bh, 0x44; and al, 0x40; add rsp, 0x38; ret; 
0x0000000140005dfd: mov bh, 0x86; add byte ptr [rax], al; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005663: mov byte ptr [rax + 1], ah; add byte ptr [rax], al; mov rax, rcx; ret; 
0x0000000140001aed: mov byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000140001791: mov byte ptr [rcx], dl; inc rcx; dec r8; jne 0x1791; ret; 
0x0000000140005def: mov ch, 0x86; add byte ptr [rax], al; mov qword ptr [rip + 0x86b6], rcx; mov qword ptr [rip + 0x86b7], rcx; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005df6: mov dh, 0x86; add byte ptr [rax], al; mov qword ptr [rip + 0x86b7], rcx; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x00000001400011c8: mov dh, 4; add byte ptr [rax - 0x3914f5fc], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000140002f3d: mov dword ptr [r10], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140006619: mov dword ptr [rax], 0x16; call 0x2e58; or eax, 0xffffffff; add rsp, 0x28; ret; 
0x0000000140008366: mov dword ptr [rax], 0x16; call 0x2e58; or rax, 0xffffffffffffffff; add rsp, 0x28; ret; 
0x000000014000889c: mov dword ptr [rax], 9; call 0x2e58; or rax, 0xffffffffffffffff; add rsp, 0x28; ret; 
0x0000000140004cb9: mov dword ptr [rax], 9; call 0x2e58; xor eax, eax; add rsp, 0x28; ret; 
0x000000014000853f: mov dword ptr [rbx + 0x10], eax; mov dword ptr [rbx + 8], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140008542: mov dword ptr [rbx + 8], eax; add rsp, 0x20; pop rbx; ret; 
0x00000001400047a5: mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000014000853c: mov dword ptr [rbx], eax; mov qword ptr [rbx + 0x10], rax; mov dword ptr [rbx + 8], eax; add rsp, 0x20; pop rbx; ret; 
0x00000001400048c8: mov dword ptr [rbx], ecx; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140002f3e: mov dword ptr [rdx], eax; add rsp, 0x20; pop rbx; ret; 
0x00000001400089b0: mov dword ptr [rip + 0x4b12], eax; add rsp, 0x48; ret; 
0x0000000140006051: mov dword ptr [rip + 0x8479], ecx; ret; 
0x0000000140005ded: mov dword ptr [rip + 0x86b5], ecx; mov qword ptr [rip + 0x86b6], rcx; mov qword ptr [rip + 0x86b7], rcx; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005df4: mov dword ptr [rip + 0x86b6], ecx; mov qword ptr [rip + 0x86b7], rcx; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005dfb: mov dword ptr [rip + 0x86b7], ecx; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005e02: mov dword ptr [rip + 0x86b8], ecx; ret; 
0x0000000140005dde: mov dword ptr [rip + 0x86bc], eax; add rsp, 0x28; ret; 
0x000000014000552b: mov dword ptr [rip + 0x9a23], 1; xor eax, eax; add rsp, 0x28; ret; 
0x0000000140002c61: mov dword ptr [rip + 0xae31], ecx; ret; 
0x00000001400089a5: mov dword ptr [rsp + 0x20], eax; call qword ptr [rip + 0x859]; mov qword ptr [rip + 0x4b12], rax; add rsp, 0x48; ret; 
0x00000001400044be: mov dword ptr [rsp + 0x20], esp; mov qword ptr [rsp + 0x28], r8; call 0x8c52; add rsp, 0x4d8; ret; 
0x00000001400089a4: mov dword ptr [rsp + 0x20], r8d; call qword ptr [rip + 0x859]; mov qword ptr [rip + 0x4b12], rax; add rsp, 0x48; ret; 
0x00000001400044c3: mov dword ptr [rsp + 0x28], eax; call 0x8c52; add rsp, 0x4d8; ret; 
0x0000000140002eaa: mov eax, 0x16; cmp ecx, 0xe; cmovbe eax, r8d; ret; 
0x0000000140002e9e: mov eax, 0xd; ret; 
0x0000000140001607: mov eax, 1; add rsp, 0x28; ret; 
0x0000000140002eb9: mov eax, dword ptr [r9 + rax*8 + 4]; ret; 
0x0000000140003388: mov eax, dword ptr [rax + rax*8 + 8]; ret; 
0x00000001400082fb: mov eax, dword ptr [rbx + 0x10]; and dword ptr [rbx + 8], 0; mov qword ptr [rbx], rax; add rsp, 0x20; pop rbx; ret; 
0x000000014000565a: mov eax, dword ptr [rcx + 0x158]; lock add dword ptr [rax + 0x160], r9d; mov rax, rcx; ret; 
0x00000001400055ba: mov eax, dword ptr [rcx + 0x158]; lock inc dword ptr [rax + 0x160]; ret; 
0x0000000140004cea: mov eax, dword ptr [rcx + 0x1c]; add rsp, 0x28; ret; 
0x0000000140002eba: mov eax, dword ptr [rcx + rax*8 + 4]; ret; 
0x00000001400011d1: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000140001153: mov eax, dword ptr [rsp + 0x28]; mov rcx, qword ptr [rsp + 0x48]; xor rcx, rsp; call 0x1630; add rsp, 0x58; ret; 
0x00000001400081c2: mov eax, dword ptr [rsp + 0x38]; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140008d59: mov eax, ecx; add rsp, 0x20; pop rbp; ret; 
0x0000000140008d57: mov eax, ecx; mov eax, ecx; add rsp, 0x20; pop rbp; ret; 
0x0000000140004521: mov eax, ecx; mov ecx, 0x5a4d; cmp word ptr [rax], cx; je 0x4530; xor eax, eax; ret; 
0x0000000140004593: mov eax, ecx; ret; 
0x00000001400016f2: mov eax, edi; add rsp, 0x28; pop rdi; pop rbx; ret; 
0x00000001400069b5: mov eax, edi; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140004848: mov eax, edi; mov rbx, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rdi; ret; 
0x0000000140001986: mov eax, edi; mov rbx, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rdi; ret; 
0x0000000140008d29: mov ebp, 0x4890ffff; add esp, 0x20; pop rbp; ret; 
0x0000000140008830: mov ebp, dword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x0000000140002142: mov ebp, dword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x40]; add rsp, 0x20; pop rdi; ret; 
0x0000000140005a36: mov ebp, dword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x48]; add rsp, 0x20; pop rdi; ret; 
0x0000000140002e38: mov ebp, dword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x50]; add rsp, 0x30; pop rdi; ret; 
0x0000000140008e41: mov ebp, edx; call 0x3004; nop; add rsp, 0x20; pop rbp; ret; 
0x000000014000769a: mov ebx, dword ptr [rbx + 0x10]; mov rsi, qword ptr [r11 + 0x18]; mov rsp, r11; pop rdi; ret; 
0x0000000140004657: mov ebx, dword ptr [rsp + 0x30]; add rsp, 0x20; pop r12; ret; 
0x000000014000307d: mov ebx, dword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x000000014000882b: mov ebx, dword ptr [rsp + 0x30]; mov rbp, qword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x0000000140001fc9: mov ebx, dword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x38]; add rsp, 0x20; pop r12; ret; 
0x00000001400067c7: mov ebx, dword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x00000001400042f1: mov ebx, dword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x0000000140004481: mov ebx, dword ptr [rsp + 0x40]; add rsp, 0x20; pop rdi; ret; 
0x000000014000484b: mov ebx, dword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rdi; ret; 
0x0000000140001989: mov ebx, dword ptr [rsp + 0x48]; add rsp, 0x30; pop rdi; ret; 
0x0000000140003beb: mov ebx, dword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x58]; add rsp, 0x30; pop rdi; ret; 
0x00000001400066fc: mov ebx, dword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x58]; add rsp, 0x40; pop rdi; ret; 
0x0000000140007877: mov ebx, dword ptr [rsp + 0x70]; mov rsi, qword ptr [rsp + 0x78]; add rsp, 0x60; pop rdi; ret; 
0x0000000140005c91: mov ebx, dword ptr [rsp + 0x80]; add rsp, 0x60; pop rdi; pop rsi; pop rbp; ret; 
0x0000000140008785: mov ebx, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x0000000140004523: mov ecx, 0x5a4d; cmp word ptr [rax], cx; je 0x4530; xor eax, eax; ret; 
0x0000000140008d02: mov ecx, 0xd; call 0x4b28; nop; add rsp, 0x20; pop rbp; ret; 
0x000000014000361a: mov ecx, 0xfc; call 0x3390; mov ecx, 0xff; call 0x3390; add rsp, 0x28; ret; 
0x0000000140003624: mov ecx, 0xff; call 0x3390; add rsp, 0x28; ret; 
0x0000000140008cc6: mov ecx, dword ptr [rax]; call 0x3634; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140008e5a: mov ecx, dword ptr [rbp + 0x30]; call 0x1e9c; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140008e8c: mov ecx, dword ptr [rbp + 0x40]; call 0x8958; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140008e73: mov ecx, dword ptr [rbp + 0x50]; call 0x8958; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140007fb1: mov ecx, dword ptr [rbx + 0x2b8]; call 0x4770; add rsp, 0x20; pop rbx; ret; 
0x000000014000108b: mov ecx, dword ptr [rsp + 0x1d8]; xor rcx, rsp; call 0x1630; add rsp, 0x1e8; ret; 
0x00000001400013ea: mov ecx, dword ptr [rsp + 0x280]; xor rcx, rsp; call 0x1630; add rsp, 0x298; ret; 
0x0000000140005a7c: mov ecx, dword ptr [rsp + 0x30]; and dword ptr [rcx + 0xc8], 0xfffffffd; add rsp, 0x40; pop rbx; ret; 
0x0000000140001158: mov ecx, dword ptr [rsp + 0x48]; xor rcx, rsp; call 0x1630; add rsp, 0x58; ret; 
0x000000014000157f: mov ecx, dword ptr [rsp + 0x60]; xor rcx, rsp; call 0x1630; add rsp, 0x78; ret; 
0x000000014000479e: mov ecx, eax; call 0x2e78; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140001ae2: mov ecx, eax; call qword ptr [rip + 0x7536]; add rsp, 0x88; ret; 
0x0000000140002f36: mov ecx, ebx; call 0x2e78; mov dword ptr [r10], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140002fd3: mov ecx, ebx; call rax; add rsp, 0x20; pop rbx; ret; 
0x00000001400015fd: mov ecx, edx; mov rdx, r9; call 0x1590; mov eax, 1; add rsp, 0x28; ret; 
0x000000014000276e: mov edi, 0x2b000001; ret; 
0x0000000140004f68: mov edi, dword ptr [rbx + 0x28]; mov rsp, r11; pop rbp; ret; 
0x0000000140003fb5: mov edi, dword ptr [rbx + 0x30]; mov rsp, r11; pop r14; pop r13; pop r12; ret; 
0x0000000140001fce: mov edi, dword ptr [rsp + 0x38]; add rsp, 0x20; pop r12; ret; 
0x0000000140004a86: mov edi, dword ptr [rsp + 0x40]; add rsp, 0x20; pop r12; ret; 
0x0000000140004c1b: mov edi, dword ptr [rsp + 0x40]; add rsp, 0x20; pop r13; ret; 
0x0000000140008945: mov edi, dword ptr [rsp + 0x40]; mov r12, qword ptr [rsp + 0x48]; add rsp, 0x20; pop r14; ret; 
0x00000001400021f0: mov edi, dword ptr [rsp + 0x48]; add rsp, 0x20; pop r12; ret; 
0x0000000140005502: mov edi, dword ptr [rsp + 0x50]; mov r12, qword ptr [rsp + 0x58]; add rsp, 0x30; pop r13; ret; 
0x0000000140004a01: mov edi, dword ptr [rsp + 0x60]; add rsp, 0x30; pop r15; pop r13; pop r12; ret; 
0x0000000140003ce5: mov edi, dword ptr [rsp + 0x68]; add rsp, 0x40; pop r12; ret; 
0x00000001400085f4: mov edi, dword ptr [rsp + 0x70]; mov r12, qword ptr [rsp + 0x78]; add rsp, 0x50; pop rbp; ret; 
0x0000000140001e4d: mov edx, 0x480f186b; add esp, 0x20; pop rbx; ret; 
0x0000000140001adc: mov edx, 0xc0000409; mov rcx, rax; call qword ptr [rip + 0x7536]; add rsp, 0x88; ret; 
0x0000000140002876: mov edx, 0xff4808ed; ret; 
0x0000000140008d95: mov edx, dword ptr [rdx + rcx*8]; call 0x1ee8; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140008781: mov edx, dword ptr [rsp]; mov r11, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x0000000140001600: mov edx, ecx; call 0x1590; mov eax, 1; add rsp, 0x28; ret; 
0x0000000140008cee: mov esi, 0x4890ffff; add esp, 0x20; pop rbp; ret; 
0x0000000140003163: mov esi, 0xc0330000; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x000000014000769e: mov esi, dword ptr [rbx + 0x18]; mov rsp, r11; pop rdi; ret; 
0x0000000140004f64: mov esi, dword ptr [rbx + 0x20]; mov rdi, qword ptr [r11 + 0x28]; mov rsp, r11; pop rbp; ret; 
0x0000000140002da8: mov esi, dword ptr [rbx + 0x30]; mov rsp, r11; pop r12; pop rdi; pop rbp; ret; 
0x00000001400035e1: mov esi, dword ptr [rbx + 0x38]; mov rsp, r11; pop r13; pop r12; pop rdi; ret; 
0x00000001400067cc: mov esi, dword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x0000000140004a81: mov esi, dword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; add rsp, 0x20; pop r12; ret; 
0x0000000140004c16: mov esi, dword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; add rsp, 0x20; pop r13; ret; 
0x0000000140002147: mov esi, dword ptr [rsp + 0x40]; add rsp, 0x20; pop rdi; ret; 
0x00000001400021eb: mov esi, dword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x48]; add rsp, 0x20; pop r12; ret; 
0x0000000140005a3b: mov esi, dword ptr [rsp + 0x48]; add rsp, 0x20; pop rdi; ret; 
0x0000000140004850: mov esi, dword ptr [rsp + 0x48]; add rsp, 0x30; pop rdi; ret; 
0x00000001400054fd: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov r12, qword ptr [rsp + 0x58]; add rsp, 0x30; pop r13; ret; 
0x0000000140002e3d: mov esi, dword ptr [rsp + 0x50]; add rsp, 0x30; pop rdi; ret; 
0x0000000140003bf0: mov esi, dword ptr [rsp + 0x58]; add rsp, 0x30; pop rdi; ret; 
0x0000000140006701: mov esi, dword ptr [rsp + 0x58]; add rsp, 0x40; pop rdi; ret; 
0x0000000140003ce0: mov esi, dword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x68]; add rsp, 0x40; pop r12; ret; 
0x000000014000787c: mov esi, dword ptr [rsp + 0x78]; add rsp, 0x60; pop rdi; ret; 
0x0000000140005de0: mov esp, 0x48000086; add esp, 0x28; ret; 
0x0000000140008e2f: mov esp, 0x4890ffff; add esp, 0x20; pop rbp; ret; 
0x0000000140008e44: mov esp, 0x90ffffa1; add rsp, 0x20; pop rbp; ret; 
0x000000014000894a: mov esp, dword ptr [rsp + 0x48]; add rsp, 0x20; pop r14; ret; 
0x0000000140005507: mov esp, dword ptr [rsp + 0x58]; add rsp, 0x30; pop r13; ret; 
0x00000001400085f9: mov esp, dword ptr [rsp + 0x78]; add rsp, 0x50; pop rbp; ret; 
0x0000000140002dac: mov esp, ebx; pop r12; pop rdi; pop rbp; ret; 
0x00000001400035e5: mov esp, ebx; pop r13; pop r12; pop rdi; ret; 
0x0000000140003fb9: mov esp, ebx; pop r14; pop r13; pop r12; ret; 
0x0000000140004f6c: mov esp, ebx; pop rbp; ret; 
0x00000001400076a2: mov esp, ebx; pop rdi; ret; 
0x000000014000853e: mov qword ptr [rbx + 0x10], rax; mov dword ptr [rbx + 8], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140008302: mov qword ptr [rbx], rax; add rsp, 0x20; pop rbx; ret; 
0x000000014000853b: mov qword ptr [rbx], rax; mov qword ptr [rbx + 0x10], rax; mov dword ptr [rbx + 8], eax; add rsp, 0x20; pop rbx; ret; 
0x00000001400048c7: mov qword ptr [rbx], rcx; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x00000001400089af: mov qword ptr [rip + 0x4b12], rax; add rsp, 0x48; ret; 
0x0000000140006050: mov qword ptr [rip + 0x8479], rcx; ret; 
0x0000000140005dec: mov qword ptr [rip + 0x86b5], rcx; mov qword ptr [rip + 0x86b6], rcx; mov qword ptr [rip + 0x86b7], rcx; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005df3: mov qword ptr [rip + 0x86b6], rcx; mov qword ptr [rip + 0x86b7], rcx; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005dfa: mov qword ptr [rip + 0x86b7], rcx; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005e01: mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005ddd: mov qword ptr [rip + 0x86bc], rax; add rsp, 0x28; ret; 
0x0000000140002c60: mov qword ptr [rip + 0xae31], rcx; ret; 
0x00000001400044bd: mov qword ptr [rsp + 0x20], rsp; mov qword ptr [rsp + 0x28], r8; call 0x8c52; add rsp, 0x4d8; ret; 
0x00000001400044c2: mov qword ptr [rsp + 0x28], r8; call 0x8c52; add rsp, 0x4d8; ret; 
0x0000000140008780: mov r10, qword ptr [rsp]; mov r11, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x0000000140008784: mov r11, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x0000000140008949: mov r12, qword ptr [rsp + 0x48]; add rsp, 0x20; pop r14; ret; 
0x0000000140005506: mov r12, qword ptr [rsp + 0x58]; add rsp, 0x30; pop r13; ret; 
0x00000001400085f8: mov r12, qword ptr [rsp + 0x78]; add rsp, 0x50; pop rbp; ret; 
0x0000000140003387: mov rax, qword ptr [r8 + rax*8 + 8]; ret; 
0x00000001400082fa: mov rax, qword ptr [rbx + 0x10]; and dword ptr [rbx + 8], 0; mov qword ptr [rbx], rax; add rsp, 0x20; pop rbx; ret; 
0x0000000140005659: mov rax, qword ptr [rcx + 0x158]; lock add dword ptr [rax + 0x160], r9d; mov rax, rcx; ret; 
0x00000001400055b9: mov rax, qword ptr [rcx + 0x158]; lock inc dword ptr [rax + 0x160]; ret; 
0x00000001400011d0: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x00000001400081c1: mov rax, qword ptr [rsp + 0x38]; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140004520: mov rax, rcx; mov ecx, 0x5a4d; cmp word ptr [rax], cx; je 0x4530; xor eax, eax; ret; 
0x0000000140004592: mov rax, rcx; ret; 
0x000000014000882f: mov rbp, qword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x0000000140002141: mov rbp, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x40]; add rsp, 0x20; pop rdi; ret; 
0x0000000140005a35: mov rbp, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x48]; add rsp, 0x20; pop rdi; ret; 
0x0000000140002e37: mov rbp, qword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x50]; add rsp, 0x30; pop rdi; ret; 
0x0000000140008e40: mov rbp, rdx; call 0x3004; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140007699: mov rbx, qword ptr [r11 + 0x10]; mov rsi, qword ptr [r11 + 0x18]; mov rsp, r11; pop rdi; ret; 
0x0000000140004656: mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop r12; ret; 
0x000000014000307c: mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x000000014000882a: mov rbx, qword ptr [rsp + 0x30]; mov rbp, qword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x0000000140001fc8: mov rbx, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x38]; add rsp, 0x20; pop r12; ret; 
0x00000001400067c6: mov rbx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x00000001400042f0: mov rbx, qword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x0000000140004480: mov rbx, qword ptr [rsp + 0x40]; add rsp, 0x20; pop rdi; ret; 
0x000000014000484a: mov rbx, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rdi; ret; 
0x0000000140001988: mov rbx, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rdi; ret; 
0x0000000140003bea: mov rbx, qword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x58]; add rsp, 0x30; pop rdi; ret; 
0x00000001400066fb: mov rbx, qword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x58]; add rsp, 0x40; pop rdi; ret; 
0x0000000140007876: mov rbx, qword ptr [rsp + 0x70]; mov rsi, qword ptr [rsp + 0x78]; add rsp, 0x60; pop rdi; ret; 
0x0000000140005c90: mov rbx, qword ptr [rsp + 0x80]; add rsp, 0x60; pop rdi; pop rsi; pop rbp; ret; 
0x0000000140008e59: mov rcx, qword ptr [rbp + 0x30]; call 0x1e9c; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140007fb0: mov rcx, qword ptr [rbx + 0x2b8]; call 0x4770; add rsp, 0x20; pop rbx; ret; 
0x000000014000108a: mov rcx, qword ptr [rsp + 0x1d8]; xor rcx, rsp; call 0x1630; add rsp, 0x1e8; ret; 
0x00000001400013e9: mov rcx, qword ptr [rsp + 0x280]; xor rcx, rsp; call 0x1630; add rsp, 0x298; ret; 
0x0000000140005a7b: mov rcx, qword ptr [rsp + 0x30]; and dword ptr [rcx + 0xc8], 0xfffffffd; add rsp, 0x40; pop rbx; ret; 
0x0000000140001157: mov rcx, qword ptr [rsp + 0x48]; xor rcx, rsp; call 0x1630; add rsp, 0x58; ret; 
0x000000014000157e: mov rcx, qword ptr [rsp + 0x60]; xor rcx, rsp; call 0x1630; add rsp, 0x78; ret; 
0x0000000140001ae1: mov rcx, rax; call qword ptr [rip + 0x7536]; add rsp, 0x88; ret; 
0x00000001400015fc: mov rcx, rdx; mov rdx, r9; call 0x1590; mov eax, 1; add rsp, 0x28; ret; 
0x0000000140004f67: mov rdi, qword ptr [r11 + 0x28]; mov rsp, r11; pop rbp; ret; 
0x0000000140003fb4: mov rdi, qword ptr [r11 + 0x30]; mov rsp, r11; pop r14; pop r13; pop r12; ret; 
0x0000000140001fcd: mov rdi, qword ptr [rsp + 0x38]; add rsp, 0x20; pop r12; ret; 
0x0000000140004a85: mov rdi, qword ptr [rsp + 0x40]; add rsp, 0x20; pop r12; ret; 
0x0000000140004c1a: mov rdi, qword ptr [rsp + 0x40]; add rsp, 0x20; pop r13; ret; 
0x0000000140008944: mov rdi, qword ptr [rsp + 0x40]; mov r12, qword ptr [rsp + 0x48]; add rsp, 0x20; pop r14; ret; 
0x00000001400021ef: mov rdi, qword ptr [rsp + 0x48]; add rsp, 0x20; pop r12; ret; 
0x0000000140005501: mov rdi, qword ptr [rsp + 0x50]; mov r12, qword ptr [rsp + 0x58]; add rsp, 0x30; pop r13; ret; 
0x0000000140004a00: mov rdi, qword ptr [rsp + 0x60]; add rsp, 0x30; pop r15; pop r13; pop r12; ret; 
0x0000000140003ce4: mov rdi, qword ptr [rsp + 0x68]; add rsp, 0x40; pop r12; ret; 
0x00000001400085f3: mov rdi, qword ptr [rsp + 0x70]; mov r12, qword ptr [rsp + 0x78]; add rsp, 0x50; pop rbp; ret; 
0x0000000140008d94: mov rdx, qword ptr [rdx + rcx*8]; call 0x1ee8; nop; add rsp, 0x20; pop rbp; ret; 
0x00000001400015ff: mov rdx, r9; call 0x1590; mov eax, 1; add rsp, 0x28; ret; 
0x000000014000769d: mov rsi, qword ptr [r11 + 0x18]; mov rsp, r11; pop rdi; ret; 
0x0000000140004f63: mov rsi, qword ptr [r11 + 0x20]; mov rdi, qword ptr [r11 + 0x28]; mov rsp, r11; pop rbp; ret; 
0x0000000140002da7: mov rsi, qword ptr [r11 + 0x30]; mov rsp, r11; pop r12; pop rdi; pop rbp; ret; 
0x00000001400035e0: mov rsi, qword ptr [r11 + 0x38]; mov rsp, r11; pop r13; pop r12; pop rdi; ret; 
0x00000001400067cb: mov rsi, qword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x0000000140004a80: mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; add rsp, 0x20; pop r12; ret; 
0x0000000140004c15: mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; add rsp, 0x20; pop r13; ret; 
0x0000000140002146: mov rsi, qword ptr [rsp + 0x40]; add rsp, 0x20; pop rdi; ret; 
0x00000001400021ea: mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x48]; add rsp, 0x20; pop r12; ret; 
0x0000000140005a3a: mov rsi, qword ptr [rsp + 0x48]; add rsp, 0x20; pop rdi; ret; 
0x000000014000484f: mov rsi, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rdi; ret; 
0x00000001400054fc: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov r12, qword ptr [rsp + 0x58]; add rsp, 0x30; pop r13; ret; 
0x0000000140002e3c: mov rsi, qword ptr [rsp + 0x50]; add rsp, 0x30; pop rdi; ret; 
0x0000000140003bef: mov rsi, qword ptr [rsp + 0x58]; add rsp, 0x30; pop rdi; ret; 
0x0000000140006700: mov rsi, qword ptr [rsp + 0x58]; add rsp, 0x40; pop rdi; ret; 
0x0000000140003cdf: mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x68]; add rsp, 0x40; pop r12; ret; 
0x000000014000787b: mov rsi, qword ptr [rsp + 0x78]; add rsp, 0x60; pop rdi; ret; 
0x0000000140002dab: mov rsp, r11; pop r12; pop rdi; pop rbp; ret; 
0x00000001400035e4: mov rsp, r11; pop r13; pop r12; pop rdi; ret; 
0x0000000140003fb8: mov rsp, r11; pop r14; pop r13; pop r12; ret; 
0x0000000140004f6b: mov rsp, r11; pop rbp; ret; 
0x00000001400076a1: mov rsp, r11; pop rdi; ret; 
0x0000000140008e45: movabs eax, dword ptr [0x5d20c4834890ffff]; ret; 
0x0000000140005a81: movabs eax, dword ptr [0xc48348fd000000c8]; pop rbx; ret; 
0x0000000140001cf8: movsd dword ptr [rdi], dword ptr [rsi]; add byte ptr [rax], al; ret; 
0x0000000140001cf7: movsd dword ptr [rdi], dword ptr gs:[rsi]; add byte ptr [rax], al; ret; 
0x000000014000895f: movsxd rax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; ret 0xe283; 
0x00000001400069b2: movsxd rbx, dword ptr [rax]; add byte ptr [rbx + 0x5c8b48c7], cl; and al, 0x30; add rsp, 0x20; pop rdi; ret; 
0x0000000140002001: movsxd rsp, dword ptr [rax + rax]; and qword ptr [rbx], 0; and qword ptr [rbx + 0x10], 0; add rsp, 0x20; pop rbx; ret; 
0x000000014000859b: movzx eax, word ptr [rsp + 0x40]; add rsp, 0x38; ret; 
0x0000000140001d65: mul dword ptr [rax + rax + 0x14894800]; add dword ptr [rax - 0x7d], ecx; ret 0x4830; 
0x00000001400061fa: neg eax; dec eax; add rsp, 0x28; ret; 
0x00000001400061f6: neg eax; sbb eax, eax; neg eax; dec eax; add rsp, 0x28; ret; 
0x00000001400061f5: neg rax; sbb eax, eax; neg eax; dec eax; add rsp, 0x28; ret; 
0x0000000140004508: nop dword ptr [rax + rax]; ret; 
0x0000000140004507: nop word ptr [rax + rax]; ret; 
0x0000000140008caf: nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140001985: nop; mov eax, edi; mov rbx, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rdi; ret; 
0x0000000140001008: nop; nop; nop; nop; nop; ret; 
0x0000000140001009: nop; nop; nop; nop; ret; 
0x000000014000100a: nop; nop; nop; ret; 
0x000000014000100b: nop; nop; ret; 
0x000000014000100c: nop; ret; 
0x0000000140008594: or al, 0; add byte ptr [rbp + 0xfd974c0], al; mov bh, 0x44; and al, 0x40; add rsp, 0x38; ret; 
0x00000001400089cc: or al, 0x48; cmp ecx, -2; je 0x89d9; call qword ptr [rip + 0x817]; add rsp, 0x28; ret; 
0x0000000140008ae6: or al, 0x48; inc ecx; dec r8; jne 0x8ae0; xor rax, rax; ret; 
0x0000000140005a7a: or al, 0x48; mov ecx, dword ptr [rsp + 0x30]; and dword ptr [rcx + 0xc8], 0xfffffffd; add rsp, 0x40; pop rbx; ret; 
0x0000000140008c09: or al, 0x48; xor eax, eax; ret; 
0x0000000140001c4b: or al, 0xff; ret 0x8348; 
0x0000000140005b63: or al, byte ptr [rsi + rsi*8 - 0x72b7468b]; add edi, r15d; ret; 
0x0000000140008cc7: or al, ch; test eax, 0x4890ffff; add esp, 0x20; pop rbp; ret; 
0x00000001400076ff: or bh, bh; ret 0x15ff; 
0x000000014000457a: or byte ptr [r11], al; ret 0x3b4c; 
0x0000000140003076: or byte ptr [rax + 0x3b], cl; fbstp tbyte ptr [rdx - 0x13]; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x00000001400030b0: or byte ptr [rax + 0x3b], cl; fbstp tbyte ptr [rdx - 0x17]; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x00000001400017e8: or byte ptr [rax + 0xf], cl; ret; 
0x00000001400073d6: or byte ptr [rax - 0x77], cl; jl 0x73ff; and bh, bh; ret 0x15ff; 
0x0000000140002878: or byte ptr [rax - 1], cl; ret; 
0x00000001400089ac: or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x4b12; add rsp, 0x48; ret; 
0x0000000140008300: or byte ptr [rax], al; mov qword ptr [rbx], rax; add rsp, 0x20; pop rbx; ret; 
0x000000014000457b: or byte ptr [rbx], al; ret 0x3b4c; 
0x0000000140008a50: or byte ptr [rcx + 0x33], cl; ret 0x8549; 
0x0000000140002873: or byte ptr [rcx + 0xf], al; mov edx, 0xff4808ed; ret; 
0x0000000140007917: or byte ptr [rcx - 0x75], cl; ret; 
0x000000014000357c: or byte ptr [rsi + 0x39], ah; xor esi, dword ptr [rcx + rdx - 1]; ret 0xff49; 
0x00000001400081bf: or ch, bh; mov rax, qword ptr [rsp + 0x38]; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140001790: or cl, byte ptr [rax - 0x3e00b7ef]; dec r8; jne 0x1791; ret; 
0x0000000140008ae4: or dh, byte ptr [rbp + 0xc]; inc rcx; dec r8; jne 0x8ae0; xor rax, rax; ret; 
0x0000000140008a36: or dword ptr [rax + 0x3b], ecx; ret 0xbf75; 
0x0000000140008bdf: or dword ptr [rax + 0x3b], ecx; ret 0xc575; 
0x0000000140001add: or dword ptr [rax + rax], eax; ror byte ptr [rax - 0x75], 0xc8; call qword ptr [rip + 0x7536]; add rsp, 0x88; ret; 
0x000000014000889e: or dword ptr [rax], eax; add byte ptr [rax], al; call 0x2e58; or rax, 0xffffffffffffffff; add rsp, 0x28; ret; 
0x0000000140004cbb: or dword ptr [rax], eax; add byte ptr [rax], al; call 0x2e58; xor eax, eax; add rsp, 0x28; ret; 
0x0000000140008a00: or dword ptr [rdx], edi; ret 0x5675; 
0x0000000140006052: or eax, 0x8479; ret; 
0x0000000140005dee: or eax, 0x86b5; mov qword ptr [rip + 0x86b6], rcx; mov qword ptr [rip + 0x86b7], rcx; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005df5: or eax, 0x86b6; mov qword ptr [rip + 0x86b7], rcx; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005dfc: or eax, 0x86b7; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005e03: or eax, 0x86b8; ret; 
0x0000000140002c62: or eax, 0xae31; ret; 
0x000000014000170b: or eax, 0xbdd8; sete al; ret; 
0x0000000140002f92: or eax, 0xffffffb1; call qword ptr [rip + 0x6093]; xor eax, eax; add rsp, 0x28; ret; 
0x0000000140005dd2: or eax, 0xffffffd1; call qword ptr [rip + 0x329b]; mov qword ptr [rip + 0x86bc], rax; add rsp, 0x28; ret; 
0x0000000140006624: or eax, 0xffffffff; add rsp, 0x28; ret; 
0x0000000140003579: or eax, dword ptr [rcx - 0x78]; or byte ptr [rsi + 0x39], ah; xor esi, dword ptr [rcx + rdx - 1]; ret 0xff49; 
0x0000000140001706: or ecx, 1; cmp qword ptr [rip + 0xbdd8], rcx; sete al; ret; 
0x00000001400048c9: or ecx, dword ptr [rax - 0x75]; pop rsp; and al, 0x30; add rsp, 0x20; pop rdi; ret; 
0x0000000140008371: or rax, 0xffffffffffffffff; add rsp, 0x28; ret; 
0x0000000140001705: or rcx, 1; cmp qword ptr [rip + 0xbdd8], rcx; sete al; ret; 
0x0000000140004524: pop r10; add byte ptr [rax], al; cmp word ptr [rax], cx; je 0x4530; xor eax, eax; ret; 
0x000000014000760a: pop r12; pop rbp; ret; 
0x0000000140002dae: pop r12; pop rdi; pop rbp; ret; 
0x0000000140006405: pop r12; pop rdi; pop rsi; pop rbp; pop rbx; ret; 
0x0000000140002a5a: pop r12; pop rdi; pop rsi; pop rbp; ret; 
0x0000000140007266: pop r12; pop rdi; pop rsi; ret; 
0x0000000140001ced: pop r12; pop rdi; ret; 
0x0000000140001fd6: pop r12; ret; 
0x0000000140007608: pop r13; pop r12; pop rbp; ret; 
0x0000000140002a58: pop r13; pop r12; pop rdi; pop rsi; pop rbp; ret; 
0x0000000140007264: pop r13; pop r12; pop rdi; pop rsi; ret; 
0x0000000140001ceb: pop r13; pop r12; pop rdi; ret; 
0x0000000140003afe: pop r13; pop r12; ret; 
0x0000000140004c23: pop r13; ret; 
0x0000000140007606: pop r14; pop r13; pop r12; pop rbp; ret; 
0x0000000140007262: pop r14; pop r13; pop r12; pop rdi; pop rsi; ret; 
0x0000000140001ce9: pop r14; pop r13; pop r12; pop rdi; ret; 
0x0000000140003afc: pop r14; pop r13; pop r12; ret; 
0x0000000140008952: pop r14; ret; 
0x0000000140004a09: pop r15; pop r13; pop r12; ret; 
0x0000000140007604: pop r15; pop r14; pop r13; pop r12; pop rbp; ret; 
0x0000000140001ce7: pop r15; pop r14; pop r13; pop r12; pop rdi; ret; 
0x00000001400083e0: pop rax; add al, 0; add byte ptr [rax + 0x3b], cl; ret; 
0x000000014000565c: pop rax; add dword ptr [rax], eax; add al, dh; add dword ptr [rax + 0x160], r9d; mov rax, rcx; ret; 
0x00000001400055bc: pop rax; add dword ptr [rax], eax; add al, dh; inc dword ptr [rax + 0x160]; ret; 
0x0000000140003af7: pop rax; add rsp, 0x20; pop r14; pop r13; pop r12; ret; 
0x000000014000550a: pop rax; add rsp, 0x30; pop r13; ret; 
0x0000000140003bf3: pop rax; add rsp, 0x30; pop rdi; ret; 
0x0000000140006704: pop rax; add rsp, 0x40; pop rdi; ret; 
0x0000000140003cde: pop rax; mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x68]; add rsp, 0x40; pop r12; ret; 
0x0000000140001167: pop rax; ret; 
0x0000000140007609: pop rbp; pop r12; pop rbp; ret; 
0x0000000140002a59: pop rbp; pop r12; pop rdi; pop rsi; pop rbp; ret; 
0x0000000140007265: pop rbp; pop r12; pop rdi; pop rsi; ret; 
0x0000000140001cec: pop rbp; pop r12; pop rdi; ret; 
0x0000000140003aff: pop rbp; pop r12; ret; 
0x0000000140006409: pop rbp; pop rbx; ret; 
0x0000000140002a5e: pop rbp; ret; 
0x000000014000769b: pop rbx; adc byte ptr [rcx - 0x75], cl; jae 0x76b9; mov rsp, r11; pop rdi; ret; 
0x00000001400016f9: pop rbx; ret; 
0x00000001400089ab: pop rcx; or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x4b12; add rsp, 0x48; ret; 
0x0000000140004a0a: pop rdi; pop r13; pop r12; ret; 
0x0000000140007605: pop rdi; pop r14; pop r13; pop r12; pop rbp; ret; 
0x0000000140001ce8: pop rdi; pop r14; pop r13; pop r12; pop rdi; ret; 
0x0000000140002db0: pop rdi; pop rbp; ret; 
0x00000001400016f8: pop rdi; pop rbx; ret; 
0x0000000140006407: pop rdi; pop rsi; pop rbp; pop rbx; ret; 
0x0000000140002a5c: pop rdi; pop rsi; pop rbp; ret; 
0x0000000140007268: pop rdi; pop rsi; ret; 
0x0000000140001991: pop rdi; ret; 
0x0000000140004525: pop rdx; add byte ptr [rax], al; cmp word ptr [rax], cx; je 0x4530; xor eax, eax; ret; 
0x0000000140007607: pop rsi; pop r13; pop r12; pop rbp; ret; 
0x0000000140007263: pop rsi; pop r13; pop r12; pop rdi; pop rsi; ret; 
0x0000000140001cea: pop rsi; pop r13; pop r12; pop rdi; ret; 
0x0000000140003afd: pop rsi; pop r13; pop r12; ret; 
0x0000000140006408: pop rsi; pop rbp; pop rbx; ret; 
0x0000000140002a5d: pop rsi; pop rbp; ret; 
0x0000000140007269: pop rsi; ret; 
0x0000000140004658: pop rsp; and al, 0x30; add rsp, 0x20; pop r12; ret; 
0x000000014000307e: pop rsp; and al, 0x30; add rsp, 0x20; pop rdi; ret; 
0x000000014000882c: pop rsp; and al, 0x30; mov rbp, qword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x0000000140001fca: pop rsp; and al, 0x30; mov rdi, qword ptr [rsp + 0x38]; add rsp, 0x20; pop r12; ret; 
0x00000001400067c8: pop rsp; and al, 0x30; mov rsi, qword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x00000001400042f2: pop rsp; and al, 0x38; add rsp, 0x20; pop rdi; ret; 
0x0000000140004482: pop rsp; and al, 0x40; add rsp, 0x20; pop rdi; ret; 
0x000000014000484c: pop rsp; and al, 0x40; mov rsi, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rdi; ret; 
0x000000014000198a: pop rsp; and al, 0x48; add rsp, 0x30; pop rdi; ret; 
0x0000000140003bec: pop rsp; and al, 0x50; mov rsi, qword ptr [rsp + 0x58]; add rsp, 0x30; pop rdi; ret; 
0x00000001400066fd: pop rsp; and al, 0x50; mov rsi, qword ptr [rsp + 0x58]; add rsp, 0x40; pop rdi; ret; 
0x0000000140007878: pop rsp; and al, 0x70; mov rsi, qword ptr [rsp + 0x78]; add rsp, 0x60; pop rdi; ret; 
0x0000000140008786: pop rsp; and al, 8; add rsp, 0x10; ret; 
0x000000014000760b: pop rsp; pop rbp; ret; 
0x0000000140002daf: pop rsp; pop rdi; pop rbp; ret; 
0x0000000140006406: pop rsp; pop rdi; pop rsi; pop rbp; pop rbx; ret; 
0x0000000140002a5b: pop rsp; pop rdi; pop rsi; pop rbp; ret; 
0x0000000140007267: pop rsp; pop rdi; pop rsi; ret; 
0x0000000140001cee: pop rsp; pop rdi; ret; 
0x0000000140001fd7: pop rsp; ret; 
0x0000000140005953: popfq; ret; 
0x0000000140008dbc: push -0x6f000043; add rsp, 0x20; pop rbp; ret; 
0x00000001400085f2: push 0x247c8b48; jo 0x8645; mov esp, dword ptr [rsp + 0x78]; add rsp, 0x50; pop rbp; ret; 
0x0000000140003ce8: push 0x40c48348; pop r12; ret; 
0x00000001400089ca: push qword ptr [rsp + rcx + 0x48]; cmp ecx, -2; je 0x89d9; call qword ptr [rip + 0x817]; add rsp, 0x28; ret; 
0x0000000140008e74: push r8; call 0x8958; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140007339: push rax; add rsp, 0x20; pop r12; pop rdi; pop rsi; ret; 
0x00000001400061de: push rax; add rsp, 0x20; pop r14; pop r13; pop r12; ret; 
0x0000000140002e40: push rax; add rsp, 0x30; pop rdi; ret; 
0x0000000140008e75: push rax; call 0x8958; nop; add rsp, 0x20; pop rbp; ret; 
0x0000000140005505: push rax; mov r12, qword ptr [rsp + 0x58]; add rsp, 0x30; pop r13; ret; 
0x0000000140003bee: push rax; mov rsi, qword ptr [rsp + 0x58]; add rsp, 0x30; pop rdi; ret; 
0x00000001400066ff: push rax; mov rsi, qword ptr [rsp + 0x58]; add rsp, 0x40; pop rdi; ret; 
0x0000000140008600: push rax; pop rbp; ret; 
0x00000001400017ec: push rcx; adc byte ptr [rax - 0x7d], cl; rol dword ptr [rax + 0x48], 0xf; ret; 
0x00000001400017f5: push rcx; fmul dword ptr [rax + 0xf]; ret; 
0x00000001400017e7: push rcx; or byte ptr [rax + 0xf], cl; ret; 
0x0000000140002ed9: rcl byte ptr [rax], 0x48; add esp, 0x28; ret; 
0x0000000140008b70: rcr dword ptr [rbx], 0xc0; sbb eax, -1; ret; 
0x000000014000120b: ret 0; 
0x00000001400073dd: ret 0x15ff; 
0x0000000140004df9: ret 0x1677; 
0x0000000140001c59: ret 0x348; 
0x0000000140003335: ret 0x39e9; 
0x0000000140005ee7: ret 0x3b48; 
0x000000014000457d: ret 0x3b4c; 
0x0000000140006fe2: ret 0x4802; 
0x0000000140003d55: ret 0x4809; 
0x0000000140001d6f: ret 0x4830; 
0x0000000140003d81: ret 0x4858; 
0x0000000140001dcd: ret 0x4930; 
0x00000001400036ef: ret 0x4c10; 
0x0000000140005fcd: ret 0x5489; 
0x0000000140008a02: ret 0x5675; 
0x0000000140008bb4: ret 0x5775; 
0x00000001400023ab: ret 0x6348; 
0x0000000140006501: ret 0x6602; 
0x000000014000345a: ret 0x69; 
0x0000000140001da8: ret 0x6b48; 
0x00000001400059da: ret 0x7eb; 
0x0000000140003378: ret 0x8310; 
0x0000000140001c4d: ret 0x8348; 
0x00000001400064ec: ret 0x8349; 
0x00000001400037ba: ret 0x8389; 
0x0000000140008a53: ret 0x8549; 
0x0000000140004132: ret 0x86; 
0x0000000140002356: ret 0x8944; 
0x00000001400022e7: ret 0x8d4c; 
0x0000000140001374: ret 0x9848; 
0x0000000140004ca9: ret 0xbe0f; 
0x0000000140008a39: ret 0xbf75; 
0x00000001400065e6: ret 0xc033; 
0x0000000140001318: ret 0xc085; 
0x0000000140008be2: ret 0xc575; 
0x00000001400073a1: ret 0xc8ff; 
0x0000000140007021: ret 0xd233; 
0x0000000140001313: ret 0xe083; 
0x0000000140005474: ret 0xe1eb; 
0x0000000140002304: ret 0xe283; 
0x0000000140005453: ret 0xe2eb; 
0x0000000140001bc2: ret 0xe3; 
0x0000000140006156: ret 0xf48; 
0x000000014000248f: ret 0xf8d1; 
0x000000014000136d: ret 0xff25; 
0x0000000140004f40: ret 0xff48; 
0x0000000140003583: ret 0xff49; 
0x000000014000843a: ret 0xffaa; 
0x0000000140003f6b: ret 0xfffd; 
0x000000014000852f: ret 0xffff; 
0x0000000140008c72: ret 5; 
0x000000014000100d: ret; 
0x00000001400023a8: retf 0x6348; ret 0x6348; 
0x0000000140005658: retf 0x8b48; sbb dword ptr [rax + 1], 0x44f00000; add dword ptr [rax + 0x160], ecx; mov rax, rcx; ret; 
0x000000014000739b: retf 0x8bff; ret; 
0x0000000140002f37: retf; call 0x2e78; mov dword ptr [r10], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140002fd4: retf; call rax; add rsp, 0x20; pop rbx; ret; 
0x000000014000458c: retf; jb 0x4571; xor eax, eax; ret; 
0x00000001400045d4: rol byte ptr [rbx + 0x2eb01e0], 1; xor eax, eax; add rsp, 0x28; ret; 
0x00000001400017f0: rol dword ptr [rax + 0x48], 0xf; ret; 
0x00000001400079f2: rol dword ptr [rax + 0x4c], 0xf; ret; 
0x0000000140002ea5: rol dword ptr [rdi + rdi*8 - 1], 0xff; mov eax, 0x16; cmp ecx, 0xe; cmovbe eax, r8d; ret; 
0x00000001400089f7: rol dword ptr [rdi], 0x74; sbb ecx, dword ptr [rdx + 0x148a4201]; or dword ptr [rdx], edi; ret 0x5675; 
0x000000014000157d: ror byte ptr [rax - 0x75], 0x4c; and al, 0x60; xor rcx, rsp; call 0x1630; add rsp, 0x78; ret; 
0x0000000140003167: ror byte ptr [rax - 0x75], 0x5c; and al, 0x30; add rsp, 0x20; pop rdi; ret; 
0x0000000140001fc7: ror byte ptr [rax - 0x75], 0x5c; and al, 0x30; mov rdi, qword ptr [rsp + 0x38]; add rsp, 0x20; pop r12; ret; 
0x00000001400067c5: ror byte ptr [rax - 0x75], 0x5c; and al, 0x30; mov rsi, qword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x0000000140001ae0: ror byte ptr [rax - 0x75], 0xc8; call qword ptr [rip + 0x7536]; add rsp, 0x88; ret; 
0x0000000140002301: ror byte ptr [rax - 0x75], 1; ret 0xe283; 
0x000000014000853a: ror byte ptr [rax - 0x77], 3; mov qword ptr [rbx + 0x10], rax; mov dword ptr [rbx + 8], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140003375: ror byte ptr [rax - 0x7d], 0xc2; adc byte ptr [rbx - 0xe8de908], al; xor eax, eax; ret; 
0x0000000140001704: ror byte ptr [rax - 0x7d], 0xc9; add dword ptr [rax + 0x39], ecx; or eax, 0xbdd8; sete al; ret; 
0x0000000140003072: ror byte ptr [rax - 0x7d], 1; ret; 
0x00000001400044b9: ror byte ptr [rbp + 0x33], 0xc9; mov qword ptr [rsp + 0x20], rsp; mov qword ptr [rsp + 0x28], r8; call 0x8c52; add rsp, 0x4d8; ret; 
0x0000000140008bff: ror byte ptr [rcx + 0x33], cl; ret 0x8549; 
0x0000000140003f68: ror byte ptr [rdi], 0x84; ret 0xfffd; 
0x0000000140006575: ror dword ptr [rax - 0x2f], 0xf8; dec rax; ret; 
0x0000000140004585: ror dword ptr [rax - 0x7d], 0xc1; sub byte ptr [rbp + 0x3b], al; retf; jb 0x4571; xor eax, eax; ret; 
0x00000001400030ac: ror dword ptr [rax - 0x7d], 1; ret; 
0x0000000140008d58: ror dword ptr [rbx - 0x3b7cb73f], 0x20; pop rbp; ret; 
0x00000001400015be: ror dword ptr [rcx + 0x63], 1; ret; 
0x0000000140001795: ror dword ptr [rcx - 1], 0xc8; jne 0x1791; ret; 
0x0000000140008ae9: ror dword ptr [rcx - 1], 0xc8; jne 0x8ae0; xor rax, rax; ret; 
0x00000001400061f9: sal bh, 0xd8; dec eax; add rsp, 0x28; ret; 
0x0000000140006570: sal byte ptr [rbp - 0xc], cl; sub rax, rcx; sar rax, 1; dec rax; ret; 
0x00000001400038a5: sal byte ptr [rbx + rsi*2 + 0x4c], 0x8b; ret; 
0x0000000140002e67: sal byte ptr [rbx], 0xd2; xor ecx, ecx; call 0x2de8; add rsp, 0x38; ret; 
0x0000000140002e69: sal byte ptr [rbx], cl; leave; call 0x2de8; add rsp, 0x38; ret; 
0x0000000140008598: sal byte ptr [rcx + rbx*8 + 0xf], 0xb7; and al, 0x40; add rsp, 0x38; ret; 
0x0000000140003aad: sal byte ptr [rdi + rax + 0x48], 0xff; ret; 
0x000000014000178e: sal byte ptr [rdx + rcx - 0x78], 0x11; inc rcx; dec r8; jne 0x1791; ret; 
0x0000000140005b61: sal byte ptr [rdx + rcx - 0x7c], cl; div byte ptr [rbp - 0x47]; lea rax, [rcx + rax - 1]; ret; 
0x0000000140001c49: sal byte ptr [rsi + 0xc], 0xff; ret 0x8348; 
0x0000000140002fd0: sal byte ptr [rsp + rax - 0x75], 0xcb; call rax; add rsp, 0x20; pop rbx; ret; 
0x0000000140008a8e: sal byte ptr [rsp + rax - 0x7c], cl; div byte ptr [rbp - 0x75]; xor eax, eax; ret; 
0x0000000140008c3a: sal byte ptr [rsp + rax - 0x7c], cl; div byte ptr [rbp - 0x78]; xor rax, rax; ret; 
0x000000014000877d: sal dword ptr [rbp - 0x10], cl; mov r10, qword ptr [rsp]; mov r11, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x00000001400043c5: sar bh, cl; adc eax, 0x4d64; mov eax, 1; add rsp, 0x28; ret; 
0x0000000140004522: sar dword ptr [rcx + 0x5a4d], 0x66; cmp dword ptr [rax], ecx; je 0x4530; xor eax, eax; ret; 
0x0000000140006577: sar eax, 1; dec rax; ret; 
0x0000000140006576: sar rax, 1; dec rax; ret; 
0x0000000140004cec: sbb al, 0x48; add esp, 0x28; ret; 
0x0000000140001c55: sbb bl, ch; in eax, 0x8b; ret 0x348; 
0x00000001400069b3: sbb byte ptr [rax], al; mov eax, edi; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x00000001400011c5: sbb byte ptr [rcx + 0xf], al; mov dh, 4; add byte ptr [rax - 0x3914f5fc], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000140004f62: sbb byte ptr [rcx - 0x75], cl; jae 0x4f87; mov rdi, qword ptr [r11 + 0x28]; mov rsp, r11; pop rbp; ret; 
0x0000000140001e4f: sbb byte ptr [rdi], cl; add rsp, 0x20; pop rbx; ret; 
0x00000001400022fe: sbb dword ptr [rax + 0x63], ecx; ror byte ptr [rax - 0x75], 1; ret 0xe283; 
0x000000014000565b: sbb dword ptr [rax + 1], 0x44f00000; add dword ptr [rax + 0x160], ecx; mov rax, rcx; ret; 
0x0000000140008a5f: sbb eax, -1; ret; 
0x0000000140003a90: sbb eax, dword ptr [rbp - 0x75f18b40]; add ecx, dword ptr [rax - 1]; ret; 
0x00000001400061f8: sbb eax, eax; neg eax; dec eax; add rsp, 0x28; ret; 
0x0000000140008af3: sbb eax, eax; sbb eax, -1; ret; 
0x0000000140008a5c: sbb eax, eax; sbb rax, -1; ret; 
0x00000001400089fa: sbb ecx, dword ptr [rdx + 0x148a4201]; or dword ptr [rdx], edi; ret 0x5675; 
0x0000000140008a5e: sbb rax, -1; ret; 
0x0000000140008a5b: sbb rax, rax; sbb rax, -1; ret; 
0x0000000140002c64: scasb al, byte ptr [rdi]; add byte ptr [rax], al; ret; 
0x0000000140001710: sete al; ret; 
0x0000000140008d54: sete cl; mov eax, ecx; mov eax, ecx; add rsp, 0x20; pop rbp; ret; 
0x00000001400055b2: shl byte ptr [rax], 0x49; dec eax; jne 0x5585; mov rax, qword ptr [rcx + 0x158]; lock inc dword ptr [rax + 0x160]; ret; 
0x0000000140004919: shr bl, 2; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140004588: shr dword ptr [rax], 0x45; cmp ecx, ebx; jb 0x4571; xor eax, eax; ret; 
0x0000000140008c07: shr ebx, 0xc; xor rax, rax; ret; 
0x0000000140005b90: stc; ret; 
0x0000000140005a86: std; add rsp, 0x40; pop rbx; ret; 
0x00000001400081c0: std; mov rax, qword ptr [rsp + 0x38]; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x00000001400066fa: std; mov rbx, qword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x58]; add rsp, 0x40; pop rdi; ret; 
0x0000000140007875: std; mov rbx, qword ptr [rsp + 0x70]; mov rsi, qword ptr [rsp + 0x78]; add rsp, 0x60; pop rdi; ret; 
0x0000000140005b78: std; ret; 
0x0000000140005b84: sti; ret; 
0x0000000140001e7a: stosb byte ptr [rdi], al; sub eax, 0xba0f0000; imul ebx, dword ptr [rax], 0xf; add rsp, 0x20; pop rbx; ret; 
0x0000000140005945: stosd dword ptr [rdi], eax; ret; 
0x0000000140002f8f: sub byte ptr [rax - 0x73], cl; or eax, 0xffffffb1; call qword ptr [rip + 0x6093]; xor eax, eax; add rsp, 0x28; ret; 
0x0000000140005dcf: sub byte ptr [rax - 0x73], cl; or eax, 0xffffffd1; call qword ptr [rip + 0x329b]; mov qword ptr [rip + 0x86bc], rax; add rsp, 0x28; ret; 
0x0000000140001156: sub byte ptr [rax - 0x75], cl; and al, 0x48; xor rcx, rsp; call 0x1630; add rsp, 0x58; ret; 
0x00000001400079ef: sub byte ptr [rax - 0x7d], cl; rol dword ptr [rax + 0x4c], 0xf; ret; 
0x0000000140004589: sub byte ptr [rbp + 0x3b], al; retf; jb 0x4571; xor eax, eax; ret; 
0x00000001400073d3: sub byte ptr [rbx - 0x76b7f71e], al; jl 0x73ff; and bh, bh; ret 0x15ff; 
0x00000001400016f7: sub byte ptr [rdi + 0x5b], bl; ret; 
0x0000000140003456: sub cl, byte ptr [rbp + rcx*4 + 5]; ret 0x69; 
0x0000000140002e93: sub eax, 0x418df272; in eax, dx; cmp eax, 0x11; ja 0x2ea4; mov eax, 0xd; ret; 
0x0000000140005d9f: sub eax, 0x48fffffe; add esp, 0x38; ret; 
0x0000000140001e49: sub eax, 0xba0f0000; imul ebx, dword ptr [rax], 0xf; add rsp, 0x20; pop rbx; ret; 
0x0000000140002871: sub eax, 0xf410875; mov edx, 0xff4808ed; ret; 
0x0000000140006574: sub eax, ecx; sar rax, 1; dec rax; ret; 
0x0000000140006573: sub rax, rcx; sar rax, 1; dec rax; ret; 
0x000000014000448f: test al, 0; add byte ptr [rax], al; ret; 
0x000000014000544c: test byte ptr [rax - 0x78], cl; in al, 0; add bh, bh; ret 0xe2eb; 
0x000000014000450a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000001400016ee: test byte ptr [rdi], 0; add byte ptr [rbx - 0x3b7cb739], cl; sub byte ptr [rdi + 0x5b], bl; ret; 
0x0000000140005b64: test dh, dh; jne 0x5b21; lea rax, [rcx + rax - 1]; ret; 
0x0000000140008a91: test dh, dh; jne 0x8a20; xor eax, eax; ret; 
0x0000000140008c3d: test dh, dh; jne 0x8bc9; xor rax, rax; ret; 
0x0000000140005b60: test dl, dl; je 0x5b6e; test dh, dh; jne 0x5b21; lea rax, [rcx + rax - 1]; ret; 
0x0000000140008a8d: test dl, dl; je 0x8a95; test dh, dh; jne 0x8a20; xor eax, eax; ret; 
0x0000000140008c39: test dl, dl; je 0x8c41; test dh, dh; jne 0x8bc9; xor rax, rax; ret; 
0x000000014000276d: test dword ptr [rdi + 0x2b000001], edi; ret; 
0x000000014000656e: test dx, dx; jne 0x6567; sub rax, rcx; sar rax, 1; dec rax; ret; 
0x0000000140008cca: test eax, 0x4890ffff; add esp, 0x20; pop rbp; ret; 
0x0000000140008597: test eax, eax; je 0x8574; movzx eax, word ptr [rsp + 0x40]; add rsp, 0x38; ret; 
0x000000014000656f: test edx, edx; jne 0x6567; sub rax, rcx; sar rax, 1; dec rax; ret; 
0x0000000140005dd9: wait; xor al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; add eax, 0x86bc; add rsp, 0x28; ret; 
0x0000000140005df0: xchg byte ptr [rax], al; add byte ptr [rax - 0x77], cl; or eax, 0x86b6; mov qword ptr [rip + 0x86b7], rcx; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005df7: xchg byte ptr [rax], al; add byte ptr [rax - 0x77], cl; or eax, 0x86b7; mov qword ptr [rip + 0x86b8], rcx; ret; 
0x0000000140005dfe: xchg byte ptr [rax], al; add byte ptr [rax - 0x77], cl; or eax, 0x86b8; ret; 
0x000000014000186e: xchg eax, ebp; ret; 
0x0000000140006b49: xchg eax, esp; ret; 
0x0000000140005bb4: xor al, 0; add byte ptr [rax - 0x77], cl; add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000140005dda: xor al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; add eax, 0x86bc; add rsp, 0x28; ret; 
0x0000000140008e5c: xor al, ch; cmp dl, byte ptr [rax + 0x4890ffff]; add esp, 0x20; pop rbp; ret; 
0x000000014000594c: xor byte ptr [rax + 0x3b], cl; fdiv dword ptr [rsi + rcx - 0x18]; popfq; ret; 
0x000000014000882e: xor byte ptr [rax - 0x75], cl; insb byte ptr [rdi], dx; and al, 0x38; add rsp, 0x20; pop rdi; ret; 
0x0000000140005a7f: xor byte ptr [rbx + 0xc8a1], al; add ch, bh; add rsp, 0x40; pop rbx; ret; 
0x000000014000550e: xor byte ptr [rcx + 0x5d], al; ret; 
0x0000000140004a08: xor byte ptr [rcx + 0x5f], al; pop r13; pop r12; ret; 
0x0000000140006043: xor byte ptr [rcx + 0x5f], al; pop r14; pop r13; pop r12; pop rdi; ret; 
0x0000000140001dd4: xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x0000000140002f82: xor eax, eax; add rsp, 0x28; ret; 
0x0000000140003166: xor eax, eax; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x20; pop rdi; ret; 
0x0000000140001fc6: xor eax, eax; mov rbx, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x38]; add rsp, 0x20; pop r12; ret; 
0x00000001400067c4: xor eax, eax; mov rbx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x38]; add rsp, 0x20; pop rdi; ret; 
0x000000014000157c: xor eax, eax; mov rcx, qword ptr [rsp + 0x60]; xor rcx, rsp; call 0x1630; add rsp, 0x78; ret; 
0x0000000140001703: xor eax, eax; or rcx, 1; cmp qword ptr [rip + 0xbdd8], rcx; sete al; ret; 
0x000000014000337f: xor eax, eax; ret; 
0x0000000140002e66: xor eax, eax; xor edx, edx; xor ecx, ecx; call 0x2de8; add rsp, 0x38; ret; 
0x00000001400039a4: xor ecx, dword ptr [rax - 1]; ret; 
0x0000000140002e6a: xor ecx, ecx; call 0x2de8; add rsp, 0x38; ret; 
0x0000000140008e2b: xor ecx, ecx; call 0x4b28; nop; add rsp, 0x20; pop rbp; ret; 
0x00000001400044bb: xor ecx, ecx; mov qword ptr [rsp + 0x20], rsp; mov qword ptr [rsp + 0x28], r8; call 0x8c52; add rsp, 0x4d8; ret; 
0x0000000140001093: xor ecx, esp; call 0x1630; add rsp, 0x1e8; ret; 
0x00000001400013f2: xor ecx, esp; call 0x1630; add rsp, 0x298; ret; 
0x000000014000115d: xor ecx, esp; call 0x1630; add rsp, 0x58; ret; 
0x0000000140001584: xor ecx, esp; call 0x1630; add rsp, 0x78; ret; 
0x00000001400043c4: xor edx, edx; call qword ptr [rip + 0x4d64]; mov eax, 1; add rsp, 0x28; ret; 
0x0000000140002e68: xor edx, edx; xor ecx, ecx; call 0x2de8; add rsp, 0x38; ret; 
0x000000014000357f: xor esi, dword ptr [rcx + rdx - 1]; ret 0xff49; 
0x0000000140008e5b: xor r8b, r13b; cmp dl, byte ptr [rax + 0x4890ffff]; add esp, 0x20; pop rbp; ret; 
0x0000000140002e65: xor r8d, r8d; xor edx, edx; xor ecx, ecx; call 0x2de8; add rsp, 0x38; ret; 
0x00000001400044ba: xor r9, r9; mov qword ptr [rsp + 0x20], rsp; mov qword ptr [rsp + 0x28], r8; call 0x8c52; add rsp, 0x4d8; ret; 
0x0000000140008aef: xor rax, rax; ret; 
0x0000000140001092: xor rcx, rsp; call 0x1630; add rsp, 0x1e8; ret; 
0x00000001400013f1: xor rcx, rsp; call 0x1630; add rsp, 0x298; ret; 
0x000000014000115c: xor rcx, rsp; call 0x1630; add rsp, 0x58; ret; 
0x0000000140001583: xor rcx, rsp; call 0x1630; add rsp, 0x78; ret; 

1254 gadgets found
